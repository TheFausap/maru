;;; -*- mode: lisp; coding: us-ascii -*-

(define-function do-print (obj storing)
  ;; NOTE: be prepared to handle uninitialized objects!
  (debug/identities (libc/printf "{%p}" obj))
  (let ((type (type-of obj)))
    (cond
      ((= type <undefined>)	(libc/printf "()"))
      ((= type <long>)		(libc/printf "%ld" (get/long obj)))
      ((= type <string>)	(k/string-ensure-zero-terminated obj)
				(let ((bits (get/string obj)))
                                  (if (not storing)
                                      (libc/printf "%s" bits) ; this way we don't need to worry about possible %'s in the string
                                    (let ((i 0)
                                          (c 0))
                                      (libc/printf "\"")
                                      (while (set c (char-at bits i))
                                        (if (and (<= 32 c) (<= c 126))
                                            (cond
                                              ((= c ?\")        (libc/printf "\\\"")) ; \"
                                              ((= c ?\\)        (libc/printf "\\\\")) ; \\
                                              (else             (libc/printf "%c" c)))
                                          (libc/printf "\\%03o" c))
                                        (set i (+ 1 i)))
                                      (libc/printf "\"")))))
      ((= type <symbol>)	(libc/printf "%s" (get/symbol obj)))
      ((= type <pair>)		(let ()
                                  (libc/printf "(")
                                  (while (is/pair obj)
                                    (do-print (get/head obj) storing)
                                    (and (is/pair (set obj (get/tail obj)))
                                         (libc/printf " ")))
                                  (and obj
                                       (let ()
                                         (libc/printf " . ")
                                         (do-print obj storing)))
                                  (libc/printf ")")))
      ((= type <array>)		(let ((len (array-length obj)))
                                  (libc/printf "Array(")
                                  (for (i 0 len)
                                    (and i (libc/printf " "))
                                    (do-print (array-at obj i) storing))
                                  (libc/printf ")")))
      ((= type <expr>)		(let ()
                                  (libc/printf "Expr<")
                                  (when-at-expand feature/track-expr-names
                                    (aif (get (<expr> name) obj)
                                        (do-print it storing)
                                      (libc/printf "?"))
                                    (libc/printf " "))
                                  (do-print (get (<expr> parameters) obj) storing)
                                  (libc/printf ">")))
      ((= type <form>)		(let ()
                                  (libc/printf "Form<")
                                  (do-print (get (<form> function) obj) storing)
                                  (libc/printf ",")
                                  (do-print (get (<form> symbol)   obj) storing)
                                  (libc/printf ">")))
      ((= type <fixed>)		(let ()
                                  (libc/printf "Fixed<")
                                  (do-print (get (<fixed> function) obj) storing)
                                  (libc/printf ">")))
      ((= type <subr>)		(libc/printf "Subr<%s>" (get (<subr> _name) obj)))
      ((= type <variable>)	(let ((env (get (<variable> env) obj)))
                                  (do-print (get (<variable> name) obj) storing)
                                  (when env
                                    (libc/printf ".")
                                    (do-print (get (<env> level) env) storing)
                                    (libc/printf "+")
                                    (do-print (get (<variable> index) obj) storing))))
      ((= type <env>)		(let ((level	(get (<env> level)	obj))
                                      (bindings	(get (<env> bindings)	obj))
                                      (offset	(get (<env> offset)	obj)))
                                  (if (and level bindings offset)
                                      (libc/printf "Env<Lv%ld,Off%ld,#%ld>" (get/long level) (get/long offset) (array-length bindings))
                                    (libc/printf "Env<>"))))
      ((= type <context>)	(let ()
                                  (libc/printf "Context<%p>" obj)))
      ((= type <module>)	(let ()
                                  (if-at-expand feature/debug-info
                                      (libc/printf "Module<%s," (get/string (<module>-name obj)))
                                    (libc/printf "Module<"))
                                  (do-print (module-env obj) storing)
                                  (libc/printf ">")))
      (else                     (libc/printf "<type:%ld>" type)))))

(define-function print		(obj) (do-print obj false))
(define-function println	(obj) (do-print obj false) (libc/printf "\n"))

(define-function dump		(obj) (do-print obj true))
(define-function dumpln		(obj) (do-print obj true) (libc/printf "\n"))
