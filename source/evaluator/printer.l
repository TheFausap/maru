;;; -*- mode: lisp; coding: us-ascii -*-

(define-function do_print (obj storing)
  ;; NOTE: be prepared to handle uninitialized objects!
  (debug/identities (libc/printf "{%p}" obj))
  (let ((type (get/type obj)))
    (cond
      ((= type k/<undefined>)   (libc/printf "()"))
      ((= type k/<long>)        (libc/printf "%d" (get/long obj)))
      ((= type k/<string>)      (let ((bits (get/string obj)))
                                  (if (not storing)
                                      (libc/printf "%s" bits)
                                    (let ((i 0)
                                          (c 0))
                                      (libc/printf "\"")
                                      (while (set c (string-at bits i))
                                        (if (and (<= 32 c) (<= c 126))
                                            (cond
                                              ((= c ?\")        (libc/printf "\\\""))
                                              ((= c ?\\)        (libc/printf "\\\\"))
                                              (else             (libc/printf "%c" c)))
                                          (libc/printf "\\%03o" c))
                                        (set i (+ 1 i)))
                                      (libc/printf "\"")))))
      ((= type k/<symbol>)      (libc/printf "%s" (get/symbol obj)))
      ((= type k/<pair>)        (let ()
                                  (libc/printf "(")
                                  (while (is/pair obj)
                                    (do_print (get/head obj) storing)
                                    (and (is/pair (set obj (get/tail obj)))
                                         (libc/printf " ")))
                                  (and obj
                                       (let ()
                                         (libc/printf " . ")
                                         (do_print obj storing)))
                                  (libc/printf ")")))
      ((= type k/<array>)       (let ((len (k/array-length obj)))
                                  (libc/printf "Array(")
                                  (for (i 0 len)
                                    (and i (libc/printf " "))
                                    (do_print (k/array-at obj i) storing))
                                  (libc/printf ")")))
      ((= type k/<expr>)        (let ()
                                  (libc/printf "Expr<")
                                  (do_print (k/cadr (get <expr> defn obj)) storing)
                                  (libc/printf ">")))
      ((= type k/<form>)        (let ()
                                  (libc/printf "Form<")
                                  (do_print (get <form> function obj) storing)
                                  (libc/printf ",")
                                  (do_print (get <form> symbol   obj) storing)
                                  (libc/printf ">")))
      ((= type k/<fixed>)       (let ()
                                  (libc/printf "Fixed<")
                                  (do_print (get <fixed> function obj) storing)
                                  (libc/printf ">")))
      ((= type k/<subr>)        (libc/printf "Subr<%s>" (get <subr> _name obj)))
      ((= type k/<variable>)    (let ((env (get <variable> env obj)))
                                  (do_print (get <variable> name obj) storing)
                                  (when env
                                    (libc/printf ".")
                                    (do_print (get <env> level env) storing)
                                    (libc/printf "+")
                                    (do_print (get <variable> index obj) storing))))
      ((= type k/<env>)         (let ((level (get <env> level obj))
                                      (bindings (get <env> bindings obj)))
                                  (if (and level bindings)
                                      (libc/printf "Env<%d,%d>" (get/long level) (k/array-length bindings))
                                    (libc/printf "Env<>"))))
      ((= type k/<context>)     (let ()
                                  (libc/printf "Context<>")))
      (else                     (libc/printf "<type:%d>" type)))))

(set k/print (lambda (obj) (do_print obj target-boolean/false)))
(define-function k/println	(obj) (do_print obj target-boolean/false) (libc/printf "\n"))

(define-function k/dump		(obj) (do_print obj target-boolean/true))
(define-function k/dumpln	(obj) (do_print obj target-boolean/true) (libc/printf "\n"))
