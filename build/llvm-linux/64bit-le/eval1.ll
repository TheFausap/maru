%word = type i64
%oop = type i8*
%"<header>" = type { %word, %word }
%"<string>" = type { %"<header>", %word, %oop }
%"<target-function>" = type { %"<header>", %oop , %"<string>"* }
%m_libc-FILE = type opaque
declare i8* @llvm.frameaddress(i32)
@m_cstr1 = private unnamed_addr constant [55 x i8] c"encountered a <symbol> in eval. this shouldn't happen!\00"
@m_ostr2 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 109, %oop bitcast ([55 x i8]* @m_cstr1 to %oop) }
define %oop @m_eval.code(%oop %exp, %oop %ctx) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	%t8 = alloca %oop
	%t9 = alloca %oop
	%t10 = alloca %oop
	store %oop %exp, %oop* %t0
	store %oop %ctx, %oop* %t1
	%r1 = load %oop, %oop* @"m_*verbosity*"
	%r2 = inttoptr %word 3 to %oop
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = ptrtoint %oop %r1 to %word
	%r4 = icmp sle %word %r6, %r5
	%r3 = inttoptr i1 %r4 to %oop
	%r8 = ptrtoint %oop %r3 to %word
	%r7 = icmp ne %word %r8, 0
	br i1 %r7, label %L1, label %L2
L1:
	%r9 = inttoptr %word 0 to %oop
	store %oop %r9, %oop* %t2
	br label %L3
L2:
	%r10 = inttoptr %word 0 to %oop
	store %oop %r10, %oop* %t2
	br label %L3
L3:
	%r11 = load %oop, %oop* %t2
	%r12 = load %oop, %oop* %t0
	%r13 = call %oop @m_type-of.code(%oop %r12)
	store %oop %r13, %oop* %t2
	%r14 = inttoptr %word 6 to %oop
	%r15 = load %oop, %oop* %t2
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = ptrtoint %oop %r14 to %word
	%r17 = icmp eq %word %r19, %r18
	%r16 = inttoptr i1 %r17 to %oop
	%r21 = ptrtoint %oop %r16 to %word
	%r20 = icmp ne %word %r21, 0
	br i1 %r20, label %L4, label %L5
L4:
	%r22 = load %oop, %oop* %t0
	store %oop %r22, %oop* %t3
	br label %L6
L5:
	%r23 = inttoptr %word 7 to %oop
	%r24 = load %oop, %oop* %t2
	%r28 = ptrtoint %oop %r24 to %word
	%r27 = ptrtoint %oop %r23 to %word
	%r26 = icmp eq %word %r28, %r27
	%r25 = inttoptr i1 %r26 to %oop
	%r30 = ptrtoint %oop %r25 to %word
	%r29 = icmp ne %word %r30, 0
	br i1 %r29, label %L7, label %L8
L7:
	%r31 = load %oop, %oop* %t0
	store %oop %r31, %oop* %t4
	br label %L9
L8:
	%r32 = inttoptr %word 13 to %oop
	%r33 = load %oop, %oop* %t2
	%r37 = ptrtoint %oop %r33 to %word
	%r36 = ptrtoint %oop %r32 to %word
	%r35 = icmp eq %word %r37, %r36
	%r34 = inttoptr i1 %r35 to %oop
	%r39 = ptrtoint %oop %r34 to %word
	%r38 = icmp ne %word %r39, 0
	br i1 %r38, label %L10, label %L11
L10:
	%r40 = load %oop, %oop* %t0
	store %oop %r40, %oop* %t5
	br label %L12
L11:
	%r41 = inttoptr %word 16 to %oop
	%r42 = load %oop, %oop* %t2
	%r46 = ptrtoint %oop %r42 to %word
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = icmp eq %word %r46, %r45
	%r43 = inttoptr i1 %r44 to %oop
	%r48 = ptrtoint %oop %r43 to %word
	%r47 = icmp ne %word %r48, 0
	br i1 %r47, label %L13, label %L14
L13:
	%r49 = load %oop, %oop* %t0
	%r50 = call %oop @"m_global-variable?.code"(%oop %r49)
	%r52 = ptrtoint %oop %r50 to %word
	%r51 = icmp ne %word %r52, 0
	br i1 %r51, label %L16, label %L17
L16:
	%r53 = inttoptr %word 0 to %oop
	%r54 = inttoptr %word 1 to %oop
	%r55 = load %oop, %oop* %t0
	%r59 = bitcast %oop %r55 to [0 x %oop]*
	%r58 = ptrtoint %oop %r54 to %word
	%r57 = getelementptr [0 x %oop], [0 x %oop]* %r59, %word 0, %word %r58
	%r56 = load %oop, %oop* %r57
	store %oop %r56, %oop* %t7
	br label %L18
L17:
	%r60 = inttoptr %word 1 to %oop
	%r61 = inttoptr %word 1 to %oop
	%r62 = inttoptr %word 2 to %oop
	%r63 = load %oop, %oop* %t0
	%r67 = bitcast %oop %r63 to [0 x %oop]*
	%r66 = ptrtoint %oop %r62 to %word
	%r65 = getelementptr [0 x %oop], [0 x %oop]* %r67, %word 0, %word %r66
	%r64 = load %oop, %oop* %r65
	%r71 = bitcast %oop %r64 to [0 x %oop]*
	%r70 = ptrtoint %oop %r61 to %word
	%r69 = getelementptr [0 x %oop], [0 x %oop]* %r71, %word 0, %word %r70
	%r68 = load %oop, %oop* %r69
	%r75 = ptrtoint %oop %r68 to %word
	%r74 = ptrtoint %oop %r60 to %word
	%r73 = ashr %word %r75, %r74
	%r72 = inttoptr %word %r73 to %oop
	%r76 = inttoptr %word 1 to %oop
	%r77 = inttoptr %word 1 to %oop
	%r78 = inttoptr %word 1 to %oop
	%r79 = load %oop, %oop* %t1
	%r83 = bitcast %oop %r79 to [0 x %oop]*
	%r82 = ptrtoint %oop %r78 to %word
	%r81 = getelementptr [0 x %oop], [0 x %oop]* %r83, %word 0, %word %r82
	%r80 = load %oop, %oop* %r81
	%r87 = bitcast %oop %r80 to [0 x %oop]*
	%r86 = ptrtoint %oop %r77 to %word
	%r85 = getelementptr [0 x %oop], [0 x %oop]* %r87, %word 0, %word %r86
	%r84 = load %oop, %oop* %r85
	%r91 = ptrtoint %oop %r84 to %word
	%r90 = ptrtoint %oop %r76 to %word
	%r89 = ashr %word %r91, %r90
	%r88 = inttoptr %word %r89 to %oop
	%r95 = ptrtoint %oop %r88 to %word
	%r94 = ptrtoint %oop %r72 to %word
	%r93 = sub %word %r95, %r94
	%r92 = inttoptr %word %r93 to %oop
	store %oop %r92, %oop* %t8
	%r96 = inttoptr %word 0 to %oop
	br label %L20
L19:
	%r97 = inttoptr %word 0 to %oop
	%r98 = load %oop, %oop* %t1
	%r102 = bitcast %oop %r98 to [0 x %oop]*
	%r101 = ptrtoint %oop %r97 to %word
	%r100 = getelementptr [0 x %oop], [0 x %oop]* %r102, %word 0, %word %r101
	%r99 = load %oop, %oop* %r100
	store %oop %r99, %oop* %t1
	%r103 = inttoptr %word 1 to %oop
	%r104 = load %oop, %oop* %t8
	%r108 = ptrtoint %oop %r104 to %word
	%r107 = ptrtoint %oop %r103 to %word
	%r106 = sub %word %r108, %r107
	%r105 = inttoptr %word %r106 to %oop
	store %oop %r105, %oop* %t8
	br label %L20
L20:
	%r109 = load %oop, %oop* %t8
	%r110 = inttoptr %word 0 to %oop
	%r114 = ptrtoint %oop %r110 to %word
	%r113 = ptrtoint %oop %r109 to %word
	%r112 = icmp slt %word %r114, %r113
	%r111 = inttoptr i1 %r112 to %oop
	%r116 = ptrtoint %oop %r111 to %word
	%r115 = icmp ne %word %r116, 0
	br i1 %r115, label %L19, label %L21
L21:
	%r117 = inttoptr %word 1 to %oop
	%r118 = inttoptr %word 3 to %oop
	%r119 = load %oop, %oop* %t0
	%r123 = bitcast %oop %r119 to [0 x %oop]*
	%r122 = ptrtoint %oop %r118 to %word
	%r121 = getelementptr [0 x %oop], [0 x %oop]* %r123, %word 0, %word %r122
	%r120 = load %oop, %oop* %r121
	%r127 = ptrtoint %oop %r120 to %word
	%r126 = ptrtoint %oop %r117 to %word
	%r125 = ashr %word %r127, %r126
	%r124 = inttoptr %word %r125 to %oop
	store %oop %r124, %oop* %t9
	%r128 = inttoptr %word 2 to %oop
	%r129 = load %oop, %oop* %t1
	%r133 = bitcast %oop %r129 to [0 x %oop]*
	%r132 = ptrtoint %oop %r128 to %word
	%r131 = getelementptr [0 x %oop], [0 x %oop]* %r133, %word 0, %word %r132
	%r130 = load %oop, %oop* %r131
	%r134 = load %oop, %oop* %t9
	%r135 = call %oop @m_array-at.code(%oop %r130, %oop %r134)
	store %oop %r135, %oop* %t10
	%r136 = inttoptr %word 0 to %oop
	%r137 = load %oop, %oop* %t10
	store %oop %r137, %oop* %t7
	br label %L18
L18:
	%r138 = load %oop, %oop* %t7
	store %oop %r138, %oop* %t6
	br label %L15
L14:
	%r139 = inttoptr %word 11 to %oop
	%r140 = load %oop, %oop* %t2
	%r144 = ptrtoint %oop %r140 to %word
	%r143 = ptrtoint %oop %r139 to %word
	%r142 = icmp eq %word %r144, %r143
	%r141 = inttoptr i1 %r142 to %oop
	%r146 = ptrtoint %oop %r141 to %word
	%r145 = icmp ne %word %r146, 0
	br i1 %r145, label %L22, label %L23
L22:
	%r147 = call %oop @m_error-prologue.code()
	%r148 = getelementptr %"<string>", %"<string>"* @m_ostr2, i32 0, i32 1
	%r149 = bitcast %word* %r148 to %oop
	%r150 = call %oop @"m_%error.code"(%oop %r149)
	%r151 = call %oop @m_error-epilogue.code()
	store %oop %r151, %oop* %t7
	br label %L24
L23:
	%r152 = load %oop, %oop* %t2
	%r153 = load %oop, %oop* %t0
	%r154 = load %oop, %oop* %t1
	%r155 = call %oop @"m_eval/with-call-frame.code"(%oop %r152, %oop %r153, %oop %r154)
	store %oop %r155, %oop* %t7
	br label %L24
L24:
	%r156 = load %oop, %oop* %t7
	store %oop %r156, %oop* %t6
	br label %L15
L15:
	%r157 = load %oop, %oop* %t6
	store %oop %r157, %oop* %t5
	br label %L12
L12:
	%r158 = load %oop, %oop* %t5
	store %oop %r158, %oop* %t4
	br label %L9
L9:
	%r159 = load %oop, %oop* %t4
	store %oop %r159, %oop* %t3
	br label %L6
L6:
	%r160 = load %oop, %oop* %t3
	ret %oop %r160
}
@m_cstr3 = private unnamed_addr constant [5 x i8] c"eval\00"
@m_ostr4 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr3 to %oop) }
@m_eval = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @m_eval.code to %oop), %"<string>"* @m_ostr4 }
define %oop @m_cons.code(%oop %head, %oop %tail) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	store %oop %head, %oop* %t0
	store %oop %tail, %oop* %t1
	%r1 = inttoptr %word 20 to %oop
	%r2 = inttoptr %word 2 to %oop
	%r3 = call %oop @m_allocate.code(%oop %r1, %oop %r2)
	store %oop %r3, %oop* %t2
	%r5 = getelementptr %oop, %oop* %t2, %word 0
	%r4 = bitcast %oop* %r5 to %oop
	%r6 = call %oop @"m_gc/push-root.code"(%oop %r4)
	%r7 = load %oop, %oop* %t0
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t2
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	store %oop %r7, %oop* %r11
	%r10 = bitcast %oop %r7 to %oop
	%r14 = load %oop, %oop* %t1
	%r15 = inttoptr %word 1 to %oop
	%r16 = load %oop, %oop* %t2
	%r20 = bitcast %oop %r16 to [0 x %oop]*
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = getelementptr [0 x %oop], [0 x %oop]* %r20, %word 0, %word %r19
	store %oop %r14, %oop* %r18
	%r17 = bitcast %oop %r14 to %oop
	%r21 = load %oop, %oop* %t2
	store %oop %r21, %oop* %t3
	%r23 = getelementptr %oop, %oop* %t2, %word 0
	%r22 = bitcast %oop* %r23 to %oop
	%r24 = call %oop @"m_gc/pop-root.code"(%oop %r22)
	%r25 = load %oop, %oop* %t3
	ret %oop %r25
}
@m_cstr5 = private unnamed_addr constant [5 x i8] c"cons\00"
@m_ostr6 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr5 to %oop) }
@m_cons = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @m_cons.code to %oop), %"<string>"* @m_ostr6 }
define %oop @m_car.code(%oop %list) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	store %oop %list, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r3 = ptrtoint %oop %r1 to %word
	%r2 = icmp ne %word %r3, 0
	br i1 %r2, label %L1, label %L2
L1:
	%r4 = inttoptr %word 0 to %oop
	%r5 = inttoptr %word 0 to %oop
	%r6 = load %oop, %oop* %t0
	%r10 = bitcast %oop %r6 to [0 x %oop]*
	%r9 = ptrtoint %oop %r5 to %word
	%r8 = getelementptr [0 x %oop], [0 x %oop]* %r10, %word 0, %word %r9
	%r7 = load %oop, %oop* %r8
	store %oop %r7, %oop* %t1
	br label %L3
L2:
	%r11 = inttoptr %word 0 to %oop
	store %oop %r11, %oop* %t1
	br label %L3
L3:
	%r12 = load %oop, %oop* %t1
	ret %oop %r12
}
@m_cstr7 = private unnamed_addr constant [4 x i8] c"car\00"
@m_ostr8 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr7 to %oop) }
@m_car = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_car.code to %oop), %"<string>"* @m_ostr8 }
define %oop @m_cdr.code(%oop %list) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	store %oop %list, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r3 = ptrtoint %oop %r1 to %word
	%r2 = icmp ne %word %r3, 0
	br i1 %r2, label %L1, label %L2
L1:
	%r4 = inttoptr %word 0 to %oop
	%r5 = inttoptr %word 1 to %oop
	%r6 = load %oop, %oop* %t0
	%r10 = bitcast %oop %r6 to [0 x %oop]*
	%r9 = ptrtoint %oop %r5 to %word
	%r8 = getelementptr [0 x %oop], [0 x %oop]* %r10, %word 0, %word %r9
	%r7 = load %oop, %oop* %r8
	store %oop %r7, %oop* %t1
	br label %L3
L2:
	%r11 = inttoptr %word 0 to %oop
	store %oop %r11, %oop* %t1
	br label %L3
L3:
	%r12 = load %oop, %oop* %t1
	ret %oop %r12
}
@m_cstr9 = private unnamed_addr constant [4 x i8] c"cdr\00"
@m_ostr10 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr9 to %oop) }
@m_cdr = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_cdr.code to %oop), %"<string>"* @m_ostr10 }
define %oop @m_form.code(%oop %fn, %oop %sym) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	store %oop %fn, %oop* %t0
	store %oop %sym, %oop* %t1
	%r1 = inttoptr %word 15 to %oop
	%r2 = inttoptr %word 2 to %oop
	%r3 = call %oop @m_allocate.code(%oop %r1, %oop %r2)
	store %oop %r3, %oop* %t2
	%r5 = getelementptr %oop, %oop* %t2, %word 0
	%r4 = bitcast %oop* %r5 to %oop
	%r6 = call %oop @"m_gc/push-root.code"(%oop %r4)
	%r7 = load %oop, %oop* %t0
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t2
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	store %oop %r7, %oop* %r11
	%r10 = bitcast %oop %r7 to %oop
	%r14 = load %oop, %oop* %t1
	%r15 = inttoptr %word 1 to %oop
	%r16 = load %oop, %oop* %t2
	%r20 = bitcast %oop %r16 to [0 x %oop]*
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = getelementptr [0 x %oop], [0 x %oop]* %r20, %word 0, %word %r19
	store %oop %r14, %oop* %r18
	%r17 = bitcast %oop %r14 to %oop
	%r21 = load %oop, %oop* %t2
	store %oop %r21, %oop* %t3
	%r23 = getelementptr %oop, %oop* %t2, %word 0
	%r22 = bitcast %oop* %r23 to %oop
	%r24 = call %oop @"m_gc/pop-root.code"(%oop %r22)
	%r25 = load %oop, %oop* %t3
	ret %oop %r25
}
@m_cstr11 = private unnamed_addr constant [5 x i8] c"form\00"
@m_ostr12 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr11 to %oop) }
@m_form = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @m_form.code to %oop), %"<string>"* @m_ostr12 }
define %oop @"m_%bitwise-shift.code"(%oop %value, %oop %shift) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	store %oop %value, %oop* %t0
	store %oop %shift, %oop* %t1
	%r1 = load %oop, %oop* %t1
	%r2 = inttoptr %word 64 to %oop
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = ptrtoint %oop %r1 to %word
	%r4 = icmp sle %word %r6, %r5
	%r3 = inttoptr i1 %r4 to %oop
	%r8 = ptrtoint %oop %r3 to %word
	%r7 = icmp ne %word %r8, 0
	br i1 %r7, label %L1, label %L2
L1:
	%r9 = inttoptr %word 0 to %oop
	store %oop %r9, %oop* %t2
	br label %L3
L2:
	%r10 = inttoptr %word 64 to %oop
	%r13 = ptrtoint %oop %r10 to %word
	%r12 = sub nsw %word 0, %r13
	%r11 = inttoptr %word %r12 to %oop
	%r14 = load %oop, %oop* %t1
	%r18 = ptrtoint %oop %r14 to %word
	%r17 = ptrtoint %oop %r11 to %word
	%r16 = icmp sle %word %r18, %r17
	%r15 = inttoptr i1 %r16 to %oop
	%r20 = ptrtoint %oop %r15 to %word
	%r19 = icmp ne %word %r20, 0
	br i1 %r19, label %L4, label %L5
L4:
	%r21 = inttoptr %word 0 to %oop
	%r22 = load %oop, %oop* %t0
	%r26 = ptrtoint %oop %r22 to %word
	%r25 = ptrtoint %oop %r21 to %word
	%r24 = icmp slt %word %r26, %r25
	%r23 = inttoptr i1 %r24 to %oop
	%r28 = ptrtoint %oop %r23 to %word
	%r27 = icmp ne %word %r28, 0
	br i1 %r27, label %L7, label %L8
L7:
	%r29 = inttoptr %word -1 to %oop
	store %oop %r29, %oop* %t4
	br label %L9
L8:
	%r30 = inttoptr %word 0 to %oop
	store %oop %r30, %oop* %t4
	br label %L9
L9:
	%r31 = load %oop, %oop* %t4
	store %oop %r31, %oop* %t3
	br label %L6
L5:
	%r32 = load %oop, %oop* %t1
	%r33 = inttoptr %word 0 to %oop
	%r37 = ptrtoint %oop %r33 to %word
	%r36 = ptrtoint %oop %r32 to %word
	%r35 = icmp slt %word %r37, %r36
	%r34 = inttoptr i1 %r35 to %oop
	%r39 = ptrtoint %oop %r34 to %word
	%r38 = icmp ne %word %r39, 0
	br i1 %r38, label %L10, label %L11
L10:
	%r40 = load %oop, %oop* %t1
	%r41 = load %oop, %oop* %t0
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = ptrtoint %oop %r40 to %word
	%r43 = shl %word %r45, %r44
	%r42 = inttoptr %word %r43 to %oop
	store %oop %r42, %oop* %t4
	br label %L12
L11:
	%r46 = inttoptr %word 0 to %oop
	%r47 = load %oop, %oop* %t1
	%r51 = ptrtoint %oop %r47 to %word
	%r50 = ptrtoint %oop %r46 to %word
	%r49 = icmp slt %word %r51, %r50
	%r48 = inttoptr i1 %r49 to %oop
	%r53 = ptrtoint %oop %r48 to %word
	%r52 = icmp ne %word %r53, 0
	br i1 %r52, label %L13, label %L14
L13:
	%r54 = load %oop, %oop* %t1
	%r57 = ptrtoint %oop %r54 to %word
	%r56 = sub nsw %word 0, %r57
	%r55 = inttoptr %word %r56 to %oop
	%r58 = load %oop, %oop* %t0
	%r62 = ptrtoint %oop %r58 to %word
	%r61 = ptrtoint %oop %r55 to %word
	%r60 = ashr %word %r62, %r61
	%r59 = inttoptr %word %r60 to %oop
	store %oop %r59, %oop* %t5
	br label %L15
L14:
	%r63 = load %oop, %oop* %t0
	store %oop %r63, %oop* %t5
	br label %L15
L15:
	%r64 = load %oop, %oop* %t5
	store %oop %r64, %oop* %t4
	br label %L12
L12:
	%r65 = load %oop, %oop* %t4
	store %oop %r65, %oop* %t3
	br label %L6
L6:
	%r66 = load %oop, %oop* %t3
	store %oop %r66, %oop* %t2
	br label %L3
L3:
	%r67 = load %oop, %oop* %t2
	ret %oop %r67
}
@m_cstr13 = private unnamed_addr constant [15 x i8] c"%bitwise-shift\00"
@m_ostr14 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr13 to %oop) }
@"m_%bitwise-shift" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_%bitwise-shift.code" to %oop), %"<string>"* @m_ostr14 }
define %oop @m_C-string-length.code(%oop %cstr) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	store %oop %cstr, %oop* %t0
	%r1 = inttoptr %word 0 to %oop
	store %oop %r1, %oop* %t1
	br label %L2
L1:
	%r2 = inttoptr %word 1 to %oop
	%r3 = load %oop, %oop* %t1
	%r7 = ptrtoint %oop %r3 to %word
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = add %word %r7, %r6
	%r4 = inttoptr %word %r5 to %oop
	store %oop %r4, %oop* %t1
	br label %L2
L2:
	%r8 = load %oop, %oop* %t1
	%r9 = load %oop, %oop* %t0
	%r14 = bitcast %oop %r9 to [0 x i8]*
	%r13 = ptrtoint %oop %r8 to %word
	%r12 = getelementptr [0 x i8], [0 x i8]* %r14, %word 0, %word %r13
	%r11 = load i8, i8* %r12
	%r10 = inttoptr i8 %r11 to %oop
	%r16 = ptrtoint %oop %r10 to %word
	%r15 = icmp ne %word %r16, 0
	br i1 %r15, label %L1, label %L3
L3:
	%r17 = load %oop, %oop* %t1
	ret %oop %r17
}
@m_cstr15 = private unnamed_addr constant [16 x i8] c"C-string-length\00"
@m_ostr16 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 31, %oop bitcast ([16 x i8]* @m_cstr15 to %oop) }
@m_C-string-length = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_C-string-length.code to %oop), %"<string>"* @m_ostr16 }
define %oop @"m_platform/flush-streams.code"() {
	%r1 = inttoptr %word 74 to %oop
	%r2 = inttoptr %word 1 to %oop
	%r3 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	syscall", 
	"=A,r,r,~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r1, %oop %r2)
	%r4 = inttoptr %word 74 to %oop
	%r5 = inttoptr %word 2 to %oop
	%r6 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	syscall", 
	"=A,r,r,~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r4, %oop %r5)
	ret %oop %r6
}
@m_cstr17 = private unnamed_addr constant [23 x i8] c"platform/flush-streams\00"
@m_ostr18 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 45, %oop bitcast ([23 x i8]* @m_cstr17 to %oop) }
@"m_platform/flush-streams" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop ()* @"m_platform/flush-streams.code" to %oop), %"<string>"* @m_ostr18 }
@"m_*initial-break*" = global %oop inttoptr (%word 0 to %oop)
@"m_*current-break*" = global %oop inttoptr (%word 0 to %oop)
@"m_*module*" = global %oop inttoptr (%word 0 to %oop)
@"m_*maru-module*" = global %oop inttoptr (%word 0 to %oop)
@"m_*maru-user-module*" = global %oop inttoptr (%word 0 to %oop)
@"m_*symbols*" = global %oop inttoptr (%word 0 to %oop)
@"m_*expanders-var*" = global %oop inttoptr (%word 0 to %oop)
@"m_*encoders-var*" = global %oop inttoptr (%word 0 to %oop)
@"m_*evaluators-var*" = global %oop inttoptr (%word 0 to %oop)
@"m_*applicators-var*" = global %oop inttoptr (%word 0 to %oop)
@"m_fixed-primitive-function/quote" = global %oop inttoptr (%word 0 to %oop)
@"m_fixed-primitive-function/lambda" = global %oop inttoptr (%word 0 to %oop)
@"m_fixed-primitive-function/let" = global %oop inttoptr (%word 0 to %oop)
@"m_fixed-primitive-function/define" = global %oop inttoptr (%word 0 to %oop)
@"m_fixed-primitive-function/set" = global %oop inttoptr (%word 0 to %oop)
@"m_+end+" = global %oop inttoptr (%word 0 to %oop)
@m_cstr19 = private unnamed_addr constant [3 x i8] c": \00"
@m_ostr20 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 5, %oop bitcast ([3 x i8]* @m_cstr19 to %oop) }
@m_cstr21 = private unnamed_addr constant [2 x i8] c"\0A\00"
@m_ostr22 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 3, %oop bitcast ([2 x i8]* @m_cstr21 to %oop) }
@m_cstr23 = private unnamed_addr constant [10 x i8] c"\09callee:\09\00"
@m_ostr24 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 19, %oop bitcast ([10 x i8]* @m_cstr23 to %oop) }
@m_cstr25 = private unnamed_addr constant [2 x i8] c"\0A\00"
@m_ostr26 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 3, %oop bitcast ([2 x i8]* @m_cstr25 to %oop) }
@m_cstr27 = private unnamed_addr constant [8 x i8] c"\09expr: \00"
@m_ostr28 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr27 to %oop) }
@m_cstr29 = private unnamed_addr constant [2 x i8] c"\0A\00"
@m_ostr30 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 3, %oop bitcast ([2 x i8]* @m_cstr29 to %oop) }
@m_cstr31 = private unnamed_addr constant [6 x i8] c"\09arg \00"
@m_ostr32 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr31 to %oop) }
@m_cstr33 = private unnamed_addr constant [3 x i8] c":\09\00"
@m_ostr34 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 5, %oop bitcast ([3 x i8]* @m_cstr33 to %oop) }
@m_cstr35 = private unnamed_addr constant [2 x i8] c"\0A\00"
@m_ostr36 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 3, %oop bitcast ([2 x i8]* @m_cstr35 to %oop) }
define %oop @m_print-backtrace.code() {
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t1 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	%t8 = alloca %oop
	%t9 = alloca %oop
	%t10 = alloca %oop
	%t11 = alloca %oop
	%t12 = alloca %oop
	%r1 = load %oop, %oop* @"m_*maru-module*"
	%r2 = load %oop, %oop* @"m_symbol/*debug-output*"
	%r3 = call %oop @m_global-variable-value.code(%oop %r1, %oop %r2)
	store %oop %r3, %oop* %t0
	%r4 = inttoptr %word 0 to %oop
	store %oop %r4, %oop* %t1
	%r5 = load %oop, %oop* @"m_*call-stack-index*"
	store %oop %r5, %oop* %t2
	br label %L2
L1:
	%r6 = call %oop @"m_platform/flush-streams.code"()
	%r7 = load %oop, %oop* @"m_*call-stack*"
	%r8 = load %oop, %oop* %t1
	%r9 = call %oop @m_array-at.code(%oop %r7, %oop %r8)
	store %oop %r9, %oop* %t3
	%r10 = load %oop, %oop* %t1
	%r11 = call %oop @"m_long->string.code"(%oop %r10)
	store %oop %r11, %oop* %t4
	%r12 = inttoptr %word 0 to %oop
	%r13 = load %oop, %oop* %t3
	%r17 = bitcast %oop %r13 to [0 x %oop]*
	%r16 = ptrtoint %oop %r12 to %word
	%r15 = getelementptr [0 x %oop], [0 x %oop]* %r17, %word 0, %word %r16
	%r14 = load %oop, %oop* %r15
	store %oop %r14, %oop* %t5
	%r18 = inttoptr %word 0 to %oop
	store %oop %r18, %oop* %t6
	%r19 = load %oop, %oop* @"m_symbol/expand"
	%r20 = load %oop, %oop* %t5
	%r24 = ptrtoint %oop %r20 to %word
	%r23 = ptrtoint %oop %r19 to %word
	%r22 = icmp eq %word %r24, %r23
	%r21 = inttoptr i1 %r22 to %oop
	store %oop %r21, %oop* %t6
	%r25 = inttoptr %word 0 to %oop
	%r29 = ptrtoint %oop %r25 to %word
	%r28 = ptrtoint %oop %r21 to %word
	%r27 = icmp eq %word %r29, %r28
	%r26 = inttoptr i1 %r27 to %oop
	%r31 = ptrtoint %oop %r26 to %word
	%r30 = icmp ne %word %r31, 0
	br i1 %r30, label %L5, label %L4
L5:
	%r32 = load %oop, %oop* @"m_symbol/encode"
	%r33 = load %oop, %oop* %t5
	%r37 = ptrtoint %oop %r33 to %word
	%r36 = ptrtoint %oop %r32 to %word
	%r35 = icmp eq %word %r37, %r36
	%r34 = inttoptr i1 %r35 to %oop
	store %oop %r34, %oop* %t6
	%r38 = inttoptr %word 0 to %oop
	%r42 = ptrtoint %oop %r38 to %word
	%r41 = ptrtoint %oop %r34 to %word
	%r40 = icmp eq %word %r42, %r41
	%r39 = inttoptr i1 %r40 to %oop
	%r44 = ptrtoint %oop %r39 to %word
	%r43 = icmp ne %word %r44, 0
	br i1 %r43, label %L6, label %L4
L6:
	br label %L4
L4:
	%r45 = load %oop, %oop* %t6
	store %oop %r45, %oop* %t6
	%r46 = load %oop, %oop* %t4
	%r47 = call %oop @m_string-length.code(%oop %r46)
	%r48 = inttoptr %word 3 to %oop
	%r52 = ptrtoint %oop %r48 to %word
	%r51 = ptrtoint %oop %r47 to %word
	%r50 = sub %word %r52, %r51
	%r49 = inttoptr %word %r50 to %oop
	store %oop %r49, %oop* %t7
	br label %L8
L7:
	%r53 = load %oop, %oop* %t4
	%r54 = inttoptr %word 0 to %oop
	%r55 = inttoptr %word 32 to %oop
	%r56 = call %oop @m_string-insert.code(%oop %r53, %oop %r54, %oop %r55)
	br label %L8
L8:
	%r57 = inttoptr %word 1 to %oop
	%r58 = load %oop, %oop* %t7
	%r62 = ptrtoint %oop %r58 to %word
	%r61 = ptrtoint %oop %r57 to %word
	%r60 = sub %word %r62, %r61
	%r59 = inttoptr %word %r60 to %oop
	store %oop %r59, %oop* %t7
	%r63 = inttoptr %word 0 to %oop
	%r67 = ptrtoint %oop %r63 to %word
	%r66 = ptrtoint %oop %r59 to %word
	%r65 = icmp sle %word %r67, %r66
	%r64 = inttoptr i1 %r65 to %oop
	%r69 = ptrtoint %oop %r64 to %word
	%r68 = icmp ne %word %r69, 0
	br i1 %r68, label %L7, label %L9
L9:
	%r70 = load %oop, %oop* %t0
	%r71 = load %oop, %oop* %t4
	%r72 = inttoptr %word 0 to %oop
	%r73 = call %oop @m_do-print.code(%oop %r70, %oop %r71, %oop %r72)
	%r74 = load %oop, %oop* %t0
	%r75 = getelementptr %"<string>", %"<string>"* @m_ostr20, i32 0, i32 1
	%r76 = bitcast %word* %r75 to %oop
	%r77 = inttoptr %word 0 to %oop
	%r78 = call %oop @m_do-print.code(%oop %r74, %oop %r76, %oop %r77)
	%r79 = load %oop, %oop* %t0
	%r80 = inttoptr %word 0 to %oop
	%r81 = load %oop, %oop* %t3
	%r85 = bitcast %oop %r81 to [0 x %oop]*
	%r84 = ptrtoint %oop %r80 to %word
	%r83 = getelementptr [0 x %oop], [0 x %oop]* %r85, %word 0, %word %r84
	%r82 = load %oop, %oop* %r83
	%r86 = inttoptr %word 0 to %oop
	%r87 = call %oop @m_do-print.code(%oop %r79, %oop %r82, %oop %r86)
	%r88 = load %oop, %oop* %t0
	%r89 = getelementptr %"<string>", %"<string>"* @m_ostr22, i32 0, i32 1
	%r90 = bitcast %word* %r89 to %oop
	%r91 = inttoptr %word 0 to %oop
	%r92 = call %oop @m_do-print.code(%oop %r88, %oop %r90, %oop %r91)
	%r93 = load %oop, %oop* %t6
	%r95 = ptrtoint %oop %r93 to %word
	%r94 = icmp ne %word %r95, 0
	br i1 %r94, label %L10, label %L11
L10:
	%r96 = inttoptr %word 0 to %oop
	store %oop %r96, %oop* %t7
	br label %L12
L11:
	%r97 = load %oop, %oop* %t0
	%r98 = getelementptr %"<string>", %"<string>"* @m_ostr24, i32 0, i32 1
	%r99 = bitcast %word* %r98 to %oop
	%r100 = inttoptr %word 0 to %oop
	%r101 = call %oop @m_do-print.code(%oop %r97, %oop %r99, %oop %r100)
	%r102 = load %oop, %oop* %t0
	%r103 = inttoptr %word 1 to %oop
	%r104 = load %oop, %oop* %t3
	%r108 = bitcast %oop %r104 to [0 x %oop]*
	%r107 = ptrtoint %oop %r103 to %word
	%r106 = getelementptr [0 x %oop], [0 x %oop]* %r108, %word 0, %word %r107
	%r105 = load %oop, %oop* %r106
	%r109 = inttoptr %word 0 to %oop
	%r110 = call %oop @m_do-print.code(%oop %r102, %oop %r105, %oop %r109)
	%r111 = load %oop, %oop* %t0
	%r112 = getelementptr %"<string>", %"<string>"* @m_ostr26, i32 0, i32 1
	%r113 = bitcast %word* %r112 to %oop
	%r114 = inttoptr %word 0 to %oop
	%r115 = call %oop @m_do-print.code(%oop %r111, %oop %r113, %oop %r114)
	store %oop %r115, %oop* %t7
	br label %L12
L12:
	%r116 = load %oop, %oop* %t7
	%r117 = inttoptr %word 1 to %oop
	%r118 = load %oop, %oop* @"m_*error-level*"
	%r122 = ptrtoint %oop %r118 to %word
	%r121 = ptrtoint %oop %r117 to %word
	%r120 = icmp sle %word %r122, %r121
	%r119 = inttoptr i1 %r120 to %oop
	%r124 = ptrtoint %oop %r119 to %word
	%r123 = icmp ne %word %r124, 0
	br i1 %r123, label %L13, label %L14
L13:
	%r125 = inttoptr %word 2 to %oop
	%r126 = load %oop, %oop* %t3
	%r130 = bitcast %oop %r126 to [0 x %oop]*
	%r129 = ptrtoint %oop %r125 to %word
	%r128 = getelementptr [0 x %oop], [0 x %oop]* %r130, %word 0, %word %r129
	%r127 = load %oop, %oop* %r128
	store %oop %r127, %oop* %t8
	%r131 = load %oop, %oop* %t6
	%r133 = ptrtoint %oop %r131 to %word
	%r132 = icmp ne %word %r133, 0
	br i1 %r132, label %L16, label %L17
L16:
	%r134 = load %oop, %oop* %t0
	%r135 = getelementptr %"<string>", %"<string>"* @m_ostr28, i32 0, i32 1
	%r136 = bitcast %word* %r135 to %oop
	%r137 = inttoptr %word 0 to %oop
	%r138 = call %oop @m_do-print.code(%oop %r134, %oop %r136, %oop %r137)
	%r139 = load %oop, %oop* %t0
	%r140 = load %oop, %oop* %t8
	%r141 = inttoptr %word 0 to %oop
	%r142 = call %oop @m_do-print.code(%oop %r139, %oop %r140, %oop %r141)
	%r143 = load %oop, %oop* %t0
	%r144 = getelementptr %"<string>", %"<string>"* @m_ostr30, i32 0, i32 1
	%r145 = bitcast %word* %r144 to %oop
	%r146 = inttoptr %word 0 to %oop
	%r147 = call %oop @m_do-print.code(%oop %r143, %oop %r145, %oop %r146)
	store %oop %r147, %oop* %t9
	br label %L18
L17:
	%r148 = inttoptr %word 0 to %oop
	store %oop %r148, %oop* %t10
	%r149 = load %oop, %oop* %t8
	store %oop %r149, %oop* %t11
	br label %L20
L19:
	%r150 = load %oop, %oop* %t11
	%r151 = call %oop @m_car.code(%oop %r150)
	store %oop %r151, %oop* %t12
	%r152 = load %oop, %oop* %t0
	%r153 = getelementptr %"<string>", %"<string>"* @m_ostr32, i32 0, i32 1
	%r154 = bitcast %word* %r153 to %oop
	%r155 = inttoptr %word 0 to %oop
	%r156 = call %oop @m_do-print.code(%oop %r152, %oop %r154, %oop %r155)
	%r157 = load %oop, %oop* %t0
	%r158 = load %oop, %oop* %t10
	%r159 = call %oop @"m_long->string.code"(%oop %r158)
	%r160 = inttoptr %word 0 to %oop
	%r161 = call %oop @m_do-print.code(%oop %r157, %oop %r159, %oop %r160)
	%r162 = load %oop, %oop* %t0
	%r163 = getelementptr %"<string>", %"<string>"* @m_ostr34, i32 0, i32 1
	%r164 = bitcast %word* %r163 to %oop
	%r165 = inttoptr %word 0 to %oop
	%r166 = call %oop @m_do-print.code(%oop %r162, %oop %r164, %oop %r165)
	%r167 = load %oop, %oop* %t0
	%r168 = load %oop, %oop* %t12
	%r169 = inttoptr %word 0 to %oop
	%r170 = call %oop @m_do-print.code(%oop %r167, %oop %r168, %oop %r169)
	%r171 = load %oop, %oop* %t0
	%r172 = getelementptr %"<string>", %"<string>"* @m_ostr36, i32 0, i32 1
	%r173 = bitcast %word* %r172 to %oop
	%r174 = inttoptr %word 0 to %oop
	%r175 = call %oop @m_do-print.code(%oop %r171, %oop %r173, %oop %r174)
	%r176 = inttoptr %word 1 to %oop
	%r177 = load %oop, %oop* %t10
	%r181 = ptrtoint %oop %r177 to %word
	%r180 = ptrtoint %oop %r176 to %word
	%r179 = add %word %r181, %r180
	%r178 = inttoptr %word %r179 to %oop
	store %oop %r178, %oop* %t10
	%r182 = load %oop, %oop* %t11
	%r183 = call %oop @m_cdr.code(%oop %r182)
	store %oop %r183, %oop* %t11
	br label %L20
L20:
	%r184 = load %oop, %oop* %t11
	%r186 = ptrtoint %oop %r184 to %word
	%r185 = icmp ne %word %r186, 0
	br i1 %r185, label %L19, label %L21
L21:
	store %oop %r184, %oop* %t9
	br label %L18
L18:
	%r187 = load %oop, %oop* %t9
	store %oop %r187, %oop* %t7
	br label %L15
L14:
	%r188 = inttoptr %word 0 to %oop
	store %oop %r188, %oop* %t7
	br label %L15
L15:
	%r189 = load %oop, %oop* %t7
	%r190 = inttoptr %word 1 to %oop
	%r191 = load %oop, %oop* %t1
	%r195 = ptrtoint %oop %r191 to %word
	%r194 = ptrtoint %oop %r190 to %word
	%r193 = add %word %r195, %r194
	%r192 = inttoptr %word %r193 to %oop
	store %oop %r192, %oop* %t1
	br label %L2
L2:
	%r196 = load %oop, %oop* %t2
	%r197 = load %oop, %oop* %t1
	%r201 = ptrtoint %oop %r197 to %word
	%r200 = ptrtoint %oop %r196 to %word
	%r199 = icmp eq %word %r201, %r200
	%r198 = inttoptr i1 %r199 to %oop
	%r205 = ptrtoint %oop %r198 to %word
	%r204 = icmp eq %word %r205, 0
	%r203 = zext i1 %r204 to %word
	%r202 = inttoptr %word %r203 to %oop
	%r207 = ptrtoint %oop %r202 to %word
	%r206 = icmp ne %word %r207, 0
	br i1 %r206, label %L1, label %L3
L3:
	%r208 = call %oop @"m_platform/flush-streams.code"()
	ret %oop %r208
}
@m_cstr37 = private unnamed_addr constant [16 x i8] c"print-backtrace\00"
@m_ostr38 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 31, %oop bitcast ([16 x i8]* @m_cstr37 to %oop) }
@m_print-backtrace = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop ()* @m_print-backtrace.code to %oop), %"<string>"* @m_ostr38 }
define %oop @m_capture-well-known-module-values.code() {
	%t0 = alloca %oop
	%r1 = inttoptr %word 0 to %oop
	%r2 = load %oop, %oop* @"m_*module*"
	%r3 = call %oop @m_module-env.code(%oop %r2)
	store %oop %r3, %oop* %t0
	%r4 = load %oop, %oop* @"m_symbol/*expanders*"
	%r5 = load %oop, %oop* %t0
	%r6 = call %oop @"m_defined?.code"(%oop %r4, %oop %r5)
	store %oop %r6, %oop* @"m_*expanders-var*"
	%r7 = load %oop, %oop* @"m_symbol/*encoders*"
	%r8 = load %oop, %oop* %t0
	%r9 = call %oop @"m_defined?.code"(%oop %r7, %oop %r8)
	store %oop %r9, %oop* @"m_*encoders-var*"
	%r10 = load %oop, %oop* @"m_symbol/*evaluators*"
	%r11 = load %oop, %oop* %t0
	%r12 = call %oop @"m_defined?.code"(%oop %r10, %oop %r11)
	store %oop %r12, %oop* @"m_*evaluators-var*"
	%r13 = load %oop, %oop* @"m_symbol/*applicators*"
	%r14 = load %oop, %oop* %t0
	%r15 = call %oop @"m_defined?.code"(%oop %r13, %oop %r14)
	store %oop %r15, %oop* @"m_*applicators-var*"
	%r16 = inttoptr %word 0 to %oop
	ret %oop %r16
}
@m_cstr39 = private unnamed_addr constant [33 x i8] c"capture-well-known-module-values\00"
@m_ostr40 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 65, %oop bitcast ([33 x i8]* @m_cstr39 to %oop) }
@m_capture-well-known-module-values = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop ()* @m_capture-well-known-module-values.code to %oop), %"<string>"* @m_ostr40 }
@m_cstr41 = private unnamed_addr constant [6 x i8] c"+end+\00"
@m_ostr42 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr41 to %oop) }
@m_cstr43 = private unnamed_addr constant [6 x i8] c"+end+\00"
@m_ostr44 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr43 to %oop) }
@m_cstr45 = private unnamed_addr constant [14 x i8] c"*maru-module*\00"
@m_ostr46 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr45 to %oop) }
@m_cstr47 = private unnamed_addr constant [25 x i8] c"call-x86-64-machine-code\00"
@m_ostr48 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 49, %oop bitcast ([25 x i8]* @m_cstr47 to %oop) }
@m_cstr49 = private unnamed_addr constant [16 x i8] c"string->integer\00"
@m_ostr50 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 31, %oop bitcast ([16 x i8]* @m_cstr49 to %oop) }
@m_cstr51 = private unnamed_addr constant [15 x i8] c"string->number\00"
@m_ostr52 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr51 to %oop) }
@m_cstr53 = private unnamed_addr constant [16 x i8] c"integer->string\00"
@m_ostr54 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 31, %oop bitcast ([16 x i8]* @m_cstr53 to %oop) }
@m_cstr55 = private unnamed_addr constant [15 x i8] c"number->string\00"
@m_ostr56 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr55 to %oop) }
@m_cstr57 = private unnamed_addr constant [14 x i8] c"string-append\00"
@m_ostr58 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr57 to %oop) }
@m_cstr59 = private unnamed_addr constant [13 x i8] c"array-append\00"
@m_ostr60 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 25, %oop bitcast ([13 x i8]* @m_cstr59 to %oop) }
@m_cstr61 = private unnamed_addr constant [14 x i8] c"string-insert\00"
@m_ostr62 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr61 to %oop) }
@m_cstr63 = private unnamed_addr constant [13 x i8] c"array-insert\00"
@m_ostr64 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 25, %oop bitcast ([13 x i8]* @m_cstr63 to %oop) }
@m_cstr65 = private unnamed_addr constant [12 x i8] c"set-char-at\00"
@m_ostr66 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr65 to %oop) }
@m_cstr67 = private unnamed_addr constant [14 x i8] c"set-string-at\00"
@m_ostr68 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr67 to %oop) }
@m_cstr69 = private unnamed_addr constant [13 x i8] c"set-array-at\00"
@m_ostr70 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 25, %oop bitcast ([13 x i8]* @m_cstr69 to %oop) }
@m_cstr71 = private unnamed_addr constant [8 x i8] c"char-at\00"
@m_ostr72 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr71 to %oop) }
@m_cstr73 = private unnamed_addr constant [10 x i8] c"string-at\00"
@m_ostr74 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 19, %oop bitcast ([10 x i8]* @m_cstr73 to %oop) }
@m_cstr75 = private unnamed_addr constant [9 x i8] c"array-at\00"
@m_ostr76 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr75 to %oop) }
@m_cstr77 = private unnamed_addr constant [14 x i8] c"string-length\00"
@m_ostr78 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr77 to %oop) }
@m_cstr79 = private unnamed_addr constant [13 x i8] c"array-length\00"
@m_ostr80 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 25, %oop bitcast ([13 x i8]* @m_cstr79 to %oop) }
@m_cstr81 = private unnamed_addr constant [11 x i8] c"address-of\00"
@m_ostr82 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr81 to %oop) }
@m_cstr83 = private unnamed_addr constant [12 x i8] c"set-byte-at\00"
@m_ostr84 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr83 to %oop) }
@m_cstr85 = private unnamed_addr constant [8 x i8] c"byte-at\00"
@m_ostr86 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr85 to %oop) }
@m_cstr87 = private unnamed_addr constant [11 x i8] c"copy-bytes\00"
@m_ostr88 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr87 to %oop) }
@m_cstr89 = private unnamed_addr constant [11 x i8] c"set-oop-at\00"
@m_ostr90 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr89 to %oop) }
@m_cstr91 = private unnamed_addr constant [7 x i8] c"oop-at\00"
@m_ostr92 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr91 to %oop) }
@m_cstr93 = private unnamed_addr constant [8 x i8] c"set-cdr\00"
@m_ostr94 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr93 to %oop) }
@m_cstr95 = private unnamed_addr constant [8 x i8] c"set-car\00"
@m_ostr96 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr95 to %oop) }
@m_cstr97 = private unnamed_addr constant [7 x i8] c"array?\00"
@m_ostr98 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr97 to %oop) }
@m_cstr99 = private unnamed_addr constant [6 x i8] c"pair?\00"
@m_ostr100 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr99 to %oop) }
@m_cstr101 = private unnamed_addr constant [8 x i8] c"symbol?\00"
@m_ostr102 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr101 to %oop) }
@m_cstr103 = private unnamed_addr constant [8 x i8] c"string?\00"
@m_ostr104 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr103 to %oop) }
@m_cstr105 = private unnamed_addr constant [8 x i8] c"type-of\00"
@m_ostr106 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr105 to %oop) }
@m_cstr107 = private unnamed_addr constant [5 x i8] c"warn\00"
@m_ostr108 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr107 to %oop) }
@m_cstr109 = private unnamed_addr constant [5 x i8] c"exit\00"
@m_ostr110 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr109 to %oop) }
@m_cstr111 = private unnamed_addr constant [2 x i8] c"=\00"
@m_ostr112 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 3, %oop bitcast ([2 x i8]* @m_cstr111 to %oop) }
@m_cstr113 = private unnamed_addr constant [2 x i8] c">\00"
@m_ostr114 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 3, %oop bitcast ([2 x i8]* @m_cstr113 to %oop) }
@m_cstr115 = private unnamed_addr constant [3 x i8] c">=\00"
@m_ostr116 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 5, %oop bitcast ([3 x i8]* @m_cstr115 to %oop) }
@m_cstr117 = private unnamed_addr constant [3 x i8] c"<=\00"
@m_ostr118 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 5, %oop bitcast ([3 x i8]* @m_cstr117 to %oop) }
@m_cstr119 = private unnamed_addr constant [2 x i8] c"<\00"
@m_ostr120 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 3, %oop bitcast ([2 x i8]* @m_cstr119 to %oop) }
@m_cstr121 = private unnamed_addr constant [14 x i8] c"bitwise-shift\00"
@m_ostr122 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr121 to %oop) }
@m_cstr123 = private unnamed_addr constant [12 x i8] c"bitwise-not\00"
@m_ostr124 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr123 to %oop) }
@m_cstr125 = private unnamed_addr constant [12 x i8] c"bitwise-xor\00"
@m_ostr126 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr125 to %oop) }
@m_cstr127 = private unnamed_addr constant [11 x i8] c"bitwise-or\00"
@m_ostr128 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr127 to %oop) }
@m_cstr129 = private unnamed_addr constant [12 x i8] c"bitwise-and\00"
@m_ostr130 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr129 to %oop) }
@m_cstr131 = private unnamed_addr constant [2 x i8] c"*\00"
@m_ostr132 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 3, %oop bitcast ([2 x i8]* @m_cstr131 to %oop) }
@m_cstr133 = private unnamed_addr constant [2 x i8] c"/\00"
@m_ostr134 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 3, %oop bitcast ([2 x i8]* @m_cstr133 to %oop) }
@m_cstr135 = private unnamed_addr constant [2 x i8] c"+\00"
@m_ostr136 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 3, %oop bitcast ([2 x i8]* @m_cstr135 to %oop) }
@m_cstr137 = private unnamed_addr constant [2 x i8] c"-\00"
@m_ostr138 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 3, %oop bitcast ([2 x i8]* @m_cstr137 to %oop) }
@m_cstr139 = private unnamed_addr constant [4 x i8] c"not\00"
@m_ostr140 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr139 to %oop) }
@m_cstr141 = private unnamed_addr constant [6 x i8] c"quote\00"
@m_ostr142 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr141 to %oop) }
@m_cstr143 = private unnamed_addr constant [4 x i8] c"and\00"
@m_ostr144 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr143 to %oop) }
@m_cstr145 = private unnamed_addr constant [3 x i8] c"or\00"
@m_ostr146 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 5, %oop bitcast ([3 x i8]* @m_cstr145 to %oop) }
@m_cstr147 = private unnamed_addr constant [3 x i8] c"if\00"
@m_ostr148 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 5, %oop bitcast ([3 x i8]* @m_cstr147 to %oop) }
@m_cstr149 = private unnamed_addr constant [6 x i8] c"while\00"
@m_ostr150 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr149 to %oop) }
@m_cstr151 = private unnamed_addr constant [4 x i8] c"set\00"
@m_ostr152 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr151 to %oop) }
@m_cstr153 = private unnamed_addr constant [4 x i8] c"let\00"
@m_ostr154 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr153 to %oop) }
@m_cstr155 = private unnamed_addr constant [7 x i8] c"lambda\00"
@m_ostr156 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr155 to %oop) }
@m_cstr157 = private unnamed_addr constant [15 x i8] c"eval-in-module\00"
@m_ostr158 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr157 to %oop) }
@m_cstr159 = private unnamed_addr constant [5 x i8] c"eval\00"
@m_ostr160 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr159 to %oop) }
@m_cstr161 = private unnamed_addr constant [7 x i8] c"define\00"
@m_ostr162 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr161 to %oop) }
@m_cstr163 = private unnamed_addr constant [5 x i8] c"load\00"
@m_ostr164 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr163 to %oop) }
@m_cstr165 = private unnamed_addr constant [12 x i8] c"file-stream\00"
@m_ostr166 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr165 to %oop) }
@m_cstr167 = private unnamed_addr constant [21 x i8] c"file-write-character\00"
@m_ostr168 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 41, %oop bitcast ([21 x i8]* @m_cstr167 to %oop) }
@m_cstr169 = private unnamed_addr constant [20 x i8] c"file-read-character\00"
@m_ostr170 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 39, %oop bitcast ([20 x i8]* @m_cstr169 to %oop) }
@m_cstr171 = private unnamed_addr constant [11 x i8] c"file-close\00"
@m_ostr172 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr171 to %oop) }
@m_cstr173 = private unnamed_addr constant [10 x i8] c"file-open\00"
@m_ostr174 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 19, %oop bitcast ([10 x i8]* @m_cstr173 to %oop) }
@m_cstr175 = private unnamed_addr constant [22 x i8] c"set-working-directory\00"
@m_ostr176 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 43, %oop bitcast ([22 x i8]* @m_cstr175 to %oop) }
@m_cstr177 = private unnamed_addr constant [7 x i8] c"module\00"
@m_ostr178 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr177 to %oop) }
@m_cstr179 = private unnamed_addr constant [7 x i8] c"encode\00"
@m_ostr180 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr179 to %oop) }
@m_cstr181 = private unnamed_addr constant [7 x i8] c"expand\00"
@m_ostr182 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr181 to %oop) }
@m_cstr183 = private unnamed_addr constant [6 x i8] c"apply\00"
@m_ostr184 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr183 to %oop) }
@m_cstr185 = private unnamed_addr constant [10 x i8] c"print-all\00"
@m_ostr186 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 19, %oop bitcast ([10 x i8]* @m_cstr185 to %oop) }
@m_cstr187 = private unnamed_addr constant [9 x i8] c"dump-all\00"
@m_ostr188 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr187 to %oop) }
@m_cstr189 = private unnamed_addr constant [6 x i8] c"print\00"
@m_ostr190 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr189 to %oop) }
@m_cstr191 = private unnamed_addr constant [5 x i8] c"dump\00"
@m_ostr192 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr191 to %oop) }
@m_cstr193 = private unnamed_addr constant [5 x i8] c"read\00"
@m_ostr194 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr193 to %oop) }
@m_cstr195 = private unnamed_addr constant [19 x i8] c"set-current-module\00"
@m_ostr196 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 37, %oop bitcast ([19 x i8]* @m_cstr195 to %oop) }
@m_cstr197 = private unnamed_addr constant [15 x i8] c"current-module\00"
@m_ostr198 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr197 to %oop) }
@m_cstr199 = private unnamed_addr constant [19 x i8] c"environment-define\00"
@m_ostr200 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 37, %oop bitcast ([19 x i8]* @m_cstr199 to %oop) }
@m_cstr201 = private unnamed_addr constant [9 x i8] c"defined?\00"
@m_ostr202 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr201 to %oop) }
@m_cstr203 = private unnamed_addr constant [15 x i8] c"symbol->string\00"
@m_ostr204 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr203 to %oop) }
@m_cstr205 = private unnamed_addr constant [15 x i8] c"string->symbol\00"
@m_ostr206 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr205 to %oop) }
@m_cstr207 = private unnamed_addr constant [18 x i8] c"string-insert-all\00"
@m_ostr208 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr207 to %oop) }
@m_cstr209 = private unnamed_addr constant [12 x i8] c"environment\00"
@m_ostr210 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr209 to %oop) }
@m_cstr211 = private unnamed_addr constant [9 x i8] c"variable\00"
@m_ostr212 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr211 to %oop) }
@m_cstr213 = private unnamed_addr constant [6 x i8] c"fixed\00"
@m_ostr214 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr213 to %oop) }
@m_cstr215 = private unnamed_addr constant [5 x i8] c"form\00"
@m_ostr216 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr215 to %oop) }
@m_cstr217 = private unnamed_addr constant [6 x i8] c"array\00"
@m_ostr218 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr217 to %oop) }
@m_cstr219 = private unnamed_addr constant [7 x i8] c"string\00"
@m_ostr220 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr219 to %oop) }
@m_cstr221 = private unnamed_addr constant [5 x i8] c"cons\00"
@m_ostr222 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr221 to %oop) }
@m_cstr223 = private unnamed_addr constant [14 x i8] c"allocate-data\00"
@m_ostr224 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr223 to %oop) }
@m_cstr225 = private unnamed_addr constant [9 x i8] c"allocate\00"
@m_ostr226 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr225 to %oop) }
@m_cstr227 = private unnamed_addr constant [4 x i8] c"cdr\00"
@m_ostr228 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr227 to %oop) }
@m_cstr229 = private unnamed_addr constant [4 x i8] c"car\00"
@m_ostr230 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr229 to %oop) }
@m_cstr231 = private unnamed_addr constant [6 x i8] c"abort\00"
@m_ostr232 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr231 to %oop) }
@m_cstr233 = private unnamed_addr constant [51 x i8] c"populate-module-with-maru-primitives: final assert\00"
@m_ostr234 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 101, %oop bitcast ([51 x i8]* @m_cstr233 to %oop) }
define %oop @m_populate-module-with-maru-primitives.code(%oop %module) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	store %oop %module, %oop* %t0
	%r1 = inttoptr %word 0 to %oop
	%r2 = load %oop, %oop* %t0
	%r3 = call %oop @m_module-env.code(%oop %r2)
	store %oop %r3, %oop* %t1
	%r4 = inttoptr %word 0 to %oop
	store %oop %r4, %oop* %t2
	%r6 = getelementptr %oop, %oop* %t2, %word 0
	%r5 = bitcast %oop* %r6 to %oop
	%r7 = call %oop @"m_gc/push-root.code"(%oop %r5)
	%r8 = inttoptr %word 1 to %oop
	%r9 = inttoptr %word 1 to %oop
	%r10 = load %oop, %oop* @"m_*verbosity*"
	%r14 = ptrtoint %oop %r10 to %word
	%r13 = ptrtoint %oop %r9 to %word
	%r12 = shl %word %r14, %r13
	%r11 = inttoptr %word %r12 to %oop
	%r18 = ptrtoint %oop %r11 to %word
	%r17 = ptrtoint %oop %r8 to %word
	%r16 = or %word %r18, %r17
	%r15 = inttoptr %word %r16 to %oop
	store %oop %r15, %oop* %t2
	%r19 = load %oop, %oop* %t1
	%r20 = load %oop, %oop* @"m_symbol/*verbosity*"
	%r21 = load %oop, %oop* %t2
	%r22 = call %oop @m_environment-define.code(%oop %r19, %oop %r20, %oop %r21)
	%r23 = inttoptr %word 1 to %oop
	%r24 = inttoptr %word 1 to %oop
	%r25 = load %oop, %oop* @"m_*optimised*"
	%r29 = ptrtoint %oop %r25 to %word
	%r28 = ptrtoint %oop %r24 to %word
	%r27 = shl %word %r29, %r28
	%r26 = inttoptr %word %r27 to %oop
	%r33 = ptrtoint %oop %r26 to %word
	%r32 = ptrtoint %oop %r23 to %word
	%r31 = or %word %r33, %r32
	%r30 = inttoptr %word %r31 to %oop
	store %oop %r30, %oop* %t2
	%r34 = load %oop, %oop* %t1
	%r35 = load %oop, %oop* @"m_symbol/*optimised*"
	%r36 = load %oop, %oop* %t2
	%r37 = call %oop @m_environment-define.code(%oop %r34, %oop %r35, %oop %r36)
	%r38 = inttoptr %word 0 to %oop
	store %oop %r38, %oop* %t3
	%r39 = load %oop, %oop* @"m_+end+"
	store %oop %r39, %oop* %t3
	%r40 = inttoptr %word 0 to %oop
	%r44 = ptrtoint %oop %r40 to %word
	%r43 = ptrtoint %oop %r39 to %word
	%r42 = icmp eq %word %r44, %r43
	%r41 = inttoptr i1 %r42 to %oop
	%r46 = ptrtoint %oop %r41 to %word
	%r45 = icmp ne %word %r46, 0
	br i1 %r45, label %L2, label %L1
L2:
	%r47 = getelementptr %"<string>", %"<string>"* @m_ostr42, i32 0, i32 1
	%r48 = bitcast %word* %r47 to %oop
	%r49 = call %oop @m_symbol.code(%oop %r48)
	store %oop %r49, %oop* %t2
	store %oop %r49, %oop* %t3
	%r50 = inttoptr %word 0 to %oop
	%r54 = ptrtoint %oop %r50 to %word
	%r53 = ptrtoint %oop %r49 to %word
	%r52 = icmp eq %word %r54, %r53
	%r51 = inttoptr i1 %r52 to %oop
	%r56 = ptrtoint %oop %r51 to %word
	%r55 = icmp ne %word %r56, 0
	br i1 %r55, label %L3, label %L1
L3:
	br label %L1
L1:
	%r57 = load %oop, %oop* %t3
	store %oop %r57, %oop* @"m_+end+"
	%r58 = load %oop, %oop* %t1
	%r59 = getelementptr %"<string>", %"<string>"* @m_ostr44, i32 0, i32 1
	%r60 = bitcast %word* %r59 to %oop
	%r61 = call %oop @"m_string->symbol.code"(%oop %r60)
	%r62 = load %oop, %oop* @"m_+end+"
	%r63 = call %oop @m_environment-define.code(%oop %r58, %oop %r61, %oop %r62)
	store %oop %r63, %oop* %t3
	%r65 = getelementptr %oop, %oop* %t2, %word 0
	%r64 = bitcast %oop* %r65 to %oop
	%r66 = call %oop @"m_gc/pop-root.code"(%oop %r64)
	%r67 = load %oop, %oop* %t3
	%r68 = load %oop, %oop* %t1
	%r69 = load %oop, %oop* @"m_symbol/true"
	%r70 = load %oop, %oop* @"m_symbol/true"
	%r71 = call %oop @m_environment-define.code(%oop %r68, %oop %r69, %oop %r70)
	%r72 = load %oop, %oop* %t1
	%r73 = getelementptr %"<string>", %"<string>"* @m_ostr46, i32 0, i32 1
	%r74 = bitcast %word* %r73 to %oop
	%r75 = call %oop @"m_string->symbol.code"(%oop %r74)
	%r76 = load %oop, %oop* @"m_*maru-module*"
	%r77 = call %oop @m_environment-define.code(%oop %r72, %oop %r75, %oop %r76)
	%r78 = load %oop, %oop* %t0
	store %oop %r78, %oop* %t2
	%r79 = load %oop, %oop* %t2
	%r80 = getelementptr %"<string>", %"<string>"* @m_ostr48, i32 0, i32 1
	%r81 = bitcast %word* %r80 to %oop
	%r82 = bitcast %"<target-function>"* @"m_call-x86-64-machine-code/evaluator-stub" to %oop
	%r83 = inttoptr %word 0 to %oop
	%r84 = call %oop @m_instantiate-primitive-function.code(%oop %r79, %oop %r81, %oop %r82, %oop %r83)
	%r85 = load %oop, %oop* %t2
	%r86 = getelementptr %"<string>", %"<string>"* @m_ostr50, i32 0, i32 1
	%r87 = bitcast %word* %r86 to %oop
	%r88 = bitcast %"<target-function>"* @"m_string->integer/evaluator-stub" to %oop
	%r89 = inttoptr %word 0 to %oop
	%r90 = call %oop @m_instantiate-primitive-function.code(%oop %r85, %oop %r87, %oop %r88, %oop %r89)
	%r91 = load %oop, %oop* %t2
	%r92 = getelementptr %"<string>", %"<string>"* @m_ostr52, i32 0, i32 1
	%r93 = bitcast %word* %r92 to %oop
	%r94 = bitcast %"<target-function>"* @"m_string->number/evaluator-stub" to %oop
	%r95 = inttoptr %word 0 to %oop
	%r96 = call %oop @m_instantiate-primitive-function.code(%oop %r91, %oop %r93, %oop %r94, %oop %r95)
	%r97 = load %oop, %oop* %t2
	%r98 = getelementptr %"<string>", %"<string>"* @m_ostr54, i32 0, i32 1
	%r99 = bitcast %word* %r98 to %oop
	%r100 = bitcast %"<target-function>"* @"m_integer->string/evaluator-stub" to %oop
	%r101 = inttoptr %word 0 to %oop
	%r102 = call %oop @m_instantiate-primitive-function.code(%oop %r97, %oop %r99, %oop %r100, %oop %r101)
	%r103 = load %oop, %oop* %t2
	%r104 = getelementptr %"<string>", %"<string>"* @m_ostr56, i32 0, i32 1
	%r105 = bitcast %word* %r104 to %oop
	%r106 = bitcast %"<target-function>"* @"m_number->string/evaluator-stub" to %oop
	%r107 = inttoptr %word 0 to %oop
	%r108 = call %oop @m_instantiate-primitive-function.code(%oop %r103, %oop %r105, %oop %r106, %oop %r107)
	%r109 = load %oop, %oop* %t2
	%r110 = getelementptr %"<string>", %"<string>"* @m_ostr58, i32 0, i32 1
	%r111 = bitcast %word* %r110 to %oop
	%r112 = bitcast %"<target-function>"* @"m_string-append/evaluator-stub" to %oop
	%r113 = inttoptr %word 0 to %oop
	%r114 = call %oop @m_instantiate-primitive-function.code(%oop %r109, %oop %r111, %oop %r112, %oop %r113)
	%r115 = load %oop, %oop* %t2
	%r116 = getelementptr %"<string>", %"<string>"* @m_ostr60, i32 0, i32 1
	%r117 = bitcast %word* %r116 to %oop
	%r118 = bitcast %"<target-function>"* @"m_array-append/evaluator-stub" to %oop
	%r119 = inttoptr %word 0 to %oop
	%r120 = call %oop @m_instantiate-primitive-function.code(%oop %r115, %oop %r117, %oop %r118, %oop %r119)
	%r121 = load %oop, %oop* %t2
	%r122 = getelementptr %"<string>", %"<string>"* @m_ostr62, i32 0, i32 1
	%r123 = bitcast %word* %r122 to %oop
	%r124 = bitcast %"<target-function>"* @"m_string-insert/evaluator-stub" to %oop
	%r125 = inttoptr %word 0 to %oop
	%r126 = call %oop @m_instantiate-primitive-function.code(%oop %r121, %oop %r123, %oop %r124, %oop %r125)
	%r127 = load %oop, %oop* %t2
	%r128 = getelementptr %"<string>", %"<string>"* @m_ostr64, i32 0, i32 1
	%r129 = bitcast %word* %r128 to %oop
	%r130 = bitcast %"<target-function>"* @"m_array-insert/evaluator-stub" to %oop
	%r131 = inttoptr %word 0 to %oop
	%r132 = call %oop @m_instantiate-primitive-function.code(%oop %r127, %oop %r129, %oop %r130, %oop %r131)
	%r133 = load %oop, %oop* %t2
	%r134 = getelementptr %"<string>", %"<string>"* @m_ostr66, i32 0, i32 1
	%r135 = bitcast %word* %r134 to %oop
	%r136 = bitcast %"<target-function>"* @"m_set-char-at/evaluator-stub" to %oop
	%r137 = inttoptr %word 0 to %oop
	%r138 = call %oop @m_instantiate-primitive-function.code(%oop %r133, %oop %r135, %oop %r136, %oop %r137)
	%r139 = load %oop, %oop* %t2
	%r140 = getelementptr %"<string>", %"<string>"* @m_ostr68, i32 0, i32 1
	%r141 = bitcast %word* %r140 to %oop
	%r142 = bitcast %"<target-function>"* @"m_set-string-at/evaluator-stub" to %oop
	%r143 = inttoptr %word 0 to %oop
	%r144 = call %oop @m_instantiate-primitive-function.code(%oop %r139, %oop %r141, %oop %r142, %oop %r143)
	%r145 = load %oop, %oop* %t2
	%r146 = getelementptr %"<string>", %"<string>"* @m_ostr70, i32 0, i32 1
	%r147 = bitcast %word* %r146 to %oop
	%r148 = bitcast %"<target-function>"* @"m_set-array-at/evaluator-stub" to %oop
	%r149 = inttoptr %word 0 to %oop
	%r150 = call %oop @m_instantiate-primitive-function.code(%oop %r145, %oop %r147, %oop %r148, %oop %r149)
	%r151 = load %oop, %oop* %t2
	%r152 = getelementptr %"<string>", %"<string>"* @m_ostr72, i32 0, i32 1
	%r153 = bitcast %word* %r152 to %oop
	%r154 = bitcast %"<target-function>"* @"m_char-at/evaluator-stub" to %oop
	%r155 = inttoptr %word 0 to %oop
	%r156 = call %oop @m_instantiate-primitive-function.code(%oop %r151, %oop %r153, %oop %r154, %oop %r155)
	%r157 = load %oop, %oop* %t2
	%r158 = getelementptr %"<string>", %"<string>"* @m_ostr74, i32 0, i32 1
	%r159 = bitcast %word* %r158 to %oop
	%r160 = bitcast %"<target-function>"* @"m_string-at/evaluator-stub" to %oop
	%r161 = inttoptr %word 0 to %oop
	%r162 = call %oop @m_instantiate-primitive-function.code(%oop %r157, %oop %r159, %oop %r160, %oop %r161)
	%r163 = load %oop, %oop* %t2
	%r164 = getelementptr %"<string>", %"<string>"* @m_ostr76, i32 0, i32 1
	%r165 = bitcast %word* %r164 to %oop
	%r166 = bitcast %"<target-function>"* @"m_array-at/evaluator-stub" to %oop
	%r167 = inttoptr %word 0 to %oop
	%r168 = call %oop @m_instantiate-primitive-function.code(%oop %r163, %oop %r165, %oop %r166, %oop %r167)
	%r169 = load %oop, %oop* %t2
	%r170 = getelementptr %"<string>", %"<string>"* @m_ostr78, i32 0, i32 1
	%r171 = bitcast %word* %r170 to %oop
	%r172 = bitcast %"<target-function>"* @"m_string-length/evaluator-stub" to %oop
	%r173 = inttoptr %word 0 to %oop
	%r174 = call %oop @m_instantiate-primitive-function.code(%oop %r169, %oop %r171, %oop %r172, %oop %r173)
	%r175 = load %oop, %oop* %t2
	%r176 = getelementptr %"<string>", %"<string>"* @m_ostr80, i32 0, i32 1
	%r177 = bitcast %word* %r176 to %oop
	%r178 = bitcast %"<target-function>"* @"m_array-length/evaluator-stub" to %oop
	%r179 = inttoptr %word 0 to %oop
	%r180 = call %oop @m_instantiate-primitive-function.code(%oop %r175, %oop %r177, %oop %r178, %oop %r179)
	%r181 = load %oop, %oop* %t2
	%r182 = getelementptr %"<string>", %"<string>"* @m_ostr82, i32 0, i32 1
	%r183 = bitcast %word* %r182 to %oop
	%r184 = bitcast %"<target-function>"* @"m_address-of/evaluator-stub" to %oop
	%r185 = inttoptr %word 0 to %oop
	%r186 = call %oop @m_instantiate-primitive-function.code(%oop %r181, %oop %r183, %oop %r184, %oop %r185)
	%r187 = load %oop, %oop* %t2
	%r188 = getelementptr %"<string>", %"<string>"* @m_ostr84, i32 0, i32 1
	%r189 = bitcast %word* %r188 to %oop
	%r190 = bitcast %"<target-function>"* @"m_set-byte-at/evaluator-stub" to %oop
	%r191 = inttoptr %word 0 to %oop
	%r192 = call %oop @m_instantiate-primitive-function.code(%oop %r187, %oop %r189, %oop %r190, %oop %r191)
	%r193 = load %oop, %oop* %t2
	%r194 = getelementptr %"<string>", %"<string>"* @m_ostr86, i32 0, i32 1
	%r195 = bitcast %word* %r194 to %oop
	%r196 = bitcast %"<target-function>"* @"m_byte-at/evaluator-stub" to %oop
	%r197 = inttoptr %word 0 to %oop
	%r198 = call %oop @m_instantiate-primitive-function.code(%oop %r193, %oop %r195, %oop %r196, %oop %r197)
	%r199 = load %oop, %oop* %t2
	%r200 = getelementptr %"<string>", %"<string>"* @m_ostr88, i32 0, i32 1
	%r201 = bitcast %word* %r200 to %oop
	%r202 = bitcast %"<target-function>"* @"m_copy-bytes/evaluator-stub" to %oop
	%r203 = inttoptr %word 0 to %oop
	%r204 = call %oop @m_instantiate-primitive-function.code(%oop %r199, %oop %r201, %oop %r202, %oop %r203)
	%r205 = load %oop, %oop* %t2
	%r206 = getelementptr %"<string>", %"<string>"* @m_ostr90, i32 0, i32 1
	%r207 = bitcast %word* %r206 to %oop
	%r208 = bitcast %"<target-function>"* @"m_set-oop-at/evaluator-stub" to %oop
	%r209 = inttoptr %word 0 to %oop
	%r210 = call %oop @m_instantiate-primitive-function.code(%oop %r205, %oop %r207, %oop %r208, %oop %r209)
	%r211 = load %oop, %oop* %t2
	%r212 = getelementptr %"<string>", %"<string>"* @m_ostr92, i32 0, i32 1
	%r213 = bitcast %word* %r212 to %oop
	%r214 = bitcast %"<target-function>"* @"m_oop-at/evaluator-stub" to %oop
	%r215 = inttoptr %word 0 to %oop
	%r216 = call %oop @m_instantiate-primitive-function.code(%oop %r211, %oop %r213, %oop %r214, %oop %r215)
	%r217 = load %oop, %oop* %t2
	%r218 = getelementptr %"<string>", %"<string>"* @m_ostr94, i32 0, i32 1
	%r219 = bitcast %word* %r218 to %oop
	%r220 = bitcast %"<target-function>"* @"m_set-cdr/evaluator-stub" to %oop
	%r221 = inttoptr %word 0 to %oop
	%r222 = call %oop @m_instantiate-primitive-function.code(%oop %r217, %oop %r219, %oop %r220, %oop %r221)
	%r223 = load %oop, %oop* %t2
	%r224 = getelementptr %"<string>", %"<string>"* @m_ostr96, i32 0, i32 1
	%r225 = bitcast %word* %r224 to %oop
	%r226 = bitcast %"<target-function>"* @"m_set-car/evaluator-stub" to %oop
	%r227 = inttoptr %word 0 to %oop
	%r228 = call %oop @m_instantiate-primitive-function.code(%oop %r223, %oop %r225, %oop %r226, %oop %r227)
	%r229 = load %oop, %oop* %t2
	%r230 = getelementptr %"<string>", %"<string>"* @m_ostr98, i32 0, i32 1
	%r231 = bitcast %word* %r230 to %oop
	%r232 = bitcast %"<target-function>"* @"m_array?/evaluator-stub" to %oop
	%r233 = inttoptr %word 0 to %oop
	%r234 = call %oop @m_instantiate-primitive-function.code(%oop %r229, %oop %r231, %oop %r232, %oop %r233)
	%r235 = load %oop, %oop* %t2
	%r236 = getelementptr %"<string>", %"<string>"* @m_ostr100, i32 0, i32 1
	%r237 = bitcast %word* %r236 to %oop
	%r238 = bitcast %"<target-function>"* @"m_pair?/evaluator-stub" to %oop
	%r239 = inttoptr %word 0 to %oop
	%r240 = call %oop @m_instantiate-primitive-function.code(%oop %r235, %oop %r237, %oop %r238, %oop %r239)
	%r241 = load %oop, %oop* %t2
	%r242 = getelementptr %"<string>", %"<string>"* @m_ostr102, i32 0, i32 1
	%r243 = bitcast %word* %r242 to %oop
	%r244 = bitcast %"<target-function>"* @"m_symbol?/evaluator-stub" to %oop
	%r245 = inttoptr %word 0 to %oop
	%r246 = call %oop @m_instantiate-primitive-function.code(%oop %r241, %oop %r243, %oop %r244, %oop %r245)
	%r247 = load %oop, %oop* %t2
	%r248 = getelementptr %"<string>", %"<string>"* @m_ostr104, i32 0, i32 1
	%r249 = bitcast %word* %r248 to %oop
	%r250 = bitcast %"<target-function>"* @"m_string?/evaluator-stub" to %oop
	%r251 = inttoptr %word 0 to %oop
	%r252 = call %oop @m_instantiate-primitive-function.code(%oop %r247, %oop %r249, %oop %r250, %oop %r251)
	%r253 = load %oop, %oop* %t2
	%r254 = getelementptr %"<string>", %"<string>"* @m_ostr106, i32 0, i32 1
	%r255 = bitcast %word* %r254 to %oop
	%r256 = bitcast %"<target-function>"* @"m_type-of/evaluator-stub" to %oop
	%r257 = inttoptr %word 0 to %oop
	%r258 = call %oop @m_instantiate-primitive-function.code(%oop %r253, %oop %r255, %oop %r256, %oop %r257)
	%r259 = load %oop, %oop* %t2
	%r260 = getelementptr %"<string>", %"<string>"* @m_ostr108, i32 0, i32 1
	%r261 = bitcast %word* %r260 to %oop
	%r262 = bitcast %"<target-function>"* @"m_warn/evaluator-stub" to %oop
	%r263 = inttoptr %word 0 to %oop
	%r264 = call %oop @m_instantiate-primitive-function.code(%oop %r259, %oop %r261, %oop %r262, %oop %r263)
	%r265 = load %oop, %oop* %t2
	%r266 = getelementptr %"<string>", %"<string>"* @m_ostr110, i32 0, i32 1
	%r267 = bitcast %word* %r266 to %oop
	%r268 = bitcast %"<target-function>"* @"m_exit/evaluator-stub" to %oop
	%r269 = inttoptr %word 0 to %oop
	%r270 = call %oop @m_instantiate-primitive-function.code(%oop %r265, %oop %r267, %oop %r268, %oop %r269)
	%r271 = load %oop, %oop* %t2
	%r272 = getelementptr %"<string>", %"<string>"* @m_ostr112, i32 0, i32 1
	%r273 = bitcast %word* %r272 to %oop
	%r274 = bitcast %"<target-function>"* @"m_=/evaluator-stub" to %oop
	%r275 = inttoptr %word 0 to %oop
	%r276 = call %oop @m_instantiate-primitive-function.code(%oop %r271, %oop %r273, %oop %r274, %oop %r275)
	%r277 = load %oop, %oop* %t2
	%r278 = getelementptr %"<string>", %"<string>"* @m_ostr114, i32 0, i32 1
	%r279 = bitcast %word* %r278 to %oop
	%r280 = bitcast %"<target-function>"* @"m_>/evaluator-stub" to %oop
	%r281 = inttoptr %word 0 to %oop
	%r282 = call %oop @m_instantiate-primitive-function.code(%oop %r277, %oop %r279, %oop %r280, %oop %r281)
	%r283 = load %oop, %oop* %t2
	%r284 = getelementptr %"<string>", %"<string>"* @m_ostr116, i32 0, i32 1
	%r285 = bitcast %word* %r284 to %oop
	%r286 = bitcast %"<target-function>"* @"m_>=/evaluator-stub" to %oop
	%r287 = inttoptr %word 0 to %oop
	%r288 = call %oop @m_instantiate-primitive-function.code(%oop %r283, %oop %r285, %oop %r286, %oop %r287)
	%r289 = load %oop, %oop* %t2
	%r290 = getelementptr %"<string>", %"<string>"* @m_ostr118, i32 0, i32 1
	%r291 = bitcast %word* %r290 to %oop
	%r292 = bitcast %"<target-function>"* @"m_<=/evaluator-stub" to %oop
	%r293 = inttoptr %word 0 to %oop
	%r294 = call %oop @m_instantiate-primitive-function.code(%oop %r289, %oop %r291, %oop %r292, %oop %r293)
	%r295 = load %oop, %oop* %t2
	%r296 = getelementptr %"<string>", %"<string>"* @m_ostr120, i32 0, i32 1
	%r297 = bitcast %word* %r296 to %oop
	%r298 = bitcast %"<target-function>"* @"m_</evaluator-stub" to %oop
	%r299 = inttoptr %word 0 to %oop
	%r300 = call %oop @m_instantiate-primitive-function.code(%oop %r295, %oop %r297, %oop %r298, %oop %r299)
	%r301 = load %oop, %oop* %t2
	%r302 = getelementptr %"<string>", %"<string>"* @m_ostr122, i32 0, i32 1
	%r303 = bitcast %word* %r302 to %oop
	%r304 = bitcast %"<target-function>"* @"m_bitwise-shift/evaluator-stub" to %oop
	%r305 = inttoptr %word 0 to %oop
	%r306 = call %oop @m_instantiate-primitive-function.code(%oop %r301, %oop %r303, %oop %r304, %oop %r305)
	%r307 = load %oop, %oop* %t2
	%r308 = getelementptr %"<string>", %"<string>"* @m_ostr124, i32 0, i32 1
	%r309 = bitcast %word* %r308 to %oop
	%r310 = bitcast %"<target-function>"* @"m_bitwise-not/evaluator-stub" to %oop
	%r311 = inttoptr %word 0 to %oop
	%r312 = call %oop @m_instantiate-primitive-function.code(%oop %r307, %oop %r309, %oop %r310, %oop %r311)
	%r313 = load %oop, %oop* %t2
	%r314 = getelementptr %"<string>", %"<string>"* @m_ostr126, i32 0, i32 1
	%r315 = bitcast %word* %r314 to %oop
	%r316 = bitcast %"<target-function>"* @"m_bitwise-xor/evaluator-stub" to %oop
	%r317 = inttoptr %word 0 to %oop
	%r318 = call %oop @m_instantiate-primitive-function.code(%oop %r313, %oop %r315, %oop %r316, %oop %r317)
	%r319 = load %oop, %oop* %t2
	%r320 = getelementptr %"<string>", %"<string>"* @m_ostr128, i32 0, i32 1
	%r321 = bitcast %word* %r320 to %oop
	%r322 = bitcast %"<target-function>"* @"m_bitwise-or/evaluator-stub" to %oop
	%r323 = inttoptr %word 0 to %oop
	%r324 = call %oop @m_instantiate-primitive-function.code(%oop %r319, %oop %r321, %oop %r322, %oop %r323)
	%r325 = load %oop, %oop* %t2
	%r326 = getelementptr %"<string>", %"<string>"* @m_ostr130, i32 0, i32 1
	%r327 = bitcast %word* %r326 to %oop
	%r328 = bitcast %"<target-function>"* @"m_bitwise-and/evaluator-stub" to %oop
	%r329 = inttoptr %word 0 to %oop
	%r330 = call %oop @m_instantiate-primitive-function.code(%oop %r325, %oop %r327, %oop %r328, %oop %r329)
	%r331 = load %oop, %oop* %t2
	%r332 = getelementptr %"<string>", %"<string>"* @m_ostr132, i32 0, i32 1
	%r333 = bitcast %word* %r332 to %oop
	%r334 = bitcast %"<target-function>"* @"m_*/evaluator-stub" to %oop
	%r335 = inttoptr %word 0 to %oop
	%r336 = call %oop @m_instantiate-primitive-function.code(%oop %r331, %oop %r333, %oop %r334, %oop %r335)
	%r337 = load %oop, %oop* %t2
	%r338 = getelementptr %"<string>", %"<string>"* @m_ostr134, i32 0, i32 1
	%r339 = bitcast %word* %r338 to %oop
	%r340 = bitcast %"<target-function>"* @"m_//evaluator-stub" to %oop
	%r341 = inttoptr %word 0 to %oop
	%r342 = call %oop @m_instantiate-primitive-function.code(%oop %r337, %oop %r339, %oop %r340, %oop %r341)
	%r343 = load %oop, %oop* %t2
	%r344 = getelementptr %"<string>", %"<string>"* @m_ostr136, i32 0, i32 1
	%r345 = bitcast %word* %r344 to %oop
	%r346 = bitcast %"<target-function>"* @"m_+/evaluator-stub" to %oop
	%r347 = inttoptr %word 0 to %oop
	%r348 = call %oop @m_instantiate-primitive-function.code(%oop %r343, %oop %r345, %oop %r346, %oop %r347)
	%r349 = load %oop, %oop* %t2
	%r350 = getelementptr %"<string>", %"<string>"* @m_ostr138, i32 0, i32 1
	%r351 = bitcast %word* %r350 to %oop
	%r352 = bitcast %"<target-function>"* @"m_-/evaluator-stub" to %oop
	%r353 = inttoptr %word 0 to %oop
	%r354 = call %oop @m_instantiate-primitive-function.code(%oop %r349, %oop %r351, %oop %r352, %oop %r353)
	%r355 = load %oop, %oop* %t2
	%r356 = getelementptr %"<string>", %"<string>"* @m_ostr140, i32 0, i32 1
	%r357 = bitcast %word* %r356 to %oop
	%r358 = bitcast %"<target-function>"* @"m_not/evaluator-stub" to %oop
	%r359 = inttoptr %word 0 to %oop
	%r360 = call %oop @m_instantiate-primitive-function.code(%oop %r355, %oop %r357, %oop %r358, %oop %r359)
	%r361 = load %oop, %oop* %t2
	%r362 = getelementptr %"<string>", %"<string>"* @m_ostr142, i32 0, i32 1
	%r363 = bitcast %word* %r362 to %oop
	%r364 = bitcast %"<target-function>"* @"m_quote/evaluator-stub" to %oop
	%r365 = inttoptr %word 1 to %oop
	%r366 = call %oop @m_instantiate-primitive-function.code(%oop %r361, %oop %r363, %oop %r364, %oop %r365)
	%r367 = load %oop, %oop* %t2
	%r368 = getelementptr %"<string>", %"<string>"* @m_ostr144, i32 0, i32 1
	%r369 = bitcast %word* %r368 to %oop
	%r370 = bitcast %"<target-function>"* @"m_and/evaluator-stub" to %oop
	%r371 = inttoptr %word 1 to %oop
	%r372 = call %oop @m_instantiate-primitive-function.code(%oop %r367, %oop %r369, %oop %r370, %oop %r371)
	%r373 = load %oop, %oop* %t2
	%r374 = getelementptr %"<string>", %"<string>"* @m_ostr146, i32 0, i32 1
	%r375 = bitcast %word* %r374 to %oop
	%r376 = bitcast %"<target-function>"* @"m_or/evaluator-stub" to %oop
	%r377 = inttoptr %word 1 to %oop
	%r378 = call %oop @m_instantiate-primitive-function.code(%oop %r373, %oop %r375, %oop %r376, %oop %r377)
	%r379 = load %oop, %oop* %t2
	%r380 = getelementptr %"<string>", %"<string>"* @m_ostr148, i32 0, i32 1
	%r381 = bitcast %word* %r380 to %oop
	%r382 = bitcast %"<target-function>"* @"m_if/evaluator-stub" to %oop
	%r383 = inttoptr %word 1 to %oop
	%r384 = call %oop @m_instantiate-primitive-function.code(%oop %r379, %oop %r381, %oop %r382, %oop %r383)
	%r385 = load %oop, %oop* %t2
	%r386 = getelementptr %"<string>", %"<string>"* @m_ostr150, i32 0, i32 1
	%r387 = bitcast %word* %r386 to %oop
	%r388 = bitcast %"<target-function>"* @"m_while/evaluator-stub" to %oop
	%r389 = inttoptr %word 1 to %oop
	%r390 = call %oop @m_instantiate-primitive-function.code(%oop %r385, %oop %r387, %oop %r388, %oop %r389)
	%r391 = load %oop, %oop* %t2
	%r392 = getelementptr %"<string>", %"<string>"* @m_ostr152, i32 0, i32 1
	%r393 = bitcast %word* %r392 to %oop
	%r394 = bitcast %"<target-function>"* @"m_set/evaluator-stub" to %oop
	%r395 = inttoptr %word 1 to %oop
	%r396 = call %oop @m_instantiate-primitive-function.code(%oop %r391, %oop %r393, %oop %r394, %oop %r395)
	%r397 = load %oop, %oop* %t2
	%r398 = getelementptr %"<string>", %"<string>"* @m_ostr154, i32 0, i32 1
	%r399 = bitcast %word* %r398 to %oop
	%r400 = bitcast %"<target-function>"* @"m_let/evaluator-stub" to %oop
	%r401 = inttoptr %word 1 to %oop
	%r402 = call %oop @m_instantiate-primitive-function.code(%oop %r397, %oop %r399, %oop %r400, %oop %r401)
	%r403 = load %oop, %oop* %t2
	%r404 = getelementptr %"<string>", %"<string>"* @m_ostr156, i32 0, i32 1
	%r405 = bitcast %word* %r404 to %oop
	%r406 = bitcast %"<target-function>"* @"m_lambda/evaluator-stub" to %oop
	%r407 = inttoptr %word 1 to %oop
	%r408 = call %oop @m_instantiate-primitive-function.code(%oop %r403, %oop %r405, %oop %r406, %oop %r407)
	%r409 = load %oop, %oop* %t2
	%r410 = getelementptr %"<string>", %"<string>"* @m_ostr158, i32 0, i32 1
	%r411 = bitcast %word* %r410 to %oop
	%r412 = bitcast %"<target-function>"* @"m_eval-in-module/evaluator-stub" to %oop
	%r413 = inttoptr %word 0 to %oop
	%r414 = call %oop @m_instantiate-primitive-function.code(%oop %r409, %oop %r411, %oop %r412, %oop %r413)
	%r415 = load %oop, %oop* %t2
	%r416 = getelementptr %"<string>", %"<string>"* @m_ostr160, i32 0, i32 1
	%r417 = bitcast %word* %r416 to %oop
	%r418 = bitcast %"<target-function>"* @"m_eval/evaluator-stub" to %oop
	%r419 = inttoptr %word 0 to %oop
	%r420 = call %oop @m_instantiate-primitive-function.code(%oop %r415, %oop %r417, %oop %r418, %oop %r419)
	%r421 = load %oop, %oop* %t2
	%r422 = getelementptr %"<string>", %"<string>"* @m_ostr162, i32 0, i32 1
	%r423 = bitcast %word* %r422 to %oop
	%r424 = bitcast %"<target-function>"* @"m_define/evaluator-stub" to %oop
	%r425 = inttoptr %word 1 to %oop
	%r426 = call %oop @m_instantiate-primitive-function.code(%oop %r421, %oop %r423, %oop %r424, %oop %r425)
	%r427 = load %oop, %oop* %t2
	%r428 = getelementptr %"<string>", %"<string>"* @m_ostr164, i32 0, i32 1
	%r429 = bitcast %word* %r428 to %oop
	%r430 = bitcast %"<target-function>"* @"m_load/evaluator-stub" to %oop
	%r431 = inttoptr %word 0 to %oop
	%r432 = call %oop @m_instantiate-primitive-function.code(%oop %r427, %oop %r429, %oop %r430, %oop %r431)
	%r433 = load %oop, %oop* %t2
	%r434 = getelementptr %"<string>", %"<string>"* @m_ostr166, i32 0, i32 1
	%r435 = bitcast %word* %r434 to %oop
	%r436 = bitcast %"<target-function>"* @"m_file-stream/evaluator-stub" to %oop
	%r437 = inttoptr %word 0 to %oop
	%r438 = call %oop @m_instantiate-primitive-function.code(%oop %r433, %oop %r435, %oop %r436, %oop %r437)
	%r439 = load %oop, %oop* %t2
	%r440 = getelementptr %"<string>", %"<string>"* @m_ostr168, i32 0, i32 1
	%r441 = bitcast %word* %r440 to %oop
	%r442 = bitcast %"<target-function>"* @"m_file-write-character/evaluator-stub" to %oop
	%r443 = inttoptr %word 0 to %oop
	%r444 = call %oop @m_instantiate-primitive-function.code(%oop %r439, %oop %r441, %oop %r442, %oop %r443)
	%r445 = load %oop, %oop* %t2
	%r446 = getelementptr %"<string>", %"<string>"* @m_ostr170, i32 0, i32 1
	%r447 = bitcast %word* %r446 to %oop
	%r448 = bitcast %"<target-function>"* @"m_file-read-character/evaluator-stub" to %oop
	%r449 = inttoptr %word 0 to %oop
	%r450 = call %oop @m_instantiate-primitive-function.code(%oop %r445, %oop %r447, %oop %r448, %oop %r449)
	%r451 = load %oop, %oop* %t2
	%r452 = getelementptr %"<string>", %"<string>"* @m_ostr172, i32 0, i32 1
	%r453 = bitcast %word* %r452 to %oop
	%r454 = bitcast %"<target-function>"* @"m_file-close/evaluator-stub" to %oop
	%r455 = inttoptr %word 0 to %oop
	%r456 = call %oop @m_instantiate-primitive-function.code(%oop %r451, %oop %r453, %oop %r454, %oop %r455)
	%r457 = load %oop, %oop* %t2
	%r458 = getelementptr %"<string>", %"<string>"* @m_ostr174, i32 0, i32 1
	%r459 = bitcast %word* %r458 to %oop
	%r460 = bitcast %"<target-function>"* @"m_file-open/evaluator-stub" to %oop
	%r461 = inttoptr %word 0 to %oop
	%r462 = call %oop @m_instantiate-primitive-function.code(%oop %r457, %oop %r459, %oop %r460, %oop %r461)
	%r463 = load %oop, %oop* %t2
	%r464 = getelementptr %"<string>", %"<string>"* @m_ostr176, i32 0, i32 1
	%r465 = bitcast %word* %r464 to %oop
	%r466 = bitcast %"<target-function>"* @"m_set-working-directory/evaluator-stub" to %oop
	%r467 = inttoptr %word 0 to %oop
	%r468 = call %oop @m_instantiate-primitive-function.code(%oop %r463, %oop %r465, %oop %r466, %oop %r467)
	%r469 = load %oop, %oop* %t2
	%r470 = getelementptr %"<string>", %"<string>"* @m_ostr178, i32 0, i32 1
	%r471 = bitcast %word* %r470 to %oop
	%r472 = bitcast %"<target-function>"* @"m_module/evaluator-stub" to %oop
	%r473 = inttoptr %word 0 to %oop
	%r474 = call %oop @m_instantiate-primitive-function.code(%oop %r469, %oop %r471, %oop %r472, %oop %r473)
	%r475 = load %oop, %oop* %t2
	%r476 = getelementptr %"<string>", %"<string>"* @m_ostr180, i32 0, i32 1
	%r477 = bitcast %word* %r476 to %oop
	%r478 = bitcast %"<target-function>"* @"m_encode/evaluator-stub" to %oop
	%r479 = inttoptr %word 0 to %oop
	%r480 = call %oop @m_instantiate-primitive-function.code(%oop %r475, %oop %r477, %oop %r478, %oop %r479)
	%r481 = load %oop, %oop* %t2
	%r482 = getelementptr %"<string>", %"<string>"* @m_ostr182, i32 0, i32 1
	%r483 = bitcast %word* %r482 to %oop
	%r484 = bitcast %"<target-function>"* @"m_expand/evaluator-stub" to %oop
	%r485 = inttoptr %word 0 to %oop
	%r486 = call %oop @m_instantiate-primitive-function.code(%oop %r481, %oop %r483, %oop %r484, %oop %r485)
	%r487 = load %oop, %oop* %t2
	%r488 = getelementptr %"<string>", %"<string>"* @m_ostr184, i32 0, i32 1
	%r489 = bitcast %word* %r488 to %oop
	%r490 = bitcast %"<target-function>"* @"m_apply/evaluator-stub" to %oop
	%r491 = inttoptr %word 0 to %oop
	%r492 = call %oop @m_instantiate-primitive-function.code(%oop %r487, %oop %r489, %oop %r490, %oop %r491)
	%r493 = load %oop, %oop* %t2
	%r494 = getelementptr %"<string>", %"<string>"* @m_ostr186, i32 0, i32 1
	%r495 = bitcast %word* %r494 to %oop
	%r496 = bitcast %"<target-function>"* @"m_print-all/evaluator-stub" to %oop
	%r497 = inttoptr %word 0 to %oop
	%r498 = call %oop @m_instantiate-primitive-function.code(%oop %r493, %oop %r495, %oop %r496, %oop %r497)
	%r499 = load %oop, %oop* %t2
	%r500 = getelementptr %"<string>", %"<string>"* @m_ostr188, i32 0, i32 1
	%r501 = bitcast %word* %r500 to %oop
	%r502 = bitcast %"<target-function>"* @"m_dump-all/evaluator-stub" to %oop
	%r503 = inttoptr %word 0 to %oop
	%r504 = call %oop @m_instantiate-primitive-function.code(%oop %r499, %oop %r501, %oop %r502, %oop %r503)
	%r505 = load %oop, %oop* %t2
	%r506 = getelementptr %"<string>", %"<string>"* @m_ostr190, i32 0, i32 1
	%r507 = bitcast %word* %r506 to %oop
	%r508 = bitcast %"<target-function>"* @"m_print/evaluator-stub" to %oop
	%r509 = inttoptr %word 0 to %oop
	%r510 = call %oop @m_instantiate-primitive-function.code(%oop %r505, %oop %r507, %oop %r508, %oop %r509)
	%r511 = load %oop, %oop* %t2
	%r512 = getelementptr %"<string>", %"<string>"* @m_ostr192, i32 0, i32 1
	%r513 = bitcast %word* %r512 to %oop
	%r514 = bitcast %"<target-function>"* @"m_dump/evaluator-stub" to %oop
	%r515 = inttoptr %word 0 to %oop
	%r516 = call %oop @m_instantiate-primitive-function.code(%oop %r511, %oop %r513, %oop %r514, %oop %r515)
	%r517 = load %oop, %oop* %t2
	%r518 = getelementptr %"<string>", %"<string>"* @m_ostr194, i32 0, i32 1
	%r519 = bitcast %word* %r518 to %oop
	%r520 = bitcast %"<target-function>"* @"m_read/evaluator-stub" to %oop
	%r521 = inttoptr %word 0 to %oop
	%r522 = call %oop @m_instantiate-primitive-function.code(%oop %r517, %oop %r519, %oop %r520, %oop %r521)
	%r523 = load %oop, %oop* %t2
	%r524 = getelementptr %"<string>", %"<string>"* @m_ostr196, i32 0, i32 1
	%r525 = bitcast %word* %r524 to %oop
	%r526 = bitcast %"<target-function>"* @"m_set-current-module/evaluator-stub" to %oop
	%r527 = inttoptr %word 0 to %oop
	%r528 = call %oop @m_instantiate-primitive-function.code(%oop %r523, %oop %r525, %oop %r526, %oop %r527)
	%r529 = load %oop, %oop* %t2
	%r530 = getelementptr %"<string>", %"<string>"* @m_ostr198, i32 0, i32 1
	%r531 = bitcast %word* %r530 to %oop
	%r532 = bitcast %"<target-function>"* @"m_current-module/evaluator-stub" to %oop
	%r533 = inttoptr %word 0 to %oop
	%r534 = call %oop @m_instantiate-primitive-function.code(%oop %r529, %oop %r531, %oop %r532, %oop %r533)
	%r535 = load %oop, %oop* %t2
	%r536 = getelementptr %"<string>", %"<string>"* @m_ostr200, i32 0, i32 1
	%r537 = bitcast %word* %r536 to %oop
	%r538 = bitcast %"<target-function>"* @"m_environment-define/evaluator-stub" to %oop
	%r539 = inttoptr %word 0 to %oop
	%r540 = call %oop @m_instantiate-primitive-function.code(%oop %r535, %oop %r537, %oop %r538, %oop %r539)
	%r541 = load %oop, %oop* %t2
	%r542 = getelementptr %"<string>", %"<string>"* @m_ostr202, i32 0, i32 1
	%r543 = bitcast %word* %r542 to %oop
	%r544 = bitcast %"<target-function>"* @"m_defined?/evaluator-stub" to %oop
	%r545 = inttoptr %word 0 to %oop
	%r546 = call %oop @m_instantiate-primitive-function.code(%oop %r541, %oop %r543, %oop %r544, %oop %r545)
	%r547 = load %oop, %oop* %t2
	%r548 = getelementptr %"<string>", %"<string>"* @m_ostr204, i32 0, i32 1
	%r549 = bitcast %word* %r548 to %oop
	%r550 = bitcast %"<target-function>"* @"m_symbol->string/evaluator-stub" to %oop
	%r551 = inttoptr %word 0 to %oop
	%r552 = call %oop @m_instantiate-primitive-function.code(%oop %r547, %oop %r549, %oop %r550, %oop %r551)
	%r553 = load %oop, %oop* %t2
	%r554 = getelementptr %"<string>", %"<string>"* @m_ostr206, i32 0, i32 1
	%r555 = bitcast %word* %r554 to %oop
	%r556 = bitcast %"<target-function>"* @"m_string->symbol/evaluator-stub" to %oop
	%r557 = inttoptr %word 0 to %oop
	%r558 = call %oop @m_instantiate-primitive-function.code(%oop %r553, %oop %r555, %oop %r556, %oop %r557)
	%r559 = load %oop, %oop* %t2
	%r560 = getelementptr %"<string>", %"<string>"* @m_ostr208, i32 0, i32 1
	%r561 = bitcast %word* %r560 to %oop
	%r562 = bitcast %"<target-function>"* @"m_string-insert-all/evaluator-stub" to %oop
	%r563 = inttoptr %word 0 to %oop
	%r564 = call %oop @m_instantiate-primitive-function.code(%oop %r559, %oop %r561, %oop %r562, %oop %r563)
	%r565 = load %oop, %oop* %t2
	%r566 = getelementptr %"<string>", %"<string>"* @m_ostr210, i32 0, i32 1
	%r567 = bitcast %word* %r566 to %oop
	%r568 = bitcast %"<target-function>"* @"m_environment/evaluator-stub" to %oop
	%r569 = inttoptr %word 0 to %oop
	%r570 = call %oop @m_instantiate-primitive-function.code(%oop %r565, %oop %r567, %oop %r568, %oop %r569)
	%r571 = load %oop, %oop* %t2
	%r572 = getelementptr %"<string>", %"<string>"* @m_ostr212, i32 0, i32 1
	%r573 = bitcast %word* %r572 to %oop
	%r574 = bitcast %"<target-function>"* @"m_variable/evaluator-stub" to %oop
	%r575 = inttoptr %word 0 to %oop
	%r576 = call %oop @m_instantiate-primitive-function.code(%oop %r571, %oop %r573, %oop %r574, %oop %r575)
	%r577 = load %oop, %oop* %t2
	%r578 = getelementptr %"<string>", %"<string>"* @m_ostr214, i32 0, i32 1
	%r579 = bitcast %word* %r578 to %oop
	%r580 = bitcast %"<target-function>"* @"m_fixed/evaluator-stub" to %oop
	%r581 = inttoptr %word 0 to %oop
	%r582 = call %oop @m_instantiate-primitive-function.code(%oop %r577, %oop %r579, %oop %r580, %oop %r581)
	%r583 = load %oop, %oop* %t2
	%r584 = getelementptr %"<string>", %"<string>"* @m_ostr216, i32 0, i32 1
	%r585 = bitcast %word* %r584 to %oop
	%r586 = bitcast %"<target-function>"* @"m_form/evaluator-stub" to %oop
	%r587 = inttoptr %word 0 to %oop
	%r588 = call %oop @m_instantiate-primitive-function.code(%oop %r583, %oop %r585, %oop %r586, %oop %r587)
	%r589 = load %oop, %oop* %t2
	%r590 = getelementptr %"<string>", %"<string>"* @m_ostr218, i32 0, i32 1
	%r591 = bitcast %word* %r590 to %oop
	%r592 = bitcast %"<target-function>"* @"m_array/evaluator-stub" to %oop
	%r593 = inttoptr %word 0 to %oop
	%r594 = call %oop @m_instantiate-primitive-function.code(%oop %r589, %oop %r591, %oop %r592, %oop %r593)
	%r595 = load %oop, %oop* %t2
	%r596 = getelementptr %"<string>", %"<string>"* @m_ostr220, i32 0, i32 1
	%r597 = bitcast %word* %r596 to %oop
	%r598 = bitcast %"<target-function>"* @"m_string/evaluator-stub" to %oop
	%r599 = inttoptr %word 0 to %oop
	%r600 = call %oop @m_instantiate-primitive-function.code(%oop %r595, %oop %r597, %oop %r598, %oop %r599)
	%r601 = load %oop, %oop* %t2
	%r602 = getelementptr %"<string>", %"<string>"* @m_ostr222, i32 0, i32 1
	%r603 = bitcast %word* %r602 to %oop
	%r604 = bitcast %"<target-function>"* @"m_cons/evaluator-stub" to %oop
	%r605 = inttoptr %word 0 to %oop
	%r606 = call %oop @m_instantiate-primitive-function.code(%oop %r601, %oop %r603, %oop %r604, %oop %r605)
	%r607 = load %oop, %oop* %t2
	%r608 = getelementptr %"<string>", %"<string>"* @m_ostr224, i32 0, i32 1
	%r609 = bitcast %word* %r608 to %oop
	%r610 = bitcast %"<target-function>"* @"m_allocate-data/evaluator-stub" to %oop
	%r611 = inttoptr %word 0 to %oop
	%r612 = call %oop @m_instantiate-primitive-function.code(%oop %r607, %oop %r609, %oop %r610, %oop %r611)
	%r613 = load %oop, %oop* %t2
	%r614 = getelementptr %"<string>", %"<string>"* @m_ostr226, i32 0, i32 1
	%r615 = bitcast %word* %r614 to %oop
	%r616 = bitcast %"<target-function>"* @"m_allocate/evaluator-stub" to %oop
	%r617 = inttoptr %word 0 to %oop
	%r618 = call %oop @m_instantiate-primitive-function.code(%oop %r613, %oop %r615, %oop %r616, %oop %r617)
	%r619 = load %oop, %oop* %t2
	%r620 = getelementptr %"<string>", %"<string>"* @m_ostr228, i32 0, i32 1
	%r621 = bitcast %word* %r620 to %oop
	%r622 = bitcast %"<target-function>"* @"m_cdr/evaluator-stub" to %oop
	%r623 = inttoptr %word 0 to %oop
	%r624 = call %oop @m_instantiate-primitive-function.code(%oop %r619, %oop %r621, %oop %r622, %oop %r623)
	%r625 = load %oop, %oop* %t2
	%r626 = getelementptr %"<string>", %"<string>"* @m_ostr230, i32 0, i32 1
	%r627 = bitcast %word* %r626 to %oop
	%r628 = bitcast %"<target-function>"* @"m_car/evaluator-stub" to %oop
	%r629 = inttoptr %word 0 to %oop
	%r630 = call %oop @m_instantiate-primitive-function.code(%oop %r625, %oop %r627, %oop %r628, %oop %r629)
	%r631 = load %oop, %oop* %t2
	%r632 = getelementptr %"<string>", %"<string>"* @m_ostr232, i32 0, i32 1
	%r633 = bitcast %word* %r632 to %oop
	%r634 = bitcast %"<target-function>"* @"m_abort/evaluator-stub" to %oop
	%r635 = inttoptr %word 0 to %oop
	%r636 = call %oop @m_instantiate-primitive-function.code(%oop %r631, %oop %r633, %oop %r634, %oop %r635)
	%r637 = inttoptr %word 1 to %oop
	%r638 = load %oop, %oop* @"m_symbol/quote"
	%r639 = load %oop, %oop* %t1
	%r640 = call %oop @"m_defined?.code"(%oop %r638, %oop %r639)
	%r644 = bitcast %oop %r640 to [0 x %oop]*
	%r643 = ptrtoint %oop %r637 to %word
	%r642 = getelementptr [0 x %oop], [0 x %oop]* %r644, %word 0, %word %r643
	%r641 = load %oop, %oop* %r642
	store %oop %r641, %oop* @"m_fixed-primitive-function/quote"
	%r645 = inttoptr %word 1 to %oop
	%r646 = load %oop, %oop* @"m_symbol/lambda"
	%r647 = load %oop, %oop* %t1
	%r648 = call %oop @"m_defined?.code"(%oop %r646, %oop %r647)
	%r652 = bitcast %oop %r648 to [0 x %oop]*
	%r651 = ptrtoint %oop %r645 to %word
	%r650 = getelementptr [0 x %oop], [0 x %oop]* %r652, %word 0, %word %r651
	%r649 = load %oop, %oop* %r650
	store %oop %r649, %oop* @"m_fixed-primitive-function/lambda"
	%r653 = inttoptr %word 1 to %oop
	%r654 = load %oop, %oop* @"m_symbol/let"
	%r655 = load %oop, %oop* %t1
	%r656 = call %oop @"m_defined?.code"(%oop %r654, %oop %r655)
	%r660 = bitcast %oop %r656 to [0 x %oop]*
	%r659 = ptrtoint %oop %r653 to %word
	%r658 = getelementptr [0 x %oop], [0 x %oop]* %r660, %word 0, %word %r659
	%r657 = load %oop, %oop* %r658
	store %oop %r657, %oop* @"m_fixed-primitive-function/let"
	%r661 = inttoptr %word 1 to %oop
	%r662 = load %oop, %oop* @"m_symbol/define"
	%r663 = load %oop, %oop* %t1
	%r664 = call %oop @"m_defined?.code"(%oop %r662, %oop %r663)
	%r668 = bitcast %oop %r664 to [0 x %oop]*
	%r667 = ptrtoint %oop %r661 to %word
	%r666 = getelementptr [0 x %oop], [0 x %oop]* %r668, %word 0, %word %r667
	%r665 = load %oop, %oop* %r666
	store %oop %r665, %oop* @"m_fixed-primitive-function/define"
	%r669 = inttoptr %word 1 to %oop
	%r670 = load %oop, %oop* @"m_symbol/set"
	%r671 = load %oop, %oop* %t1
	%r672 = call %oop @"m_defined?.code"(%oop %r670, %oop %r671)
	%r676 = bitcast %oop %r672 to [0 x %oop]*
	%r675 = ptrtoint %oop %r669 to %word
	%r674 = getelementptr [0 x %oop], [0 x %oop]* %r676, %word 0, %word %r675
	%r673 = load %oop, %oop* %r674
	store %oop %r673, %oop* @"m_fixed-primitive-function/set"
	%r677 = inttoptr %word 0 to %oop
	store %oop %r677, %oop* %t2
	%r678 = inttoptr %word 1 to %oop
	store %oop %r678, %oop* %t3
	%r679 = load %oop, %oop* @"m_fixed-primitive-function/quote"
	%r680 = call %oop @m_type-of.code(%oop %r679)
	%r681 = inttoptr %word 8 to %oop
	%r685 = ptrtoint %oop %r681 to %word
	%r684 = ptrtoint %oop %r680 to %word
	%r683 = icmp eq %word %r685, %r684
	%r682 = inttoptr i1 %r683 to %oop
	store %oop %r682, %oop* %t3
	%r686 = inttoptr %word 0 to %oop
	%r690 = ptrtoint %oop %r686 to %word
	%r689 = ptrtoint %oop %r682 to %word
	%r688 = icmp eq %word %r690, %r689
	%r687 = inttoptr i1 %r688 to %oop
	%r692 = ptrtoint %oop %r687 to %word
	%r691 = icmp ne %word %r692, 0
	br i1 %r691, label %L5, label %L6
L6:
	%r693 = load %oop, %oop* @"m_fixed-primitive-function/lambda"
	%r694 = call %oop @m_type-of.code(%oop %r693)
	%r695 = inttoptr %word 8 to %oop
	%r699 = ptrtoint %oop %r695 to %word
	%r698 = ptrtoint %oop %r694 to %word
	%r697 = icmp eq %word %r699, %r698
	%r696 = inttoptr i1 %r697 to %oop
	store %oop %r696, %oop* %t3
	%r700 = inttoptr %word 0 to %oop
	%r704 = ptrtoint %oop %r700 to %word
	%r703 = ptrtoint %oop %r696 to %word
	%r702 = icmp eq %word %r704, %r703
	%r701 = inttoptr i1 %r702 to %oop
	%r706 = ptrtoint %oop %r701 to %word
	%r705 = icmp ne %word %r706, 0
	br i1 %r705, label %L5, label %L7
L7:
	%r707 = load %oop, %oop* @"m_fixed-primitive-function/let"
	%r708 = call %oop @m_type-of.code(%oop %r707)
	%r709 = inttoptr %word 8 to %oop
	%r713 = ptrtoint %oop %r709 to %word
	%r712 = ptrtoint %oop %r708 to %word
	%r711 = icmp eq %word %r713, %r712
	%r710 = inttoptr i1 %r711 to %oop
	store %oop %r710, %oop* %t3
	%r714 = inttoptr %word 0 to %oop
	%r718 = ptrtoint %oop %r714 to %word
	%r717 = ptrtoint %oop %r710 to %word
	%r716 = icmp eq %word %r718, %r717
	%r715 = inttoptr i1 %r716 to %oop
	%r720 = ptrtoint %oop %r715 to %word
	%r719 = icmp ne %word %r720, 0
	br i1 %r719, label %L5, label %L8
L8:
	%r721 = load %oop, %oop* @"m_fixed-primitive-function/define"
	%r722 = call %oop @m_type-of.code(%oop %r721)
	%r723 = inttoptr %word 8 to %oop
	%r727 = ptrtoint %oop %r723 to %word
	%r726 = ptrtoint %oop %r722 to %word
	%r725 = icmp eq %word %r727, %r726
	%r724 = inttoptr i1 %r725 to %oop
	store %oop %r724, %oop* %t3
	%r728 = inttoptr %word 0 to %oop
	%r732 = ptrtoint %oop %r728 to %word
	%r731 = ptrtoint %oop %r724 to %word
	%r730 = icmp eq %word %r732, %r731
	%r729 = inttoptr i1 %r730 to %oop
	%r734 = ptrtoint %oop %r729 to %word
	%r733 = icmp ne %word %r734, 0
	br i1 %r733, label %L5, label %L9
L9:
	%r735 = load %oop, %oop* @"m_fixed-primitive-function/set"
	%r736 = call %oop @m_type-of.code(%oop %r735)
	%r737 = inttoptr %word 8 to %oop
	%r741 = ptrtoint %oop %r737 to %word
	%r740 = ptrtoint %oop %r736 to %word
	%r739 = icmp eq %word %r741, %r740
	%r738 = inttoptr i1 %r739 to %oop
	store %oop %r738, %oop* %t3
	%r742 = inttoptr %word 0 to %oop
	%r746 = ptrtoint %oop %r742 to %word
	%r745 = ptrtoint %oop %r738 to %word
	%r744 = icmp eq %word %r746, %r745
	%r743 = inttoptr i1 %r744 to %oop
	%r748 = ptrtoint %oop %r743 to %word
	%r747 = icmp ne %word %r748, 0
	br i1 %r747, label %L5, label %L10
L10:
	br label %L5
L5:
	%r749 = load %oop, %oop* %t3
	store %oop %r749, %oop* %t2
	%r750 = inttoptr %word 0 to %oop
	%r754 = ptrtoint %oop %r750 to %word
	%r753 = ptrtoint %oop %r749 to %word
	%r752 = icmp eq %word %r754, %r753
	%r751 = inttoptr i1 %r752 to %oop
	%r756 = ptrtoint %oop %r751 to %word
	%r755 = icmp ne %word %r756, 0
	br i1 %r755, label %L11, label %L4
L11:
	%r757 = call %oop @m_error-prologue.code()
	%r758 = getelementptr %"<string>", %"<string>"* @m_ostr234, i32 0, i32 1
	%r759 = bitcast %word* %r758 to %oop
	%r760 = call %oop @"m_%error.code"(%oop %r759)
	%r761 = call %oop @m_error-epilogue.code()
	store %oop %r761, %oop* %t2
	%r762 = inttoptr %word 0 to %oop
	%r766 = ptrtoint %oop %r762 to %word
	%r765 = ptrtoint %oop %r761 to %word
	%r764 = icmp eq %word %r766, %r765
	%r763 = inttoptr i1 %r764 to %oop
	%r768 = ptrtoint %oop %r763 to %word
	%r767 = icmp ne %word %r768, 0
	br i1 %r767, label %L12, label %L4
L12:
	br label %L4
L4:
	%r769 = load %oop, %oop* %t2
	ret %oop %r769
}
@m_cstr235 = private unnamed_addr constant [37 x i8] c"populate-module-with-maru-primitives\00"
@m_ostr236 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 73, %oop bitcast ([37 x i8]* @m_cstr235 to %oop) }
@m_populate-module-with-maru-primitives = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_populate-module-with-maru-primitives.code to %oop), %"<string>"* @m_ostr236 }
define %oop @m_print.code(%oop %obj) {
	%t0 = alloca %oop
	store %oop %obj, %oop* %t0
	%r1 = load %oop, %oop* @"m_*maru-module*"
	%r2 = load %oop, %oop* @"m_symbol/*standard-output*"
	%r3 = call %oop @m_global-variable-value.code(%oop %r1, %oop %r2)
	%r4 = load %oop, %oop* %t0
	%r5 = inttoptr %word 0 to %oop
	%r6 = call %oop @m_do-print.code(%oop %r3, %oop %r4, %oop %r5)
	ret %oop %r6
}
@m_cstr237 = private unnamed_addr constant [6 x i8] c"print\00"
@m_ostr238 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr237 to %oop) }
@m_print = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_print.code to %oop), %"<string>"* @m_ostr238 }
define %oop @m_println.code(%oop %obj) {
	%t0 = alloca %oop
	store %oop %obj, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @m_print.code(%oop %r1)
	%r3 = load %oop, %oop* @"m_*maru-module*"
	%r4 = load %oop, %oop* @"m_symbol/*standard-output*"
	%r5 = call %oop @m_global-variable-value.code(%oop %r3, %oop %r4)
	%r6 = inttoptr %word 10 to %oop
	%r7 = call %oop @m_$put.code(%oop %r5, %oop %r6)
	ret %oop %r7
}
@m_cstr239 = private unnamed_addr constant [8 x i8] c"println\00"
@m_ostr240 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr239 to %oop) }
@m_println = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_println.code to %oop), %"<string>"* @m_ostr240 }
define %oop @m_read.code(%oop %input) {
	%t0 = alloca %oop
	store %oop %input, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @m_read-toplevel.code(%oop %r1)
	ret %oop %r2
}
@m_cstr241 = private unnamed_addr constant [5 x i8] c"read\00"
@m_ostr242 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr241 to %oop) }
@m_read = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_read.code to %oop), %"<string>"* @m_ostr242 }
@m_cstr243 = private unnamed_addr constant [53 x i8] c"infinite recursion guard triggered at call depth %ld\00"
@m_cstr244 = private unnamed_addr constant [2 x i8] c"\0A\00"
define %oop @m_encode.code(%oop %exp, %oop %env) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	%t8 = alloca %oop
	store %oop %exp, %oop* %t0
	store %oop %env, %oop* %t1
	%r1 = inttoptr %word 0 to %oop
	%r2 = load %oop, %oop* @"m_symbol/encode"
	%r3 = inttoptr %word 0 to %oop
	%r4 = load %oop, %oop* %t0
	%r5 = call %oop @"m_%new-call-frame.code"(%oop %r2, %oop %r3, %oop %r4)
	store %oop %r5, %oop* %t2
	%r6 = inttoptr %word 10000 to %oop
	%r7 = inttoptr %word 1 to %oop
	%r8 = load %oop, %oop* @"m_*call-stack-index*"
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = add %word %r12, %r11
	%r9 = inttoptr %word %r10 to %oop
	store %oop %r9, %oop* @"m_*call-stack-index*"
	%r16 = ptrtoint %oop %r9 to %word
	%r15 = ptrtoint %oop %r6 to %word
	%r14 = icmp sgt %word %r16, %r15
	%r13 = inttoptr i1 %r14 to %oop
	%r18 = ptrtoint %oop %r13 to %word
	%r17 = icmp ne %word %r18, 0
	br i1 %r17, label %L1, label %L2
L1:
	%r19 = call %oop @m_fatal-prologue.code()
	%r20 = inttoptr %word 1 to %oop
	%r21 = inttoptr %word 2 to %oop
	%r22 = getelementptr [53 x i8], [53 x i8]* @m_cstr243, %word 0, %word 0
	%r24 = inttoptr %word 52 to %oop
	%r25 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r20, %oop %r21, %oop %r22, %oop %r24)
	%r26 = inttoptr %word 1 to %oop
	%r27 = inttoptr %word 2 to %oop
	%r28 = getelementptr [2 x i8], [2 x i8]* @m_cstr244, %word 0, %word 0
	%r30 = inttoptr %word 1 to %oop
	%r31 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r26, %oop %r27, %oop %r28, %oop %r30)
	%r32 = call %oop @m_fatal-epilogue.code()
	store %oop %r32, %oop* %t3
	br label %L3
L2:
	%r33 = inttoptr %word 0 to %oop
	store %oop %r33, %oop* %t3
	br label %L3
L3:
	%r34 = load %oop, %oop* %t3
	%r35 = inttoptr %word 0 to %oop
	%r36 = load %oop, %oop* %t0
	%r37 = call %oop @"m_pair?.code"(%oop %r36)
	%r39 = ptrtoint %oop %r37 to %word
	%r38 = icmp ne %word %r39, 0
	br i1 %r38, label %L4, label %L5
L4:
	%r40 = load %oop, %oop* %t0
	%r41 = load %oop, %oop* %t1
	%r42 = call %oop @"m_encode/pair.code"(%oop %r40, %oop %r41)
	store %oop %r42, %oop* %t3
	br label %L6
L5:
	%r43 = load %oop, %oop* %t0
	%r44 = call %oop @"m_symbol?.code"(%oop %r43)
	%r46 = ptrtoint %oop %r44 to %word
	%r45 = icmp ne %word %r46, 0
	br i1 %r45, label %L7, label %L8
L7:
	%r47 = load %oop, %oop* %t0
	%r48 = load %oop, %oop* %t1
	%r49 = call %oop @"m_encode/symbol.code"(%oop %r47, %oop %r48)
	store %oop %r49, %oop* %t4
	br label %L9
L8:
	%r50 = inttoptr %word 0 to %oop
	store %oop %r50, %oop* %t5
	%r51 = inttoptr %word 1 to %oop
	store %oop %r51, %oop* %t6
	%r52 = load %oop, %oop* @"m_*encoders-var*"
	store %oop %r52, %oop* %t6
	%r53 = inttoptr %word 0 to %oop
	%r57 = ptrtoint %oop %r53 to %word
	%r56 = ptrtoint %oop %r52 to %word
	%r55 = icmp eq %word %r57, %r56
	%r54 = inttoptr i1 %r55 to %oop
	%r59 = ptrtoint %oop %r54 to %word
	%r58 = icmp ne %word %r59, 0
	br i1 %r58, label %L10, label %L11
L11:
	%r60 = load %oop, %oop* @"m_*encoders-var*"
	%r61 = inttoptr %word 12 to %oop
	%r62 = call %oop @m_maybe-object-in-variable.code(%oop %r60, %oop %r61)
	store %oop %r62, %oop* %t5
	store %oop %r62, %oop* %t6
	%r63 = inttoptr %word 0 to %oop
	%r67 = ptrtoint %oop %r63 to %word
	%r66 = ptrtoint %oop %r62 to %word
	%r65 = icmp eq %word %r67, %r66
	%r64 = inttoptr i1 %r65 to %oop
	%r69 = ptrtoint %oop %r64 to %word
	%r68 = icmp ne %word %r69, 0
	br i1 %r68, label %L10, label %L12
L12:
	%r70 = load %oop, %oop* %t5
	%r71 = load %oop, %oop* %t0
	%r72 = call %oop @m_type-of.code(%oop %r71)
	%r73 = call %oop @m_array-at.code(%oop %r70, %oop %r72)
	store %oop %r73, %oop* %t6
	%r74 = inttoptr %word 0 to %oop
	%r78 = ptrtoint %oop %r74 to %word
	%r77 = ptrtoint %oop %r73 to %word
	%r76 = icmp eq %word %r78, %r77
	%r75 = inttoptr i1 %r76 to %oop
	%r80 = ptrtoint %oop %r75 to %word
	%r79 = icmp ne %word %r80, 0
	br i1 %r79, label %L10, label %L13
L13:
	br label %L10
L10:
	%r81 = load %oop, %oop* %t6
	store %oop %r81, %oop* %t5
	%r82 = load %oop, %oop* %t5
	%r84 = ptrtoint %oop %r82 to %word
	%r83 = icmp ne %word %r84, 0
	br i1 %r83, label %L14, label %L15
L14:
	%r85 = load %oop, %oop* %t0
	%r86 = load %oop, %oop* %t1
	%r87 = call %oop @m_list2.code(%oop %r85, %oop %r86)
	store %oop %r87, %oop* %t7
	%r89 = getelementptr %oop, %oop* %t7, %word 0
	%r88 = bitcast %oop* %r89 to %oop
	%r90 = call %oop @"m_gc/push-root.code"(%oop %r88)
	%r91 = inttoptr %word 0 to %oop
	%r92 = load %oop, %oop* %t5
	%r93 = load %oop, %oop* %t7
	%r94 = inttoptr %word 0 to %oop
	%r95 = call %oop @m_apply.code(%oop %r92, %oop %r93, %oop %r94)
	store %oop %r95, %oop* %t8
	%r97 = getelementptr %oop, %oop* %t7, %word 0
	%r96 = bitcast %oop* %r97 to %oop
	%r98 = call %oop @"m_gc/pop-root.code"(%oop %r96)
	%r99 = load %oop, %oop* %t8
	store %oop %r99, %oop* %t6
	br label %L16
L15:
	%r100 = load %oop, %oop* %t0
	store %oop %r100, %oop* %t6
	br label %L16
L16:
	%r101 = load %oop, %oop* %t6
	store %oop %r101, %oop* %t4
	br label %L9
L9:
	%r102 = load %oop, %oop* %t4
	store %oop %r102, %oop* %t3
	br label %L6
L6:
	%r103 = load %oop, %oop* %t3
	store %oop %r103, %oop* %t2
	%r104 = inttoptr %word 1 to %oop
	%r105 = load %oop, %oop* @"m_*call-stack-index*"
	%r109 = ptrtoint %oop %r105 to %word
	%r108 = ptrtoint %oop %r104 to %word
	%r107 = sub %word %r109, %r108
	%r106 = inttoptr %word %r107 to %oop
	store %oop %r106, %oop* @"m_*call-stack-index*"
	%r110 = load %oop, %oop* @"m_*call-stack-index*"
	%r111 = inttoptr %word 0 to %oop
	%r115 = ptrtoint %oop %r111 to %word
	%r114 = ptrtoint %oop %r110 to %word
	%r113 = icmp sle %word %r115, %r114
	%r112 = inttoptr i1 %r113 to %oop
	%r117 = ptrtoint %oop %r112 to %word
	%r116 = icmp ne %word %r117, 0
	br i1 %r116, label %L17, label %L18
L17:
	%r118 = load %oop, %oop* @"m_*call-stack*"
	%r119 = load %oop, %oop* @"m_*call-stack-index*"
	%r120 = call %oop @m_array-at.code(%oop %r118, %oop %r119)
	store %oop %r120, %oop* %t4
	%r121 = inttoptr %word 0 to %oop
	%r122 = inttoptr %word 0 to %oop
	%r123 = load %oop, %oop* %t4
	%r127 = bitcast %oop %r123 to [0 x %oop]*
	%r126 = ptrtoint %oop %r122 to %word
	%r125 = getelementptr [0 x %oop], [0 x %oop]* %r127, %word 0, %word %r126
	store %oop %r121, %oop* %r125
	%r124 = bitcast %oop %r121 to %oop
	%r128 = inttoptr %word 0 to %oop
	%r129 = inttoptr %word 1 to %oop
	%r130 = load %oop, %oop* %t4
	%r134 = bitcast %oop %r130 to [0 x %oop]*
	%r133 = ptrtoint %oop %r129 to %word
	%r132 = getelementptr [0 x %oop], [0 x %oop]* %r134, %word 0, %word %r133
	store %oop %r128, %oop* %r132
	%r131 = bitcast %oop %r128 to %oop
	%r135 = inttoptr %word 0 to %oop
	%r136 = inttoptr %word 2 to %oop
	%r137 = load %oop, %oop* %t4
	%r141 = bitcast %oop %r137 to [0 x %oop]*
	%r140 = ptrtoint %oop %r136 to %word
	%r139 = getelementptr [0 x %oop], [0 x %oop]* %r141, %word 0, %word %r140
	store %oop %r135, %oop* %r139
	%r138 = bitcast %oop %r135 to %oop
	store %oop %r138, %oop* %t3
	br label %L19
L18:
	%r142 = inttoptr %word 0 to %oop
	store %oop %r142, %oop* %t3
	br label %L19
L19:
	%r143 = load %oop, %oop* %t3
	%r144 = load %oop, %oop* %t2
	ret %oop %r144
}
@m_cstr245 = private unnamed_addr constant [7 x i8] c"encode\00"
@m_ostr246 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr245 to %oop) }
@m_encode = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @m_encode.code to %oop), %"<string>"* @m_ostr246 }
@m_cstr247 = private unnamed_addr constant [53 x i8] c"infinite recursion guard triggered at call depth %ld\00"
@m_cstr248 = private unnamed_addr constant [2 x i8] c"\0A\00"
define %oop @m_expand.code(%oop %exp, %oop %env, %oop %"one-step?") {
	%t2 = alloca %oop
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	%t8 = alloca %oop
	%t9 = alloca %oop
	store %oop %exp, %oop* %t0
	store %oop %env, %oop* %t1
	store %oop %"one-step?", %oop* %t2
	%r1 = inttoptr %word 0 to %oop
	%r2 = load %oop, %oop* @"m_symbol/expand"
	%r3 = inttoptr %word 0 to %oop
	%r4 = load %oop, %oop* %t0
	%r5 = call %oop @"m_%new-call-frame.code"(%oop %r2, %oop %r3, %oop %r4)
	store %oop %r5, %oop* %t3
	%r6 = inttoptr %word 10000 to %oop
	%r7 = inttoptr %word 1 to %oop
	%r8 = load %oop, %oop* @"m_*call-stack-index*"
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = add %word %r12, %r11
	%r9 = inttoptr %word %r10 to %oop
	store %oop %r9, %oop* @"m_*call-stack-index*"
	%r16 = ptrtoint %oop %r9 to %word
	%r15 = ptrtoint %oop %r6 to %word
	%r14 = icmp sgt %word %r16, %r15
	%r13 = inttoptr i1 %r14 to %oop
	%r18 = ptrtoint %oop %r13 to %word
	%r17 = icmp ne %word %r18, 0
	br i1 %r17, label %L1, label %L2
L1:
	%r19 = call %oop @m_fatal-prologue.code()
	%r20 = inttoptr %word 1 to %oop
	%r21 = inttoptr %word 2 to %oop
	%r22 = getelementptr [53 x i8], [53 x i8]* @m_cstr247, %word 0, %word 0
	%r24 = inttoptr %word 52 to %oop
	%r25 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r20, %oop %r21, %oop %r22, %oop %r24)
	%r26 = inttoptr %word 1 to %oop
	%r27 = inttoptr %word 2 to %oop
	%r28 = getelementptr [2 x i8], [2 x i8]* @m_cstr248, %word 0, %word 0
	%r30 = inttoptr %word 1 to %oop
	%r31 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r26, %oop %r27, %oop %r28, %oop %r30)
	%r32 = call %oop @m_fatal-epilogue.code()
	store %oop %r32, %oop* %t4
	br label %L3
L2:
	%r33 = inttoptr %word 0 to %oop
	store %oop %r33, %oop* %t4
	br label %L3
L3:
	%r34 = load %oop, %oop* %t4
	%r35 = load %oop, %oop* %t0
	%r36 = call %oop @"m_pair?.code"(%oop %r35)
	%r38 = ptrtoint %oop %r36 to %word
	%r37 = icmp ne %word %r38, 0
	br i1 %r37, label %L4, label %L5
L4:
	%r39 = load %oop, %oop* %t0
	%r40 = load %oop, %oop* %t1
	%r41 = load %oop, %oop* %t2
	%r42 = load %oop, %oop* %t3
	%r43 = call %oop @"m_expand/pair.code"(%oop %r39, %oop %r40, %oop %r41, %oop %r42)
	store %oop %r43, %oop* %t4
	br label %L6
L5:
	%r44 = load %oop, %oop* %t0
	%r45 = call %oop @"m_symbol?.code"(%oop %r44)
	%r47 = ptrtoint %oop %r45 to %word
	%r46 = icmp ne %word %r47, 0
	br i1 %r46, label %L7, label %L8
L7:
	%r48 = load %oop, %oop* %t0
	%r49 = load %oop, %oop* %t1
	%r50 = load %oop, %oop* %t2
	%r51 = call %oop @"m_expand/symbol.code"(%oop %r48, %oop %r49, %oop %r50)
	store %oop %r51, %oop* %t5
	br label %L9
L8:
	%r52 = inttoptr %word 0 to %oop
	store %oop %r52, %oop* %t6
	%r53 = inttoptr %word 1 to %oop
	store %oop %r53, %oop* %t7
	%r54 = load %oop, %oop* @"m_*expanders-var*"
	store %oop %r54, %oop* %t7
	%r55 = inttoptr %word 0 to %oop
	%r59 = ptrtoint %oop %r55 to %word
	%r58 = ptrtoint %oop %r54 to %word
	%r57 = icmp eq %word %r59, %r58
	%r56 = inttoptr i1 %r57 to %oop
	%r61 = ptrtoint %oop %r56 to %word
	%r60 = icmp ne %word %r61, 0
	br i1 %r60, label %L10, label %L11
L11:
	%r62 = load %oop, %oop* @"m_*expanders-var*"
	%r63 = inttoptr %word 12 to %oop
	%r64 = call %oop @m_maybe-object-in-variable.code(%oop %r62, %oop %r63)
	store %oop %r64, %oop* %t6
	store %oop %r64, %oop* %t7
	%r65 = inttoptr %word 0 to %oop
	%r69 = ptrtoint %oop %r65 to %word
	%r68 = ptrtoint %oop %r64 to %word
	%r67 = icmp eq %word %r69, %r68
	%r66 = inttoptr i1 %r67 to %oop
	%r71 = ptrtoint %oop %r66 to %word
	%r70 = icmp ne %word %r71, 0
	br i1 %r70, label %L10, label %L12
L12:
	%r72 = load %oop, %oop* %t6
	%r73 = load %oop, %oop* %t0
	%r74 = call %oop @m_type-of.code(%oop %r73)
	%r75 = call %oop @m_array-at.code(%oop %r72, %oop %r74)
	store %oop %r75, %oop* %t7
	%r76 = inttoptr %word 0 to %oop
	%r80 = ptrtoint %oop %r76 to %word
	%r79 = ptrtoint %oop %r75 to %word
	%r78 = icmp eq %word %r80, %r79
	%r77 = inttoptr i1 %r78 to %oop
	%r82 = ptrtoint %oop %r77 to %word
	%r81 = icmp ne %word %r82, 0
	br i1 %r81, label %L10, label %L13
L13:
	br label %L10
L10:
	%r83 = load %oop, %oop* %t7
	store %oop %r83, %oop* %t6
	%r84 = load %oop, %oop* %t6
	%r86 = ptrtoint %oop %r84 to %word
	%r85 = icmp ne %word %r86, 0
	br i1 %r85, label %L14, label %L15
L14:
	%r87 = load %oop, %oop* %t0
	%r88 = inttoptr %word 0 to %oop
	%r89 = call %oop @m_cons.code(%oop %r87, %oop %r88)
	store %oop %r89, %oop* %t8
	%r91 = getelementptr %oop, %oop* %t8, %word 0
	%r90 = bitcast %oop* %r91 to %oop
	%r92 = call %oop @"m_gc/push-root.code"(%oop %r90)
	%r93 = load %oop, %oop* %t6
	%r94 = load %oop, %oop* %t8
	%r95 = inttoptr %word 0 to %oop
	%r96 = call %oop @m_apply.code(%oop %r93, %oop %r94, %oop %r95)
	store %oop %r96, %oop* %t9
	%r98 = getelementptr %oop, %oop* %t8, %word 0
	%r97 = bitcast %oop* %r98 to %oop
	%r99 = call %oop @"m_gc/pop-root.code"(%oop %r97)
	%r100 = load %oop, %oop* %t9
	store %oop %r100, %oop* %t7
	br label %L16
L15:
	%r101 = load %oop, %oop* %t0
	store %oop %r101, %oop* %t7
	br label %L16
L16:
	%r102 = load %oop, %oop* %t7
	store %oop %r102, %oop* %t5
	br label %L9
L9:
	%r103 = load %oop, %oop* %t5
	store %oop %r103, %oop* %t4
	br label %L6
L6:
	%r104 = load %oop, %oop* %t4
	store %oop %r104, %oop* %t3
	%r105 = inttoptr %word 1 to %oop
	%r106 = load %oop, %oop* @"m_*call-stack-index*"
	%r110 = ptrtoint %oop %r106 to %word
	%r109 = ptrtoint %oop %r105 to %word
	%r108 = sub %word %r110, %r109
	%r107 = inttoptr %word %r108 to %oop
	store %oop %r107, %oop* @"m_*call-stack-index*"
	%r111 = load %oop, %oop* @"m_*call-stack-index*"
	%r112 = inttoptr %word 0 to %oop
	%r116 = ptrtoint %oop %r112 to %word
	%r115 = ptrtoint %oop %r111 to %word
	%r114 = icmp sle %word %r116, %r115
	%r113 = inttoptr i1 %r114 to %oop
	%r118 = ptrtoint %oop %r113 to %word
	%r117 = icmp ne %word %r118, 0
	br i1 %r117, label %L17, label %L18
L17:
	%r119 = load %oop, %oop* @"m_*call-stack*"
	%r120 = load %oop, %oop* @"m_*call-stack-index*"
	%r121 = call %oop @m_array-at.code(%oop %r119, %oop %r120)
	store %oop %r121, %oop* %t5
	%r122 = inttoptr %word 0 to %oop
	%r123 = inttoptr %word 0 to %oop
	%r124 = load %oop, %oop* %t5
	%r128 = bitcast %oop %r124 to [0 x %oop]*
	%r127 = ptrtoint %oop %r123 to %word
	%r126 = getelementptr [0 x %oop], [0 x %oop]* %r128, %word 0, %word %r127
	store %oop %r122, %oop* %r126
	%r125 = bitcast %oop %r122 to %oop
	%r129 = inttoptr %word 0 to %oop
	%r130 = inttoptr %word 1 to %oop
	%r131 = load %oop, %oop* %t5
	%r135 = bitcast %oop %r131 to [0 x %oop]*
	%r134 = ptrtoint %oop %r130 to %word
	%r133 = getelementptr [0 x %oop], [0 x %oop]* %r135, %word 0, %word %r134
	store %oop %r129, %oop* %r133
	%r132 = bitcast %oop %r129 to %oop
	%r136 = inttoptr %word 0 to %oop
	%r137 = inttoptr %word 2 to %oop
	%r138 = load %oop, %oop* %t5
	%r142 = bitcast %oop %r138 to [0 x %oop]*
	%r141 = ptrtoint %oop %r137 to %word
	%r140 = getelementptr [0 x %oop], [0 x %oop]* %r142, %word 0, %word %r141
	store %oop %r136, %oop* %r140
	%r139 = bitcast %oop %r136 to %oop
	store %oop %r139, %oop* %t4
	br label %L19
L18:
	%r143 = inttoptr %word 0 to %oop
	store %oop %r143, %oop* %t4
	br label %L19
L19:
	%r144 = load %oop, %oop* %t4
	%r145 = load %oop, %oop* %t3
	ret %oop %r145
}
@m_cstr249 = private unnamed_addr constant [7 x i8] c"expand\00"
@m_ostr250 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr249 to %oop) }
@m_expand = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop, %oop)* @m_expand.code to %oop), %"<string>"* @m_ostr250 }
define %oop @m_code251(%oop %str, %oop %candidate) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	store %oop %str, %oop* %t0
	store %oop %candidate, %oop* %t1
	%r1 = load %oop, %oop* %t0
	%r2 = inttoptr %word 0 to %oop
	%r3 = load %oop, %oop* %t1
	%r7 = bitcast %oop %r3 to [0 x %oop]*
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = getelementptr [0 x %oop], [0 x %oop]* %r7, %word 0, %word %r6
	%r4 = load %oop, %oop* %r5
	%r8 = call %oop @m_compare-strings.code(%oop %r1, %oop %r4)
	ret %oop %r8
}
@m_oclosure252 = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @m_code251 to %oop), %"<string>"* null }
define %oop @m_code253(%oop %array, %oop %index, %oop %str) {
	%t2 = alloca %oop
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	store %oop %array, %oop* %t0
	store %oop %index, %oop* %t1
	store %oop %str, %oop* %t2
	%r1 = load %oop, %oop* %t2
	%r2 = call %oop @m_symbol.code(%oop %r1)
	store %oop %r2, %oop* %t3
	%r4 = getelementptr %oop, %oop* %t3, %word 0
	%r3 = bitcast %oop* %r4 to %oop
	%r5 = call %oop @"m_gc/push-root.code"(%oop %r3)
	%r6 = inttoptr %word 0 to %oop
	%r7 = load %oop, %oop* %t0
	%r8 = load %oop, %oop* %t1
	%r9 = load %oop, %oop* %t3
	%r10 = call %oop @m_array-insert.code(%oop %r7, %oop %r8, %oop %r9)
	%r11 = load %oop, %oop* %t3
	store %oop %r11, %oop* %t4
	%r13 = getelementptr %oop, %oop* %t3, %word 0
	%r12 = bitcast %oop* %r13 to %oop
	%r14 = call %oop @"m_gc/pop-root.code"(%oop %r12)
	%r15 = load %oop, %oop* %t4
	ret %oop %r15
}
@m_oclosure254 = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop, %oop)* @m_code253 to %oop), %"<string>"* null }
define %oop @"m_string->symbol.code"(%oop %str) {
	%t0 = alloca %oop
	store %oop %str, %oop* %t0
	%r1 = load %oop, %oop* @"m_*symbols*"
	%r2 = load %oop, %oop* %t0
	%r3 = bitcast %"<target-function>"* @m_oclosure252 to %oop
	%r4 = bitcast %"<target-function>"* @m_oclosure254 to %oop
	%r5 = call %oop @m_array-binary-search.code(%oop %r1, %oop %r2, %oop %r3, %oop %r4)
	ret %oop %r5
}
@m_cstr255 = private unnamed_addr constant [15 x i8] c"string->symbol\00"
@m_ostr256 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr255 to %oop) }
@"m_string->symbol" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @"m_string->symbol.code" to %oop), %"<string>"* @m_ostr256 }
@m_cstr257 = private unnamed_addr constant [58 x i8] c"kernel accessor type error: expected type id %ld, got %ld\00"
@m_cstr258 = private unnamed_addr constant [2 x i8] c"\0A\00"
define %oop @"m_%accessor-typecheck.code"(%oop %expected-type-id, %oop %object) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	store %oop %expected-type-id, %oop* %t0
	store %oop %object, %oop* %t1
	%r1 = load %oop, %oop* %t1
	%r2 = call %oop @m_type-of.code(%oop %r1)
	store %oop %r2, %oop* %t2
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t3
	%r4 = load %oop, %oop* %t0
	%r5 = load %oop, %oop* %t2
	%r9 = ptrtoint %oop %r5 to %word
	%r8 = ptrtoint %oop %r4 to %word
	%r7 = icmp eq %word %r9, %r8
	%r6 = inttoptr i1 %r7 to %oop
	store %oop %r6, %oop* %t3
	%r10 = inttoptr %word 0 to %oop
	%r14 = ptrtoint %oop %r10 to %word
	%r13 = ptrtoint %oop %r6 to %word
	%r12 = icmp eq %word %r14, %r13
	%r11 = inttoptr i1 %r12 to %oop
	%r16 = ptrtoint %oop %r11 to %word
	%r15 = icmp ne %word %r16, 0
	br i1 %r15, label %L2, label %L1
L2:
	%r17 = call %oop @m_fatal-prologue.code()
	%r18 = inttoptr %word 1 to %oop
	%r19 = inttoptr %word 2 to %oop
	%r20 = getelementptr [58 x i8], [58 x i8]* @m_cstr257, %word 0, %word 0
	%r22 = inttoptr %word 57 to %oop
	%r23 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r18, %oop %r19, %oop %r20, %oop %r22)
	%r24 = inttoptr %word 1 to %oop
	%r25 = inttoptr %word 2 to %oop
	%r26 = getelementptr [2 x i8], [2 x i8]* @m_cstr258, %word 0, %word 0
	%r28 = inttoptr %word 1 to %oop
	%r29 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r24, %oop %r25, %oop %r26, %oop %r28)
	%r30 = call %oop @m_fatal-epilogue.code()
	store %oop %r30, %oop* %t3
	%r31 = inttoptr %word 0 to %oop
	%r35 = ptrtoint %oop %r31 to %word
	%r34 = ptrtoint %oop %r30 to %word
	%r33 = icmp eq %word %r35, %r34
	%r32 = inttoptr i1 %r33 to %oop
	%r37 = ptrtoint %oop %r32 to %word
	%r36 = icmp ne %word %r37, 0
	br i1 %r36, label %L3, label %L1
L3:
	br label %L1
L1:
	%r38 = load %oop, %oop* %t3
	%r39 = load %oop, %oop* %t1
	ret %oop %r39
}
@m_cstr259 = private unnamed_addr constant [20 x i8] c"%accessor-typecheck\00"
@m_ostr260 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 39, %oop bitcast ([20 x i8]* @m_cstr259 to %oop) }
@"m_%accessor-typecheck" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_%accessor-typecheck.code" to %oop), %"<string>"* @m_ostr260 }
@m_cstr261 = private unnamed_addr constant [8 x i8] c"ABORTED\00"
@m_cstr262 = private unnamed_addr constant [2 x i8] c"\0A\00"
define %oop @m_abort.code() {
	%r1 = inttoptr %word 1 to %oop
	%r2 = inttoptr %word 2 to %oop
	%r3 = getelementptr [8 x i8], [8 x i8]* @m_cstr261, %word 0, %word 0
	%r5 = inttoptr %word 7 to %oop
	%r6 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r1, %oop %r2, %oop %r3, %oop %r5)
	%r7 = inttoptr %word 1 to %oop
	%r8 = inttoptr %word 2 to %oop
	%r9 = getelementptr [2 x i8], [2 x i8]* @m_cstr262, %word 0, %word 0
	%r11 = inttoptr %word 1 to %oop
	%r12 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r7, %oop %r8, %oop %r9, %oop %r11)
	%r13 = call %oop @m_print-backtrace.code()
	%r14 = call %oop @"m_platform/flush-streams.code"()
	%r15 = inttoptr %word 60 to %oop
	%r16 = inttoptr %word -1 to %oop
	%r17 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	syscall", 
	"=A,r,r,~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r15, %oop %r16)
	ret %oop %r17
}
@m_cstr263 = private unnamed_addr constant [6 x i8] c"abort\00"
@m_ostr264 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr263 to %oop) }
@m_abort = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop ()* @m_abort.code to %oop), %"<string>"* @m_ostr264 }
define %oop @"m_%string->C-string.code"(%oop %obj) {
	%t0 = alloca %oop
	store %oop %obj, %oop* %t0
	%r1 = inttoptr %word 1 to %oop
	%r2 = load %oop, %oop* %t0
	%r3 = call %oop @m_string-ensure-zero-terminated.code(%oop %r2)
	%r7 = bitcast %oop %r3 to [0 x %oop]*
	%r6 = ptrtoint %oop %r1 to %word
	%r5 = getelementptr [0 x %oop], [0 x %oop]* %r7, %word 0, %word %r6
	%r4 = load %oop, %oop* %r5
	ret %oop %r4
}
@m_cstr265 = private unnamed_addr constant [18 x i8] c"%string->C-string\00"
@m_ostr266 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr265 to %oop) }
@"m_%string->C-string" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @"m_%string->C-string.code" to %oop), %"<string>"* @m_ostr266 }
@"m_symbol/*standard-input*" = global %oop inttoptr (%word 0 to %oop)
@"m_symbol/*standard-output*" = global %oop inttoptr (%word 0 to %oop)
@"m_symbol/*error-output*" = global %oop inttoptr (%word 0 to %oop)
@"m_symbol/*debug-output*" = global %oop inttoptr (%word 0 to %oop)
define %oop @m_environment-define.code(%oop %env, %oop %name, %oop %value) {
	%t2 = alloca %oop
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	store %oop %env, %oop* %t0
	store %oop %name, %oop* %t1
	store %oop %value, %oop* %t2
	%r1 = inttoptr %word 0 to %oop
	%r2 = load %oop, %oop* %t0
	%r3 = load %oop, %oop* %t1
	%r4 = call %oop @m_find-local-variable.code(%oop %r2, %oop %r3)
	store %oop %r4, %oop* %t3
	%r5 = load %oop, %oop* %t3
	%r7 = ptrtoint %oop %r5 to %word
	%r6 = icmp ne %word %r7, 0
	br i1 %r6, label %L1, label %L2
L1:
	store %oop %r5, %oop* %t4
	br label %L3
L2:
	%r8 = load %oop, %oop* %t0
	%r9 = load %oop, %oop* %t1
	%r10 = call %oop @m_new-variable.code(%oop %r8, %oop %r9)
	store %oop %r10, %oop* %t3
	store %oop %r10, %oop* %t4
	br label %L3
L3:
	%r11 = load %oop, %oop* %t4
	%r12 = load %oop, %oop* %t2
	%r13 = inttoptr %word 1 to %oop
	%r14 = load %oop, %oop* %t3
	%r18 = bitcast %oop %r14 to [0 x %oop]*
	%r17 = ptrtoint %oop %r13 to %word
	%r16 = getelementptr [0 x %oop], [0 x %oop]* %r18, %word 0, %word %r17
	store %oop %r12, %oop* %r16
	%r15 = bitcast %oop %r12 to %oop
	%r19 = load %oop, %oop* %t3
	ret %oop %r19
}
@m_cstr267 = private unnamed_addr constant [19 x i8] c"environment-define\00"
@m_ostr268 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 37, %oop bitcast ([19 x i8]* @m_cstr267 to %oop) }
@m_environment-define = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop, %oop)* @m_environment-define.code to %oop), %"<string>"* @m_ostr268 }
define %oop @"m_defined?.code"(%oop %name, %oop %env) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	store %oop %name, %oop* %t0
	store %oop %env, %oop* %t1
	%r1 = inttoptr %word 0 to %oop
	store %oop %r1, %oop* %t2
	br label %L2
L1:
	%r2 = inttoptr %word 0 to %oop
	%r3 = load %oop, %oop* %t1
	%r7 = bitcast %oop %r3 to [0 x %oop]*
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = getelementptr [0 x %oop], [0 x %oop]* %r7, %word 0, %word %r6
	%r4 = load %oop, %oop* %r5
	store %oop %r4, %oop* %t1
	br label %L2
L2:
	%r8 = inttoptr %word 1 to %oop
	store %oop %r8, %oop* %t3
	%r9 = load %oop, %oop* %t1
	store %oop %r9, %oop* %t3
	%r10 = inttoptr %word 0 to %oop
	%r14 = ptrtoint %oop %r10 to %word
	%r13 = ptrtoint %oop %r9 to %word
	%r12 = icmp eq %word %r14, %r13
	%r11 = inttoptr i1 %r12 to %oop
	%r16 = ptrtoint %oop %r11 to %word
	%r15 = icmp ne %word %r16, 0
	br i1 %r15, label %L4, label %L5
L5:
	%r17 = load %oop, %oop* %t1
	%r18 = load %oop, %oop* %t0
	%r19 = call %oop @m_find-local-variable.code(%oop %r17, %oop %r18)
	store %oop %r19, %oop* %t2
	%r23 = ptrtoint %oop %r19 to %word
	%r22 = icmp eq %word %r23, 0
	%r21 = zext i1 %r22 to %word
	%r20 = inttoptr %word %r21 to %oop
	store %oop %r20, %oop* %t3
	%r24 = inttoptr %word 0 to %oop
	%r28 = ptrtoint %oop %r24 to %word
	%r27 = ptrtoint %oop %r20 to %word
	%r26 = icmp eq %word %r28, %r27
	%r25 = inttoptr i1 %r26 to %oop
	%r30 = ptrtoint %oop %r25 to %word
	%r29 = icmp ne %word %r30, 0
	br i1 %r29, label %L4, label %L6
L6:
	br label %L4
L4:
	%r31 = load %oop, %oop* %t3
	%r33 = ptrtoint %oop %r31 to %word
	%r32 = icmp ne %word %r33, 0
	br i1 %r32, label %L1, label %L3
L3:
	%r34 = load %oop, %oop* %t2
	ret %oop %r34
}
@m_cstr269 = private unnamed_addr constant [9 x i8] c"defined?\00"
@m_ostr270 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr269 to %oop) }
@"m_defined?" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_defined?.code" to %oop), %"<string>"* @m_ostr270 }
define %oop @m_global-variable-value.code(%oop %module, %oop %name) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	store %oop %module, %oop* %t0
	store %oop %name, %oop* %t1
	%r1 = inttoptr %word 0 to %oop
	store %oop %r1, %oop* %t2
	%r2 = load %oop, %oop* %t1
	%r3 = load %oop, %oop* %t0
	%r4 = call %oop @m_module-env.code(%oop %r3)
	%r5 = call %oop @"m_defined?.code"(%oop %r2, %oop %r4)
	store %oop %r5, %oop* %t2
	%r6 = load %oop, %oop* %t2
	%r8 = ptrtoint %oop %r6 to %word
	%r7 = icmp ne %word %r8, 0
	br i1 %r7, label %L1, label %L2
L1:
	%r9 = inttoptr %word 1 to %oop
	%r10 = load %oop, %oop* %t2
	%r14 = bitcast %oop %r10 to [0 x %oop]*
	%r13 = ptrtoint %oop %r9 to %word
	%r12 = getelementptr [0 x %oop], [0 x %oop]* %r14, %word 0, %word %r13
	%r11 = load %oop, %oop* %r12
	store %oop %r11, %oop* %t3
	br label %L3
L2:
	%r15 = inttoptr %word 0 to %oop
	store %oop %r15, %oop* %t3
	br label %L3
L3:
	%r16 = load %oop, %oop* %t3
	ret %oop %r16
}
@m_cstr271 = private unnamed_addr constant [22 x i8] c"global-variable-value\00"
@m_ostr272 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 43, %oop bitcast ([22 x i8]* @m_cstr271 to %oop) }
@m_global-variable-value = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @m_global-variable-value.code to %oop), %"<string>"* @m_ostr272 }
define %oop @m_set-global-variable-value.code(%oop %module, %oop %name, %oop %value) {
	%t2 = alloca %oop
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	store %oop %module, %oop* %t0
	store %oop %name, %oop* %t1
	store %oop %value, %oop* %t2
	%r1 = inttoptr %word 0 to %oop
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = load %oop, %oop* %t1
	%r4 = load %oop, %oop* %t0
	%r5 = call %oop @m_module-env.code(%oop %r4)
	%r6 = call %oop @"m_defined?.code"(%oop %r3, %oop %r5)
	store %oop %r6, %oop* %t3
	%r7 = load %oop, %oop* %t3
	%r9 = ptrtoint %oop %r7 to %word
	%r8 = icmp ne %word %r9, 0
	br i1 %r8, label %L1, label %L2
L1:
	%r10 = load %oop, %oop* %t2
	%r11 = inttoptr %word 1 to %oop
	%r12 = load %oop, %oop* %t3
	%r16 = bitcast %oop %r12 to [0 x %oop]*
	%r15 = ptrtoint %oop %r11 to %word
	%r14 = getelementptr [0 x %oop], [0 x %oop]* %r16, %word 0, %word %r15
	store %oop %r10, %oop* %r14
	%r13 = bitcast %oop %r10 to %oop
	store %oop %r13, %oop* %t4
	br label %L3
L2:
	%r17 = load %oop, %oop* %t0
	%r18 = call %oop @m_module-env.code(%oop %r17)
	%r19 = load %oop, %oop* %t1
	%r20 = load %oop, %oop* %t2
	%r21 = call %oop @m_environment-define.code(%oop %r18, %oop %r19, %oop %r20)
	%r22 = load %oop, %oop* %t2
	store %oop %r22, %oop* %t4
	br label %L3
L3:
	%r23 = load %oop, %oop* %t4
	ret %oop %r23
}
@m_cstr273 = private unnamed_addr constant [26 x i8] c"set-global-variable-value\00"
@m_ostr274 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 51, %oop bitcast ([26 x i8]* @m_cstr273 to %oop) }
@m_set-global-variable-value = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop, %oop)* @m_set-global-variable-value.code to %oop), %"<string>"* @m_ostr274 }
@"m_*verbosity*" = global %oop inttoptr (%word 0 to %oop)
@"m_*optimised*" = global %oop inttoptr (%word 0 to %oop)
@"m_*call-stack-index*" = global %oop inttoptr (%word 0 to %oop)
@"m_*call-stack*" = global %oop inttoptr (%word 0 to %oop)
@"m_*error-level*" = global %oop inttoptr (%word 0 to %oop)
@m_cstr275 = private unnamed_addr constant [9 x i8] c"\0AERROR: \00"
@m_cstr276 = private unnamed_addr constant [2 x i8] c"\0A\00"
define %oop @m_fatal-prologue.code() {
	%r1 = inttoptr %word 1 to %oop
	%r2 = load %oop, %oop* @"m_*error-level*"
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = ptrtoint %oop %r1 to %word
	%r4 = add %word %r6, %r5
	%r3 = inttoptr %word %r4 to %oop
	store %oop %r3, %oop* @"m_*error-level*"
	%r7 = inttoptr %word 1 to %oop
	%r8 = inttoptr %word 2 to %oop
	%r9 = getelementptr [9 x i8], [9 x i8]* @m_cstr275, %word 0, %word 0
	%r11 = inttoptr %word 8 to %oop
	%r12 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r7, %oop %r8, %oop %r9, %oop %r11)
	%r13 = inttoptr %word 1 to %oop
	%r14 = inttoptr %word 2 to %oop
	%r15 = getelementptr [2 x i8], [2 x i8]* @m_cstr276, %word 0, %word 0
	%r17 = inttoptr %word 1 to %oop
	%r18 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r13, %oop %r14, %oop %r15, %oop %r17)
	ret %oop %r18
}
@m_cstr277 = private unnamed_addr constant [15 x i8] c"fatal-prologue\00"
@m_ostr278 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr277 to %oop) }
@m_fatal-prologue = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop ()* @m_fatal-prologue.code to %oop), %"<string>"* @m_ostr278 }
@m_cstr279 = private unnamed_addr constant [2 x i8] c"\0A\00"
define %oop @m_fatal-epilogue.code() {
	%r1 = inttoptr %word 1 to %oop
	%r2 = inttoptr %word 2 to %oop
	%r3 = getelementptr [2 x i8], [2 x i8]* @m_cstr279, %word 0, %word 0
	%r5 = inttoptr %word 1 to %oop
	%r6 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r1, %oop %r2, %oop %r3, %oop %r5)
	%r7 = call %oop @m_abort.code()
	ret %oop %r7
}
@m_cstr280 = private unnamed_addr constant [15 x i8] c"fatal-epilogue\00"
@m_ostr281 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr280 to %oop) }
@m_fatal-epilogue = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop ()* @m_fatal-epilogue.code to %oop), %"<string>"* @m_ostr281 }
@m_cstr282 = private unnamed_addr constant [123 x i8] c"WARNING: error-prologue was reached too early in init. We'll most probably crash before printing the actual error message.\00"
@m_cstr283 = private unnamed_addr constant [2 x i8] c"\0A\00"
@m_cstr284 = private unnamed_addr constant [56 x i8] c"NESTED ERROR 1, attempting to print a limited backtrace\00"
@m_cstr285 = private unnamed_addr constant [2 x i8] c"\0A\00"
@m_cstr286 = private unnamed_addr constant [29 x i8] c"NESTED ERROR 2, giving up...\00"
@m_cstr287 = private unnamed_addr constant [2 x i8] c"\0A\00"
@m_cstr288 = private unnamed_addr constant [9 x i8] c"\0AERROR: \00"
@m_cstr289 = private unnamed_addr constant [2 x i8] c"\0A\00"
define %oop @m_error-prologue.code() {
	%t0 = alloca %oop
	%t1 = alloca %oop
	%r1 = inttoptr %word 1 to %oop
	%r2 = load %oop, %oop* @"m_*error-level*"
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = ptrtoint %oop %r1 to %word
	%r4 = add %word %r6, %r5
	%r3 = inttoptr %word %r4 to %oop
	store %oop %r3, %oop* @"m_*error-level*"
	%r7 = inttoptr %word 1 to %oop
	store %oop %r7, %oop* %t1
	%r8 = load %oop, %oop* @"m_*symbols*"
	store %oop %r8, %oop* %t1
	%r9 = inttoptr %word 0 to %oop
	%r13 = ptrtoint %oop %r9 to %word
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = icmp eq %word %r13, %r12
	%r10 = inttoptr i1 %r11 to %oop
	%r15 = ptrtoint %oop %r10 to %word
	%r14 = icmp ne %word %r15, 0
	br i1 %r14, label %L4, label %L5
L5:
	%r16 = load %oop, %oop* @"m_*maru-module*"
	%r17 = load %oop, %oop* @"m_symbol/*error-output*"
	%r18 = call %oop @m_global-variable-value.code(%oop %r16, %oop %r17)
	store %oop %r18, %oop* %t1
	%r19 = inttoptr %word 0 to %oop
	%r23 = ptrtoint %oop %r19 to %word
	%r22 = ptrtoint %oop %r18 to %word
	%r21 = icmp eq %word %r23, %r22
	%r20 = inttoptr i1 %r21 to %oop
	%r25 = ptrtoint %oop %r20 to %word
	%r24 = icmp ne %word %r25, 0
	br i1 %r24, label %L4, label %L6
L6:
	br label %L4
L4:
	%r26 = load %oop, %oop* %t1
	%r28 = ptrtoint %oop %r26 to %word
	%r27 = icmp ne %word %r28, 0
	br i1 %r27, label %L1, label %L2
L1:
	%r29 = inttoptr %word 0 to %oop
	store %oop %r29, %oop* %t0
	br label %L3
L2:
	%r30 = inttoptr %word 1 to %oop
	%r31 = inttoptr %word 2 to %oop
	%r32 = getelementptr [123 x i8], [123 x i8]* @m_cstr282, %word 0, %word 0
	%r34 = inttoptr %word 122 to %oop
	%r35 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r30, %oop %r31, %oop %r32, %oop %r34)
	%r36 = inttoptr %word 1 to %oop
	%r37 = inttoptr %word 2 to %oop
	%r38 = getelementptr [2 x i8], [2 x i8]* @m_cstr283, %word 0, %word 0
	%r40 = inttoptr %word 1 to %oop
	%r41 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r36, %oop %r37, %oop %r38, %oop %r40)
	store %oop %r41, %oop* %t0
	br label %L3
L3:
	%r42 = load %oop, %oop* %t0
	%r43 = load %oop, %oop* @"m_*error-level*"
	%r44 = inttoptr %word 2 to %oop
	%r48 = ptrtoint %oop %r44 to %word
	%r47 = ptrtoint %oop %r43 to %word
	%r46 = icmp eq %word %r48, %r47
	%r45 = inttoptr i1 %r46 to %oop
	%r50 = ptrtoint %oop %r45 to %word
	%r49 = icmp ne %word %r50, 0
	br i1 %r49, label %L7, label %L8
L7:
	%r51 = inttoptr %word 1 to %oop
	%r52 = inttoptr %word 2 to %oop
	%r53 = getelementptr [56 x i8], [56 x i8]* @m_cstr284, %word 0, %word 0
	%r55 = inttoptr %word 55 to %oop
	%r56 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r51, %oop %r52, %oop %r53, %oop %r55)
	%r57 = inttoptr %word 1 to %oop
	%r58 = inttoptr %word 2 to %oop
	%r59 = getelementptr [2 x i8], [2 x i8]* @m_cstr285, %word 0, %word 0
	%r61 = inttoptr %word 1 to %oop
	%r62 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r57, %oop %r58, %oop %r59, %oop %r61)
	%r63 = call %oop @m_abort.code()
	store %oop %r63, %oop* %t0
	br label %L9
L8:
	%r64 = load %oop, %oop* @"m_*error-level*"
	%r65 = inttoptr %word 2 to %oop
	%r69 = ptrtoint %oop %r65 to %word
	%r68 = ptrtoint %oop %r64 to %word
	%r67 = icmp slt %word %r69, %r68
	%r66 = inttoptr i1 %r67 to %oop
	%r71 = ptrtoint %oop %r66 to %word
	%r70 = icmp ne %word %r71, 0
	br i1 %r70, label %L10, label %L11
L10:
	%r72 = inttoptr %word 1 to %oop
	%r73 = inttoptr %word 2 to %oop
	%r74 = getelementptr [29 x i8], [29 x i8]* @m_cstr286, %word 0, %word 0
	%r76 = inttoptr %word 28 to %oop
	%r77 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r72, %oop %r73, %oop %r74, %oop %r76)
	%r78 = inttoptr %word 1 to %oop
	%r79 = inttoptr %word 2 to %oop
	%r80 = getelementptr [2 x i8], [2 x i8]* @m_cstr287, %word 0, %word 0
	%r82 = inttoptr %word 1 to %oop
	%r83 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r78, %oop %r79, %oop %r80, %oop %r82)
	%r84 = inttoptr %word 60 to %oop
	%r85 = inttoptr %word -1 to %oop
	%r86 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	syscall", 
	"=A,r,r,~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r84, %oop %r85)
	store %oop %r86, %oop* %t1
	br label %L12
L11:
	%r87 = inttoptr %word 0 to %oop
	store %oop %r87, %oop* %t1
	br label %L12
L12:
	%r88 = load %oop, %oop* %t1
	store %oop %r88, %oop* %t0
	br label %L9
L9:
	%r89 = load %oop, %oop* %t0
	%r90 = inttoptr %word 1 to %oop
	%r91 = inttoptr %word 2 to %oop
	%r92 = getelementptr [9 x i8], [9 x i8]* @m_cstr288, %word 0, %word 0
	%r94 = inttoptr %word 8 to %oop
	%r95 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r90, %oop %r91, %oop %r92, %oop %r94)
	%r96 = inttoptr %word 1 to %oop
	%r97 = inttoptr %word 2 to %oop
	%r98 = getelementptr [2 x i8], [2 x i8]* @m_cstr289, %word 0, %word 0
	%r100 = inttoptr %word 1 to %oop
	%r101 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r96, %oop %r97, %oop %r98, %oop %r100)
	ret %oop %r101
}
@m_cstr290 = private unnamed_addr constant [15 x i8] c"error-prologue\00"
@m_ostr291 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr290 to %oop) }
@m_error-prologue = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop ()* @m_error-prologue.code to %oop), %"<string>"* @m_ostr291 }
@m_cstr292 = private unnamed_addr constant [2 x i8] c"\0A\00"
define %oop @m_error-epilogue.code() {
	%r1 = inttoptr %word 1 to %oop
	%r2 = inttoptr %word 2 to %oop
	%r3 = getelementptr [2 x i8], [2 x i8]* @m_cstr292, %word 0, %word 0
	%r5 = inttoptr %word 1 to %oop
	%r6 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r1, %oop %r2, %oop %r3, %oop %r5)
	%r7 = call %oop @m_abort.code()
	ret %oop %r7
}
@m_cstr293 = private unnamed_addr constant [15 x i8] c"error-epilogue\00"
@m_ostr294 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr293 to %oop) }
@m_error-epilogue = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop ()* @m_error-epilogue.code to %oop), %"<string>"* @m_ostr294 }
define %oop @"m_%error.code"(%oop %arg) {
	%t0 = alloca %oop
	store %oop %arg, %oop* %t0
	%r1 = load %oop, %oop* @"m_*maru-module*"
	%r2 = load %oop, %oop* @"m_symbol/*error-output*"
	%r3 = call %oop @m_global-variable-value.code(%oop %r1, %oop %r2)
	%r4 = load %oop, %oop* %t0
	%r5 = inttoptr %word 0 to %oop
	%r6 = call %oop @m_do-print.code(%oop %r3, %oop %r4, %oop %r5)
	ret %oop %r6
}
@m_cstr295 = private unnamed_addr constant [7 x i8] c"%error\00"
@m_ostr296 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr295 to %oop) }
@"m_%error" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @"m_%error.code" to %oop), %"<string>"* @m_ostr296 }
@m_cstr297 = private unnamed_addr constant [25 x i8] c": not enough arguments: \00"
@m_ostr298 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 49, %oop bitcast ([25 x i8]* @m_cstr297 to %oop) }
define %oop @"m_%not-enough-arguments.code"(%oop %name, %oop %args) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	store %oop %name, %oop* %t0
	store %oop %args, %oop* %t1
	%r1 = call %oop @m_error-prologue.code()
	%r2 = load %oop, %oop* %t0
	%r3 = call %oop @"m_%error.code"(%oop %r2)
	%r4 = getelementptr %"<string>", %"<string>"* @m_ostr298, i32 0, i32 1
	%r5 = bitcast %word* %r4 to %oop
	%r6 = call %oop @"m_%error.code"(%oop %r5)
	%r7 = load %oop, %oop* %t1
	%r8 = call %oop @"m_%error.code"(%oop %r7)
	%r9 = call %oop @m_error-epilogue.code()
	ret %oop %r9
}
@m_cstr299 = private unnamed_addr constant [22 x i8] c"%not-enough-arguments\00"
@m_ostr300 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 43, %oop bitcast ([22 x i8]* @m_cstr299 to %oop) }
@"m_%not-enough-arguments" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_%not-enough-arguments.code" to %oop), %"<string>"* @m_ostr300 }
@m_cstr301 = private unnamed_addr constant [23 x i8] c": too many arguments: \00"
@m_ostr302 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 45, %oop bitcast ([23 x i8]* @m_cstr301 to %oop) }
define %oop @"m_%too-many-arguments.code"(%oop %name, %oop %args) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	store %oop %name, %oop* %t0
	store %oop %args, %oop* %t1
	%r1 = call %oop @m_error-prologue.code()
	%r2 = load %oop, %oop* %t0
	%r3 = call %oop @"m_%error.code"(%oop %r2)
	%r4 = getelementptr %"<string>", %"<string>"* @m_ostr302, i32 0, i32 1
	%r5 = bitcast %word* %r4 to %oop
	%r6 = call %oop @"m_%error.code"(%oop %r5)
	%r7 = load %oop, %oop* %t1
	%r8 = call %oop @"m_%error.code"(%oop %r7)
	%r9 = call %oop @m_error-epilogue.code()
	ret %oop %r9
}
@m_cstr303 = private unnamed_addr constant [20 x i8] c"%too-many-arguments\00"
@m_ostr304 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 39, %oop bitcast ([20 x i8]* @m_cstr303 to %oop) }
@"m_%too-many-arguments" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_%too-many-arguments.code" to %oop), %"<string>"* @m_ostr304 }
define %oop @"m_abort/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = call %oop @m_abort.code()
	ret %oop %r1
}
@m_cstr305 = private unnamed_addr constant [21 x i8] c"abort/evaluator-stub\00"
@m_ostr306 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 41, %oop bitcast ([21 x i8]* @m_cstr305 to %oop) }
@"m_abort/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_abort/evaluator-stub.code" to %oop), %"<string>"* @m_ostr306 }
define %oop @m_max.code(%oop %a, %oop %b) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	store %oop %a, %oop* %t0
	store %oop %b, %oop* %t1
	%r1 = load %oop, %oop* %t1
	%r2 = load %oop, %oop* %t0
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = ptrtoint %oop %r1 to %word
	%r4 = icmp sgt %word %r6, %r5
	%r3 = inttoptr i1 %r4 to %oop
	%r8 = ptrtoint %oop %r3 to %word
	%r7 = icmp ne %word %r8, 0
	br i1 %r7, label %L1, label %L2
L1:
	%r9 = load %oop, %oop* %t0
	store %oop %r9, %oop* %t2
	br label %L3
L2:
	%r10 = load %oop, %oop* %t1
	store %oop %r10, %oop* %t2
	br label %L3
L3:
	%r11 = load %oop, %oop* %t2
	ret %oop %r11
}
@m_cstr307 = private unnamed_addr constant [4 x i8] c"max\00"
@m_ostr308 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr307 to %oop) }
@m_max = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @m_max.code to %oop), %"<string>"* @m_ostr308 }
define %oop @m_min.code(%oop %a, %oop %b) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	store %oop %a, %oop* %t0
	store %oop %b, %oop* %t1
	%r1 = load %oop, %oop* %t1
	%r2 = load %oop, %oop* %t0
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = ptrtoint %oop %r1 to %word
	%r4 = icmp slt %word %r6, %r5
	%r3 = inttoptr i1 %r4 to %oop
	%r8 = ptrtoint %oop %r3 to %word
	%r7 = icmp ne %word %r8, 0
	br i1 %r7, label %L1, label %L2
L1:
	%r9 = load %oop, %oop* %t0
	store %oop %r9, %oop* %t2
	br label %L3
L2:
	%r10 = load %oop, %oop* %t1
	store %oop %r10, %oop* %t2
	br label %L3
L3:
	%r11 = load %oop, %oop* %t2
	ret %oop %r11
}
@m_cstr309 = private unnamed_addr constant [4 x i8] c"min\00"
@m_ostr310 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr309 to %oop) }
@m_min = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @m_min.code to %oop), %"<string>"* @m_ostr310 }
@"m_gc/minimum-growth-unit" = global %oop inttoptr (%word 51200 to %oop)
@"m_gc/frequency" = global %oop inttoptr (%word 32768 to %oop)
@"m_gc/objects-live" = global %oop inttoptr (%word 0 to %oop)
@"m_gc/bytes-used" = global %oop inttoptr (%word 0 to %oop)
@"m_gc/bytes-free" = global %oop inttoptr (%word 0 to %oop)
@"m_gc/roots" = global %oop inttoptr (%word 0 to %oop)
@"m_gc/root-count" = global %oop inttoptr (%word 0 to %oop)
@"m_gc/root-max" = global %oop inttoptr (%word 0 to %oop)
@"m_gc/memory-base" = global %oop inttoptr (%word 0 to %oop)
@"m_gc/memory-last" = global %oop inttoptr (%word 0 to %oop)
@"m_gc/alloc-count" = global %oop inttoptr (%word 0 to %oop)
@"m_gc/collection-count" = global %oop inttoptr (%word 0 to %oop)
@m_cstr311 = private unnamed_addr constant [24 x i8] c"kernel assertion failed\00"
@m_ostr312 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 47, %oop bitcast ([24 x i8]* @m_cstr311 to %oop) }
@m_cstr313 = private unnamed_addr constant [24 x i8] c"kernel assertion failed\00"
@m_ostr314 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 47, %oop bitcast ([24 x i8]* @m_cstr313 to %oop) }
@m_cstr315 = private unnamed_addr constant [14 x i8] c"out of memory\00"
@m_cstr316 = private unnamed_addr constant [2 x i8] c"\0A\00"
@m_cstr317 = private unnamed_addr constant [63 x i8] c"gc/acquire-new-heap-space: aligned-to-oop? has failed for ptr \00"
@m_ostr318 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 125, %oop bitcast ([63 x i8]* @m_cstr317 to %oop) }
define %oop @"m_gc/acquire-new-heap-space.code"(%oop %size) {
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t1 = alloca %oop
	%t3 = alloca %oop
	store %oop %size, %oop* %t0
	%r1 = load %oop, %oop* @"m_*initial-break*"
	%r3 = ptrtoint %oop %r1 to %word
	%r2 = icmp ne %word %r3, 0
	br i1 %r2, label %L1, label %L2
L1:
	%r4 = inttoptr %word 0 to %oop
	store %oop %r4, %oop* %t1
	br label %L3
L2:
	%r5 = inttoptr %word 12 to %oop
	%r6 = inttoptr %word 0 to %oop
	%r7 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	syscall", 
	"=A,r,r,~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r5, %oop %r6)
	store %oop %r7, %oop* @"m_*initial-break*"
	store %oop %r7, %oop* @"m_*current-break*"
	%r8 = inttoptr %word 0 to %oop
	store %oop %r8, %oop* %t2
	%r9 = load %oop, %oop* @"m_*current-break*"
	%r10 = inttoptr %word 0 to %oop
	%r14 = ptrtoint %oop %r10 to %word
	%r13 = ptrtoint %oop %r9 to %word
	%r12 = icmp slt %word %r14, %r13
	%r11 = inttoptr i1 %r12 to %oop
	store %oop %r11, %oop* %t2
	%r15 = inttoptr %word 0 to %oop
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = ptrtoint %oop %r11 to %word
	%r17 = icmp eq %word %r19, %r18
	%r16 = inttoptr i1 %r17 to %oop
	%r21 = ptrtoint %oop %r16 to %word
	%r20 = icmp ne %word %r21, 0
	br i1 %r20, label %L5, label %L4
L5:
	%r22 = call %oop @m_error-prologue.code()
	%r23 = getelementptr %"<string>", %"<string>"* @m_ostr312, i32 0, i32 1
	%r24 = bitcast %word* %r23 to %oop
	%r25 = call %oop @"m_%error.code"(%oop %r24)
	%r26 = call %oop @m_error-epilogue.code()
	store %oop %r26, %oop* %t2
	%r27 = inttoptr %word 0 to %oop
	%r31 = ptrtoint %oop %r27 to %word
	%r30 = ptrtoint %oop %r26 to %word
	%r29 = icmp eq %word %r31, %r30
	%r28 = inttoptr i1 %r29 to %oop
	%r33 = ptrtoint %oop %r28 to %word
	%r32 = icmp ne %word %r33, 0
	br i1 %r32, label %L6, label %L4
L6:
	br label %L4
L4:
	%r34 = load %oop, %oop* %t2
	store %oop %r34, %oop* %t1
	br label %L3
L3:
	%r35 = load %oop, %oop* %t1
	%r36 = inttoptr %word 12 to %oop
	%r37 = load %oop, %oop* %t0
	%r38 = load %oop, %oop* @"m_*current-break*"
	%r42 = ptrtoint %oop %r38 to %word
	%r41 = ptrtoint %oop %r37 to %word
	%r40 = add %word %r42, %r41
	%r39 = inttoptr %word %r40 to %oop
	%r43 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	syscall", 
	"=A,r,r,~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r36, %oop %r39)
	store %oop %r43, %oop* %t1
	%r44 = load %oop, %oop* @"m_*current-break*"
	store %oop %r44, %oop* %t2
	%r45 = inttoptr %word 0 to %oop
	store %oop %r45, %oop* %t3
	%r46 = load %oop, %oop* @"m_*current-break*"
	%r47 = load %oop, %oop* %t1
	%r51 = ptrtoint %oop %r47 to %word
	%r50 = ptrtoint %oop %r46 to %word
	%r49 = sub %word %r51, %r50
	%r48 = inttoptr %word %r49 to %oop
	%r52 = load %oop, %oop* %t0
	%r56 = ptrtoint %oop %r52 to %word
	%r55 = ptrtoint %oop %r48 to %word
	%r54 = icmp eq %word %r56, %r55
	%r53 = inttoptr i1 %r54 to %oop
	store %oop %r53, %oop* %t3
	%r57 = inttoptr %word 0 to %oop
	%r61 = ptrtoint %oop %r57 to %word
	%r60 = ptrtoint %oop %r53 to %word
	%r59 = icmp eq %word %r61, %r60
	%r58 = inttoptr i1 %r59 to %oop
	%r63 = ptrtoint %oop %r58 to %word
	%r62 = icmp ne %word %r63, 0
	br i1 %r62, label %L8, label %L7
L8:
	%r64 = call %oop @m_error-prologue.code()
	%r65 = getelementptr %"<string>", %"<string>"* @m_ostr314, i32 0, i32 1
	%r66 = bitcast %word* %r65 to %oop
	%r67 = call %oop @"m_%error.code"(%oop %r66)
	%r68 = call %oop @m_error-epilogue.code()
	store %oop %r68, %oop* %t3
	%r69 = inttoptr %word 0 to %oop
	%r73 = ptrtoint %oop %r69 to %word
	%r72 = ptrtoint %oop %r68 to %word
	%r71 = icmp eq %word %r73, %r72
	%r70 = inttoptr i1 %r71 to %oop
	%r75 = ptrtoint %oop %r70 to %word
	%r74 = icmp ne %word %r75, 0
	br i1 %r74, label %L9, label %L7
L9:
	br label %L7
L7:
	%r76 = load %oop, %oop* %t3
	%r77 = load %oop, %oop* %t1
	store %oop %r77, %oop* @"m_*current-break*"
	%r78 = load %oop, %oop* %t2
	store %oop %r78, %oop* %t2
	%r79 = inttoptr %word 0 to %oop
	store %oop %r79, %oop* %t1
	%r80 = load %oop, %oop* %t2
	store %oop %r80, %oop* %t1
	%r81 = inttoptr %word 0 to %oop
	%r85 = ptrtoint %oop %r81 to %word
	%r84 = ptrtoint %oop %r80 to %word
	%r83 = icmp eq %word %r85, %r84
	%r82 = inttoptr i1 %r83 to %oop
	%r87 = ptrtoint %oop %r82 to %word
	%r86 = icmp ne %word %r87, 0
	br i1 %r86, label %L11, label %L10
L11:
	%r88 = call %oop @m_fatal-prologue.code()
	%r89 = inttoptr %word 1 to %oop
	%r90 = inttoptr %word 2 to %oop
	%r91 = getelementptr [14 x i8], [14 x i8]* @m_cstr315, %word 0, %word 0
	%r93 = inttoptr %word 13 to %oop
	%r94 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r89, %oop %r90, %oop %r91, %oop %r93)
	%r95 = inttoptr %word 1 to %oop
	%r96 = inttoptr %word 2 to %oop
	%r97 = getelementptr [2 x i8], [2 x i8]* @m_cstr316, %word 0, %word 0
	%r99 = inttoptr %word 1 to %oop
	%r100 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r95, %oop %r96, %oop %r97, %oop %r99)
	%r101 = call %oop @m_fatal-epilogue.code()
	store %oop %r101, %oop* %t1
	%r102 = inttoptr %word 0 to %oop
	%r106 = ptrtoint %oop %r102 to %word
	%r105 = ptrtoint %oop %r101 to %word
	%r104 = icmp eq %word %r106, %r105
	%r103 = inttoptr i1 %r104 to %oop
	%r108 = ptrtoint %oop %r103 to %word
	%r107 = icmp ne %word %r108, 0
	br i1 %r107, label %L12, label %L10
L12:
	br label %L10
L10:
	%r109 = load %oop, %oop* %t1
	%r110 = inttoptr %word 32 to %oop
	%r111 = load %oop, %oop* %t0
	%r115 = ptrtoint %oop %r111 to %word
	%r114 = ptrtoint %oop %r110 to %word
	%r113 = sub %word %r115, %r114
	%r112 = inttoptr %word %r113 to %oop
	%r116 = inttoptr %word 1 to %oop
	%r117 = load %oop, %oop* %t2
	%r121 = bitcast %oop %r117 to [0 x %oop]*
	%r120 = ptrtoint %oop %r116 to %word
	%r119 = getelementptr [0 x %oop], [0 x %oop]* %r121, %word 0, %word %r120
	store %oop %r112, %oop* %r119
	%r118 = bitcast %oop %r112 to %oop
	%r122 = inttoptr %word 0 to %oop
	%r123 = inttoptr %word 2 to %oop
	%r124 = load %oop, %oop* %t2
	%r128 = bitcast %oop %r124 to [0 x %oop]*
	%r127 = ptrtoint %oop %r123 to %word
	%r126 = getelementptr [0 x %oop], [0 x %oop]* %r128, %word 0, %word %r127
	store %oop %r122, %oop* %r126
	%r125 = bitcast %oop %r122 to %oop
	%r129 = load %oop, %oop* %t2
	%r130 = inttoptr %word 0 to %oop
	%r131 = load %oop, %oop* %t2
	%r135 = bitcast %oop %r131 to [0 x %oop]*
	%r134 = ptrtoint %oop %r130 to %word
	%r133 = getelementptr [0 x %oop], [0 x %oop]* %r135, %word 0, %word %r134
	store %oop %r129, %oop* %r133
	%r132 = bitcast %oop %r129 to %oop
	%r136 = inttoptr %word 0 to %oop
	%r137 = inttoptr %word 0 to %oop
	store %oop %r137, %oop* %t1
	%r138 = inttoptr %word 7 to %oop
	%r139 = load %oop, %oop* %t2
	%r143 = ptrtoint %oop %r139 to %word
	%r142 = ptrtoint %oop %r138 to %word
	%r141 = and %word %r143, %r142
	%r140 = inttoptr %word %r141 to %oop
	%r144 = inttoptr %word 0 to %oop
	%r148 = ptrtoint %oop %r144 to %word
	%r147 = ptrtoint %oop %r140 to %word
	%r146 = icmp eq %word %r148, %r147
	%r145 = inttoptr i1 %r146 to %oop
	store %oop %r145, %oop* %t1
	%r149 = inttoptr %word 0 to %oop
	%r153 = ptrtoint %oop %r149 to %word
	%r152 = ptrtoint %oop %r145 to %word
	%r151 = icmp eq %word %r153, %r152
	%r150 = inttoptr i1 %r151 to %oop
	%r155 = ptrtoint %oop %r150 to %word
	%r154 = icmp ne %word %r155, 0
	br i1 %r154, label %L14, label %L13
L14:
	%r156 = call %oop @m_error-prologue.code()
	%r157 = getelementptr %"<string>", %"<string>"* @m_ostr318, i32 0, i32 1
	%r158 = bitcast %word* %r157 to %oop
	%r159 = call %oop @"m_%error.code"(%oop %r158)
	%r160 = load %oop, %oop* %t2
	%r161 = call %oop @"m_%error.code"(%oop %r160)
	%r162 = call %oop @m_error-epilogue.code()
	store %oop %r162, %oop* %t1
	%r163 = inttoptr %word 0 to %oop
	%r167 = ptrtoint %oop %r163 to %word
	%r166 = ptrtoint %oop %r162 to %word
	%r165 = icmp eq %word %r167, %r166
	%r164 = inttoptr i1 %r165 to %oop
	%r169 = ptrtoint %oop %r164 to %word
	%r168 = icmp ne %word %r169, 0
	br i1 %r168, label %L15, label %L13
L15:
	br label %L13
L13:
	%r170 = load %oop, %oop* %t1
	%r171 = load %oop, %oop* %t2
	ret %oop %r171
}
@m_cstr319 = private unnamed_addr constant [26 x i8] c"gc/acquire-new-heap-space\00"
@m_ostr320 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 51, %oop bitcast ([26 x i8]* @m_cstr319 to %oop) }
@"m_gc/acquire-new-heap-space" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @"m_gc/acquire-new-heap-space.code" to %oop), %"<string>"* @m_ostr320 }
define %oop @"m_gc/grow-heap.code"(%oop %size) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	store %oop %size, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @"m_gc/acquire-new-heap-space.code"(%oop %r1)
	store %oop %r2, %oop* %t1
	%r3 = inttoptr %word 0 to %oop
	%r4 = load %oop, %oop* @"m_gc/memory-last"
	%r8 = bitcast %oop %r4 to [0 x %oop]*
	%r7 = ptrtoint %oop %r3 to %word
	%r6 = getelementptr [0 x %oop], [0 x %oop]* %r8, %word 0, %word %r7
	%r5 = load %oop, %oop* %r6
	%r9 = inttoptr %word 0 to %oop
	%r10 = load %oop, %oop* %t1
	%r14 = bitcast %oop %r10 to [0 x %oop]*
	%r13 = ptrtoint %oop %r9 to %word
	%r12 = getelementptr [0 x %oop], [0 x %oop]* %r14, %word 0, %word %r13
	store %oop %r5, %oop* %r12
	%r11 = bitcast %oop %r5 to %oop
	%r15 = load %oop, %oop* %t1
	%r16 = inttoptr %word 0 to %oop
	%r17 = load %oop, %oop* @"m_gc/memory-last"
	%r21 = bitcast %oop %r17 to [0 x %oop]*
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = getelementptr [0 x %oop], [0 x %oop]* %r21, %word 0, %word %r20
	store %oop %r15, %oop* %r19
	%r18 = bitcast %oop %r15 to %oop
	%r22 = load %oop, %oop* %t1
	ret %oop %r22
}
@m_cstr321 = private unnamed_addr constant [13 x i8] c"gc/grow-heap\00"
@m_ostr322 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 25, %oop bitcast ([13 x i8]* @m_cstr321 to %oop) }
@"m_gc/grow-heap" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @"m_gc/grow-heap.code" to %oop), %"<string>"* @m_ostr322 }
define %oop @"m_gc/object-size.code"(%oop %obj) {
	%t0 = alloca %oop
	store %oop %obj, %oop* %t0
	%r1 = inttoptr %word 1 to %oop
	%r2 = inttoptr %word 32 to %oop
	%r3 = load %oop, %oop* %t0
	%r7 = ptrtoint %oop %r3 to %word
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = sub %word %r7, %r6
	%r4 = inttoptr %word %r5 to %oop
	%r11 = bitcast %oop %r4 to [0 x %oop]*
	%r10 = ptrtoint %oop %r1 to %word
	%r9 = getelementptr [0 x %oop], [0 x %oop]* %r11, %word 0, %word %r10
	%r8 = load %oop, %oop* %r9
	ret %oop %r8
}
@m_cstr323 = private unnamed_addr constant [15 x i8] c"gc/object-size\00"
@m_ostr324 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr323 to %oop) }
@"m_gc/object-size" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @"m_gc/object-size.code" to %oop), %"<string>"* @m_ostr324 }
define %oop @"m_%next-object-from-header.code"(%oop %header) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	store %oop %header, %oop* %t0
	br label %L2
L1:
	%r1 = inttoptr %word 0 to %oop
	%r2 = load %oop, %oop* %t0
	%r6 = bitcast %oop %r2 to [0 x %oop]*
	%r5 = ptrtoint %oop %r1 to %word
	%r4 = getelementptr [0 x %oop], [0 x %oop]* %r6, %word 0, %word %r5
	%r3 = load %oop, %oop* %r4
	store %oop %r3, %oop* %t0
	%r7 = load %oop, %oop* @"m_gc/memory-base"
	%r8 = load %oop, %oop* %t0
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = icmp eq %word %r12, %r11
	%r9 = inttoptr i1 %r10 to %oop
	%r14 = ptrtoint %oop %r9 to %word
	%r13 = icmp ne %word %r14, 0
	br i1 %r13, label %L4, label %L5
L4:
	%r15 = inttoptr %word 0 to %oop
	ret %oop %r15
	store %oop %r15, %oop* %t1
	br label %L6
L5:
	%r17 = inttoptr %word 0 to %oop
	store %oop %r17, %oop* %t1
	br label %L6
L6:
	%r18 = load %oop, %oop* %t1
	br label %L2
L2:
	%r19 = inttoptr %word 2 to %oop
	%r20 = load %oop, %oop* %t0
	%r24 = bitcast %oop %r20 to [0 x %oop]*
	%r23 = ptrtoint %oop %r19 to %word
	%r22 = getelementptr [0 x %oop], [0 x %oop]* %r24, %word 0, %word %r23
	%r21 = load %oop, %oop* %r22
	%r25 = inttoptr %word 1 to %oop
	%r29 = ptrtoint %oop %r25 to %word
	%r28 = ptrtoint %oop %r21 to %word
	%r27 = and %word %r29, %r28
	%r26 = inttoptr %word %r27 to %oop
	%r33 = ptrtoint %oop %r26 to %word
	%r32 = icmp eq %word %r33, 0
	%r31 = zext i1 %r32 to %word
	%r30 = inttoptr %word %r31 to %oop
	%r35 = ptrtoint %oop %r30 to %word
	%r34 = icmp ne %word %r35, 0
	br i1 %r34, label %L1, label %L3
L3:
	%r36 = inttoptr %word 32 to %oop
	%r37 = load %oop, %oop* %t0
	%r41 = ptrtoint %oop %r37 to %word
	%r40 = ptrtoint %oop %r36 to %word
	%r39 = add %word %r41, %r40
	%r38 = inttoptr %word %r39 to %oop
	ret %oop %r38
}
@m_cstr325 = private unnamed_addr constant [25 x i8] c"%next-object-from-header\00"
@m_ostr326 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 49, %oop bitcast ([25 x i8]* @m_cstr325 to %oop) }
@"m_%next-object-from-header" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @"m_%next-object-from-header.code" to %oop), %"<string>"* @m_ostr326 }
define %oop @"m_gc/first-object.code"() {
	%r1 = inttoptr %word 0 to %oop
	%r2 = load %oop, %oop* @"m_gc/memory-base"
	%r6 = bitcast %oop %r2 to [0 x %oop]*
	%r5 = ptrtoint %oop %r1 to %word
	%r4 = getelementptr [0 x %oop], [0 x %oop]* %r6, %word 0, %word %r5
	%r3 = load %oop, %oop* %r4
	%r7 = call %oop @"m_%next-object-from-header.code"(%oop %r3)
	ret %oop %r7
}
@m_cstr327 = private unnamed_addr constant [16 x i8] c"gc/first-object\00"
@m_ostr328 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 31, %oop bitcast ([16 x i8]* @m_cstr327 to %oop) }
@"m_gc/first-object" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop ()* @"m_gc/first-object.code" to %oop), %"<string>"* @m_ostr328 }
define %oop @"m_gc/next-object.code"(%oop %obj) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	store %oop %obj, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r3 = ptrtoint %oop %r1 to %word
	%r2 = icmp ne %word %r3, 0
	br i1 %r2, label %L1, label %L2
L1:
	%r4 = inttoptr %word 0 to %oop
	%r5 = inttoptr %word 32 to %oop
	%r6 = load %oop, %oop* %t0
	%r10 = ptrtoint %oop %r6 to %word
	%r9 = ptrtoint %oop %r5 to %word
	%r8 = sub %word %r10, %r9
	%r7 = inttoptr %word %r8 to %oop
	%r14 = bitcast %oop %r7 to [0 x %oop]*
	%r13 = ptrtoint %oop %r4 to %word
	%r12 = getelementptr [0 x %oop], [0 x %oop]* %r14, %word 0, %word %r13
	%r11 = load %oop, %oop* %r12
	%r15 = call %oop @"m_%next-object-from-header.code"(%oop %r11)
	store %oop %r15, %oop* %t1
	br label %L3
L2:
	%r16 = inttoptr %word 0 to %oop
	store %oop %r16, %oop* %t1
	br label %L3
L3:
	%r17 = load %oop, %oop* %t1
	ret %oop %r17
}
@m_cstr329 = private unnamed_addr constant [15 x i8] c"gc/next-object\00"
@m_ostr330 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr329 to %oop) }
@"m_gc/next-object" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @"m_gc/next-object.code" to %oop), %"<string>"* @m_ostr330 }
define %oop @"m_gc/sweep.code"() {
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	%r1 = inttoptr %word 0 to %oop
	%r2 = load %oop, %oop* @"m_gc/memory-base"
	store %oop %r2, %oop* %t0
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t1
	%r4 = inttoptr %word 0 to %oop
	store %oop %r4, %oop* %t2
	%r5 = inttoptr %word 0 to %oop
	store %oop %r5, %oop* %t3
	br label %L2
L1:
	%r6 = inttoptr %word 2 to %oop
	%r7 = load %oop, %oop* %t0
	%r11 = bitcast %oop %r7 to [0 x %oop]*
	%r10 = ptrtoint %oop %r6 to %word
	%r9 = getelementptr [0 x %oop], [0 x %oop]* %r11, %word 0, %word %r10
	%r8 = load %oop, %oop* %r9
	store %oop %r8, %oop* %t4
	%r12 = inttoptr %word 4 to %oop
	%r13 = load %oop, %oop* %t4
	%r17 = ptrtoint %oop %r13 to %word
	%r16 = ptrtoint %oop %r12 to %word
	%r15 = and %word %r17, %r16
	%r14 = inttoptr %word %r15 to %oop
	%r19 = ptrtoint %oop %r14 to %word
	%r18 = icmp ne %word %r19, 0
	br i1 %r18, label %L4, label %L5
L4:
	%r20 = inttoptr %word 0 to %oop
	%r21 = inttoptr %word 1 to %oop
	%r22 = load %oop, %oop* %t0
	%r26 = bitcast %oop %r22 to [0 x %oop]*
	%r25 = ptrtoint %oop %r21 to %word
	%r24 = getelementptr [0 x %oop], [0 x %oop]* %r26, %word 0, %word %r25
	%r23 = load %oop, %oop* %r24
	%r27 = load %oop, %oop* %t2
	%r31 = ptrtoint %oop %r27 to %word
	%r30 = ptrtoint %oop %r23 to %word
	%r29 = add %word %r31, %r30
	%r28 = inttoptr %word %r29 to %oop
	store %oop %r28, %oop* %t2
	%r32 = inttoptr %word 1 to %oop
	%r33 = load %oop, %oop* %t1
	%r37 = ptrtoint %oop %r33 to %word
	%r36 = ptrtoint %oop %r32 to %word
	%r35 = add %word %r37, %r36
	%r34 = inttoptr %word %r35 to %oop
	store %oop %r34, %oop* %t1
	%r38 = inttoptr %word 4 to %oop
	%r39 = load %oop, %oop* %t4
	%r43 = ptrtoint %oop %r39 to %word
	%r42 = ptrtoint %oop %r38 to %word
	%r41 = xor %word %r43, %r42
	%r40 = inttoptr %word %r41 to %oop
	%r44 = inttoptr %word 2 to %oop
	%r45 = load %oop, %oop* %t0
	%r49 = bitcast %oop %r45 to [0 x %oop]*
	%r48 = ptrtoint %oop %r44 to %word
	%r47 = getelementptr [0 x %oop], [0 x %oop]* %r49, %word 0, %word %r48
	store %oop %r40, %oop* %r47
	%r46 = bitcast %oop %r40 to %oop
	store %oop %r46, %oop* %t5
	br label %L6
L5:
	%r50 = inttoptr %word 0 to %oop
	%r51 = inttoptr %word 1 to %oop
	%r52 = load %oop, %oop* %t0
	%r56 = bitcast %oop %r52 to [0 x %oop]*
	%r55 = ptrtoint %oop %r51 to %word
	%r54 = getelementptr [0 x %oop], [0 x %oop]* %r56, %word 0, %word %r55
	%r53 = load %oop, %oop* %r54
	%r57 = load %oop, %oop* %t3
	%r61 = ptrtoint %oop %r57 to %word
	%r60 = ptrtoint %oop %r53 to %word
	%r59 = add %word %r61, %r60
	%r58 = inttoptr %word %r59 to %oop
	store %oop %r58, %oop* %t3
	%r62 = inttoptr %word 0 to %oop
	%r63 = inttoptr %word 2 to %oop
	%r64 = load %oop, %oop* %t0
	%r68 = bitcast %oop %r64 to [0 x %oop]*
	%r67 = ptrtoint %oop %r63 to %word
	%r66 = getelementptr [0 x %oop], [0 x %oop]* %r68, %word 0, %word %r67
	store %oop %r62, %oop* %r66
	%r65 = bitcast %oop %r62 to %oop
	%r69 = inttoptr %word 0 to %oop
	%r70 = inttoptr %word 3 to %oop
	%r71 = load %oop, %oop* %t0
	%r75 = bitcast %oop %r71 to [0 x %oop]*
	%r74 = ptrtoint %oop %r70 to %word
	%r73 = getelementptr [0 x %oop], [0 x %oop]* %r75, %word 0, %word %r74
	store %oop %r69, %oop* %r73
	%r72 = bitcast %oop %r69 to %oop
	store %oop %r72, %oop* %t5
	br label %L6
L6:
	%r76 = load %oop, %oop* %t5
	%r77 = inttoptr %word 1 to %oop
	store %oop %r77, %oop* %t4
	%r78 = inttoptr %word 0 to %oop
	%r79 = load %oop, %oop* %t0
	%r83 = bitcast %oop %r79 to [0 x %oop]*
	%r82 = ptrtoint %oop %r78 to %word
	%r81 = getelementptr [0 x %oop], [0 x %oop]* %r83, %word 0, %word %r82
	%r80 = load %oop, %oop* %r81
	store %oop %r80, %oop* %t0
	%r84 = load %oop, %oop* @"m_gc/memory-base"
	%r88 = ptrtoint %oop %r84 to %word
	%r87 = ptrtoint %oop %r80 to %word
	%r86 = icmp eq %word %r88, %r87
	%r85 = inttoptr i1 %r86 to %oop
	store %oop %r85, %oop* %t4
	%r89 = inttoptr %word 0 to %oop
	%r93 = ptrtoint %oop %r89 to %word
	%r92 = ptrtoint %oop %r85 to %word
	%r91 = icmp eq %word %r93, %r92
	%r90 = inttoptr i1 %r91 to %oop
	%r95 = ptrtoint %oop %r90 to %word
	%r94 = icmp ne %word %r95, 0
	br i1 %r94, label %L7, label %L8
L8:
	%r96 = inttoptr %word 0 to %oop
	store %oop %r96, %oop* %t0
	store %oop %r96, %oop* %t4
	%r97 = inttoptr %word 0 to %oop
	%r101 = ptrtoint %oop %r97 to %word
	%r100 = ptrtoint %oop %r96 to %word
	%r99 = icmp eq %word %r101, %r100
	%r98 = inttoptr i1 %r99 to %oop
	%r103 = ptrtoint %oop %r98 to %word
	%r102 = icmp ne %word %r103, 0
	br i1 %r102, label %L7, label %L9
L9:
	br label %L7
L7:
	%r104 = load %oop, %oop* %t4
	br label %L2
L2:
	%r105 = load %oop, %oop* %t0
	%r107 = ptrtoint %oop %r105 to %word
	%r106 = icmp ne %word %r107, 0
	br i1 %r106, label %L1, label %L3
L3:
	%r108 = load %oop, %oop* %t1
	store %oop %r108, %oop* @"m_gc/objects-live"
	%r109 = load %oop, %oop* %t2
	store %oop %r109, %oop* @"m_gc/bytes-used"
	%r110 = load %oop, %oop* %t3
	store %oop %r110, %oop* @"m_gc/bytes-free"
	%r111 = inttoptr %word 0 to %oop
	%r112 = inttoptr %word 0 to %oop
	ret %oop %r112
}
@m_cstr331 = private unnamed_addr constant [9 x i8] c"gc/sweep\00"
@m_ostr332 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr331 to %oop) }
@"m_gc/sweep" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop ()* @"m_gc/sweep.code" to %oop), %"<string>"* @m_ostr332 }
@m_cstr333 = private unnamed_addr constant [50 x i8] c"gc/mark-and-trace: attempt to mark dead object %p\00"
@m_cstr334 = private unnamed_addr constant [2 x i8] c"\0A\00"
define %oop @"m_gc/mark-and-trace.code"(%oop %obj) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	store %oop %obj, %oop* %t0
	%r1 = inttoptr %word 1 to %oop
	store %oop %r1, %oop* %t1
	%r2 = inttoptr %word 1 to %oop
	store %oop %r2, %oop* %t2
	%r3 = load %oop, %oop* %t0
	store %oop %r3, %oop* %t2
	%r4 = inttoptr %word 0 to %oop
	%r8 = ptrtoint %oop %r4 to %word
	%r7 = ptrtoint %oop %r3 to %word
	%r6 = icmp eq %word %r8, %r7
	%r5 = inttoptr i1 %r6 to %oop
	%r10 = ptrtoint %oop %r5 to %word
	%r9 = icmp ne %word %r10, 0
	br i1 %r9, label %L2, label %L3
L3:
	%r11 = inttoptr %word 7 to %oop
	%r12 = load %oop, %oop* %t0
	%r16 = ptrtoint %oop %r12 to %word
	%r15 = ptrtoint %oop %r11 to %word
	%r14 = and %word %r16, %r15
	%r13 = inttoptr %word %r14 to %oop
	%r17 = inttoptr %word 0 to %oop
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = ptrtoint %oop %r13 to %word
	%r19 = icmp eq %word %r21, %r20
	%r18 = inttoptr i1 %r19 to %oop
	store %oop %r18, %oop* %t2
	%r22 = inttoptr %word 0 to %oop
	%r26 = ptrtoint %oop %r22 to %word
	%r25 = ptrtoint %oop %r18 to %word
	%r24 = icmp eq %word %r26, %r25
	%r23 = inttoptr i1 %r24 to %oop
	%r28 = ptrtoint %oop %r23 to %word
	%r27 = icmp ne %word %r28, 0
	br i1 %r27, label %L2, label %L4
L4:
	br label %L2
L2:
	%r29 = load %oop, %oop* %t2
	%r33 = ptrtoint %oop %r29 to %word
	%r32 = icmp eq %word %r33, 0
	%r31 = zext i1 %r32 to %word
	%r30 = inttoptr %word %r31 to %oop
	%r37 = ptrtoint %oop %r30 to %word
	%r36 = icmp eq %word %r37, 0
	%r35 = zext i1 %r36 to %word
	%r34 = inttoptr %word %r35 to %oop
	store %oop %r34, %oop* %t1
	%r38 = inttoptr %word 0 to %oop
	%r42 = ptrtoint %oop %r38 to %word
	%r41 = ptrtoint %oop %r34 to %word
	%r40 = icmp eq %word %r42, %r41
	%r39 = inttoptr i1 %r40 to %oop
	%r44 = ptrtoint %oop %r39 to %word
	%r43 = icmp ne %word %r44, 0
	br i1 %r43, label %L1, label %L5
L5:
	%r45 = load %oop, %oop* @"m_gc/memory-base"
	%r46 = load %oop, %oop* %t0
	%r50 = ptrtoint %oop %r46 to %word
	%r49 = ptrtoint %oop %r45 to %word
	%r48 = icmp slt %word %r50, %r49
	%r47 = inttoptr i1 %r48 to %oop
	%r54 = ptrtoint %oop %r47 to %word
	%r53 = icmp eq %word %r54, 0
	%r52 = zext i1 %r53 to %word
	%r51 = inttoptr %word %r52 to %oop
	store %oop %r51, %oop* %t1
	%r55 = inttoptr %word 0 to %oop
	%r59 = ptrtoint %oop %r55 to %word
	%r58 = ptrtoint %oop %r51 to %word
	%r57 = icmp eq %word %r59, %r58
	%r56 = inttoptr i1 %r57 to %oop
	%r61 = ptrtoint %oop %r56 to %word
	%r60 = icmp ne %word %r61, 0
	br i1 %r60, label %L1, label %L6
L6:
	%r62 = inttoptr %word 32 to %oop
	%r63 = load %oop, %oop* %t0
	%r67 = ptrtoint %oop %r63 to %word
	%r66 = ptrtoint %oop %r62 to %word
	%r65 = sub %word %r67, %r66
	%r64 = inttoptr %word %r65 to %oop
	store %oop %r64, %oop* %t2
	%r68 = inttoptr %word 2 to %oop
	%r69 = load %oop, %oop* %t2
	%r73 = bitcast %oop %r69 to [0 x %oop]*
	%r72 = ptrtoint %oop %r68 to %word
	%r71 = getelementptr [0 x %oop], [0 x %oop]* %r73, %word 0, %word %r72
	%r70 = load %oop, %oop* %r71
	store %oop %r70, %oop* %t3
	%r74 = inttoptr %word 0 to %oop
	%r75 = inttoptr %word 0 to %oop
	%r76 = inttoptr %word 0 to %oop
	store %oop %r76, %oop* %t4
	%r77 = load %oop, %oop* %t3
	%r78 = inttoptr %word 1 to %oop
	%r82 = ptrtoint %oop %r78 to %word
	%r81 = ptrtoint %oop %r77 to %word
	%r80 = and %word %r82, %r81
	%r79 = inttoptr %word %r80 to %oop
	store %oop %r79, %oop* %t4
	%r83 = inttoptr %word 0 to %oop
	%r87 = ptrtoint %oop %r83 to %word
	%r86 = ptrtoint %oop %r79 to %word
	%r85 = icmp eq %word %r87, %r86
	%r84 = inttoptr i1 %r85 to %oop
	%r89 = ptrtoint %oop %r84 to %word
	%r88 = icmp ne %word %r89, 0
	br i1 %r88, label %L8, label %L7
L8:
	%r90 = call %oop @m_fatal-prologue.code()
	%r91 = inttoptr %word 1 to %oop
	%r92 = inttoptr %word 2 to %oop
	%r93 = getelementptr [50 x i8], [50 x i8]* @m_cstr333, %word 0, %word 0
	%r95 = inttoptr %word 49 to %oop
	%r96 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r91, %oop %r92, %oop %r93, %oop %r95)
	%r97 = inttoptr %word 1 to %oop
	%r98 = inttoptr %word 2 to %oop
	%r99 = getelementptr [2 x i8], [2 x i8]* @m_cstr334, %word 0, %word 0
	%r101 = inttoptr %word 1 to %oop
	%r102 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r97, %oop %r98, %oop %r99, %oop %r101)
	%r103 = call %oop @m_fatal-epilogue.code()
	store %oop %r103, %oop* %t4
	%r104 = inttoptr %word 0 to %oop
	%r108 = ptrtoint %oop %r104 to %word
	%r107 = ptrtoint %oop %r103 to %word
	%r106 = icmp eq %word %r108, %r107
	%r105 = inttoptr i1 %r106 to %oop
	%r110 = ptrtoint %oop %r105 to %word
	%r109 = icmp ne %word %r110, 0
	br i1 %r109, label %L9, label %L7
L9:
	br label %L7
L7:
	%r111 = load %oop, %oop* %t4
	%r112 = inttoptr %word 0 to %oop
	store %oop %r112, %oop* %t4
	%r113 = inttoptr %word 4 to %oop
	%r114 = load %oop, %oop* %t3
	%r118 = ptrtoint %oop %r114 to %word
	%r117 = ptrtoint %oop %r113 to %word
	%r116 = and %word %r118, %r117
	%r115 = inttoptr %word %r116 to %oop
	store %oop %r115, %oop* %t4
	%r119 = inttoptr %word 0 to %oop
	%r123 = ptrtoint %oop %r119 to %word
	%r122 = ptrtoint %oop %r115 to %word
	%r121 = icmp eq %word %r123, %r122
	%r120 = inttoptr i1 %r121 to %oop
	%r125 = ptrtoint %oop %r120 to %word
	%r124 = icmp ne %word %r125, 0
	br i1 %r124, label %L11, label %L10
L11:
	%r126 = inttoptr %word 4 to %oop
	%r127 = load %oop, %oop* %t3
	%r131 = ptrtoint %oop %r127 to %word
	%r130 = ptrtoint %oop %r126 to %word
	%r129 = or %word %r131, %r130
	%r128 = inttoptr %word %r129 to %oop
	%r132 = inttoptr %word 2 to %oop
	%r133 = load %oop, %oop* %t2
	%r137 = bitcast %oop %r133 to [0 x %oop]*
	%r136 = ptrtoint %oop %r132 to %word
	%r135 = getelementptr [0 x %oop], [0 x %oop]* %r137, %word 0, %word %r136
	store %oop %r128, %oop* %r135
	%r134 = bitcast %oop %r128 to %oop
	%r138 = inttoptr %word 0 to %oop
	store %oop %r138, %oop* %t5
	%r139 = inttoptr %word 2 to %oop
	%r140 = load %oop, %oop* %t3
	%r144 = ptrtoint %oop %r140 to %word
	%r143 = ptrtoint %oop %r139 to %word
	%r142 = and %word %r144, %r143
	%r141 = inttoptr %word %r142 to %oop
	store %oop %r141, %oop* %t5
	%r145 = inttoptr %word 0 to %oop
	%r149 = ptrtoint %oop %r145 to %word
	%r148 = ptrtoint %oop %r141 to %word
	%r147 = icmp eq %word %r149, %r148
	%r146 = inttoptr i1 %r147 to %oop
	%r151 = ptrtoint %oop %r146 to %word
	%r150 = icmp ne %word %r151, 0
	br i1 %r150, label %L13, label %L12
L13:
	%r152 = inttoptr %word 8 to %oop
	%r153 = inttoptr %word 1 to %oop
	%r154 = load %oop, %oop* %t2
	%r158 = bitcast %oop %r154 to [0 x %oop]*
	%r157 = ptrtoint %oop %r153 to %word
	%r156 = getelementptr [0 x %oop], [0 x %oop]* %r158, %word 0, %word %r157
	%r155 = load %oop, %oop* %r156
	%r162 = ptrtoint %oop %r155 to %word
	%r161 = ptrtoint %oop %r152 to %word
	%r160 = sdiv %word %r162, %r161
	%r159 = inttoptr %word %r160 to %oop
	store %oop %r159, %oop* %t6
	%r163 = inttoptr %word 0 to %oop
	%r164 = inttoptr %word 0 to %oop
	br label %L15
L14:
	%r165 = inttoptr %word 1 to %oop
	%r166 = load %oop, %oop* %t6
	%r170 = ptrtoint %oop %r166 to %word
	%r169 = ptrtoint %oop %r165 to %word
	%r168 = sub %word %r170, %r169
	%r167 = inttoptr %word %r168 to %oop
	store %oop %r167, %oop* %t6
	%r171 = load %oop, %oop* %t6
	%r172 = load %oop, %oop* %t0
	%r176 = bitcast %oop %r172 to [0 x %oop]*
	%r175 = ptrtoint %oop %r171 to %word
	%r174 = getelementptr [0 x %oop], [0 x %oop]* %r176, %word 0, %word %r175
	%r173 = load %oop, %oop* %r174
	%r177 = call %oop @"m_gc/mark-and-trace.code"(%oop %r173)
	br label %L15
L15:
	%r178 = load %oop, %oop* %t6
	%r180 = ptrtoint %oop %r178 to %word
	%r179 = icmp ne %word %r180, 0
	br i1 %r179, label %L14, label %L16
L16:
	store %oop %r178, %oop* %t5
	%r181 = inttoptr %word 0 to %oop
	%r185 = ptrtoint %oop %r181 to %word
	%r184 = ptrtoint %oop %r178 to %word
	%r183 = icmp eq %word %r185, %r184
	%r182 = inttoptr i1 %r183 to %oop
	%r187 = ptrtoint %oop %r182 to %word
	%r186 = icmp ne %word %r187, 0
	br i1 %r186, label %L17, label %L12
L17:
	br label %L12
L12:
	%r188 = load %oop, %oop* %t5
	store %oop %r188, %oop* %t4
	%r189 = inttoptr %word 0 to %oop
	%r193 = ptrtoint %oop %r189 to %word
	%r192 = ptrtoint %oop %r188 to %word
	%r191 = icmp eq %word %r193, %r192
	%r190 = inttoptr i1 %r191 to %oop
	%r195 = ptrtoint %oop %r190 to %word
	%r194 = icmp ne %word %r195, 0
	br i1 %r194, label %L18, label %L10
L18:
	br label %L10
L10:
	%r196 = load %oop, %oop* %t4
	store %oop %r196, %oop* %t1
	%r197 = inttoptr %word 0 to %oop
	%r201 = ptrtoint %oop %r197 to %word
	%r200 = ptrtoint %oop %r196 to %word
	%r199 = icmp eq %word %r201, %r200
	%r198 = inttoptr i1 %r199 to %oop
	%r203 = ptrtoint %oop %r198 to %word
	%r202 = icmp ne %word %r203, 0
	br i1 %r202, label %L1, label %L19
L19:
	br label %L1
L1:
	%r204 = load %oop, %oop* %t1
	ret %oop %r204
}
@m_cstr335 = private unnamed_addr constant [18 x i8] c"gc/mark-and-trace\00"
@m_ostr336 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr335 to %oop) }
@"m_gc/mark-and-trace" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @"m_gc/mark-and-trace.code" to %oop), %"<string>"* @m_ostr336 }
define %oop @"m_gc/collect.code"() {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	%r1 = inttoptr %word 0 to %oop
	%r2 = inttoptr %word 0 to %oop
	%r3 = load %oop, %oop* @"m_gc/roots"
	%r4 = call %oop @"m_gc/mark-and-trace.code"(%oop %r3)
	%r5 = inttoptr %word 0 to %oop
	store %oop %r5, %oop* %t0
	%r6 = load %oop, %oop* @"m_gc/root-count"
	store %oop %r6, %oop* %t1
	br label %L2
L1:
	%r7 = load %oop, %oop* %t0
	%r8 = load %oop, %oop* @"m_gc/roots"
	%r12 = bitcast %oop %r8 to [0 x %oop]*
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = getelementptr [0 x %oop], [0 x %oop]* %r12, %word 0, %word %r11
	%r9 = load %oop, %oop* %r10
	store %oop %r9, %oop* %t2
	%r13 = inttoptr %word 0 to %oop
	%r14 = load %oop, %oop* %t2
	%r18 = bitcast %oop %r14 to [0 x %oop]*
	%r17 = ptrtoint %oop %r13 to %word
	%r16 = getelementptr [0 x %oop], [0 x %oop]* %r18, %word 0, %word %r17
	%r15 = load %oop, %oop* %r16
	store %oop %r15, %oop* %t3
	%r19 = inttoptr %word 0 to %oop
	%r20 = load %oop, %oop* %t3
	%r21 = call %oop @"m_gc/mark-and-trace.code"(%oop %r20)
	%r22 = inttoptr %word 1 to %oop
	%r23 = load %oop, %oop* %t0
	%r27 = ptrtoint %oop %r23 to %word
	%r26 = ptrtoint %oop %r22 to %word
	%r25 = add %word %r27, %r26
	%r24 = inttoptr %word %r25 to %oop
	store %oop %r24, %oop* %t0
	br label %L2
L2:
	%r28 = load %oop, %oop* %t1
	%r29 = load %oop, %oop* %t0
	%r33 = ptrtoint %oop %r29 to %word
	%r32 = ptrtoint %oop %r28 to %word
	%r31 = icmp eq %word %r33, %r32
	%r30 = inttoptr i1 %r31 to %oop
	%r37 = ptrtoint %oop %r30 to %word
	%r36 = icmp eq %word %r37, 0
	%r35 = zext i1 %r36 to %word
	%r34 = inttoptr %word %r35 to %oop
	%r39 = ptrtoint %oop %r34 to %word
	%r38 = icmp ne %word %r39, 0
	br i1 %r38, label %L1, label %L3
L3:
	%r40 = inttoptr %word 0 to %oop
	%r41 = call %oop @"m_gc/sweep.code"()
	%r42 = inttoptr %word 0 to %oop
	store %oop %r42, %oop* @"m_gc/alloc-count"
	ret %oop %r42
}
@m_cstr337 = private unnamed_addr constant [11 x i8] c"gc/collect\00"
@m_ostr338 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr337 to %oop) }
@"m_gc/collect" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop ()* @"m_gc/collect.code" to %oop), %"<string>"* @m_ostr338 }
define %oop @"m_gc/allocate.code"(%oop %type, %oop %requested-size) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	%t8 = alloca %oop
	%t9 = alloca %oop
	%t11 = alloca %oop
	%t10 = alloca %oop
	store %oop %type, %oop* %t0
	store %oop %requested-size, %oop* %t1
	%r1 = inttoptr %word 0 to %oop
	%r2 = inttoptr %word 0 to %oop
	%r3 = inttoptr %word -8 to %oop
	%r4 = inttoptr %word 7 to %oop
	%r5 = load %oop, %oop* %t1
	%r9 = ptrtoint %oop %r5 to %word
	%r8 = ptrtoint %oop %r4 to %word
	%r7 = add %word %r9, %r8
	%r6 = inttoptr %word %r7 to %oop
	%r13 = ptrtoint %oop %r6 to %word
	%r12 = ptrtoint %oop %r3 to %word
	%r11 = and %word %r13, %r12
	%r10 = inttoptr %word %r11 to %oop
	store %oop %r10, %oop* %t1
	%r14 = inttoptr %word 1 to %oop
	store %oop %r14, %oop* %t2
	%r15 = load %oop, %oop* @"m_gc/frequency"
	%r16 = load %oop, %oop* @"m_gc/alloc-count"
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = icmp eq %word %r20, %r19
	%r17 = inttoptr i1 %r18 to %oop
	store %oop %r17, %oop* %t2
	%r21 = inttoptr %word 0 to %oop
	%r25 = ptrtoint %oop %r21 to %word
	%r24 = ptrtoint %oop %r17 to %word
	%r23 = icmp eq %word %r25, %r24
	%r22 = inttoptr i1 %r23 to %oop
	%r27 = ptrtoint %oop %r22 to %word
	%r26 = icmp ne %word %r27, 0
	br i1 %r26, label %L1, label %L2
L2:
	%r28 = call %oop @"m_gc/collect.code"()
	store %oop %r28, %oop* %t2
	%r29 = inttoptr %word 0 to %oop
	%r33 = ptrtoint %oop %r29 to %word
	%r32 = ptrtoint %oop %r28 to %word
	%r31 = icmp eq %word %r33, %r32
	%r30 = inttoptr i1 %r31 to %oop
	%r35 = ptrtoint %oop %r30 to %word
	%r34 = icmp ne %word %r35, 0
	br i1 %r34, label %L1, label %L3
L3:
	br label %L1
L1:
	%r36 = load %oop, %oop* %t2
	%r37 = inttoptr %word 0 to %oop
	%r38 = load %oop, %oop* @"m_gc/memory-last"
	%r42 = bitcast %oop %r38 to [0 x %oop]*
	%r41 = ptrtoint %oop %r37 to %word
	%r40 = getelementptr [0 x %oop], [0 x %oop]* %r42, %word 0, %word %r41
	%r39 = load %oop, %oop* %r40
	store %oop %r39, %oop* %t2
	%r43 = load %oop, %oop* %t2
	store %oop %r43, %oop* %t3
	%r44 = inttoptr %word 32 to %oop
	%r45 = load %oop, %oop* %t1
	%r49 = ptrtoint %oop %r45 to %word
	%r48 = ptrtoint %oop %r44 to %word
	%r47 = add %word %r49, %r48
	%r46 = inttoptr %word %r47 to %oop
	store %oop %r46, %oop* %t4
	br label %L5
L4:
	br label %L8
L7:
	br label %L8
L8:
	%r50 = inttoptr %word 0 to %oop
	%r51 = inttoptr %word 2 to %oop
	%r52 = load %oop, %oop* %t3
	%r56 = bitcast %oop %r52 to [0 x %oop]*
	%r55 = ptrtoint %oop %r51 to %word
	%r54 = getelementptr [0 x %oop], [0 x %oop]* %r56, %word 0, %word %r55
	%r53 = load %oop, %oop* %r54
	%r57 = inttoptr %word 0 to %oop
	%r61 = ptrtoint %oop %r57 to %word
	%r60 = ptrtoint %oop %r53 to %word
	%r59 = icmp eq %word %r61, %r60
	%r58 = inttoptr i1 %r59 to %oop
	%r63 = ptrtoint %oop %r58 to %word
	%r62 = icmp ne %word %r63, 0
	br i1 %r62, label %L10, label %L11
L10:
	%r64 = inttoptr %word 1 to %oop
	%r65 = load %oop, %oop* %t3
	%r69 = bitcast %oop %r65 to [0 x %oop]*
	%r68 = ptrtoint %oop %r64 to %word
	%r67 = getelementptr [0 x %oop], [0 x %oop]* %r69, %word 0, %word %r68
	%r66 = load %oop, %oop* %r67
	store %oop %r66, %oop* %t6
	br label %L14
L13:
	%r70 = inttoptr %word 0 to %oop
	%r71 = load %oop, %oop* %t3
	%r75 = bitcast %oop %r71 to [0 x %oop]*
	%r74 = ptrtoint %oop %r70 to %word
	%r73 = getelementptr [0 x %oop], [0 x %oop]* %r75, %word 0, %word %r74
	%r72 = load %oop, %oop* %r73
	store %oop %r72, %oop* %t7
	%r76 = inttoptr %word 0 to %oop
	%r77 = load %oop, %oop* %t7
	%r81 = bitcast %oop %r77 to [0 x %oop]*
	%r80 = ptrtoint %oop %r76 to %word
	%r79 = getelementptr [0 x %oop], [0 x %oop]* %r81, %word 0, %word %r80
	%r78 = load %oop, %oop* %r79
	%r82 = inttoptr %word 0 to %oop
	%r83 = load %oop, %oop* %t3
	%r87 = bitcast %oop %r83 to [0 x %oop]*
	%r86 = ptrtoint %oop %r82 to %word
	%r85 = getelementptr [0 x %oop], [0 x %oop]* %r87, %word 0, %word %r86
	store %oop %r78, %oop* %r85
	%r84 = bitcast %oop %r78 to %oop
	%r88 = inttoptr %word 1 to %oop
	%r89 = load %oop, %oop* %t7
	%r93 = bitcast %oop %r89 to [0 x %oop]*
	%r92 = ptrtoint %oop %r88 to %word
	%r91 = getelementptr [0 x %oop], [0 x %oop]* %r93, %word 0, %word %r92
	%r90 = load %oop, %oop* %r91
	%r94 = inttoptr %word 32 to %oop
	%r98 = ptrtoint %oop %r94 to %word
	%r97 = ptrtoint %oop %r90 to %word
	%r96 = add %word %r98, %r97
	%r95 = inttoptr %word %r96 to %oop
	%r99 = load %oop, %oop* %t6
	%r103 = ptrtoint %oop %r99 to %word
	%r102 = ptrtoint %oop %r95 to %word
	%r101 = add %word %r103, %r102
	%r100 = inttoptr %word %r101 to %oop
	%r104 = inttoptr %word 1 to %oop
	%r105 = load %oop, %oop* %t3
	%r109 = bitcast %oop %r105 to [0 x %oop]*
	%r108 = ptrtoint %oop %r104 to %word
	%r107 = getelementptr [0 x %oop], [0 x %oop]* %r109, %word 0, %word %r108
	store %oop %r100, %oop* %r107
	%r106 = bitcast %oop %r100 to %oop
	store %oop %r106, %oop* %t6
	%r110 = inttoptr %word 1 to %oop
	store %oop %r110, %oop* %t8
	%r111 = load %oop, %oop* @"m_gc/memory-last"
	%r112 = load %oop, %oop* %t7
	%r116 = ptrtoint %oop %r112 to %word
	%r115 = ptrtoint %oop %r111 to %word
	%r114 = icmp eq %word %r116, %r115
	%r113 = inttoptr i1 %r114 to %oop
	store %oop %r113, %oop* %t8
	%r117 = inttoptr %word 0 to %oop
	%r121 = ptrtoint %oop %r117 to %word
	%r120 = ptrtoint %oop %r113 to %word
	%r119 = icmp eq %word %r121, %r120
	%r118 = inttoptr i1 %r119 to %oop
	%r123 = ptrtoint %oop %r118 to %word
	%r122 = icmp ne %word %r123, 0
	br i1 %r122, label %L16, label %L17
L17:
	%r124 = load %oop, %oop* %t3
	store %oop %r124, %oop* @"m_gc/memory-last"
	store %oop %r124, %oop* %t8
	%r125 = inttoptr %word 0 to %oop
	%r129 = ptrtoint %oop %r125 to %word
	%r128 = ptrtoint %oop %r124 to %word
	%r127 = icmp eq %word %r129, %r128
	%r126 = inttoptr i1 %r127 to %oop
	%r131 = ptrtoint %oop %r126 to %word
	%r130 = icmp ne %word %r131, 0
	br i1 %r130, label %L16, label %L18
L18:
	br label %L16
L16:
	%r132 = load %oop, %oop* %t8
	br label %L14
L14:
	%r133 = inttoptr %word 1 to %oop
	store %oop %r133, %oop* %t7
	%r134 = inttoptr %word 2 to %oop
	%r135 = inttoptr %word 0 to %oop
	%r136 = load %oop, %oop* %t3
	%r140 = bitcast %oop %r136 to [0 x %oop]*
	%r139 = ptrtoint %oop %r135 to %word
	%r138 = getelementptr [0 x %oop], [0 x %oop]* %r140, %word 0, %word %r139
	%r137 = load %oop, %oop* %r138
	%r144 = bitcast %oop %r137 to [0 x %oop]*
	%r143 = ptrtoint %oop %r134 to %word
	%r142 = getelementptr [0 x %oop], [0 x %oop]* %r144, %word 0, %word %r143
	%r141 = load %oop, %oop* %r142
	%r145 = inttoptr %word 0 to %oop
	%r149 = ptrtoint %oop %r145 to %word
	%r148 = ptrtoint %oop %r141 to %word
	%r147 = icmp eq %word %r149, %r148
	%r146 = inttoptr i1 %r147 to %oop
	store %oop %r146, %oop* %t7
	%r150 = inttoptr %word 0 to %oop
	%r154 = ptrtoint %oop %r150 to %word
	%r153 = ptrtoint %oop %r146 to %word
	%r152 = icmp eq %word %r154, %r153
	%r151 = inttoptr i1 %r152 to %oop
	%r156 = ptrtoint %oop %r151 to %word
	%r155 = icmp ne %word %r156, 0
	br i1 %r155, label %L19, label %L20
L20:
	%r157 = load %oop, %oop* %t6
	%r158 = inttoptr %word 32 to %oop
	%r162 = ptrtoint %oop %r158 to %word
	%r161 = ptrtoint %oop %r157 to %word
	%r160 = add %word %r162, %r161
	%r159 = inttoptr %word %r160 to %oop
	%r163 = load %oop, %oop* %t3
	%r167 = ptrtoint %oop %r163 to %word
	%r166 = ptrtoint %oop %r159 to %word
	%r165 = add %word %r167, %r166
	%r164 = inttoptr %word %r165 to %oop
	%r168 = inttoptr %word 0 to %oop
	%r169 = load %oop, %oop* %t3
	%r173 = bitcast %oop %r169 to [0 x %oop]*
	%r172 = ptrtoint %oop %r168 to %word
	%r171 = getelementptr [0 x %oop], [0 x %oop]* %r173, %word 0, %word %r172
	%r170 = load %oop, %oop* %r171
	%r177 = ptrtoint %oop %r170 to %word
	%r176 = ptrtoint %oop %r164 to %word
	%r175 = icmp eq %word %r177, %r176
	%r174 = inttoptr i1 %r175 to %oop
	store %oop %r174, %oop* %t7
	%r178 = inttoptr %word 0 to %oop
	%r182 = ptrtoint %oop %r178 to %word
	%r181 = ptrtoint %oop %r174 to %word
	%r180 = icmp eq %word %r182, %r181
	%r179 = inttoptr i1 %r180 to %oop
	%r184 = ptrtoint %oop %r179 to %word
	%r183 = icmp ne %word %r184, 0
	br i1 %r183, label %L19, label %L21
L21:
	br label %L19
L19:
	%r185 = load %oop, %oop* %t7
	%r187 = ptrtoint %oop %r185 to %word
	%r186 = icmp ne %word %r187, 0
	br i1 %r186, label %L13, label %L15
L15:
	%r188 = inttoptr %word 0 to %oop
	store %oop %r188, %oop* %t8
	%r189 = load %oop, %oop* %t6
	%r190 = load %oop, %oop* %t4
	%r194 = ptrtoint %oop %r190 to %word
	%r193 = ptrtoint %oop %r189 to %word
	%r192 = icmp slt %word %r194, %r193
	%r191 = inttoptr i1 %r192 to %oop
	store %oop %r191, %oop* %t8
	%r195 = inttoptr %word 0 to %oop
	%r199 = ptrtoint %oop %r195 to %word
	%r198 = ptrtoint %oop %r191 to %word
	%r197 = icmp eq %word %r199, %r198
	%r196 = inttoptr i1 %r197 to %oop
	%r201 = ptrtoint %oop %r196 to %word
	%r200 = icmp ne %word %r201, 0
	br i1 %r200, label %L26, label %L25
L26:
	%r202 = load %oop, %oop* %t6
	%r203 = load %oop, %oop* %t1
	%r207 = ptrtoint %oop %r203 to %word
	%r206 = ptrtoint %oop %r202 to %word
	%r205 = icmp eq %word %r207, %r206
	%r204 = inttoptr i1 %r205 to %oop
	store %oop %r204, %oop* %t8
	%r208 = inttoptr %word 0 to %oop
	%r212 = ptrtoint %oop %r208 to %word
	%r211 = ptrtoint %oop %r204 to %word
	%r210 = icmp eq %word %r212, %r211
	%r209 = inttoptr i1 %r210 to %oop
	%r214 = ptrtoint %oop %r209 to %word
	%r213 = icmp ne %word %r214, 0
	br i1 %r213, label %L27, label %L25
L27:
	br label %L25
L25:
	%r215 = load %oop, %oop* %t8
	%r217 = ptrtoint %oop %r215 to %word
	%r216 = icmp ne %word %r217, 0
	br i1 %r216, label %L22, label %L23
L22:
	%r218 = inttoptr %word 0 to %oop
	%r219 = load %oop, %oop* %t4
	%r220 = load %oop, %oop* %t6
	%r224 = ptrtoint %oop %r220 to %word
	%r223 = ptrtoint %oop %r219 to %word
	%r222 = icmp sgt %word %r224, %r223
	%r221 = inttoptr i1 %r222 to %oop
	%r226 = ptrtoint %oop %r221 to %word
	%r225 = icmp ne %word %r226, 0
	br i1 %r225, label %L28, label %L29
L28:
	%r227 = load %oop, %oop* %t4
	%r228 = load %oop, %oop* %t3
	%r232 = ptrtoint %oop %r228 to %word
	%r231 = ptrtoint %oop %r227 to %word
	%r230 = add %word %r232, %r231
	%r229 = inttoptr %word %r230 to %oop
	store %oop %r229, %oop* %t9
	%r233 = inttoptr %word 0 to %oop
	%r234 = load %oop, %oop* %t4
	%r235 = load %oop, %oop* %t6
	%r239 = ptrtoint %oop %r235 to %word
	%r238 = ptrtoint %oop %r234 to %word
	%r237 = sub %word %r239, %r238
	%r236 = inttoptr %word %r237 to %oop
	%r240 = inttoptr %word 1 to %oop
	%r241 = load %oop, %oop* %t9
	%r245 = bitcast %oop %r241 to [0 x %oop]*
	%r244 = ptrtoint %oop %r240 to %word
	%r243 = getelementptr [0 x %oop], [0 x %oop]* %r245, %word 0, %word %r244
	store %oop %r236, %oop* %r243
	%r242 = bitcast %oop %r236 to %oop
	%r246 = inttoptr %word 0 to %oop
	%r247 = inttoptr %word 2 to %oop
	%r248 = load %oop, %oop* %t9
	%r252 = bitcast %oop %r248 to [0 x %oop]*
	%r251 = ptrtoint %oop %r247 to %word
	%r250 = getelementptr [0 x %oop], [0 x %oop]* %r252, %word 0, %word %r251
	store %oop %r246, %oop* %r250
	%r249 = bitcast %oop %r246 to %oop
	%r253 = inttoptr %word 0 to %oop
	%r254 = load %oop, %oop* %t3
	%r258 = bitcast %oop %r254 to [0 x %oop]*
	%r257 = ptrtoint %oop %r253 to %word
	%r256 = getelementptr [0 x %oop], [0 x %oop]* %r258, %word 0, %word %r257
	%r255 = load %oop, %oop* %r256
	%r259 = inttoptr %word 0 to %oop
	%r260 = load %oop, %oop* %t9
	%r264 = bitcast %oop %r260 to [0 x %oop]*
	%r263 = ptrtoint %oop %r259 to %word
	%r262 = getelementptr [0 x %oop], [0 x %oop]* %r264, %word 0, %word %r263
	store %oop %r255, %oop* %r262
	%r261 = bitcast %oop %r255 to %oop
	%r265 = load %oop, %oop* %t1
	%r266 = inttoptr %word 1 to %oop
	%r267 = load %oop, %oop* %t3
	%r271 = bitcast %oop %r267 to [0 x %oop]*
	%r270 = ptrtoint %oop %r266 to %word
	%r269 = getelementptr [0 x %oop], [0 x %oop]* %r271, %word 0, %word %r270
	store %oop %r265, %oop* %r269
	%r268 = bitcast %oop %r265 to %oop
	%r272 = load %oop, %oop* %t9
	%r273 = inttoptr %word 0 to %oop
	%r274 = load %oop, %oop* %t3
	%r278 = bitcast %oop %r274 to [0 x %oop]*
	%r277 = ptrtoint %oop %r273 to %word
	%r276 = getelementptr [0 x %oop], [0 x %oop]* %r278, %word 0, %word %r277
	store %oop %r272, %oop* %r276
	%r275 = bitcast %oop %r272 to %oop
	%r279 = load %oop, %oop* %t1
	store %oop %r279, %oop* %t6
	store %oop %r279, %oop* %t8
	br label %L30
L29:
	%r280 = inttoptr %word 0 to %oop
	store %oop %r280, %oop* %t8
	br label %L30
L30:
	%r281 = load %oop, %oop* %t8
	%r282 = inttoptr %word 0 to %oop
	%r283 = load %oop, %oop* %t3
	store %oop %r283, %oop* @"m_gc/memory-last"
	%r284 = inttoptr %word 1 to %oop
	%r285 = load %oop, %oop* @"m_gc/alloc-count"
	%r289 = ptrtoint %oop %r285 to %word
	%r288 = ptrtoint %oop %r284 to %word
	%r287 = add %word %r289, %r288
	%r286 = inttoptr %word %r287 to %oop
	store %oop %r286, %oop* @"m_gc/alloc-count"
	%r290 = load %oop, %oop* %t3
	store %oop %r290, %oop* %t8
	%r291 = inttoptr %word 32 to %oop
	%r292 = load %oop, %oop* %t8
	%r296 = ptrtoint %oop %r292 to %word
	%r295 = ptrtoint %oop %r291 to %word
	%r294 = add %word %r296, %r295
	%r293 = inttoptr %word %r294 to %oop
	store %oop %r293, %oop* %t9
	%r297 = inttoptr %word 1 to %oop
	%r298 = inttoptr %word 2 to %oop
	%r299 = load %oop, %oop* %t8
	%r303 = bitcast %oop %r299 to [0 x %oop]*
	%r302 = ptrtoint %oop %r298 to %word
	%r301 = getelementptr [0 x %oop], [0 x %oop]* %r303, %word 0, %word %r302
	store %oop %r297, %oop* %r301
	%r300 = bitcast %oop %r297 to %oop
	%r304 = load %oop, %oop* %t0
	%r305 = inttoptr %word 3 to %oop
	%r306 = load %oop, %oop* %t8
	%r310 = bitcast %oop %r306 to [0 x %oop]*
	%r309 = ptrtoint %oop %r305 to %word
	%r308 = getelementptr [0 x %oop], [0 x %oop]* %r310, %word 0, %word %r309
	store %oop %r304, %oop* %r308
	%r307 = bitcast %oop %r304 to %oop
	%r311 = inttoptr %word 0 to %oop
	store %oop %r311, %oop* %t10
	%r312 = load %oop, %oop* %t6
	store %oop %r312, %oop* %t11
	br label %L32
L31:
	%r313 = inttoptr %word 0 to %oop
	%r314 = load %oop, %oop* %t10
	%r315 = load %oop, %oop* %t9
	%r321 = bitcast %oop %r315 to [0 x i8]*
	%r320 = ptrtoint %oop %r314 to %word
	%r319 = getelementptr [0 x i8], [0 x i8]* %r321, %word 0, %word %r320
	%r318 = ptrtoint %oop %r313 to i8
	store i8 %r318, i8* %r319
	%r317 = zext i8 %r318 to %word
	%r316 = inttoptr %word %r317 to %oop
	%r322 = inttoptr %word 1 to %oop
	%r323 = load %oop, %oop* %t10
	%r327 = ptrtoint %oop %r323 to %word
	%r326 = ptrtoint %oop %r322 to %word
	%r325 = add %word %r327, %r326
	%r324 = inttoptr %word %r325 to %oop
	store %oop %r324, %oop* %t10
	br label %L32
L32:
	%r328 = load %oop, %oop* %t11
	%r329 = load %oop, %oop* %t10
	%r333 = ptrtoint %oop %r329 to %word
	%r332 = ptrtoint %oop %r328 to %word
	%r331 = icmp eq %word %r333, %r332
	%r330 = inttoptr i1 %r331 to %oop
	%r337 = ptrtoint %oop %r330 to %word
	%r336 = icmp eq %word %r337, 0
	%r335 = zext i1 %r336 to %word
	%r334 = inttoptr %word %r335 to %oop
	%r339 = ptrtoint %oop %r334 to %word
	%r338 = icmp ne %word %r339, 0
	br i1 %r338, label %L31, label %L33
L33:
	%r340 = inttoptr %word 0 to %oop
	%r341 = inttoptr %word 0 to %oop
	%r342 = inttoptr %word 0 to %oop
	%r343 = inttoptr %word 0 to %oop
	%r344 = load %oop, %oop* %t9
	ret %oop %r344
	store %oop %r344, %oop* %t7
	br label %L24
L23:
	%r346 = inttoptr %word 0 to %oop
	store %oop %r346, %oop* %t7
	br label %L24
L24:
	%r347 = load %oop, %oop* %t7
	store %oop %r347, %oop* %t5
	br label %L12
L11:
	%r348 = inttoptr %word 0 to %oop
	store %oop %r348, %oop* %t5
	br label %L12
L12:
	%r349 = load %oop, %oop* %t5
	%r350 = inttoptr %word 0 to %oop
	%r351 = load %oop, %oop* %t3
	%r355 = bitcast %oop %r351 to [0 x %oop]*
	%r354 = ptrtoint %oop %r350 to %word
	%r353 = getelementptr [0 x %oop], [0 x %oop]* %r355, %word 0, %word %r354
	%r352 = load %oop, %oop* %r353
	store %oop %r352, %oop* %t3
	%r356 = load %oop, %oop* %t2
	%r360 = ptrtoint %oop %r356 to %word
	%r359 = ptrtoint %oop %r352 to %word
	%r358 = icmp eq %word %r360, %r359
	%r357 = inttoptr i1 %r358 to %oop
	%r364 = ptrtoint %oop %r357 to %word
	%r363 = icmp eq %word %r364, 0
	%r362 = zext i1 %r363 to %word
	%r361 = inttoptr %word %r362 to %oop
	%r366 = ptrtoint %oop %r361 to %word
	%r365 = icmp ne %word %r366, 0
	br i1 %r365, label %L7, label %L9
L9:
	%r367 = load %oop, %oop* %t1
	%r368 = inttoptr %word 32 to %oop
	%r372 = ptrtoint %oop %r368 to %word
	%r371 = ptrtoint %oop %r367 to %word
	%r370 = add %word %r372, %r371
	%r369 = inttoptr %word %r370 to %oop
	%r373 = load %oop, %oop* @"m_gc/minimum-growth-unit"
	%r374 = call %oop @m_max.code(%oop %r369, %oop %r373)
	%r375 = call %oop @"m_gc/grow-heap.code"(%oop %r374)
	br label %L5
L5:
	%r376 = inttoptr %word 1 to %oop
	%r378 = ptrtoint %oop %r376 to %word
	%r377 = icmp ne %word %r378, 0
	br i1 %r377, label %L4, label %L6
L6:
	ret %oop %r376
}
@m_cstr339 = private unnamed_addr constant [12 x i8] c"gc/allocate\00"
@m_ostr340 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr339 to %oop) }
@"m_gc/allocate" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_gc/allocate.code" to %oop), %"<string>"* @m_ostr340 }
define %oop @"m_gc/allocate-opaque.code"(%oop %type, %oop %requested-size) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	store %oop %type, %oop* %t0
	store %oop %requested-size, %oop* %t1
	%r1 = load %oop, %oop* %t0
	%r2 = load %oop, %oop* %t1
	%r3 = call %oop @"m_gc/allocate.code"(%oop %r1, %oop %r2)
	store %oop %r3, %oop* %t2
	%r4 = inttoptr %word 32 to %oop
	%r5 = load %oop, %oop* %t2
	%r9 = ptrtoint %oop %r5 to %word
	%r8 = ptrtoint %oop %r4 to %word
	%r7 = sub %word %r9, %r8
	%r6 = inttoptr %word %r7 to %oop
	store %oop %r6, %oop* %t3
	%r10 = inttoptr %word 2 to %oop
	%r11 = inttoptr %word 2 to %oop
	%r12 = load %oop, %oop* %t3
	%r16 = bitcast %oop %r12 to [0 x %oop]*
	%r15 = ptrtoint %oop %r11 to %word
	%r14 = getelementptr [0 x %oop], [0 x %oop]* %r16, %word 0, %word %r15
	%r13 = load %oop, %oop* %r14
	%r20 = ptrtoint %oop %r13 to %word
	%r19 = ptrtoint %oop %r10 to %word
	%r18 = or %word %r20, %r19
	%r17 = inttoptr %word %r18 to %oop
	%r21 = inttoptr %word 2 to %oop
	%r22 = load %oop, %oop* %t3
	%r26 = bitcast %oop %r22 to [0 x %oop]*
	%r25 = ptrtoint %oop %r21 to %word
	%r24 = getelementptr [0 x %oop], [0 x %oop]* %r26, %word 0, %word %r25
	store %oop %r17, %oop* %r24
	%r23 = bitcast %oop %r17 to %oop
	%r27 = load %oop, %oop* %t2
	ret %oop %r27
}
@m_cstr341 = private unnamed_addr constant [19 x i8] c"gc/allocate-opaque\00"
@m_ostr342 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 37, %oop bitcast ([19 x i8]* @m_cstr341 to %oop) }
@"m_gc/allocate-opaque" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_gc/allocate-opaque.code" to %oop), %"<string>"* @m_ostr342 }
define %oop @"m_gc/grow-root-vector.code"() {
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t1 = alloca %oop
	%r1 = inttoptr %word 32 to %oop
	%r2 = load %oop, %oop* @"m_gc/root-max"
	%r3 = inttoptr %word 2 to %oop
	%r7 = ptrtoint %oop %r3 to %word
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = mul %word %r7, %r6
	%r4 = inttoptr %word %r5 to %oop
	%r8 = call %oop @m_max.code(%oop %r1, %oop %r4)
	store %oop %r8, %oop* @"m_gc/root-max"
	%r9 = inttoptr %word 5 to %oop
	%r10 = inttoptr %word 8 to %oop
	%r11 = load %oop, %oop* @"m_gc/root-max"
	%r15 = ptrtoint %oop %r11 to %word
	%r14 = ptrtoint %oop %r10 to %word
	%r13 = mul %word %r15, %r14
	%r12 = inttoptr %word %r13 to %oop
	%r16 = call %oop @"m_gc/allocate-opaque.code"(%oop %r9, %oop %r12)
	store %oop %r16, %oop* %t0
	%r17 = inttoptr %word 0 to %oop
	store %oop %r17, %oop* %t1
	%r18 = load %oop, %oop* @"m_gc/root-count"
	store %oop %r18, %oop* %t2
	br label %L2
L1:
	%r19 = load %oop, %oop* %t1
	%r20 = load %oop, %oop* @"m_gc/roots"
	%r24 = bitcast %oop %r20 to [0 x %oop]*
	%r23 = ptrtoint %oop %r19 to %word
	%r22 = getelementptr [0 x %oop], [0 x %oop]* %r24, %word 0, %word %r23
	%r21 = load %oop, %oop* %r22
	%r25 = load %oop, %oop* %t1
	%r26 = load %oop, %oop* %t0
	%r30 = bitcast %oop %r26 to [0 x %oop]*
	%r29 = ptrtoint %oop %r25 to %word
	%r28 = getelementptr [0 x %oop], [0 x %oop]* %r30, %word 0, %word %r29
	store %oop %r21, %oop* %r28
	%r27 = bitcast %oop %r21 to %oop
	%r31 = inttoptr %word 1 to %oop
	%r32 = load %oop, %oop* %t1
	%r36 = ptrtoint %oop %r32 to %word
	%r35 = ptrtoint %oop %r31 to %word
	%r34 = add %word %r36, %r35
	%r33 = inttoptr %word %r34 to %oop
	store %oop %r33, %oop* %t1
	br label %L2
L2:
	%r37 = load %oop, %oop* %t2
	%r38 = load %oop, %oop* %t1
	%r42 = ptrtoint %oop %r38 to %word
	%r41 = ptrtoint %oop %r37 to %word
	%r40 = icmp eq %word %r42, %r41
	%r39 = inttoptr i1 %r40 to %oop
	%r46 = ptrtoint %oop %r39 to %word
	%r45 = icmp eq %word %r46, 0
	%r44 = zext i1 %r45 to %word
	%r43 = inttoptr %word %r44 to %oop
	%r48 = ptrtoint %oop %r43 to %word
	%r47 = icmp ne %word %r48, 0
	br i1 %r47, label %L1, label %L3
L3:
	%r49 = load %oop, %oop* %t0
	store %oop %r49, %oop* @"m_gc/roots"
	ret %oop %r49
}
@m_cstr343 = private unnamed_addr constant [20 x i8] c"gc/grow-root-vector\00"
@m_ostr344 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 39, %oop bitcast ([20 x i8]* @m_cstr343 to %oop) }
@"m_gc/grow-root-vector" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop ()* @"m_gc/grow-root-vector.code" to %oop), %"<string>"* @m_ostr344 }
define %oop @"m_gc/push-root.code"(%oop %ptr) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	store %oop %ptr, %oop* %t0
	%r1 = inttoptr %word 0 to %oop
	%r2 = load %oop, %oop* %t0
	%r3 = load %oop, %oop* @"m_gc/root-count"
	%r4 = load %oop, %oop* @"m_gc/roots"
	%r8 = bitcast %oop %r4 to [0 x %oop]*
	%r7 = ptrtoint %oop %r3 to %word
	%r6 = getelementptr [0 x %oop], [0 x %oop]* %r8, %word 0, %word %r7
	store %oop %r2, %oop* %r6
	%r5 = bitcast %oop %r2 to %oop
	%r9 = inttoptr %word 1 to %oop
	%r10 = load %oop, %oop* @"m_gc/root-count"
	%r14 = ptrtoint %oop %r10 to %word
	%r13 = ptrtoint %oop %r9 to %word
	%r12 = add %word %r14, %r13
	%r11 = inttoptr %word %r12 to %oop
	store %oop %r11, %oop* @"m_gc/root-count"
	%r15 = load %oop, %oop* @"m_gc/root-max"
	%r16 = load %oop, %oop* @"m_gc/root-count"
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = icmp eq %word %r20, %r19
	%r17 = inttoptr i1 %r18 to %oop
	%r22 = ptrtoint %oop %r17 to %word
	%r21 = icmp ne %word %r22, 0
	br i1 %r21, label %L1, label %L2
L1:
	%r23 = call %oop @"m_gc/grow-root-vector.code"()
	store %oop %r23, %oop* %t1
	br label %L3
L2:
	%r24 = inttoptr %word 0 to %oop
	store %oop %r24, %oop* %t1
	br label %L3
L3:
	%r25 = load %oop, %oop* %t1
	ret %oop %r25
}
@m_cstr345 = private unnamed_addr constant [13 x i8] c"gc/push-root\00"
@m_ostr346 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 25, %oop bitcast ([13 x i8]* @m_cstr345 to %oop) }
@"m_gc/push-root" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @"m_gc/push-root.code" to %oop), %"<string>"* @m_ostr346 }
define %oop @"m_gc/pop-root.code"(%oop %ptr) {
	%t0 = alloca %oop
	store %oop %ptr, %oop* %t0
	%r1 = inttoptr %word 0 to %oop
	%r2 = inttoptr %word 0 to %oop
	%r3 = inttoptr %word 1 to %oop
	%r4 = load %oop, %oop* @"m_gc/root-count"
	%r8 = ptrtoint %oop %r4 to %word
	%r7 = ptrtoint %oop %r3 to %word
	%r6 = sub %word %r8, %r7
	%r5 = inttoptr %word %r6 to %oop
	store %oop %r5, %oop* @"m_gc/root-count"
	%r9 = inttoptr %word 0 to %oop
	%r10 = inttoptr %word 0 to %oop
	%r11 = load %oop, %oop* @"m_gc/root-count"
	%r12 = load %oop, %oop* @"m_gc/roots"
	%r16 = bitcast %oop %r12 to [0 x %oop]*
	%r15 = ptrtoint %oop %r11 to %word
	%r14 = getelementptr [0 x %oop], [0 x %oop]* %r16, %word 0, %word %r15
	store %oop %r10, %oop* %r14
	%r13 = bitcast %oop %r10 to %oop
	ret %oop %r13
}
@m_cstr347 = private unnamed_addr constant [12 x i8] c"gc/pop-root\00"
@m_ostr348 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr347 to %oop) }
@"m_gc/pop-root" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @"m_gc/pop-root.code" to %oop), %"<string>"* @m_ostr348 }
define %oop @"m_gc/initialize.code"() {
	%t0 = alloca %oop
	%r1 = load %oop, %oop* @"m_gc/minimum-growth-unit"
	%r2 = call %oop @"m_gc/acquire-new-heap-space.code"(%oop %r1)
	store %oop %r2, %oop* %t0
	%r3 = load %oop, %oop* %t0
	store %oop %r3, %oop* @"m_gc/memory-base"
	%r4 = load %oop, %oop* %t0
	store %oop %r4, %oop* @"m_gc/memory-last"
	%r5 = call %oop @"m_gc/grow-root-vector.code"()
	ret %oop %r5
}
@m_cstr349 = private unnamed_addr constant [14 x i8] c"gc/initialize\00"
@m_ostr350 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr349 to %oop) }
@"m_gc/initialize" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop ()* @"m_gc/initialize.code" to %oop), %"<string>"* @m_ostr350 }
define %oop @m_allocate.code(%oop %type, %oop %slot-count) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	store %oop %type, %oop* %t0
	store %oop %slot-count, %oop* %t1
	%r1 = load %oop, %oop* %t0
	%r2 = inttoptr %word 8 to %oop
	%r3 = load %oop, %oop* %t1
	%r7 = ptrtoint %oop %r3 to %word
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = mul %word %r7, %r6
	%r4 = inttoptr %word %r5 to %oop
	%r8 = call %oop @"m_gc/allocate.code"(%oop %r1, %oop %r4)
	ret %oop %r8
}
@m_cstr351 = private unnamed_addr constant [9 x i8] c"allocate\00"
@m_ostr352 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr351 to %oop) }
@m_allocate = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @m_allocate.code to %oop), %"<string>"* @m_ostr352 }
@m_cstr353 = private unnamed_addr constant [52 x i8] c"type-of: encountered something unidentifiable: {%p}\00"
@m_cstr354 = private unnamed_addr constant [2 x i8] c"\0A\00"
define %oop @m_type-of.code(%oop %ptr) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	store %oop %ptr, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r2 = inttoptr %word 0 to %oop
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = ptrtoint %oop %r1 to %word
	%r4 = icmp eq %word %r6, %r5
	%r3 = inttoptr i1 %r4 to %oop
	%r8 = ptrtoint %oop %r3 to %word
	%r7 = icmp ne %word %r8, 0
	br i1 %r7, label %L1, label %L2
L1:
	%r9 = inttoptr %word 6 to %oop
	store %oop %r9, %oop* %t1
	br label %L3
L2:
	%r10 = inttoptr %word 7 to %oop
	%r11 = load %oop, %oop* %t0
	%r15 = ptrtoint %oop %r11 to %word
	%r14 = ptrtoint %oop %r10 to %word
	%r13 = and %word %r15, %r14
	%r12 = inttoptr %word %r13 to %oop
	%r16 = inttoptr %word 0 to %oop
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = ptrtoint %oop %r12 to %word
	%r18 = icmp eq %word %r20, %r19
	%r17 = inttoptr i1 %r18 to %oop
	%r22 = ptrtoint %oop %r17 to %word
	%r21 = icmp ne %word %r22, 0
	br i1 %r21, label %L4, label %L5
L4:
	%r23 = inttoptr %word 32 to %oop
	%r24 = load %oop, %oop* %t0
	%r28 = ptrtoint %oop %r24 to %word
	%r27 = ptrtoint %oop %r23 to %word
	%r26 = sub %word %r28, %r27
	%r25 = inttoptr %word %r26 to %oop
	store %oop %r25, %oop* %t3
	%r29 = inttoptr %word 0 to %oop
	%r30 = inttoptr %word 0 to %oop
	%r31 = inttoptr %word 3 to %oop
	%r32 = load %oop, %oop* %t3
	%r36 = bitcast %oop %r32 to [0 x %oop]*
	%r35 = ptrtoint %oop %r31 to %word
	%r34 = getelementptr [0 x %oop], [0 x %oop]* %r36, %word 0, %word %r35
	%r33 = load %oop, %oop* %r34
	store %oop %r33, %oop* %t2
	br label %L6
L5:
	%r37 = inttoptr %word 1 to %oop
	%r38 = load %oop, %oop* %t0
	%r42 = ptrtoint %oop %r38 to %word
	%r41 = ptrtoint %oop %r37 to %word
	%r40 = and %word %r42, %r41
	%r39 = inttoptr %word %r40 to %oop
	%r43 = inttoptr %word 1 to %oop
	%r47 = ptrtoint %oop %r43 to %word
	%r46 = ptrtoint %oop %r39 to %word
	%r45 = icmp eq %word %r47, %r46
	%r44 = inttoptr i1 %r45 to %oop
	%r49 = ptrtoint %oop %r44 to %word
	%r48 = icmp ne %word %r49, 0
	br i1 %r48, label %L7, label %L8
L7:
	%r50 = inttoptr %word 7 to %oop
	store %oop %r50, %oop* %t3
	br label %L9
L8:
	%r51 = call %oop @m_fatal-prologue.code()
	%r52 = inttoptr %word 1 to %oop
	%r53 = inttoptr %word 2 to %oop
	%r54 = getelementptr [52 x i8], [52 x i8]* @m_cstr353, %word 0, %word 0
	%r56 = inttoptr %word 51 to %oop
	%r57 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r52, %oop %r53, %oop %r54, %oop %r56)
	%r58 = inttoptr %word 1 to %oop
	%r59 = inttoptr %word 2 to %oop
	%r60 = getelementptr [2 x i8], [2 x i8]* @m_cstr354, %word 0, %word 0
	%r62 = inttoptr %word 1 to %oop
	%r63 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r58, %oop %r59, %oop %r60, %oop %r62)
	%r64 = call %oop @m_fatal-epilogue.code()
	store %oop %r64, %oop* %t3
	br label %L9
L9:
	%r65 = load %oop, %oop* %t3
	store %oop %r65, %oop* %t2
	br label %L6
L6:
	%r66 = load %oop, %oop* %t2
	store %oop %r66, %oop* %t1
	br label %L3
L3:
	%r67 = load %oop, %oop* %t1
	ret %oop %r67
}
@m_cstr355 = private unnamed_addr constant [8 x i8] c"type-of\00"
@m_ostr356 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr355 to %oop) }
@m_type-of = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_type-of.code to %oop), %"<string>"* @m_ostr356 }
define %oop @"m_%allocate-boxed.code"(%oop %type-id, %oop %payload) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	store %oop %type-id, %oop* %t0
	store %oop %payload, %oop* %t1
	%r1 = load %oop, %oop* %t0
	%r2 = inttoptr %word 8 to %oop
	%r3 = call %oop @"m_gc/allocate-opaque.code"(%oop %r1, %oop %r2)
	store %oop %r3, %oop* %t2
	%r4 = load %oop, %oop* %t1
	%r5 = inttoptr %word 0 to %oop
	%r6 = load %oop, %oop* %t2
	%r10 = bitcast %oop %r6 to [0 x %oop]*
	%r9 = ptrtoint %oop %r5 to %word
	%r8 = getelementptr [0 x %oop], [0 x %oop]* %r10, %word 0, %word %r9
	store %oop %r4, %oop* %r8
	%r7 = bitcast %oop %r4 to %oop
	%r11 = load %oop, %oop* %t2
	ret %oop %r11
}
@m_cstr357 = private unnamed_addr constant [16 x i8] c"%allocate-boxed\00"
@m_ostr358 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 31, %oop bitcast ([16 x i8]* @m_cstr357 to %oop) }
@"m_%allocate-boxed" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_%allocate-boxed.code" to %oop), %"<string>"* @m_ostr358 }
define %oop @"m_long?.code"(%oop %obj) {
	%t0 = alloca %oop
	store %oop %obj, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @m_type-of.code(%oop %r1)
	%r3 = inttoptr %word 7 to %oop
	%r7 = ptrtoint %oop %r3 to %word
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = icmp eq %word %r7, %r6
	%r4 = inttoptr i1 %r5 to %oop
	ret %oop %r4
}
@m_cstr359 = private unnamed_addr constant [6 x i8] c"long?\00"
@m_ostr360 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr359 to %oop) }
@"m_long?" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @"m_long?.code" to %oop), %"<string>"* @m_ostr360 }
define %oop @"m_pair?.code"(%oop %obj) {
	%t0 = alloca %oop
	store %oop %obj, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @m_type-of.code(%oop %r1)
	%r3 = inttoptr %word 20 to %oop
	%r7 = ptrtoint %oop %r3 to %word
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = icmp eq %word %r7, %r6
	%r4 = inttoptr i1 %r5 to %oop
	ret %oop %r4
}
@m_cstr361 = private unnamed_addr constant [6 x i8] c"pair?\00"
@m_ostr362 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr361 to %oop) }
@"m_pair?" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @"m_pair?.code" to %oop), %"<string>"* @m_ostr362 }
define %oop @"m_string?.code"(%oop %obj) {
	%t0 = alloca %oop
	store %oop %obj, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @m_type-of.code(%oop %r1)
	%r3 = inttoptr %word 13 to %oop
	%r7 = ptrtoint %oop %r3 to %word
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = icmp eq %word %r7, %r6
	%r4 = inttoptr i1 %r5 to %oop
	ret %oop %r4
}
@m_cstr363 = private unnamed_addr constant [8 x i8] c"string?\00"
@m_ostr364 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr363 to %oop) }
@"m_string?" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @"m_string?.code" to %oop), %"<string>"* @m_ostr364 }
define %oop @"m_symbol?.code"(%oop %obj) {
	%t0 = alloca %oop
	store %oop %obj, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @m_type-of.code(%oop %r1)
	%r3 = inttoptr %word 11 to %oop
	%r7 = ptrtoint %oop %r3 to %word
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = icmp eq %word %r7, %r6
	%r4 = inttoptr i1 %r5 to %oop
	ret %oop %r4
}
@m_cstr365 = private unnamed_addr constant [8 x i8] c"symbol?\00"
@m_ostr366 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr365 to %oop) }
@"m_symbol?" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @"m_symbol?.code" to %oop), %"<string>"* @m_ostr366 }
define %oop @"m_array?.code"(%oop %obj) {
	%t0 = alloca %oop
	store %oop %obj, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @m_type-of.code(%oop %r1)
	%r3 = inttoptr %word 12 to %oop
	%r7 = ptrtoint %oop %r3 to %word
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = icmp eq %word %r7, %r6
	%r4 = inttoptr i1 %r5 to %oop
	ret %oop %r4
}
@m_cstr367 = private unnamed_addr constant [7 x i8] c"array?\00"
@m_ostr368 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr367 to %oop) }
@"m_array?" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @"m_array?.code" to %oop), %"<string>"* @m_ostr368 }
@"m_symbol/true" = global %oop inttoptr (%word 0 to %oop)
@"m_symbol/define" = global %oop inttoptr (%word 0 to %oop)
@"m_symbol/set" = global %oop inttoptr (%word 0 to %oop)
@"m_symbol/quote" = global %oop inttoptr (%word 0 to %oop)
@"m_symbol/quasiquote" = global %oop inttoptr (%word 0 to %oop)
@"m_symbol/unquote" = global %oop inttoptr (%word 0 to %oop)
@"m_symbol/unquote-splicing" = global %oop inttoptr (%word 0 to %oop)
@"m_symbol/expand" = global %oop inttoptr (%word 0 to %oop)
@"m_symbol/encode" = global %oop inttoptr (%word 0 to %oop)
@"m_symbol/apply" = global %oop inttoptr (%word 0 to %oop)
@"m_symbol/." = global %oop inttoptr (%word 0 to %oop)
@"m_symbol/lambda" = global %oop inttoptr (%word 0 to %oop)
@"m_symbol/let" = global %oop inttoptr (%word 0 to %oop)
@"m_symbol/*globals*" = global %oop inttoptr (%word 0 to %oop)
@"m_symbol/*expanders*" = global %oop inttoptr (%word 0 to %oop)
@"m_symbol/*encoders*" = global %oop inttoptr (%word 0 to %oop)
@"m_symbol/*evaluators*" = global %oop inttoptr (%word 0 to %oop)
@"m_symbol/*applicators*" = global %oop inttoptr (%word 0 to %oop)
@"m_symbol/*verbosity*" = global %oop inttoptr (%word 0 to %oop)
@"m_symbol/*optimised*" = global %oop inttoptr (%word 0 to %oop)
@m_cstr369 = private unnamed_addr constant [5 x i8] c"true\00"
@m_ostr370 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr369 to %oop) }
@m_cstr371 = private unnamed_addr constant [7 x i8] c"define\00"
@m_ostr372 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr371 to %oop) }
@m_cstr373 = private unnamed_addr constant [4 x i8] c"set\00"
@m_ostr374 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr373 to %oop) }
@m_cstr375 = private unnamed_addr constant [6 x i8] c"quote\00"
@m_ostr376 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr375 to %oop) }
@m_cstr377 = private unnamed_addr constant [11 x i8] c"quasiquote\00"
@m_ostr378 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr377 to %oop) }
@m_cstr379 = private unnamed_addr constant [8 x i8] c"unquote\00"
@m_ostr380 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr379 to %oop) }
@m_cstr381 = private unnamed_addr constant [17 x i8] c"unquote-splicing\00"
@m_ostr382 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 33, %oop bitcast ([17 x i8]* @m_cstr381 to %oop) }
@m_cstr383 = private unnamed_addr constant [7 x i8] c"expand\00"
@m_ostr384 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr383 to %oop) }
@m_cstr385 = private unnamed_addr constant [7 x i8] c"encode\00"
@m_ostr386 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr385 to %oop) }
@m_cstr387 = private unnamed_addr constant [6 x i8] c"apply\00"
@m_ostr388 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr387 to %oop) }
@m_cstr389 = private unnamed_addr constant [2 x i8] c".\00"
@m_ostr390 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 3, %oop bitcast ([2 x i8]* @m_cstr389 to %oop) }
@m_cstr391 = private unnamed_addr constant [7 x i8] c"lambda\00"
@m_ostr392 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr391 to %oop) }
@m_cstr393 = private unnamed_addr constant [4 x i8] c"let\00"
@m_ostr394 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr393 to %oop) }
@m_cstr395 = private unnamed_addr constant [10 x i8] c"*globals*\00"
@m_ostr396 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 19, %oop bitcast ([10 x i8]* @m_cstr395 to %oop) }
@m_cstr397 = private unnamed_addr constant [12 x i8] c"*expanders*\00"
@m_ostr398 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr397 to %oop) }
@m_cstr399 = private unnamed_addr constant [11 x i8] c"*encoders*\00"
@m_ostr400 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr399 to %oop) }
@m_cstr401 = private unnamed_addr constant [13 x i8] c"*evaluators*\00"
@m_ostr402 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 25, %oop bitcast ([13 x i8]* @m_cstr401 to %oop) }
@m_cstr403 = private unnamed_addr constant [14 x i8] c"*applicators*\00"
@m_ostr404 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr403 to %oop) }
@m_cstr405 = private unnamed_addr constant [17 x i8] c"*standard-input*\00"
@m_ostr406 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 33, %oop bitcast ([17 x i8]* @m_cstr405 to %oop) }
@m_cstr407 = private unnamed_addr constant [18 x i8] c"*standard-output*\00"
@m_ostr408 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr407 to %oop) }
@m_cstr409 = private unnamed_addr constant [15 x i8] c"*error-output*\00"
@m_ostr410 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr409 to %oop) }
@m_cstr411 = private unnamed_addr constant [15 x i8] c"*debug-output*\00"
@m_ostr412 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr411 to %oop) }
@m_cstr413 = private unnamed_addr constant [12 x i8] c"*verbosity*\00"
@m_ostr414 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr413 to %oop) }
@m_cstr415 = private unnamed_addr constant [12 x i8] c"*optimised*\00"
@m_ostr416 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr415 to %oop) }
define %oop @m_initialize-symbol-cache.code() {
	%r1 = getelementptr %"<string>", %"<string>"* @m_ostr370, i32 0, i32 1
	%r2 = bitcast %word* %r1 to %oop
	%r3 = call %oop @"m_string->symbol.code"(%oop %r2)
	store %oop %r3, %oop* @"m_symbol/true"
	%r4 = getelementptr %"<string>", %"<string>"* @m_ostr372, i32 0, i32 1
	%r5 = bitcast %word* %r4 to %oop
	%r6 = call %oop @"m_string->symbol.code"(%oop %r5)
	store %oop %r6, %oop* @"m_symbol/define"
	%r7 = getelementptr %"<string>", %"<string>"* @m_ostr374, i32 0, i32 1
	%r8 = bitcast %word* %r7 to %oop
	%r9 = call %oop @"m_string->symbol.code"(%oop %r8)
	store %oop %r9, %oop* @"m_symbol/set"
	%r10 = getelementptr %"<string>", %"<string>"* @m_ostr376, i32 0, i32 1
	%r11 = bitcast %word* %r10 to %oop
	%r12 = call %oop @"m_string->symbol.code"(%oop %r11)
	store %oop %r12, %oop* @"m_symbol/quote"
	%r13 = getelementptr %"<string>", %"<string>"* @m_ostr378, i32 0, i32 1
	%r14 = bitcast %word* %r13 to %oop
	%r15 = call %oop @"m_string->symbol.code"(%oop %r14)
	store %oop %r15, %oop* @"m_symbol/quasiquote"
	%r16 = getelementptr %"<string>", %"<string>"* @m_ostr380, i32 0, i32 1
	%r17 = bitcast %word* %r16 to %oop
	%r18 = call %oop @"m_string->symbol.code"(%oop %r17)
	store %oop %r18, %oop* @"m_symbol/unquote"
	%r19 = getelementptr %"<string>", %"<string>"* @m_ostr382, i32 0, i32 1
	%r20 = bitcast %word* %r19 to %oop
	%r21 = call %oop @"m_string->symbol.code"(%oop %r20)
	store %oop %r21, %oop* @"m_symbol/unquote-splicing"
	%r22 = getelementptr %"<string>", %"<string>"* @m_ostr384, i32 0, i32 1
	%r23 = bitcast %word* %r22 to %oop
	%r24 = call %oop @"m_string->symbol.code"(%oop %r23)
	store %oop %r24, %oop* @"m_symbol/expand"
	%r25 = getelementptr %"<string>", %"<string>"* @m_ostr386, i32 0, i32 1
	%r26 = bitcast %word* %r25 to %oop
	%r27 = call %oop @"m_string->symbol.code"(%oop %r26)
	store %oop %r27, %oop* @"m_symbol/encode"
	%r28 = getelementptr %"<string>", %"<string>"* @m_ostr388, i32 0, i32 1
	%r29 = bitcast %word* %r28 to %oop
	%r30 = call %oop @"m_string->symbol.code"(%oop %r29)
	store %oop %r30, %oop* @"m_symbol/apply"
	%r31 = getelementptr %"<string>", %"<string>"* @m_ostr390, i32 0, i32 1
	%r32 = bitcast %word* %r31 to %oop
	%r33 = call %oop @"m_string->symbol.code"(%oop %r32)
	store %oop %r33, %oop* @"m_symbol/."
	%r34 = getelementptr %"<string>", %"<string>"* @m_ostr392, i32 0, i32 1
	%r35 = bitcast %word* %r34 to %oop
	%r36 = call %oop @"m_string->symbol.code"(%oop %r35)
	store %oop %r36, %oop* @"m_symbol/lambda"
	%r37 = getelementptr %"<string>", %"<string>"* @m_ostr394, i32 0, i32 1
	%r38 = bitcast %word* %r37 to %oop
	%r39 = call %oop @"m_string->symbol.code"(%oop %r38)
	store %oop %r39, %oop* @"m_symbol/let"
	%r40 = getelementptr %"<string>", %"<string>"* @m_ostr396, i32 0, i32 1
	%r41 = bitcast %word* %r40 to %oop
	%r42 = call %oop @"m_string->symbol.code"(%oop %r41)
	store %oop %r42, %oop* @"m_symbol/*globals*"
	%r43 = getelementptr %"<string>", %"<string>"* @m_ostr398, i32 0, i32 1
	%r44 = bitcast %word* %r43 to %oop
	%r45 = call %oop @"m_string->symbol.code"(%oop %r44)
	store %oop %r45, %oop* @"m_symbol/*expanders*"
	%r46 = getelementptr %"<string>", %"<string>"* @m_ostr400, i32 0, i32 1
	%r47 = bitcast %word* %r46 to %oop
	%r48 = call %oop @"m_string->symbol.code"(%oop %r47)
	store %oop %r48, %oop* @"m_symbol/*encoders*"
	%r49 = getelementptr %"<string>", %"<string>"* @m_ostr402, i32 0, i32 1
	%r50 = bitcast %word* %r49 to %oop
	%r51 = call %oop @"m_string->symbol.code"(%oop %r50)
	store %oop %r51, %oop* @"m_symbol/*evaluators*"
	%r52 = getelementptr %"<string>", %"<string>"* @m_ostr404, i32 0, i32 1
	%r53 = bitcast %word* %r52 to %oop
	%r54 = call %oop @"m_string->symbol.code"(%oop %r53)
	store %oop %r54, %oop* @"m_symbol/*applicators*"
	%r55 = getelementptr %"<string>", %"<string>"* @m_ostr406, i32 0, i32 1
	%r56 = bitcast %word* %r55 to %oop
	%r57 = call %oop @"m_string->symbol.code"(%oop %r56)
	store %oop %r57, %oop* @"m_symbol/*standard-input*"
	%r58 = getelementptr %"<string>", %"<string>"* @m_ostr408, i32 0, i32 1
	%r59 = bitcast %word* %r58 to %oop
	%r60 = call %oop @"m_string->symbol.code"(%oop %r59)
	store %oop %r60, %oop* @"m_symbol/*standard-output*"
	%r61 = getelementptr %"<string>", %"<string>"* @m_ostr410, i32 0, i32 1
	%r62 = bitcast %word* %r61 to %oop
	%r63 = call %oop @"m_string->symbol.code"(%oop %r62)
	store %oop %r63, %oop* @"m_symbol/*error-output*"
	%r64 = getelementptr %"<string>", %"<string>"* @m_ostr412, i32 0, i32 1
	%r65 = bitcast %word* %r64 to %oop
	%r66 = call %oop @"m_string->symbol.code"(%oop %r65)
	store %oop %r66, %oop* @"m_symbol/*debug-output*"
	%r67 = getelementptr %"<string>", %"<string>"* @m_ostr414, i32 0, i32 1
	%r68 = bitcast %word* %r67 to %oop
	%r69 = call %oop @"m_string->symbol.code"(%oop %r68)
	store %oop %r69, %oop* @"m_symbol/*verbosity*"
	%r70 = getelementptr %"<string>", %"<string>"* @m_ostr416, i32 0, i32 1
	%r71 = bitcast %word* %r70 to %oop
	%r72 = call %oop @"m_string->symbol.code"(%oop %r71)
	store %oop %r72, %oop* @"m_symbol/*optimised*"
	ret %oop %r72
}
@m_cstr417 = private unnamed_addr constant [24 x i8] c"initialize-symbol-cache\00"
@m_ostr418 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 47, %oop bitcast ([24 x i8]* @m_cstr417 to %oop) }
@m_initialize-symbol-cache = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop ()* @m_initialize-symbol-cache.code to %oop), %"<string>"* @m_ostr418 }
@m_cstr419 = private unnamed_addr constant [4 x i8] c"car\00"
@m_ostr420 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr419 to %oop) }
@m_cstr421 = private unnamed_addr constant [4 x i8] c"car\00"
@m_ostr422 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr421 to %oop) }
define %oop @"m_car/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = load %oop, %oop* %t2
	%r4 = call %oop @"m_pair?.code"(%oop %r3)
	%r6 = ptrtoint %oop %r4 to %word
	%r5 = icmp ne %word %r6, 0
	br i1 %r5, label %L1, label %L2
L1:
	%r7 = inttoptr %word 0 to %oop
	%r8 = load %oop, %oop* %t2
	%r12 = bitcast %oop %r8 to [0 x %oop]*
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = getelementptr [0 x %oop], [0 x %oop]* %r12, %word 0, %word %r11
	%r9 = load %oop, %oop* %r10
	store %oop %r9, %oop* %t3
	%r13 = inttoptr %word 1 to %oop
	%r14 = load %oop, %oop* %t2
	%r18 = bitcast %oop %r14 to [0 x %oop]*
	%r17 = ptrtoint %oop %r13 to %word
	%r16 = getelementptr [0 x %oop], [0 x %oop]* %r18, %word 0, %word %r17
	%r15 = load %oop, %oop* %r16
	store %oop %r15, %oop* %t2
	store %oop %r15, %oop* %t4
	br label %L3
L2:
	%r19 = getelementptr %"<string>", %"<string>"* @m_ostr420, i32 0, i32 1
	%r20 = bitcast %word* %r19 to %oop
	%r21 = load %oop, %oop* %t0
	%r22 = call %oop @"m_%not-enough-arguments.code"(%oop %r20, %oop %r21)
	store %oop %r22, %oop* %t4
	br label %L3
L3:
	%r23 = load %oop, %oop* %t4
	%r24 = load %oop, %oop* %t2
	%r26 = ptrtoint %oop %r24 to %word
	%r25 = icmp ne %word %r26, 0
	br i1 %r25, label %L4, label %L5
L4:
	%r27 = getelementptr %"<string>", %"<string>"* @m_ostr422, i32 0, i32 1
	%r28 = bitcast %word* %r27 to %oop
	%r29 = load %oop, %oop* %t0
	%r30 = call %oop @"m_%too-many-arguments.code"(%oop %r28, %oop %r29)
	store %oop %r30, %oop* %t4
	br label %L6
L5:
	%r31 = inttoptr %word 0 to %oop
	store %oop %r31, %oop* %t4
	br label %L6
L6:
	%r32 = load %oop, %oop* %t4
	%r33 = load %oop, %oop* %t3
	%r34 = call %oop @m_car.code(%oop %r33)
	ret %oop %r34
}
@m_cstr423 = private unnamed_addr constant [19 x i8] c"car/evaluator-stub\00"
@m_ostr424 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 37, %oop bitcast ([19 x i8]* @m_cstr423 to %oop) }
@"m_car/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_car/evaluator-stub.code" to %oop), %"<string>"* @m_ostr424 }
@m_cstr425 = private unnamed_addr constant [4 x i8] c"cdr\00"
@m_ostr426 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr425 to %oop) }
@m_cstr427 = private unnamed_addr constant [4 x i8] c"cdr\00"
@m_ostr428 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr427 to %oop) }
define %oop @"m_cdr/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = load %oop, %oop* %t2
	%r4 = call %oop @"m_pair?.code"(%oop %r3)
	%r6 = ptrtoint %oop %r4 to %word
	%r5 = icmp ne %word %r6, 0
	br i1 %r5, label %L1, label %L2
L1:
	%r7 = inttoptr %word 0 to %oop
	%r8 = load %oop, %oop* %t2
	%r12 = bitcast %oop %r8 to [0 x %oop]*
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = getelementptr [0 x %oop], [0 x %oop]* %r12, %word 0, %word %r11
	%r9 = load %oop, %oop* %r10
	store %oop %r9, %oop* %t3
	%r13 = inttoptr %word 1 to %oop
	%r14 = load %oop, %oop* %t2
	%r18 = bitcast %oop %r14 to [0 x %oop]*
	%r17 = ptrtoint %oop %r13 to %word
	%r16 = getelementptr [0 x %oop], [0 x %oop]* %r18, %word 0, %word %r17
	%r15 = load %oop, %oop* %r16
	store %oop %r15, %oop* %t2
	store %oop %r15, %oop* %t4
	br label %L3
L2:
	%r19 = getelementptr %"<string>", %"<string>"* @m_ostr426, i32 0, i32 1
	%r20 = bitcast %word* %r19 to %oop
	%r21 = load %oop, %oop* %t0
	%r22 = call %oop @"m_%not-enough-arguments.code"(%oop %r20, %oop %r21)
	store %oop %r22, %oop* %t4
	br label %L3
L3:
	%r23 = load %oop, %oop* %t4
	%r24 = load %oop, %oop* %t2
	%r26 = ptrtoint %oop %r24 to %word
	%r25 = icmp ne %word %r26, 0
	br i1 %r25, label %L4, label %L5
L4:
	%r27 = getelementptr %"<string>", %"<string>"* @m_ostr428, i32 0, i32 1
	%r28 = bitcast %word* %r27 to %oop
	%r29 = load %oop, %oop* %t0
	%r30 = call %oop @"m_%too-many-arguments.code"(%oop %r28, %oop %r29)
	store %oop %r30, %oop* %t4
	br label %L6
L5:
	%r31 = inttoptr %word 0 to %oop
	store %oop %r31, %oop* %t4
	br label %L6
L6:
	%r32 = load %oop, %oop* %t4
	%r33 = load %oop, %oop* %t3
	%r34 = call %oop @m_cdr.code(%oop %r33)
	ret %oop %r34
}
@m_cstr429 = private unnamed_addr constant [19 x i8] c"cdr/evaluator-stub\00"
@m_ostr430 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 37, %oop bitcast ([19 x i8]* @m_cstr429 to %oop) }
@"m_cdr/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_cdr/evaluator-stub.code" to %oop), %"<string>"* @m_ostr430 }
define %oop @m_caar.code(%oop %x) {
	%t0 = alloca %oop
	store %oop %x, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @m_car.code(%oop %r1)
	%r3 = call %oop @m_car.code(%oop %r2)
	ret %oop %r3
}
@m_cstr431 = private unnamed_addr constant [5 x i8] c"caar\00"
@m_ostr432 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr431 to %oop) }
@m_caar = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_caar.code to %oop), %"<string>"* @m_ostr432 }
define %oop @m_cadr.code(%oop %x) {
	%t0 = alloca %oop
	store %oop %x, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @m_cdr.code(%oop %r1)
	%r3 = call %oop @m_car.code(%oop %r2)
	ret %oop %r3
}
@m_cstr433 = private unnamed_addr constant [5 x i8] c"cadr\00"
@m_ostr434 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr433 to %oop) }
@m_cadr = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_cadr.code to %oop), %"<string>"* @m_ostr434 }
define %oop @m_cdar.code(%oop %x) {
	%t0 = alloca %oop
	store %oop %x, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @m_car.code(%oop %r1)
	%r3 = call %oop @m_cdr.code(%oop %r2)
	ret %oop %r3
}
@m_cstr435 = private unnamed_addr constant [5 x i8] c"cdar\00"
@m_ostr436 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr435 to %oop) }
@m_cdar = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_cdar.code to %oop), %"<string>"* @m_ostr436 }
define %oop @m_cddr.code(%oop %x) {
	%t0 = alloca %oop
	store %oop %x, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @m_cdr.code(%oop %r1)
	%r3 = call %oop @m_cdr.code(%oop %r2)
	ret %oop %r3
}
@m_cstr437 = private unnamed_addr constant [5 x i8] c"cddr\00"
@m_ostr438 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr437 to %oop) }
@m_cddr = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_cddr.code to %oop), %"<string>"* @m_ostr438 }
define %oop @m_cadar.code(%oop %x) {
	%t0 = alloca %oop
	store %oop %x, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @m_car.code(%oop %r1)
	%r3 = call %oop @m_cdr.code(%oop %r2)
	%r4 = call %oop @m_car.code(%oop %r3)
	ret %oop %r4
}
@m_cstr439 = private unnamed_addr constant [6 x i8] c"cadar\00"
@m_ostr440 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr439 to %oop) }
@m_cadar = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_cadar.code to %oop), %"<string>"* @m_ostr440 }
define %oop @m_caadr.code(%oop %x) {
	%t0 = alloca %oop
	store %oop %x, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @m_cdr.code(%oop %r1)
	%r3 = call %oop @m_car.code(%oop %r2)
	%r4 = call %oop @m_car.code(%oop %r3)
	ret %oop %r4
}
@m_cstr441 = private unnamed_addr constant [6 x i8] c"caadr\00"
@m_ostr442 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr441 to %oop) }
@m_caadr = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_caadr.code to %oop), %"<string>"* @m_ostr442 }
define %oop @m_cdadr.code(%oop %x) {
	%t0 = alloca %oop
	store %oop %x, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @m_cdr.code(%oop %r1)
	%r3 = call %oop @m_car.code(%oop %r2)
	%r4 = call %oop @m_cdr.code(%oop %r3)
	ret %oop %r4
}
@m_cstr443 = private unnamed_addr constant [6 x i8] c"cdadr\00"
@m_ostr444 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr443 to %oop) }
@m_cdadr = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_cdadr.code to %oop), %"<string>"* @m_ostr444 }
define %oop @m_caddr.code(%oop %x) {
	%t0 = alloca %oop
	store %oop %x, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @m_cdr.code(%oop %r1)
	%r3 = call %oop @m_cdr.code(%oop %r2)
	%r4 = call %oop @m_car.code(%oop %r3)
	ret %oop %r4
}
@m_cstr445 = private unnamed_addr constant [6 x i8] c"caddr\00"
@m_ostr446 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr445 to %oop) }
@m_caddr = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_caddr.code to %oop), %"<string>"* @m_ostr446 }
define %oop @m_cdddr.code(%oop %x) {
	%t0 = alloca %oop
	store %oop %x, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @m_cdr.code(%oop %r1)
	%r3 = call %oop @m_cdr.code(%oop %r2)
	%r4 = call %oop @m_cdr.code(%oop %r3)
	ret %oop %r4
}
@m_cstr447 = private unnamed_addr constant [6 x i8] c"cdddr\00"
@m_ostr448 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr447 to %oop) }
@m_cdddr = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_cdddr.code to %oop), %"<string>"* @m_ostr448 }
define %oop @m_caddar.code(%oop %x) {
	%t0 = alloca %oop
	store %oop %x, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @m_car.code(%oop %r1)
	%r3 = call %oop @m_cdr.code(%oop %r2)
	%r4 = call %oop @m_cdr.code(%oop %r3)
	%r5 = call %oop @m_car.code(%oop %r4)
	ret %oop %r5
}
@m_cstr449 = private unnamed_addr constant [7 x i8] c"caddar\00"
@m_ostr450 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr449 to %oop) }
@m_caddar = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_caddar.code to %oop), %"<string>"* @m_ostr450 }
define %oop @m_caaddr.code(%oop %x) {
	%t0 = alloca %oop
	store %oop %x, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @m_cdr.code(%oop %r1)
	%r3 = call %oop @m_cdr.code(%oop %r2)
	%r4 = call %oop @m_car.code(%oop %r3)
	%r5 = call %oop @m_car.code(%oop %r4)
	ret %oop %r5
}
@m_cstr451 = private unnamed_addr constant [7 x i8] c"caaddr\00"
@m_ostr452 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr451 to %oop) }
@m_caaddr = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_caaddr.code to %oop), %"<string>"* @m_ostr452 }
define %oop @m_cadddr.code(%oop %x) {
	%t0 = alloca %oop
	store %oop %x, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @m_cdr.code(%oop %r1)
	%r3 = call %oop @m_cdr.code(%oop %r2)
	%r4 = call %oop @m_cdr.code(%oop %r3)
	%r5 = call %oop @m_car.code(%oop %r4)
	ret %oop %r5
}
@m_cstr453 = private unnamed_addr constant [7 x i8] c"cadddr\00"
@m_ostr454 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr453 to %oop) }
@m_cadddr = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_cadddr.code to %oop), %"<string>"* @m_ostr454 }
define %oop @m_cddddr.code(%oop %x) {
	%t0 = alloca %oop
	store %oop %x, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @m_cdr.code(%oop %r1)
	%r3 = call %oop @m_cdr.code(%oop %r2)
	%r4 = call %oop @m_cdr.code(%oop %r3)
	%r5 = call %oop @m_cdr.code(%oop %r4)
	ret %oop %r5
}
@m_cstr455 = private unnamed_addr constant [7 x i8] c"cddddr\00"
@m_ostr456 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr455 to %oop) }
@m_cddddr = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_cddddr.code to %oop), %"<string>"* @m_ostr456 }
define %oop @m_first.code(%oop %list) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	store %oop %list, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r3 = ptrtoint %oop %r1 to %word
	%r2 = icmp ne %word %r3, 0
	br i1 %r2, label %L1, label %L2
L1:
	%r4 = inttoptr %word 0 to %oop
	%r5 = inttoptr %word 0 to %oop
	%r6 = load %oop, %oop* %t0
	%r10 = bitcast %oop %r6 to [0 x %oop]*
	%r9 = ptrtoint %oop %r5 to %word
	%r8 = getelementptr [0 x %oop], [0 x %oop]* %r10, %word 0, %word %r9
	%r7 = load %oop, %oop* %r8
	store %oop %r7, %oop* %t1
	br label %L3
L2:
	%r11 = inttoptr %word 0 to %oop
	store %oop %r11, %oop* %t1
	br label %L3
L3:
	%r12 = load %oop, %oop* %t1
	ret %oop %r12
}
@m_cstr457 = private unnamed_addr constant [6 x i8] c"first\00"
@m_ostr458 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr457 to %oop) }
@m_first = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_first.code to %oop), %"<string>"* @m_ostr458 }
define %oop @m_second.code(%oop %x) {
	%t0 = alloca %oop
	store %oop %x, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @m_cdr.code(%oop %r1)
	%r3 = call %oop @m_car.code(%oop %r2)
	ret %oop %r3
}
@m_cstr459 = private unnamed_addr constant [7 x i8] c"second\00"
@m_ostr460 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr459 to %oop) }
@m_second = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_second.code to %oop), %"<string>"* @m_ostr460 }
define %oop @m_third.code(%oop %x) {
	%t0 = alloca %oop
	store %oop %x, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @m_cdr.code(%oop %r1)
	%r3 = call %oop @m_cdr.code(%oop %r2)
	%r4 = call %oop @m_car.code(%oop %r3)
	ret %oop %r4
}
@m_cstr461 = private unnamed_addr constant [6 x i8] c"third\00"
@m_ostr462 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr461 to %oop) }
@m_third = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_third.code to %oop), %"<string>"* @m_ostr462 }
define %oop @m_rest.code(%oop %list) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	store %oop %list, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r3 = ptrtoint %oop %r1 to %word
	%r2 = icmp ne %word %r3, 0
	br i1 %r2, label %L1, label %L2
L1:
	%r4 = inttoptr %word 0 to %oop
	%r5 = inttoptr %word 1 to %oop
	%r6 = load %oop, %oop* %t0
	%r10 = bitcast %oop %r6 to [0 x %oop]*
	%r9 = ptrtoint %oop %r5 to %word
	%r8 = getelementptr [0 x %oop], [0 x %oop]* %r10, %word 0, %word %r9
	%r7 = load %oop, %oop* %r8
	store %oop %r7, %oop* %t1
	br label %L3
L2:
	%r11 = inttoptr %word 0 to %oop
	store %oop %r11, %oop* %t1
	br label %L3
L3:
	%r12 = load %oop, %oop* %t1
	ret %oop %r12
}
@m_cstr463 = private unnamed_addr constant [5 x i8] c"rest\00"
@m_ostr464 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr463 to %oop) }
@m_rest = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_rest.code to %oop), %"<string>"* @m_ostr464 }
@m_cstr465 = private unnamed_addr constant [9 x i8] c"allocate\00"
@m_ostr466 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr465 to %oop) }
@m_cstr467 = private unnamed_addr constant [9 x i8] c"allocate\00"
@m_ostr468 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr467 to %oop) }
@m_cstr469 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr470 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr469 to %oop) }
@m_cstr471 = private unnamed_addr constant [11 x i8] c"slot-count\00"
@m_ostr472 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr471 to %oop) }
@m_cstr473 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr474 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr473 to %oop) }
@m_cstr475 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr476 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr475 to %oop) }
@m_cstr477 = private unnamed_addr constant [9 x i8] c"allocate\00"
@m_ostr478 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr477 to %oop) }
@m_cstr479 = private unnamed_addr constant [9 x i8] c"allocate\00"
@m_ostr480 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr479 to %oop) }
@m_cstr481 = private unnamed_addr constant [35 x i8] c"allocate: illegal type specifier: \00"
@m_ostr482 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 69, %oop bitcast ([35 x i8]* @m_cstr481 to %oop) }
define %oop @"m_allocate/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = load %oop, %oop* %t2
	%r5 = call %oop @"m_pair?.code"(%oop %r4)
	%r7 = ptrtoint %oop %r5 to %word
	%r6 = icmp ne %word %r7, 0
	br i1 %r6, label %L1, label %L2
L1:
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t2
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	%r10 = load %oop, %oop* %r11
	store %oop %r10, %oop* %t3
	%r14 = inttoptr %word 1 to %oop
	%r15 = load %oop, %oop* %t2
	%r19 = bitcast %oop %r15 to [0 x %oop]*
	%r18 = ptrtoint %oop %r14 to %word
	%r17 = getelementptr [0 x %oop], [0 x %oop]* %r19, %word 0, %word %r18
	%r16 = load %oop, %oop* %r17
	store %oop %r16, %oop* %t2
	store %oop %r16, %oop* %t5
	br label %L3
L2:
	%r20 = getelementptr %"<string>", %"<string>"* @m_ostr466, i32 0, i32 1
	%r21 = bitcast %word* %r20 to %oop
	%r22 = load %oop, %oop* %t0
	%r23 = call %oop @"m_%not-enough-arguments.code"(%oop %r21, %oop %r22)
	store %oop %r23, %oop* %t5
	br label %L3
L3:
	%r24 = load %oop, %oop* %t5
	%r25 = load %oop, %oop* %t2
	%r26 = call %oop @"m_pair?.code"(%oop %r25)
	%r28 = ptrtoint %oop %r26 to %word
	%r27 = icmp ne %word %r28, 0
	br i1 %r27, label %L4, label %L5
L4:
	%r29 = inttoptr %word 0 to %oop
	%r30 = load %oop, %oop* %t2
	%r34 = bitcast %oop %r30 to [0 x %oop]*
	%r33 = ptrtoint %oop %r29 to %word
	%r32 = getelementptr [0 x %oop], [0 x %oop]* %r34, %word 0, %word %r33
	%r31 = load %oop, %oop* %r32
	store %oop %r31, %oop* %t4
	%r35 = inttoptr %word 0 to %oop
	store %oop %r35, %oop* %t6
	%r36 = load %oop, %oop* %t4
	%r37 = call %oop @"m_long?.code"(%oop %r36)
	store %oop %r37, %oop* %t6
	%r38 = inttoptr %word 0 to %oop
	%r42 = ptrtoint %oop %r38 to %word
	%r41 = ptrtoint %oop %r37 to %word
	%r40 = icmp eq %word %r42, %r41
	%r39 = inttoptr i1 %r40 to %oop
	%r44 = ptrtoint %oop %r39 to %word
	%r43 = icmp ne %word %r44, 0
	br i1 %r43, label %L8, label %L7
L8:
	%r45 = call %oop @m_error-prologue.code()
	%r46 = getelementptr %"<string>", %"<string>"* @m_ostr468, i32 0, i32 1
	%r47 = bitcast %word* %r46 to %oop
	%r48 = call %oop @"m_%error.code"(%oop %r47)
	%r49 = getelementptr %"<string>", %"<string>"* @m_ostr470, i32 0, i32 1
	%r50 = bitcast %word* %r49 to %oop
	%r51 = call %oop @"m_%error.code"(%oop %r50)
	%r52 = getelementptr %"<string>", %"<string>"* @m_ostr472, i32 0, i32 1
	%r53 = bitcast %word* %r52 to %oop
	%r54 = call %oop @"m_%error.code"(%oop %r53)
	%r55 = getelementptr %"<string>", %"<string>"* @m_ostr474, i32 0, i32 1
	%r56 = bitcast %word* %r55 to %oop
	%r57 = call %oop @"m_%error.code"(%oop %r56)
	%r58 = getelementptr %"<string>", %"<string>"* @m_ostr476, i32 0, i32 1
	%r59 = bitcast %word* %r58 to %oop
	%r60 = call %oop @"m_%error.code"(%oop %r59)
	%r61 = call %oop @m_error-epilogue.code()
	store %oop %r61, %oop* %t6
	%r62 = inttoptr %word 0 to %oop
	%r66 = ptrtoint %oop %r62 to %word
	%r65 = ptrtoint %oop %r61 to %word
	%r64 = icmp eq %word %r66, %r65
	%r63 = inttoptr i1 %r64 to %oop
	%r68 = ptrtoint %oop %r63 to %word
	%r67 = icmp ne %word %r68, 0
	br i1 %r67, label %L9, label %L7
L9:
	br label %L7
L7:
	%r69 = load %oop, %oop* %t6
	%r70 = inttoptr %word 1 to %oop
	%r71 = load %oop, %oop* %t4
	%r75 = ptrtoint %oop %r71 to %word
	%r74 = ptrtoint %oop %r70 to %word
	%r73 = ashr %word %r75, %r74
	%r72 = inttoptr %word %r73 to %oop
	store %oop %r72, %oop* %t4
	%r76 = inttoptr %word 1 to %oop
	%r77 = load %oop, %oop* %t2
	%r81 = bitcast %oop %r77 to [0 x %oop]*
	%r80 = ptrtoint %oop %r76 to %word
	%r79 = getelementptr [0 x %oop], [0 x %oop]* %r81, %word 0, %word %r80
	%r78 = load %oop, %oop* %r79
	store %oop %r78, %oop* %t2
	store %oop %r78, %oop* %t5
	br label %L6
L5:
	%r82 = getelementptr %"<string>", %"<string>"* @m_ostr478, i32 0, i32 1
	%r83 = bitcast %word* %r82 to %oop
	%r84 = load %oop, %oop* %t0
	%r85 = call %oop @"m_%not-enough-arguments.code"(%oop %r83, %oop %r84)
	store %oop %r85, %oop* %t5
	br label %L6
L6:
	%r86 = load %oop, %oop* %t5
	%r87 = load %oop, %oop* %t2
	%r89 = ptrtoint %oop %r87 to %word
	%r88 = icmp ne %word %r89, 0
	br i1 %r88, label %L10, label %L11
L10:
	%r90 = getelementptr %"<string>", %"<string>"* @m_ostr480, i32 0, i32 1
	%r91 = bitcast %word* %r90 to %oop
	%r92 = load %oop, %oop* %t0
	%r93 = call %oop @"m_%too-many-arguments.code"(%oop %r91, %oop %r92)
	store %oop %r93, %oop* %t5
	br label %L12
L11:
	%r94 = inttoptr %word 0 to %oop
	store %oop %r94, %oop* %t5
	br label %L12
L12:
	%r95 = load %oop, %oop* %t5
	%r96 = load %oop, %oop* %t3
	%r97 = call %oop @m_type-of.code(%oop %r96)
	%r98 = inttoptr %word 7 to %oop
	%r102 = ptrtoint %oop %r98 to %word
	%r101 = ptrtoint %oop %r97 to %word
	%r100 = icmp eq %word %r102, %r101
	%r99 = inttoptr i1 %r100 to %oop
	%r104 = ptrtoint %oop %r99 to %word
	%r103 = icmp ne %word %r104, 0
	br i1 %r103, label %L13, label %L14
L13:
	%r105 = inttoptr %word 1 to %oop
	%r106 = load %oop, %oop* %t3
	%r110 = ptrtoint %oop %r106 to %word
	%r109 = ptrtoint %oop %r105 to %word
	%r108 = ashr %word %r110, %r109
	%r107 = inttoptr %word %r108 to %oop
	store %oop %r107, %oop* %t5
	br label %L15
L14:
	%r111 = inttoptr %word 0 to %oop
	store %oop %r111, %oop* %t7
	%r112 = load %oop, %oop* %t3
	%r113 = call %oop @m_type-of.code(%oop %r112)
	%r114 = inttoptr %word 1 to %oop
	%r118 = ptrtoint %oop %r114 to %word
	%r117 = ptrtoint %oop %r113 to %word
	%r116 = icmp eq %word %r118, %r117
	%r115 = inttoptr i1 %r116 to %oop
	store %oop %r115, %oop* %t7
	%r119 = inttoptr %word 0 to %oop
	%r123 = ptrtoint %oop %r119 to %word
	%r122 = ptrtoint %oop %r115 to %word
	%r121 = icmp eq %word %r123, %r122
	%r120 = inttoptr i1 %r121 to %oop
	%r125 = ptrtoint %oop %r120 to %word
	%r124 = icmp ne %word %r125, 0
	br i1 %r124, label %L20, label %L19
L20:
	%r126 = load %oop, %oop* %t3
	%r127 = call %oop @m_type-of.code(%oop %r126)
	%r128 = inttoptr %word 2 to %oop
	%r132 = ptrtoint %oop %r128 to %word
	%r131 = ptrtoint %oop %r127 to %word
	%r130 = icmp eq %word %r132, %r131
	%r129 = inttoptr i1 %r130 to %oop
	store %oop %r129, %oop* %t7
	%r133 = inttoptr %word 0 to %oop
	%r137 = ptrtoint %oop %r133 to %word
	%r136 = ptrtoint %oop %r129 to %word
	%r135 = icmp eq %word %r137, %r136
	%r134 = inttoptr i1 %r135 to %oop
	%r139 = ptrtoint %oop %r134 to %word
	%r138 = icmp ne %word %r139, 0
	br i1 %r138, label %L21, label %L19
L21:
	br label %L19
L19:
	%r140 = load %oop, %oop* %t7
	%r142 = ptrtoint %oop %r140 to %word
	%r141 = icmp ne %word %r142, 0
	br i1 %r141, label %L16, label %L17
L16:
	%r143 = inttoptr %word 1 to %oop
	%r144 = inttoptr %word 0 to %oop
	%r145 = load %oop, %oop* %t3
	%r149 = bitcast %oop %r145 to [0 x %oop]*
	%r148 = ptrtoint %oop %r144 to %word
	%r147 = getelementptr [0 x %oop], [0 x %oop]* %r149, %word 0, %word %r148
	%r146 = load %oop, %oop* %r147
	%r153 = ptrtoint %oop %r146 to %word
	%r152 = ptrtoint %oop %r143 to %word
	%r151 = ashr %word %r153, %r152
	%r150 = inttoptr %word %r151 to %oop
	store %oop %r150, %oop* %t6
	br label %L18
L17:
	%r154 = call %oop @m_error-prologue.code()
	%r155 = getelementptr %"<string>", %"<string>"* @m_ostr482, i32 0, i32 1
	%r156 = bitcast %word* %r155 to %oop
	%r157 = call %oop @"m_%error.code"(%oop %r156)
	%r158 = load %oop, %oop* %t3
	%r159 = call %oop @"m_%error.code"(%oop %r158)
	%r160 = call %oop @m_error-epilogue.code()
	store %oop %r160, %oop* %t6
	br label %L18
L18:
	%r161 = load %oop, %oop* %t6
	store %oop %r161, %oop* %t5
	br label %L15
L15:
	%r162 = load %oop, %oop* %t5
	%r163 = load %oop, %oop* %t4
	%r164 = call %oop @m_allocate.code(%oop %r162, %oop %r163)
	ret %oop %r164
}
@m_cstr483 = private unnamed_addr constant [24 x i8] c"allocate/evaluator-stub\00"
@m_ostr484 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 47, %oop bitcast ([24 x i8]* @m_cstr483 to %oop) }
@"m_allocate/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_allocate/evaluator-stub.code" to %oop), %"<string>"* @m_ostr484 }
define %oop @m_allocate-data.code(%oop %byte-size) {
	%t0 = alloca %oop
	store %oop %byte-size, %oop* %t0
	%r1 = inttoptr %word 5 to %oop
	%r2 = load %oop, %oop* %t0
	%r3 = call %oop @"m_gc/allocate-opaque.code"(%oop %r1, %oop %r2)
	ret %oop %r3
}
@m_cstr485 = private unnamed_addr constant [14 x i8] c"allocate-data\00"
@m_ostr486 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr485 to %oop) }
@m_allocate-data = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_allocate-data.code to %oop), %"<string>"* @m_ostr486 }
@m_cstr487 = private unnamed_addr constant [14 x i8] c"allocate-data\00"
@m_ostr488 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr487 to %oop) }
@m_cstr489 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr490 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr489 to %oop) }
@m_cstr491 = private unnamed_addr constant [10 x i8] c"byte-size\00"
@m_ostr492 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 19, %oop bitcast ([10 x i8]* @m_cstr491 to %oop) }
@m_cstr493 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr494 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr493 to %oop) }
@m_cstr495 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr496 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr495 to %oop) }
@m_cstr497 = private unnamed_addr constant [14 x i8] c"allocate-data\00"
@m_ostr498 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr497 to %oop) }
@m_cstr499 = private unnamed_addr constant [14 x i8] c"allocate-data\00"
@m_ostr500 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr499 to %oop) }
define %oop @"m_allocate-data/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = load %oop, %oop* %t2
	%r4 = call %oop @"m_pair?.code"(%oop %r3)
	%r6 = ptrtoint %oop %r4 to %word
	%r5 = icmp ne %word %r6, 0
	br i1 %r5, label %L1, label %L2
L1:
	%r7 = inttoptr %word 0 to %oop
	%r8 = load %oop, %oop* %t2
	%r12 = bitcast %oop %r8 to [0 x %oop]*
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = getelementptr [0 x %oop], [0 x %oop]* %r12, %word 0, %word %r11
	%r9 = load %oop, %oop* %r10
	store %oop %r9, %oop* %t3
	%r13 = inttoptr %word 0 to %oop
	store %oop %r13, %oop* %t5
	%r14 = load %oop, %oop* %t3
	%r15 = call %oop @"m_long?.code"(%oop %r14)
	store %oop %r15, %oop* %t5
	%r16 = inttoptr %word 0 to %oop
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = icmp eq %word %r20, %r19
	%r17 = inttoptr i1 %r18 to %oop
	%r22 = ptrtoint %oop %r17 to %word
	%r21 = icmp ne %word %r22, 0
	br i1 %r21, label %L5, label %L4
L5:
	%r23 = call %oop @m_error-prologue.code()
	%r24 = getelementptr %"<string>", %"<string>"* @m_ostr488, i32 0, i32 1
	%r25 = bitcast %word* %r24 to %oop
	%r26 = call %oop @"m_%error.code"(%oop %r25)
	%r27 = getelementptr %"<string>", %"<string>"* @m_ostr490, i32 0, i32 1
	%r28 = bitcast %word* %r27 to %oop
	%r29 = call %oop @"m_%error.code"(%oop %r28)
	%r30 = getelementptr %"<string>", %"<string>"* @m_ostr492, i32 0, i32 1
	%r31 = bitcast %word* %r30 to %oop
	%r32 = call %oop @"m_%error.code"(%oop %r31)
	%r33 = getelementptr %"<string>", %"<string>"* @m_ostr494, i32 0, i32 1
	%r34 = bitcast %word* %r33 to %oop
	%r35 = call %oop @"m_%error.code"(%oop %r34)
	%r36 = getelementptr %"<string>", %"<string>"* @m_ostr496, i32 0, i32 1
	%r37 = bitcast %word* %r36 to %oop
	%r38 = call %oop @"m_%error.code"(%oop %r37)
	%r39 = call %oop @m_error-epilogue.code()
	store %oop %r39, %oop* %t5
	%r40 = inttoptr %word 0 to %oop
	%r44 = ptrtoint %oop %r40 to %word
	%r43 = ptrtoint %oop %r39 to %word
	%r42 = icmp eq %word %r44, %r43
	%r41 = inttoptr i1 %r42 to %oop
	%r46 = ptrtoint %oop %r41 to %word
	%r45 = icmp ne %word %r46, 0
	br i1 %r45, label %L6, label %L4
L6:
	br label %L4
L4:
	%r47 = load %oop, %oop* %t5
	%r48 = inttoptr %word 1 to %oop
	%r49 = load %oop, %oop* %t3
	%r53 = ptrtoint %oop %r49 to %word
	%r52 = ptrtoint %oop %r48 to %word
	%r51 = ashr %word %r53, %r52
	%r50 = inttoptr %word %r51 to %oop
	store %oop %r50, %oop* %t3
	%r54 = inttoptr %word 1 to %oop
	%r55 = load %oop, %oop* %t2
	%r59 = bitcast %oop %r55 to [0 x %oop]*
	%r58 = ptrtoint %oop %r54 to %word
	%r57 = getelementptr [0 x %oop], [0 x %oop]* %r59, %word 0, %word %r58
	%r56 = load %oop, %oop* %r57
	store %oop %r56, %oop* %t2
	store %oop %r56, %oop* %t4
	br label %L3
L2:
	%r60 = getelementptr %"<string>", %"<string>"* @m_ostr498, i32 0, i32 1
	%r61 = bitcast %word* %r60 to %oop
	%r62 = load %oop, %oop* %t0
	%r63 = call %oop @"m_%not-enough-arguments.code"(%oop %r61, %oop %r62)
	store %oop %r63, %oop* %t4
	br label %L3
L3:
	%r64 = load %oop, %oop* %t4
	%r65 = load %oop, %oop* %t2
	%r67 = ptrtoint %oop %r65 to %word
	%r66 = icmp ne %word %r67, 0
	br i1 %r66, label %L7, label %L8
L7:
	%r68 = getelementptr %"<string>", %"<string>"* @m_ostr500, i32 0, i32 1
	%r69 = bitcast %word* %r68 to %oop
	%r70 = load %oop, %oop* %t0
	%r71 = call %oop @"m_%too-many-arguments.code"(%oop %r69, %oop %r70)
	store %oop %r71, %oop* %t4
	br label %L9
L8:
	%r72 = inttoptr %word 0 to %oop
	store %oop %r72, %oop* %t4
	br label %L9
L9:
	%r73 = load %oop, %oop* %t4
	%r74 = load %oop, %oop* %t3
	%r75 = call %oop @m_allocate-data.code(%oop %r74)
	ret %oop %r75
}
@m_cstr501 = private unnamed_addr constant [29 x i8] c"allocate-data/evaluator-stub\00"
@m_ostr502 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 57, %oop bitcast ([29 x i8]* @m_cstr501 to %oop) }
@"m_allocate-data/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_allocate-data/evaluator-stub.code" to %oop), %"<string>"* @m_ostr502 }
@m_cstr503 = private unnamed_addr constant [5 x i8] c"cons\00"
@m_ostr504 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr503 to %oop) }
define %oop @"m_cons/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t5 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = load %oop, %oop* %t2
	%r5 = call %oop @"m_pair?.code"(%oop %r4)
	%r7 = ptrtoint %oop %r5 to %word
	%r6 = icmp ne %word %r7, 0
	br i1 %r6, label %L1, label %L2
L1:
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t2
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	%r10 = load %oop, %oop* %r11
	store %oop %r10, %oop* %t3
	%r14 = inttoptr %word 1 to %oop
	%r15 = load %oop, %oop* %t2
	%r19 = bitcast %oop %r15 to [0 x %oop]*
	%r18 = ptrtoint %oop %r14 to %word
	%r17 = getelementptr [0 x %oop], [0 x %oop]* %r19, %word 0, %word %r18
	%r16 = load %oop, %oop* %r17
	store %oop %r16, %oop* %t2
	store %oop %r16, %oop* %t5
	br label %L3
L2:
	%r20 = inttoptr %word 0 to %oop
	store %oop %r20, %oop* %t3
	store %oop %r20, %oop* %t5
	br label %L3
L3:
	%r21 = load %oop, %oop* %t5
	%r22 = load %oop, %oop* %t2
	%r23 = call %oop @"m_pair?.code"(%oop %r22)
	%r25 = ptrtoint %oop %r23 to %word
	%r24 = icmp ne %word %r25, 0
	br i1 %r24, label %L4, label %L5
L4:
	%r26 = inttoptr %word 0 to %oop
	%r27 = load %oop, %oop* %t2
	%r31 = bitcast %oop %r27 to [0 x %oop]*
	%r30 = ptrtoint %oop %r26 to %word
	%r29 = getelementptr [0 x %oop], [0 x %oop]* %r31, %word 0, %word %r30
	%r28 = load %oop, %oop* %r29
	store %oop %r28, %oop* %t4
	%r32 = inttoptr %word 1 to %oop
	%r33 = load %oop, %oop* %t2
	%r37 = bitcast %oop %r33 to [0 x %oop]*
	%r36 = ptrtoint %oop %r32 to %word
	%r35 = getelementptr [0 x %oop], [0 x %oop]* %r37, %word 0, %word %r36
	%r34 = load %oop, %oop* %r35
	store %oop %r34, %oop* %t2
	store %oop %r34, %oop* %t5
	br label %L6
L5:
	%r38 = inttoptr %word 0 to %oop
	store %oop %r38, %oop* %t4
	store %oop %r38, %oop* %t5
	br label %L6
L6:
	%r39 = load %oop, %oop* %t5
	%r40 = load %oop, %oop* %t2
	%r42 = ptrtoint %oop %r40 to %word
	%r41 = icmp ne %word %r42, 0
	br i1 %r41, label %L7, label %L8
L7:
	%r43 = getelementptr %"<string>", %"<string>"* @m_ostr504, i32 0, i32 1
	%r44 = bitcast %word* %r43 to %oop
	%r45 = load %oop, %oop* %t0
	%r46 = call %oop @"m_%too-many-arguments.code"(%oop %r44, %oop %r45)
	store %oop %r46, %oop* %t5
	br label %L9
L8:
	%r47 = inttoptr %word 0 to %oop
	store %oop %r47, %oop* %t5
	br label %L9
L9:
	%r48 = load %oop, %oop* %t5
	%r49 = load %oop, %oop* %t3
	%r50 = load %oop, %oop* %t4
	%r51 = call %oop @m_cons.code(%oop %r49, %oop %r50)
	ret %oop %r51
}
@m_cstr505 = private unnamed_addr constant [20 x i8] c"cons/evaluator-stub\00"
@m_ostr506 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 39, %oop bitcast ([20 x i8]* @m_cstr505 to %oop) }
@"m_cons/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_cons/evaluator-stub.code" to %oop), %"<string>"* @m_ostr506 }
define %oop @m_string.code(%oop %length) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	%t2 = alloca %oop
	store %oop %length, %oop* %t0
	%r1 = inttoptr %word 13 to %oop
	%r2 = inttoptr %word 2 to %oop
	%r3 = call %oop @m_allocate.code(%oop %r1, %oop %r2)
	store %oop %r3, %oop* %t1
	%r5 = getelementptr %oop, %oop* %t1, %word 0
	%r4 = bitcast %oop* %r5 to %oop
	%r6 = call %oop @"m_gc/push-root.code"(%oop %r4)
	%r7 = inttoptr %word 1 to %oop
	%r8 = inttoptr %word 1 to %oop
	%r9 = inttoptr %word 0 to %oop
	%r13 = ptrtoint %oop %r9 to %word
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = shl %word %r13, %r12
	%r10 = inttoptr %word %r11 to %oop
	%r17 = ptrtoint %oop %r10 to %word
	%r16 = ptrtoint %oop %r7 to %word
	%r15 = or %word %r17, %r16
	%r14 = inttoptr %word %r15 to %oop
	%r18 = inttoptr %word 0 to %oop
	%r19 = load %oop, %oop* %t1
	%r23 = bitcast %oop %r19 to [0 x %oop]*
	%r22 = ptrtoint %oop %r18 to %word
	%r21 = getelementptr [0 x %oop], [0 x %oop]* %r23, %word 0, %word %r22
	store %oop %r14, %oop* %r21
	%r20 = bitcast %oop %r14 to %oop
	%r24 = load %oop, %oop* %t0
	%r25 = inttoptr %word 0 to %oop
	%r29 = ptrtoint %oop %r25 to %word
	%r28 = ptrtoint %oop %r24 to %word
	%r27 = icmp slt %word %r29, %r28
	%r26 = inttoptr i1 %r27 to %oop
	%r31 = ptrtoint %oop %r26 to %word
	%r30 = icmp ne %word %r31, 0
	br i1 %r30, label %L1, label %L2
L1:
	%r32 = load %oop, %oop* %t0
	%r33 = call %oop @m_allocate-data.code(%oop %r32)
	store %oop %r33, %oop* %t2
	br label %L3
L2:
	%r34 = inttoptr %word 0 to %oop
	store %oop %r34, %oop* %t2
	br label %L3
L3:
	%r35 = load %oop, %oop* %t2
	%r36 = inttoptr %word 1 to %oop
	%r37 = load %oop, %oop* %t1
	%r41 = bitcast %oop %r37 to [0 x %oop]*
	%r40 = ptrtoint %oop %r36 to %word
	%r39 = getelementptr [0 x %oop], [0 x %oop]* %r41, %word 0, %word %r40
	store %oop %r35, %oop* %r39
	%r38 = bitcast %oop %r35 to %oop
	%r42 = load %oop, %oop* %t1
	store %oop %r42, %oop* %t2
	%r44 = getelementptr %oop, %oop* %t1, %word 0
	%r43 = bitcast %oop* %r44 to %oop
	%r45 = call %oop @"m_gc/pop-root.code"(%oop %r43)
	%r46 = load %oop, %oop* %t2
	ret %oop %r46
}
@m_cstr507 = private unnamed_addr constant [7 x i8] c"string\00"
@m_ostr508 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr507 to %oop) }
@m_string = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_string.code to %oop), %"<string>"* @m_ostr508 }
@m_cstr509 = private unnamed_addr constant [7 x i8] c"string\00"
@m_ostr510 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr509 to %oop) }
@m_cstr511 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr512 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr511 to %oop) }
@m_cstr513 = private unnamed_addr constant [7 x i8] c"length\00"
@m_ostr514 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr513 to %oop) }
@m_cstr515 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr516 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr515 to %oop) }
@m_cstr517 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr518 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr517 to %oop) }
@m_cstr519 = private unnamed_addr constant [7 x i8] c"string\00"
@m_ostr520 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr519 to %oop) }
define %oop @"m_string/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = load %oop, %oop* %t2
	%r4 = call %oop @"m_pair?.code"(%oop %r3)
	%r6 = ptrtoint %oop %r4 to %word
	%r5 = icmp ne %word %r6, 0
	br i1 %r5, label %L1, label %L2
L1:
	%r7 = inttoptr %word 0 to %oop
	%r8 = load %oop, %oop* %t2
	%r12 = bitcast %oop %r8 to [0 x %oop]*
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = getelementptr [0 x %oop], [0 x %oop]* %r12, %word 0, %word %r11
	%r9 = load %oop, %oop* %r10
	store %oop %r9, %oop* %t3
	%r13 = inttoptr %word 0 to %oop
	store %oop %r13, %oop* %t5
	%r14 = load %oop, %oop* %t3
	%r15 = call %oop @"m_long?.code"(%oop %r14)
	store %oop %r15, %oop* %t5
	%r16 = inttoptr %word 0 to %oop
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = icmp eq %word %r20, %r19
	%r17 = inttoptr i1 %r18 to %oop
	%r22 = ptrtoint %oop %r17 to %word
	%r21 = icmp ne %word %r22, 0
	br i1 %r21, label %L5, label %L4
L5:
	%r23 = call %oop @m_error-prologue.code()
	%r24 = getelementptr %"<string>", %"<string>"* @m_ostr510, i32 0, i32 1
	%r25 = bitcast %word* %r24 to %oop
	%r26 = call %oop @"m_%error.code"(%oop %r25)
	%r27 = getelementptr %"<string>", %"<string>"* @m_ostr512, i32 0, i32 1
	%r28 = bitcast %word* %r27 to %oop
	%r29 = call %oop @"m_%error.code"(%oop %r28)
	%r30 = getelementptr %"<string>", %"<string>"* @m_ostr514, i32 0, i32 1
	%r31 = bitcast %word* %r30 to %oop
	%r32 = call %oop @"m_%error.code"(%oop %r31)
	%r33 = getelementptr %"<string>", %"<string>"* @m_ostr516, i32 0, i32 1
	%r34 = bitcast %word* %r33 to %oop
	%r35 = call %oop @"m_%error.code"(%oop %r34)
	%r36 = getelementptr %"<string>", %"<string>"* @m_ostr518, i32 0, i32 1
	%r37 = bitcast %word* %r36 to %oop
	%r38 = call %oop @"m_%error.code"(%oop %r37)
	%r39 = call %oop @m_error-epilogue.code()
	store %oop %r39, %oop* %t5
	%r40 = inttoptr %word 0 to %oop
	%r44 = ptrtoint %oop %r40 to %word
	%r43 = ptrtoint %oop %r39 to %word
	%r42 = icmp eq %word %r44, %r43
	%r41 = inttoptr i1 %r42 to %oop
	%r46 = ptrtoint %oop %r41 to %word
	%r45 = icmp ne %word %r46, 0
	br i1 %r45, label %L6, label %L4
L6:
	br label %L4
L4:
	%r47 = load %oop, %oop* %t5
	%r48 = inttoptr %word 1 to %oop
	%r49 = load %oop, %oop* %t3
	%r53 = ptrtoint %oop %r49 to %word
	%r52 = ptrtoint %oop %r48 to %word
	%r51 = ashr %word %r53, %r52
	%r50 = inttoptr %word %r51 to %oop
	store %oop %r50, %oop* %t3
	%r54 = inttoptr %word 1 to %oop
	%r55 = load %oop, %oop* %t2
	%r59 = bitcast %oop %r55 to [0 x %oop]*
	%r58 = ptrtoint %oop %r54 to %word
	%r57 = getelementptr [0 x %oop], [0 x %oop]* %r59, %word 0, %word %r58
	%r56 = load %oop, %oop* %r57
	store %oop %r56, %oop* %t2
	store %oop %r56, %oop* %t4
	br label %L3
L2:
	%r60 = inttoptr %word 0 to %oop
	store %oop %r60, %oop* %t3
	store %oop %r60, %oop* %t4
	br label %L3
L3:
	%r61 = load %oop, %oop* %t4
	%r62 = load %oop, %oop* %t2
	%r64 = ptrtoint %oop %r62 to %word
	%r63 = icmp ne %word %r64, 0
	br i1 %r63, label %L7, label %L8
L7:
	%r65 = getelementptr %"<string>", %"<string>"* @m_ostr520, i32 0, i32 1
	%r66 = bitcast %word* %r65 to %oop
	%r67 = load %oop, %oop* %t0
	%r68 = call %oop @"m_%too-many-arguments.code"(%oop %r66, %oop %r67)
	store %oop %r68, %oop* %t4
	br label %L9
L8:
	%r69 = inttoptr %word 0 to %oop
	store %oop %r69, %oop* %t4
	br label %L9
L9:
	%r70 = load %oop, %oop* %t4
	%r71 = load %oop, %oop* %t3
	%r72 = call %oop @m_string.code(%oop %r71)
	ret %oop %r72
}
@m_cstr521 = private unnamed_addr constant [22 x i8] c"string/evaluator-stub\00"
@m_ostr522 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 43, %oop bitcast ([22 x i8]* @m_cstr521 to %oop) }
@"m_string/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_string/evaluator-stub.code" to %oop), %"<string>"* @m_ostr522 }
define %oop @"m_ascii-bytes->string.code"(%oop %buf, %oop %length) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	store %oop %buf, %oop* %t0
	store %oop %length, %oop* %t1
	%r1 = load %oop, %oop* %t1
	%r2 = call %oop @m_string.code(%oop %r1)
	store %oop %r2, %oop* %t2
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t3
	%r4 = load %oop, %oop* %t1
	store %oop %r4, %oop* %t4
	br label %L2
L1:
	%r5 = load %oop, %oop* %t3
	%r6 = load %oop, %oop* %t0
	%r11 = bitcast %oop %r6 to [0 x i8]*
	%r10 = ptrtoint %oop %r5 to %word
	%r9 = getelementptr [0 x i8], [0 x i8]* %r11, %word 0, %word %r10
	%r8 = load i8, i8* %r9
	%r7 = inttoptr i8 %r8 to %oop
	%r12 = load %oop, %oop* %t3
	%r13 = inttoptr %word 1 to %oop
	%r14 = load %oop, %oop* %t2
	%r18 = bitcast %oop %r14 to [0 x %oop]*
	%r17 = ptrtoint %oop %r13 to %word
	%r16 = getelementptr [0 x %oop], [0 x %oop]* %r18, %word 0, %word %r17
	%r15 = load %oop, %oop* %r16
	%r24 = bitcast %oop %r15 to [0 x i8]*
	%r23 = ptrtoint %oop %r12 to %word
	%r22 = getelementptr [0 x i8], [0 x i8]* %r24, %word 0, %word %r23
	%r21 = ptrtoint %oop %r7 to i8
	store i8 %r21, i8* %r22
	%r20 = zext i8 %r21 to %word
	%r19 = inttoptr %word %r20 to %oop
	%r25 = inttoptr %word 1 to %oop
	%r26 = load %oop, %oop* %t3
	%r30 = ptrtoint %oop %r26 to %word
	%r29 = ptrtoint %oop %r25 to %word
	%r28 = add %word %r30, %r29
	%r27 = inttoptr %word %r28 to %oop
	store %oop %r27, %oop* %t3
	br label %L2
L2:
	%r31 = load %oop, %oop* %t4
	%r32 = load %oop, %oop* %t3
	%r36 = ptrtoint %oop %r32 to %word
	%r35 = ptrtoint %oop %r31 to %word
	%r34 = icmp eq %word %r36, %r35
	%r33 = inttoptr i1 %r34 to %oop
	%r40 = ptrtoint %oop %r33 to %word
	%r39 = icmp eq %word %r40, 0
	%r38 = zext i1 %r39 to %word
	%r37 = inttoptr %word %r38 to %oop
	%r42 = ptrtoint %oop %r37 to %word
	%r41 = icmp ne %word %r42, 0
	br i1 %r41, label %L1, label %L3
L3:
	%r43 = load %oop, %oop* %t2
	ret %oop %r43
}
@m_cstr523 = private unnamed_addr constant [20 x i8] c"ascii-bytes->string\00"
@m_ostr524 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 39, %oop bitcast ([20 x i8]* @m_cstr523 to %oop) }
@"m_ascii-bytes->string" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_ascii-bytes->string.code" to %oop), %"<string>"* @m_ostr524 }
@m_cstr525 = private unnamed_addr constant [24 x i8] c"kernel assertion failed\00"
@m_ostr526 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 47, %oop bitcast ([24 x i8]* @m_cstr525 to %oop) }
define %oop @m_symbol.code(%oop %name) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	%t2 = alloca %oop
	store %oop %name, %oop* %t0
	%r1 = inttoptr %word 0 to %oop
	store %oop %r1, %oop* %t1
	%r2 = load %oop, %oop* %t0
	%r3 = call %oop @"m_string?.code"(%oop %r2)
	store %oop %r3, %oop* %t1
	%r4 = inttoptr %word 0 to %oop
	%r8 = ptrtoint %oop %r4 to %word
	%r7 = ptrtoint %oop %r3 to %word
	%r6 = icmp eq %word %r8, %r7
	%r5 = inttoptr i1 %r6 to %oop
	%r10 = ptrtoint %oop %r5 to %word
	%r9 = icmp ne %word %r10, 0
	br i1 %r9, label %L2, label %L1
L2:
	%r11 = call %oop @m_error-prologue.code()
	%r12 = getelementptr %"<string>", %"<string>"* @m_ostr526, i32 0, i32 1
	%r13 = bitcast %word* %r12 to %oop
	%r14 = call %oop @"m_%error.code"(%oop %r13)
	%r15 = call %oop @m_error-epilogue.code()
	store %oop %r15, %oop* %t1
	%r16 = inttoptr %word 0 to %oop
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = icmp eq %word %r20, %r19
	%r17 = inttoptr i1 %r18 to %oop
	%r22 = ptrtoint %oop %r17 to %word
	%r21 = icmp ne %word %r22, 0
	br i1 %r21, label %L3, label %L1
L3:
	br label %L1
L1:
	%r23 = load %oop, %oop* %t1
	%r24 = inttoptr %word 11 to %oop
	%r25 = inttoptr %word 1 to %oop
	%r26 = call %oop @m_allocate.code(%oop %r24, %oop %r25)
	store %oop %r26, %oop* %t1
	%r28 = getelementptr %oop, %oop* %t1, %word 0
	%r27 = bitcast %oop* %r28 to %oop
	%r29 = call %oop @"m_gc/push-root.code"(%oop %r27)
	%r30 = load %oop, %oop* %t0
	%r31 = inttoptr %word 0 to %oop
	%r32 = load %oop, %oop* %t1
	%r36 = bitcast %oop %r32 to [0 x %oop]*
	%r35 = ptrtoint %oop %r31 to %word
	%r34 = getelementptr [0 x %oop], [0 x %oop]* %r36, %word 0, %word %r35
	store %oop %r30, %oop* %r34
	%r33 = bitcast %oop %r30 to %oop
	%r37 = load %oop, %oop* %t1
	store %oop %r37, %oop* %t2
	%r39 = getelementptr %oop, %oop* %t1, %word 0
	%r38 = bitcast %oop* %r39 to %oop
	%r40 = call %oop @"m_gc/pop-root.code"(%oop %r38)
	%r41 = load %oop, %oop* %t2
	ret %oop %r41
}
@m_cstr527 = private unnamed_addr constant [7 x i8] c"symbol\00"
@m_ostr528 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr527 to %oop) }
@m_symbol = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_symbol.code to %oop), %"<string>"* @m_ostr528 }
define %oop @m_array.code(%oop %capacity) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	%t2 = alloca %oop
	store %oop %capacity, %oop* %t0
	%r1 = inttoptr %word 12 to %oop
	%r2 = inttoptr %word 2 to %oop
	%r3 = call %oop @m_allocate.code(%oop %r1, %oop %r2)
	store %oop %r3, %oop* %t1
	%r5 = getelementptr %oop, %oop* %t1, %word 0
	%r4 = bitcast %oop* %r5 to %oop
	%r6 = call %oop @"m_gc/push-root.code"(%oop %r4)
	%r7 = inttoptr %word 1 to %oop
	%r8 = inttoptr %word 1 to %oop
	%r9 = inttoptr %word 0 to %oop
	%r13 = ptrtoint %oop %r9 to %word
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = shl %word %r13, %r12
	%r10 = inttoptr %word %r11 to %oop
	%r17 = ptrtoint %oop %r10 to %word
	%r16 = ptrtoint %oop %r7 to %word
	%r15 = or %word %r17, %r16
	%r14 = inttoptr %word %r15 to %oop
	%r18 = inttoptr %word 0 to %oop
	%r19 = load %oop, %oop* %t1
	%r23 = bitcast %oop %r19 to [0 x %oop]*
	%r22 = ptrtoint %oop %r18 to %word
	%r21 = getelementptr [0 x %oop], [0 x %oop]* %r23, %word 0, %word %r22
	store %oop %r14, %oop* %r21
	%r20 = bitcast %oop %r14 to %oop
	%r24 = inttoptr %word 0 to %oop
	%r25 = load %oop, %oop* %t0
	%r29 = ptrtoint %oop %r25 to %word
	%r28 = ptrtoint %oop %r24 to %word
	%r27 = icmp sgt %word %r29, %r28
	%r26 = inttoptr i1 %r27 to %oop
	%r31 = ptrtoint %oop %r26 to %word
	%r30 = icmp ne %word %r31, 0
	br i1 %r30, label %L1, label %L2
L1:
	%r32 = inttoptr %word 5 to %oop
	%r33 = load %oop, %oop* %t0
	%r34 = call %oop @m_allocate.code(%oop %r32, %oop %r33)
	store %oop %r34, %oop* %t2
	br label %L3
L2:
	%r35 = inttoptr %word 0 to %oop
	store %oop %r35, %oop* %t2
	br label %L3
L3:
	%r36 = load %oop, %oop* %t2
	%r37 = inttoptr %word 1 to %oop
	%r38 = load %oop, %oop* %t1
	%r42 = bitcast %oop %r38 to [0 x %oop]*
	%r41 = ptrtoint %oop %r37 to %word
	%r40 = getelementptr [0 x %oop], [0 x %oop]* %r42, %word 0, %word %r41
	store %oop %r36, %oop* %r40
	%r39 = bitcast %oop %r36 to %oop
	%r43 = load %oop, %oop* %t1
	store %oop %r43, %oop* %t2
	%r45 = getelementptr %oop, %oop* %t1, %word 0
	%r44 = bitcast %oop* %r45 to %oop
	%r46 = call %oop @"m_gc/pop-root.code"(%oop %r44)
	%r47 = load %oop, %oop* %t2
	ret %oop %r47
}
@m_cstr529 = private unnamed_addr constant [6 x i8] c"array\00"
@m_ostr530 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr529 to %oop) }
@m_array = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_array.code to %oop), %"<string>"* @m_ostr530 }
@m_cstr531 = private unnamed_addr constant [6 x i8] c"array\00"
@m_ostr532 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr531 to %oop) }
@m_cstr533 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr534 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr533 to %oop) }
@m_cstr535 = private unnamed_addr constant [9 x i8] c"capacity\00"
@m_ostr536 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr535 to %oop) }
@m_cstr537 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr538 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr537 to %oop) }
@m_cstr539 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr540 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr539 to %oop) }
@m_cstr541 = private unnamed_addr constant [6 x i8] c"array\00"
@m_ostr542 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr541 to %oop) }
define %oop @"m_array/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = load %oop, %oop* %t2
	%r4 = call %oop @"m_pair?.code"(%oop %r3)
	%r6 = ptrtoint %oop %r4 to %word
	%r5 = icmp ne %word %r6, 0
	br i1 %r5, label %L1, label %L2
L1:
	%r7 = inttoptr %word 0 to %oop
	%r8 = load %oop, %oop* %t2
	%r12 = bitcast %oop %r8 to [0 x %oop]*
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = getelementptr [0 x %oop], [0 x %oop]* %r12, %word 0, %word %r11
	%r9 = load %oop, %oop* %r10
	store %oop %r9, %oop* %t3
	%r13 = inttoptr %word 0 to %oop
	store %oop %r13, %oop* %t5
	%r14 = load %oop, %oop* %t3
	%r15 = call %oop @"m_long?.code"(%oop %r14)
	store %oop %r15, %oop* %t5
	%r16 = inttoptr %word 0 to %oop
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = icmp eq %word %r20, %r19
	%r17 = inttoptr i1 %r18 to %oop
	%r22 = ptrtoint %oop %r17 to %word
	%r21 = icmp ne %word %r22, 0
	br i1 %r21, label %L5, label %L4
L5:
	%r23 = call %oop @m_error-prologue.code()
	%r24 = getelementptr %"<string>", %"<string>"* @m_ostr532, i32 0, i32 1
	%r25 = bitcast %word* %r24 to %oop
	%r26 = call %oop @"m_%error.code"(%oop %r25)
	%r27 = getelementptr %"<string>", %"<string>"* @m_ostr534, i32 0, i32 1
	%r28 = bitcast %word* %r27 to %oop
	%r29 = call %oop @"m_%error.code"(%oop %r28)
	%r30 = getelementptr %"<string>", %"<string>"* @m_ostr536, i32 0, i32 1
	%r31 = bitcast %word* %r30 to %oop
	%r32 = call %oop @"m_%error.code"(%oop %r31)
	%r33 = getelementptr %"<string>", %"<string>"* @m_ostr538, i32 0, i32 1
	%r34 = bitcast %word* %r33 to %oop
	%r35 = call %oop @"m_%error.code"(%oop %r34)
	%r36 = getelementptr %"<string>", %"<string>"* @m_ostr540, i32 0, i32 1
	%r37 = bitcast %word* %r36 to %oop
	%r38 = call %oop @"m_%error.code"(%oop %r37)
	%r39 = call %oop @m_error-epilogue.code()
	store %oop %r39, %oop* %t5
	%r40 = inttoptr %word 0 to %oop
	%r44 = ptrtoint %oop %r40 to %word
	%r43 = ptrtoint %oop %r39 to %word
	%r42 = icmp eq %word %r44, %r43
	%r41 = inttoptr i1 %r42 to %oop
	%r46 = ptrtoint %oop %r41 to %word
	%r45 = icmp ne %word %r46, 0
	br i1 %r45, label %L6, label %L4
L6:
	br label %L4
L4:
	%r47 = load %oop, %oop* %t5
	%r48 = inttoptr %word 1 to %oop
	%r49 = load %oop, %oop* %t3
	%r53 = ptrtoint %oop %r49 to %word
	%r52 = ptrtoint %oop %r48 to %word
	%r51 = ashr %word %r53, %r52
	%r50 = inttoptr %word %r51 to %oop
	store %oop %r50, %oop* %t3
	%r54 = inttoptr %word 1 to %oop
	%r55 = load %oop, %oop* %t2
	%r59 = bitcast %oop %r55 to [0 x %oop]*
	%r58 = ptrtoint %oop %r54 to %word
	%r57 = getelementptr [0 x %oop], [0 x %oop]* %r59, %word 0, %word %r58
	%r56 = load %oop, %oop* %r57
	store %oop %r56, %oop* %t2
	store %oop %r56, %oop* %t4
	br label %L3
L2:
	%r60 = inttoptr %word 0 to %oop
	store %oop %r60, %oop* %t3
	store %oop %r60, %oop* %t4
	br label %L3
L3:
	%r61 = load %oop, %oop* %t4
	%r62 = load %oop, %oop* %t2
	%r64 = ptrtoint %oop %r62 to %word
	%r63 = icmp ne %word %r64, 0
	br i1 %r63, label %L7, label %L8
L7:
	%r65 = getelementptr %"<string>", %"<string>"* @m_ostr542, i32 0, i32 1
	%r66 = bitcast %word* %r65 to %oop
	%r67 = load %oop, %oop* %t0
	%r68 = call %oop @"m_%too-many-arguments.code"(%oop %r66, %oop %r67)
	store %oop %r68, %oop* %t4
	br label %L9
L8:
	%r69 = inttoptr %word 0 to %oop
	store %oop %r69, %oop* %t4
	br label %L9
L9:
	%r70 = load %oop, %oop* %t4
	%r71 = load %oop, %oop* %t3
	%r72 = call %oop @m_array.code(%oop %r71)
	ret %oop %r72
}
@m_cstr543 = private unnamed_addr constant [21 x i8] c"array/evaluator-stub\00"
@m_ostr544 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 41, %oop bitcast ([21 x i8]* @m_cstr543 to %oop) }
@"m_array/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_array/evaluator-stub.code" to %oop), %"<string>"* @m_ostr544 }
define %oop @m_expr.code(%oop %parameters, %oop %body, %oop %env, %oop %ctx) {
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	store %oop %parameters, %oop* %t0
	store %oop %body, %oop* %t1
	store %oop %env, %oop* %t2
	store %oop %ctx, %oop* %t3
	%r1 = inttoptr %word 14 to %oop
	%r2 = inttoptr %word 5 to %oop
	%r3 = call %oop @m_allocate.code(%oop %r1, %oop %r2)
	store %oop %r3, %oop* %t4
	%r5 = getelementptr %oop, %oop* %t4, %word 0
	%r4 = bitcast %oop* %r5 to %oop
	%r6 = call %oop @"m_gc/push-root.code"(%oop %r4)
	%r7 = load %oop, %oop* %t0
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t4
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	store %oop %r7, %oop* %r11
	%r10 = bitcast %oop %r7 to %oop
	%r14 = load %oop, %oop* %t1
	%r15 = inttoptr %word 1 to %oop
	%r16 = load %oop, %oop* %t4
	%r20 = bitcast %oop %r16 to [0 x %oop]*
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = getelementptr [0 x %oop], [0 x %oop]* %r20, %word 0, %word %r19
	store %oop %r14, %oop* %r18
	%r17 = bitcast %oop %r14 to %oop
	%r21 = load %oop, %oop* %t2
	%r22 = inttoptr %word 2 to %oop
	%r23 = load %oop, %oop* %t4
	%r27 = bitcast %oop %r23 to [0 x %oop]*
	%r26 = ptrtoint %oop %r22 to %word
	%r25 = getelementptr [0 x %oop], [0 x %oop]* %r27, %word 0, %word %r26
	store %oop %r21, %oop* %r25
	%r24 = bitcast %oop %r21 to %oop
	%r28 = load %oop, %oop* %t3
	%r29 = inttoptr %word 3 to %oop
	%r30 = load %oop, %oop* %t4
	%r34 = bitcast %oop %r30 to [0 x %oop]*
	%r33 = ptrtoint %oop %r29 to %word
	%r32 = getelementptr [0 x %oop], [0 x %oop]* %r34, %word 0, %word %r33
	store %oop %r28, %oop* %r32
	%r31 = bitcast %oop %r28 to %oop
	%r35 = load %oop, %oop* %t4
	store %oop %r35, %oop* %t5
	%r37 = getelementptr %oop, %oop* %t4, %word 0
	%r36 = bitcast %oop* %r37 to %oop
	%r38 = call %oop @"m_gc/pop-root.code"(%oop %r36)
	%r39 = load %oop, %oop* %t5
	ret %oop %r39
}
@m_cstr545 = private unnamed_addr constant [5 x i8] c"expr\00"
@m_ostr546 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr545 to %oop) }
@m_expr = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop, %oop, %oop)* @m_expr.code to %oop), %"<string>"* @m_ostr546 }
@m_cstr547 = private unnamed_addr constant [5 x i8] c"form\00"
@m_ostr548 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr547 to %oop) }
@m_cstr549 = private unnamed_addr constant [5 x i8] c"form\00"
@m_ostr550 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr549 to %oop) }
define %oop @"m_form/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t5 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = load %oop, %oop* %t2
	%r5 = call %oop @"m_pair?.code"(%oop %r4)
	%r7 = ptrtoint %oop %r5 to %word
	%r6 = icmp ne %word %r7, 0
	br i1 %r6, label %L1, label %L2
L1:
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t2
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	%r10 = load %oop, %oop* %r11
	store %oop %r10, %oop* %t3
	%r14 = inttoptr %word 1 to %oop
	%r15 = load %oop, %oop* %t2
	%r19 = bitcast %oop %r15 to [0 x %oop]*
	%r18 = ptrtoint %oop %r14 to %word
	%r17 = getelementptr [0 x %oop], [0 x %oop]* %r19, %word 0, %word %r18
	%r16 = load %oop, %oop* %r17
	store %oop %r16, %oop* %t2
	store %oop %r16, %oop* %t5
	br label %L3
L2:
	%r20 = getelementptr %"<string>", %"<string>"* @m_ostr548, i32 0, i32 1
	%r21 = bitcast %word* %r20 to %oop
	%r22 = load %oop, %oop* %t0
	%r23 = call %oop @"m_%not-enough-arguments.code"(%oop %r21, %oop %r22)
	store %oop %r23, %oop* %t5
	br label %L3
L3:
	%r24 = load %oop, %oop* %t5
	%r25 = load %oop, %oop* %t2
	%r26 = call %oop @"m_pair?.code"(%oop %r25)
	%r28 = ptrtoint %oop %r26 to %word
	%r27 = icmp ne %word %r28, 0
	br i1 %r27, label %L4, label %L5
L4:
	%r29 = inttoptr %word 0 to %oop
	%r30 = load %oop, %oop* %t2
	%r34 = bitcast %oop %r30 to [0 x %oop]*
	%r33 = ptrtoint %oop %r29 to %word
	%r32 = getelementptr [0 x %oop], [0 x %oop]* %r34, %word 0, %word %r33
	%r31 = load %oop, %oop* %r32
	store %oop %r31, %oop* %t4
	%r35 = inttoptr %word 1 to %oop
	%r36 = load %oop, %oop* %t2
	%r40 = bitcast %oop %r36 to [0 x %oop]*
	%r39 = ptrtoint %oop %r35 to %word
	%r38 = getelementptr [0 x %oop], [0 x %oop]* %r40, %word 0, %word %r39
	%r37 = load %oop, %oop* %r38
	store %oop %r37, %oop* %t2
	store %oop %r37, %oop* %t5
	br label %L6
L5:
	%r41 = inttoptr %word 0 to %oop
	store %oop %r41, %oop* %t4
	store %oop %r41, %oop* %t5
	br label %L6
L6:
	%r42 = load %oop, %oop* %t5
	%r43 = load %oop, %oop* %t2
	%r45 = ptrtoint %oop %r43 to %word
	%r44 = icmp ne %word %r45, 0
	br i1 %r44, label %L7, label %L8
L7:
	%r46 = getelementptr %"<string>", %"<string>"* @m_ostr550, i32 0, i32 1
	%r47 = bitcast %word* %r46 to %oop
	%r48 = load %oop, %oop* %t0
	%r49 = call %oop @"m_%too-many-arguments.code"(%oop %r47, %oop %r48)
	store %oop %r49, %oop* %t5
	br label %L9
L8:
	%r50 = inttoptr %word 0 to %oop
	store %oop %r50, %oop* %t5
	br label %L9
L9:
	%r51 = load %oop, %oop* %t5
	%r52 = load %oop, %oop* %t3
	%r53 = load %oop, %oop* %t4
	%r54 = call %oop @m_form.code(%oop %r52, %oop %r53)
	ret %oop %r54
}
@m_cstr551 = private unnamed_addr constant [20 x i8] c"form/evaluator-stub\00"
@m_ostr552 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 39, %oop bitcast ([20 x i8]* @m_cstr551 to %oop) }
@"m_form/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_form/evaluator-stub.code" to %oop), %"<string>"* @m_ostr552 }
define %oop @m_fixed.code(%oop %fn) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	%t2 = alloca %oop
	store %oop %fn, %oop* %t0
	%r1 = inttoptr %word 8 to %oop
	%r2 = inttoptr %word 1 to %oop
	%r3 = call %oop @m_allocate.code(%oop %r1, %oop %r2)
	store %oop %r3, %oop* %t1
	%r5 = getelementptr %oop, %oop* %t1, %word 0
	%r4 = bitcast %oop* %r5 to %oop
	%r6 = call %oop @"m_gc/push-root.code"(%oop %r4)
	%r7 = load %oop, %oop* %t0
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t1
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	store %oop %r7, %oop* %r11
	%r10 = bitcast %oop %r7 to %oop
	%r14 = load %oop, %oop* %t1
	store %oop %r14, %oop* %t2
	%r16 = getelementptr %oop, %oop* %t1, %word 0
	%r15 = bitcast %oop* %r16 to %oop
	%r17 = call %oop @"m_gc/pop-root.code"(%oop %r15)
	%r18 = load %oop, %oop* %t2
	ret %oop %r18
}
@m_cstr553 = private unnamed_addr constant [6 x i8] c"fixed\00"
@m_ostr554 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr553 to %oop) }
@m_fixed = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_fixed.code to %oop), %"<string>"* @m_ostr554 }
@m_cstr555 = private unnamed_addr constant [6 x i8] c"fixed\00"
@m_ostr556 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr555 to %oop) }
@m_cstr557 = private unnamed_addr constant [6 x i8] c"fixed\00"
@m_ostr558 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr557 to %oop) }
define %oop @"m_fixed/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = load %oop, %oop* %t2
	%r4 = call %oop @"m_pair?.code"(%oop %r3)
	%r6 = ptrtoint %oop %r4 to %word
	%r5 = icmp ne %word %r6, 0
	br i1 %r5, label %L1, label %L2
L1:
	%r7 = inttoptr %word 0 to %oop
	%r8 = load %oop, %oop* %t2
	%r12 = bitcast %oop %r8 to [0 x %oop]*
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = getelementptr [0 x %oop], [0 x %oop]* %r12, %word 0, %word %r11
	%r9 = load %oop, %oop* %r10
	store %oop %r9, %oop* %t3
	%r13 = inttoptr %word 1 to %oop
	%r14 = load %oop, %oop* %t2
	%r18 = bitcast %oop %r14 to [0 x %oop]*
	%r17 = ptrtoint %oop %r13 to %word
	%r16 = getelementptr [0 x %oop], [0 x %oop]* %r18, %word 0, %word %r17
	%r15 = load %oop, %oop* %r16
	store %oop %r15, %oop* %t2
	store %oop %r15, %oop* %t4
	br label %L3
L2:
	%r19 = getelementptr %"<string>", %"<string>"* @m_ostr556, i32 0, i32 1
	%r20 = bitcast %word* %r19 to %oop
	%r21 = load %oop, %oop* %t0
	%r22 = call %oop @"m_%not-enough-arguments.code"(%oop %r20, %oop %r21)
	store %oop %r22, %oop* %t4
	br label %L3
L3:
	%r23 = load %oop, %oop* %t4
	%r24 = load %oop, %oop* %t2
	%r26 = ptrtoint %oop %r24 to %word
	%r25 = icmp ne %word %r26, 0
	br i1 %r25, label %L4, label %L5
L4:
	%r27 = getelementptr %"<string>", %"<string>"* @m_ostr558, i32 0, i32 1
	%r28 = bitcast %word* %r27 to %oop
	%r29 = load %oop, %oop* %t0
	%r30 = call %oop @"m_%too-many-arguments.code"(%oop %r28, %oop %r29)
	store %oop %r30, %oop* %t4
	br label %L6
L5:
	%r31 = inttoptr %word 0 to %oop
	store %oop %r31, %oop* %t4
	br label %L6
L6:
	%r32 = load %oop, %oop* %t4
	%r33 = load %oop, %oop* %t3
	%r34 = call %oop @m_fixed.code(%oop %r33)
	ret %oop %r34
}
@m_cstr559 = private unnamed_addr constant [21 x i8] c"fixed/evaluator-stub\00"
@m_ostr560 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 41, %oop bitcast ([21 x i8]* @m_cstr559 to %oop) }
@"m_fixed/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_fixed/evaluator-stub.code" to %oop), %"<string>"* @m_ostr560 }
define %oop @m_primitive-function.code(%oop %code, %oop %name) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	store %oop %code, %oop* %t0
	store %oop %name, %oop* %t1
	%r1 = inttoptr %word 0 to %oop
	%r2 = inttoptr %word 10 to %oop
	%r3 = inttoptr %word 2 to %oop
	%r4 = call %oop @m_allocate.code(%oop %r2, %oop %r3)
	store %oop %r4, %oop* %t2
	%r6 = getelementptr %oop, %oop* %t2, %word 0
	%r5 = bitcast %oop* %r6 to %oop
	%r7 = call %oop @"m_gc/push-root.code"(%oop %r5)
	%r8 = load %oop, %oop* %t0
	%r9 = inttoptr %word 0 to %oop
	%r10 = load %oop, %oop* %t2
	%r14 = bitcast %oop %r10 to [0 x %oop]*
	%r13 = ptrtoint %oop %r9 to %word
	%r12 = getelementptr [0 x %oop], [0 x %oop]* %r14, %word 0, %word %r13
	store %oop %r8, %oop* %r12
	%r11 = bitcast %oop %r8 to %oop
	%r15 = load %oop, %oop* %t1
	%r16 = inttoptr %word 1 to %oop
	%r17 = load %oop, %oop* %t2
	%r21 = bitcast %oop %r17 to [0 x %oop]*
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = getelementptr [0 x %oop], [0 x %oop]* %r21, %word 0, %word %r20
	store %oop %r15, %oop* %r19
	%r18 = bitcast %oop %r15 to %oop
	%r22 = load %oop, %oop* %t2
	store %oop %r22, %oop* %t3
	%r24 = getelementptr %oop, %oop* %t2, %word 0
	%r23 = bitcast %oop* %r24 to %oop
	%r25 = call %oop @"m_gc/pop-root.code"(%oop %r23)
	%r26 = load %oop, %oop* %t3
	ret %oop %r26
}
@m_cstr561 = private unnamed_addr constant [19 x i8] c"primitive-function\00"
@m_ostr562 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 37, %oop bitcast ([19 x i8]* @m_cstr561 to %oop) }
@m_primitive-function = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @m_primitive-function.code to %oop), %"<string>"* @m_ostr562 }
define %oop @m_variable.code(%oop %name, %oop %value, %oop %env, %oop %index) {
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	store %oop %name, %oop* %t0
	store %oop %value, %oop* %t1
	store %oop %env, %oop* %t2
	store %oop %index, %oop* %t3
	%r1 = inttoptr %word 16 to %oop
	%r2 = inttoptr %word 4 to %oop
	%r3 = call %oop @m_allocate.code(%oop %r1, %oop %r2)
	store %oop %r3, %oop* %t4
	%r5 = getelementptr %oop, %oop* %t4, %word 0
	%r4 = bitcast %oop* %r5 to %oop
	%r6 = call %oop @"m_gc/push-root.code"(%oop %r4)
	%r7 = load %oop, %oop* %t0
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t4
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	store %oop %r7, %oop* %r11
	%r10 = bitcast %oop %r7 to %oop
	%r14 = load %oop, %oop* %t1
	%r15 = inttoptr %word 1 to %oop
	%r16 = load %oop, %oop* %t4
	%r20 = bitcast %oop %r16 to [0 x %oop]*
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = getelementptr [0 x %oop], [0 x %oop]* %r20, %word 0, %word %r19
	store %oop %r14, %oop* %r18
	%r17 = bitcast %oop %r14 to %oop
	%r21 = load %oop, %oop* %t2
	%r22 = inttoptr %word 2 to %oop
	%r23 = load %oop, %oop* %t4
	%r27 = bitcast %oop %r23 to [0 x %oop]*
	%r26 = ptrtoint %oop %r22 to %word
	%r25 = getelementptr [0 x %oop], [0 x %oop]* %r27, %word 0, %word %r26
	store %oop %r21, %oop* %r25
	%r24 = bitcast %oop %r21 to %oop
	%r28 = inttoptr %word 1 to %oop
	%r29 = inttoptr %word 1 to %oop
	%r30 = load %oop, %oop* %t3
	%r34 = ptrtoint %oop %r30 to %word
	%r33 = ptrtoint %oop %r29 to %word
	%r32 = shl %word %r34, %r33
	%r31 = inttoptr %word %r32 to %oop
	%r38 = ptrtoint %oop %r31 to %word
	%r37 = ptrtoint %oop %r28 to %word
	%r36 = or %word %r38, %r37
	%r35 = inttoptr %word %r36 to %oop
	%r39 = inttoptr %word 3 to %oop
	%r40 = load %oop, %oop* %t4
	%r44 = bitcast %oop %r40 to [0 x %oop]*
	%r43 = ptrtoint %oop %r39 to %word
	%r42 = getelementptr [0 x %oop], [0 x %oop]* %r44, %word 0, %word %r43
	store %oop %r35, %oop* %r42
	%r41 = bitcast %oop %r35 to %oop
	%r45 = load %oop, %oop* %t4
	store %oop %r45, %oop* %t5
	%r47 = getelementptr %oop, %oop* %t4, %word 0
	%r46 = bitcast %oop* %r47 to %oop
	%r48 = call %oop @"m_gc/pop-root.code"(%oop %r46)
	%r49 = load %oop, %oop* %t5
	ret %oop %r49
}
@m_cstr563 = private unnamed_addr constant [9 x i8] c"variable\00"
@m_ostr564 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr563 to %oop) }
@m_variable = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop, %oop, %oop)* @m_variable.code to %oop), %"<string>"* @m_ostr564 }
@m_cstr565 = private unnamed_addr constant [9 x i8] c"variable\00"
@m_ostr566 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr565 to %oop) }
@m_cstr567 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr568 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr567 to %oop) }
@m_cstr569 = private unnamed_addr constant [5 x i8] c"name\00"
@m_ostr570 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr569 to %oop) }
@m_cstr571 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr572 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr571 to %oop) }
@m_cstr573 = private unnamed_addr constant [9 x i8] c"<symbol>\00"
@m_ostr574 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr573 to %oop) }
@m_cstr575 = private unnamed_addr constant [9 x i8] c"variable\00"
@m_ostr576 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr575 to %oop) }
@m_cstr577 = private unnamed_addr constant [9 x i8] c"variable\00"
@m_ostr578 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr577 to %oop) }
@m_cstr579 = private unnamed_addr constant [9 x i8] c"variable\00"
@m_ostr580 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr579 to %oop) }
@m_cstr581 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr582 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr581 to %oop) }
@m_cstr583 = private unnamed_addr constant [4 x i8] c"env\00"
@m_ostr584 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr583 to %oop) }
@m_cstr585 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr586 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr585 to %oop) }
@m_cstr587 = private unnamed_addr constant [6 x i8] c"<env>\00"
@m_ostr588 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr587 to %oop) }
@m_cstr589 = private unnamed_addr constant [9 x i8] c"variable\00"
@m_ostr590 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr589 to %oop) }
@m_cstr591 = private unnamed_addr constant [9 x i8] c"variable\00"
@m_ostr592 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr591 to %oop) }
@m_cstr593 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr594 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr593 to %oop) }
@m_cstr595 = private unnamed_addr constant [6 x i8] c"index\00"
@m_ostr596 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr595 to %oop) }
@m_cstr597 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr598 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr597 to %oop) }
@m_cstr599 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr600 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr599 to %oop) }
@m_cstr601 = private unnamed_addr constant [9 x i8] c"variable\00"
@m_ostr602 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr601 to %oop) }
@m_cstr603 = private unnamed_addr constant [9 x i8] c"variable\00"
@m_ostr604 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr603 to %oop) }
define %oop @"m_variable/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t6 = alloca %oop
	%t5 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t7 = alloca %oop
	%t8 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = inttoptr %word 0 to %oop
	store %oop %r4, %oop* %t5
	%r5 = inttoptr %word 0 to %oop
	store %oop %r5, %oop* %t6
	%r6 = load %oop, %oop* %t2
	%r7 = call %oop @"m_pair?.code"(%oop %r6)
	%r9 = ptrtoint %oop %r7 to %word
	%r8 = icmp ne %word %r9, 0
	br i1 %r8, label %L1, label %L2
L1:
	%r10 = inttoptr %word 0 to %oop
	%r11 = load %oop, %oop* %t2
	%r15 = bitcast %oop %r11 to [0 x %oop]*
	%r14 = ptrtoint %oop %r10 to %word
	%r13 = getelementptr [0 x %oop], [0 x %oop]* %r15, %word 0, %word %r14
	%r12 = load %oop, %oop* %r13
	store %oop %r12, %oop* %t3
	%r16 = inttoptr %word 0 to %oop
	store %oop %r16, %oop* %t8
	%r17 = load %oop, %oop* %t3
	%r18 = call %oop @"m_symbol?.code"(%oop %r17)
	store %oop %r18, %oop* %t8
	%r19 = inttoptr %word 0 to %oop
	%r23 = ptrtoint %oop %r19 to %word
	%r22 = ptrtoint %oop %r18 to %word
	%r21 = icmp eq %word %r23, %r22
	%r20 = inttoptr i1 %r21 to %oop
	%r25 = ptrtoint %oop %r20 to %word
	%r24 = icmp ne %word %r25, 0
	br i1 %r24, label %L5, label %L4
L5:
	%r26 = call %oop @m_error-prologue.code()
	%r27 = getelementptr %"<string>", %"<string>"* @m_ostr566, i32 0, i32 1
	%r28 = bitcast %word* %r27 to %oop
	%r29 = call %oop @"m_%error.code"(%oop %r28)
	%r30 = getelementptr %"<string>", %"<string>"* @m_ostr568, i32 0, i32 1
	%r31 = bitcast %word* %r30 to %oop
	%r32 = call %oop @"m_%error.code"(%oop %r31)
	%r33 = getelementptr %"<string>", %"<string>"* @m_ostr570, i32 0, i32 1
	%r34 = bitcast %word* %r33 to %oop
	%r35 = call %oop @"m_%error.code"(%oop %r34)
	%r36 = getelementptr %"<string>", %"<string>"* @m_ostr572, i32 0, i32 1
	%r37 = bitcast %word* %r36 to %oop
	%r38 = call %oop @"m_%error.code"(%oop %r37)
	%r39 = getelementptr %"<string>", %"<string>"* @m_ostr574, i32 0, i32 1
	%r40 = bitcast %word* %r39 to %oop
	%r41 = call %oop @"m_%error.code"(%oop %r40)
	%r42 = call %oop @m_error-epilogue.code()
	store %oop %r42, %oop* %t8
	%r43 = inttoptr %word 0 to %oop
	%r47 = ptrtoint %oop %r43 to %word
	%r46 = ptrtoint %oop %r42 to %word
	%r45 = icmp eq %word %r47, %r46
	%r44 = inttoptr i1 %r45 to %oop
	%r49 = ptrtoint %oop %r44 to %word
	%r48 = icmp ne %word %r49, 0
	br i1 %r48, label %L6, label %L4
L6:
	br label %L4
L4:
	%r50 = load %oop, %oop* %t8
	%r51 = inttoptr %word 1 to %oop
	%r52 = load %oop, %oop* %t2
	%r56 = bitcast %oop %r52 to [0 x %oop]*
	%r55 = ptrtoint %oop %r51 to %word
	%r54 = getelementptr [0 x %oop], [0 x %oop]* %r56, %word 0, %word %r55
	%r53 = load %oop, %oop* %r54
	store %oop %r53, %oop* %t2
	store %oop %r53, %oop* %t7
	br label %L3
L2:
	%r57 = getelementptr %"<string>", %"<string>"* @m_ostr576, i32 0, i32 1
	%r58 = bitcast %word* %r57 to %oop
	%r59 = load %oop, %oop* %t0
	%r60 = call %oop @"m_%not-enough-arguments.code"(%oop %r58, %oop %r59)
	store %oop %r60, %oop* %t7
	br label %L3
L3:
	%r61 = load %oop, %oop* %t7
	%r62 = load %oop, %oop* %t2
	%r63 = call %oop @"m_pair?.code"(%oop %r62)
	%r65 = ptrtoint %oop %r63 to %word
	%r64 = icmp ne %word %r65, 0
	br i1 %r64, label %L7, label %L8
L7:
	%r66 = inttoptr %word 0 to %oop
	%r67 = load %oop, %oop* %t2
	%r71 = bitcast %oop %r67 to [0 x %oop]*
	%r70 = ptrtoint %oop %r66 to %word
	%r69 = getelementptr [0 x %oop], [0 x %oop]* %r71, %word 0, %word %r70
	%r68 = load %oop, %oop* %r69
	store %oop %r68, %oop* %t4
	%r72 = inttoptr %word 1 to %oop
	%r73 = load %oop, %oop* %t2
	%r77 = bitcast %oop %r73 to [0 x %oop]*
	%r76 = ptrtoint %oop %r72 to %word
	%r75 = getelementptr [0 x %oop], [0 x %oop]* %r77, %word 0, %word %r76
	%r74 = load %oop, %oop* %r75
	store %oop %r74, %oop* %t2
	store %oop %r74, %oop* %t7
	br label %L9
L8:
	%r78 = getelementptr %"<string>", %"<string>"* @m_ostr578, i32 0, i32 1
	%r79 = bitcast %word* %r78 to %oop
	%r80 = load %oop, %oop* %t0
	%r81 = call %oop @"m_%not-enough-arguments.code"(%oop %r79, %oop %r80)
	store %oop %r81, %oop* %t7
	br label %L9
L9:
	%r82 = load %oop, %oop* %t7
	%r83 = load %oop, %oop* %t2
	%r84 = call %oop @"m_pair?.code"(%oop %r83)
	%r86 = ptrtoint %oop %r84 to %word
	%r85 = icmp ne %word %r86, 0
	br i1 %r85, label %L10, label %L11
L10:
	%r87 = inttoptr %word 0 to %oop
	%r88 = load %oop, %oop* %t2
	%r92 = bitcast %oop %r88 to [0 x %oop]*
	%r91 = ptrtoint %oop %r87 to %word
	%r90 = getelementptr [0 x %oop], [0 x %oop]* %r92, %word 0, %word %r91
	%r89 = load %oop, %oop* %r90
	store %oop %r89, %oop* %t5
	%r93 = inttoptr %word 0 to %oop
	store %oop %r93, %oop* %t8
	%r94 = load %oop, %oop* %t5
	%r95 = call %oop @m_type-of.code(%oop %r94)
	%r96 = inttoptr %word 17 to %oop
	%r100 = ptrtoint %oop %r96 to %word
	%r99 = ptrtoint %oop %r95 to %word
	%r98 = icmp eq %word %r100, %r99
	%r97 = inttoptr i1 %r98 to %oop
	store %oop %r97, %oop* %t8
	%r101 = inttoptr %word 0 to %oop
	%r105 = ptrtoint %oop %r101 to %word
	%r104 = ptrtoint %oop %r97 to %word
	%r103 = icmp eq %word %r105, %r104
	%r102 = inttoptr i1 %r103 to %oop
	%r107 = ptrtoint %oop %r102 to %word
	%r106 = icmp ne %word %r107, 0
	br i1 %r106, label %L14, label %L13
L14:
	%r108 = call %oop @m_error-prologue.code()
	%r109 = getelementptr %"<string>", %"<string>"* @m_ostr580, i32 0, i32 1
	%r110 = bitcast %word* %r109 to %oop
	%r111 = call %oop @"m_%error.code"(%oop %r110)
	%r112 = getelementptr %"<string>", %"<string>"* @m_ostr582, i32 0, i32 1
	%r113 = bitcast %word* %r112 to %oop
	%r114 = call %oop @"m_%error.code"(%oop %r113)
	%r115 = getelementptr %"<string>", %"<string>"* @m_ostr584, i32 0, i32 1
	%r116 = bitcast %word* %r115 to %oop
	%r117 = call %oop @"m_%error.code"(%oop %r116)
	%r118 = getelementptr %"<string>", %"<string>"* @m_ostr586, i32 0, i32 1
	%r119 = bitcast %word* %r118 to %oop
	%r120 = call %oop @"m_%error.code"(%oop %r119)
	%r121 = getelementptr %"<string>", %"<string>"* @m_ostr588, i32 0, i32 1
	%r122 = bitcast %word* %r121 to %oop
	%r123 = call %oop @"m_%error.code"(%oop %r122)
	%r124 = call %oop @m_error-epilogue.code()
	store %oop %r124, %oop* %t8
	%r125 = inttoptr %word 0 to %oop
	%r129 = ptrtoint %oop %r125 to %word
	%r128 = ptrtoint %oop %r124 to %word
	%r127 = icmp eq %word %r129, %r128
	%r126 = inttoptr i1 %r127 to %oop
	%r131 = ptrtoint %oop %r126 to %word
	%r130 = icmp ne %word %r131, 0
	br i1 %r130, label %L15, label %L13
L15:
	br label %L13
L13:
	%r132 = load %oop, %oop* %t8
	%r133 = inttoptr %word 1 to %oop
	%r134 = load %oop, %oop* %t2
	%r138 = bitcast %oop %r134 to [0 x %oop]*
	%r137 = ptrtoint %oop %r133 to %word
	%r136 = getelementptr [0 x %oop], [0 x %oop]* %r138, %word 0, %word %r137
	%r135 = load %oop, %oop* %r136
	store %oop %r135, %oop* %t2
	store %oop %r135, %oop* %t7
	br label %L12
L11:
	%r139 = getelementptr %"<string>", %"<string>"* @m_ostr590, i32 0, i32 1
	%r140 = bitcast %word* %r139 to %oop
	%r141 = load %oop, %oop* %t0
	%r142 = call %oop @"m_%not-enough-arguments.code"(%oop %r140, %oop %r141)
	store %oop %r142, %oop* %t7
	br label %L12
L12:
	%r143 = load %oop, %oop* %t7
	%r144 = load %oop, %oop* %t2
	%r145 = call %oop @"m_pair?.code"(%oop %r144)
	%r147 = ptrtoint %oop %r145 to %word
	%r146 = icmp ne %word %r147, 0
	br i1 %r146, label %L16, label %L17
L16:
	%r148 = inttoptr %word 0 to %oop
	%r149 = load %oop, %oop* %t2
	%r153 = bitcast %oop %r149 to [0 x %oop]*
	%r152 = ptrtoint %oop %r148 to %word
	%r151 = getelementptr [0 x %oop], [0 x %oop]* %r153, %word 0, %word %r152
	%r150 = load %oop, %oop* %r151
	store %oop %r150, %oop* %t6
	%r154 = inttoptr %word 0 to %oop
	store %oop %r154, %oop* %t8
	%r155 = load %oop, %oop* %t6
	%r156 = call %oop @"m_long?.code"(%oop %r155)
	store %oop %r156, %oop* %t8
	%r157 = inttoptr %word 0 to %oop
	%r161 = ptrtoint %oop %r157 to %word
	%r160 = ptrtoint %oop %r156 to %word
	%r159 = icmp eq %word %r161, %r160
	%r158 = inttoptr i1 %r159 to %oop
	%r163 = ptrtoint %oop %r158 to %word
	%r162 = icmp ne %word %r163, 0
	br i1 %r162, label %L20, label %L19
L20:
	%r164 = call %oop @m_error-prologue.code()
	%r165 = getelementptr %"<string>", %"<string>"* @m_ostr592, i32 0, i32 1
	%r166 = bitcast %word* %r165 to %oop
	%r167 = call %oop @"m_%error.code"(%oop %r166)
	%r168 = getelementptr %"<string>", %"<string>"* @m_ostr594, i32 0, i32 1
	%r169 = bitcast %word* %r168 to %oop
	%r170 = call %oop @"m_%error.code"(%oop %r169)
	%r171 = getelementptr %"<string>", %"<string>"* @m_ostr596, i32 0, i32 1
	%r172 = bitcast %word* %r171 to %oop
	%r173 = call %oop @"m_%error.code"(%oop %r172)
	%r174 = getelementptr %"<string>", %"<string>"* @m_ostr598, i32 0, i32 1
	%r175 = bitcast %word* %r174 to %oop
	%r176 = call %oop @"m_%error.code"(%oop %r175)
	%r177 = getelementptr %"<string>", %"<string>"* @m_ostr600, i32 0, i32 1
	%r178 = bitcast %word* %r177 to %oop
	%r179 = call %oop @"m_%error.code"(%oop %r178)
	%r180 = call %oop @m_error-epilogue.code()
	store %oop %r180, %oop* %t8
	%r181 = inttoptr %word 0 to %oop
	%r185 = ptrtoint %oop %r181 to %word
	%r184 = ptrtoint %oop %r180 to %word
	%r183 = icmp eq %word %r185, %r184
	%r182 = inttoptr i1 %r183 to %oop
	%r187 = ptrtoint %oop %r182 to %word
	%r186 = icmp ne %word %r187, 0
	br i1 %r186, label %L21, label %L19
L21:
	br label %L19
L19:
	%r188 = load %oop, %oop* %t8
	%r189 = inttoptr %word 1 to %oop
	%r190 = load %oop, %oop* %t6
	%r194 = ptrtoint %oop %r190 to %word
	%r193 = ptrtoint %oop %r189 to %word
	%r192 = ashr %word %r194, %r193
	%r191 = inttoptr %word %r192 to %oop
	store %oop %r191, %oop* %t6
	%r195 = inttoptr %word 1 to %oop
	%r196 = load %oop, %oop* %t2
	%r200 = bitcast %oop %r196 to [0 x %oop]*
	%r199 = ptrtoint %oop %r195 to %word
	%r198 = getelementptr [0 x %oop], [0 x %oop]* %r200, %word 0, %word %r199
	%r197 = load %oop, %oop* %r198
	store %oop %r197, %oop* %t2
	store %oop %r197, %oop* %t7
	br label %L18
L17:
	%r201 = getelementptr %"<string>", %"<string>"* @m_ostr602, i32 0, i32 1
	%r202 = bitcast %word* %r201 to %oop
	%r203 = load %oop, %oop* %t0
	%r204 = call %oop @"m_%not-enough-arguments.code"(%oop %r202, %oop %r203)
	store %oop %r204, %oop* %t7
	br label %L18
L18:
	%r205 = load %oop, %oop* %t7
	%r206 = load %oop, %oop* %t2
	%r208 = ptrtoint %oop %r206 to %word
	%r207 = icmp ne %word %r208, 0
	br i1 %r207, label %L22, label %L23
L22:
	%r209 = getelementptr %"<string>", %"<string>"* @m_ostr604, i32 0, i32 1
	%r210 = bitcast %word* %r209 to %oop
	%r211 = load %oop, %oop* %t0
	%r212 = call %oop @"m_%too-many-arguments.code"(%oop %r210, %oop %r211)
	store %oop %r212, %oop* %t7
	br label %L24
L23:
	%r213 = inttoptr %word 0 to %oop
	store %oop %r213, %oop* %t7
	br label %L24
L24:
	%r214 = load %oop, %oop* %t7
	%r215 = load %oop, %oop* %t3
	%r216 = load %oop, %oop* %t4
	%r217 = load %oop, %oop* %t5
	%r218 = load %oop, %oop* %t6
	%r219 = call %oop @m_variable.code(%oop %r215, %oop %r216, %oop %r217, %oop %r218)
	ret %oop %r219
}
@m_cstr605 = private unnamed_addr constant [24 x i8] c"variable/evaluator-stub\00"
@m_ostr606 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 47, %oop bitcast ([24 x i8]* @m_cstr605 to %oop) }
@"m_variable/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_variable/evaluator-stub.code" to %oop), %"<string>"* @m_ostr606 }
define %oop @m_environment.code(%oop %parent, %oop %level, %oop %offset) {
	%t2 = alloca %oop
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	store %oop %parent, %oop* %t0
	store %oop %level, %oop* %t1
	store %oop %offset, %oop* %t2
	%r1 = inttoptr %word 17 to %oop
	%r2 = inttoptr %word 6 to %oop
	%r3 = call %oop @m_allocate.code(%oop %r1, %oop %r2)
	store %oop %r3, %oop* %t3
	%r5 = getelementptr %oop, %oop* %t3, %word 0
	%r4 = bitcast %oop* %r5 to %oop
	%r6 = call %oop @"m_gc/push-root.code"(%oop %r4)
	%r7 = load %oop, %oop* %t0
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t3
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	store %oop %r7, %oop* %r11
	%r10 = bitcast %oop %r7 to %oop
	%r14 = inttoptr %word 1 to %oop
	%r15 = inttoptr %word 1 to %oop
	%r16 = load %oop, %oop* %t0
	%r18 = ptrtoint %oop %r16 to %word
	%r17 = icmp ne %word %r18, 0
	br i1 %r17, label %L1, label %L2
L1:
	%r19 = load %oop, %oop* %t1
	%r20 = inttoptr %word 1 to %oop
	%r21 = inttoptr %word 1 to %oop
	%r22 = load %oop, %oop* %t0
	%r26 = bitcast %oop %r22 to [0 x %oop]*
	%r25 = ptrtoint %oop %r21 to %word
	%r24 = getelementptr [0 x %oop], [0 x %oop]* %r26, %word 0, %word %r25
	%r23 = load %oop, %oop* %r24
	%r30 = ptrtoint %oop %r23 to %word
	%r29 = ptrtoint %oop %r20 to %word
	%r28 = ashr %word %r30, %r29
	%r27 = inttoptr %word %r28 to %oop
	%r34 = ptrtoint %oop %r27 to %word
	%r33 = ptrtoint %oop %r19 to %word
	%r32 = add %word %r34, %r33
	%r31 = inttoptr %word %r32 to %oop
	store %oop %r31, %oop* %t4
	br label %L3
L2:
	%r35 = inttoptr %word 0 to %oop
	store %oop %r35, %oop* %t4
	br label %L3
L3:
	%r36 = load %oop, %oop* %t4
	%r40 = ptrtoint %oop %r36 to %word
	%r39 = ptrtoint %oop %r15 to %word
	%r38 = shl %word %r40, %r39
	%r37 = inttoptr %word %r38 to %oop
	%r44 = ptrtoint %oop %r37 to %word
	%r43 = ptrtoint %oop %r14 to %word
	%r42 = or %word %r44, %r43
	%r41 = inttoptr %word %r42 to %oop
	%r45 = inttoptr %word 1 to %oop
	%r46 = load %oop, %oop* %t3
	%r50 = bitcast %oop %r46 to [0 x %oop]*
	%r49 = ptrtoint %oop %r45 to %word
	%r48 = getelementptr [0 x %oop], [0 x %oop]* %r50, %word 0, %word %r49
	store %oop %r41, %oop* %r48
	%r47 = bitcast %oop %r41 to %oop
	%r51 = inttoptr %word 1 to %oop
	%r52 = inttoptr %word 1 to %oop
	%r53 = load %oop, %oop* %t2
	%r57 = ptrtoint %oop %r53 to %word
	%r56 = ptrtoint %oop %r52 to %word
	%r55 = shl %word %r57, %r56
	%r54 = inttoptr %word %r55 to %oop
	%r61 = ptrtoint %oop %r54 to %word
	%r60 = ptrtoint %oop %r51 to %word
	%r59 = or %word %r61, %r60
	%r58 = inttoptr %word %r59 to %oop
	%r62 = inttoptr %word 2 to %oop
	%r63 = load %oop, %oop* %t3
	%r67 = bitcast %oop %r63 to [0 x %oop]*
	%r66 = ptrtoint %oop %r62 to %word
	%r65 = getelementptr [0 x %oop], [0 x %oop]* %r67, %word 0, %word %r66
	store %oop %r58, %oop* %r65
	%r64 = bitcast %oop %r58 to %oop
	%r68 = inttoptr %word 0 to %oop
	%r69 = call %oop @m_array.code(%oop %r68)
	%r70 = inttoptr %word 3 to %oop
	%r71 = load %oop, %oop* %t3
	%r75 = bitcast %oop %r71 to [0 x %oop]*
	%r74 = ptrtoint %oop %r70 to %word
	%r73 = getelementptr [0 x %oop], [0 x %oop]* %r75, %word 0, %word %r74
	store %oop %r69, %oop* %r73
	%r72 = bitcast %oop %r69 to %oop
	%r76 = inttoptr %word 0 to %oop
	%r77 = inttoptr %word 4 to %oop
	%r78 = load %oop, %oop* %t3
	%r82 = bitcast %oop %r78 to [0 x %oop]*
	%r81 = ptrtoint %oop %r77 to %word
	%r80 = getelementptr [0 x %oop], [0 x %oop]* %r82, %word 0, %word %r81
	store %oop %r76, %oop* %r80
	%r79 = bitcast %oop %r76 to %oop
	%r83 = load %oop, %oop* %t3
	store %oop %r83, %oop* %t4
	%r85 = getelementptr %oop, %oop* %t3, %word 0
	%r84 = bitcast %oop* %r85 to %oop
	%r86 = call %oop @"m_gc/pop-root.code"(%oop %r84)
	%r87 = load %oop, %oop* %t4
	ret %oop %r87
}
@m_cstr607 = private unnamed_addr constant [12 x i8] c"environment\00"
@m_ostr608 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr607 to %oop) }
@m_environment = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop, %oop)* @m_environment.code to %oop), %"<string>"* @m_ostr608 }
@m_cstr609 = private unnamed_addr constant [12 x i8] c"environment\00"
@m_ostr610 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr609 to %oop) }
@m_cstr611 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr612 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr611 to %oop) }
@m_cstr613 = private unnamed_addr constant [7 x i8] c"parent\00"
@m_ostr614 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr613 to %oop) }
@m_cstr615 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr616 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr615 to %oop) }
@m_cstr617 = private unnamed_addr constant [6 x i8] c"<env>\00"
@m_ostr618 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr617 to %oop) }
@m_cstr619 = private unnamed_addr constant [12 x i8] c"environment\00"
@m_ostr620 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr619 to %oop) }
@m_cstr621 = private unnamed_addr constant [12 x i8] c"environment\00"
@m_ostr622 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr621 to %oop) }
@m_cstr623 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr624 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr623 to %oop) }
@m_cstr625 = private unnamed_addr constant [6 x i8] c"level\00"
@m_ostr626 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr625 to %oop) }
@m_cstr627 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr628 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr627 to %oop) }
@m_cstr629 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr630 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr629 to %oop) }
@m_cstr631 = private unnamed_addr constant [12 x i8] c"environment\00"
@m_ostr632 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr631 to %oop) }
@m_cstr633 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr634 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr633 to %oop) }
@m_cstr635 = private unnamed_addr constant [7 x i8] c"offset\00"
@m_ostr636 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr635 to %oop) }
@m_cstr637 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr638 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr637 to %oop) }
@m_cstr639 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr640 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr639 to %oop) }
@m_cstr641 = private unnamed_addr constant [12 x i8] c"environment\00"
@m_ostr642 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr641 to %oop) }
define %oop @"m_environment/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t5 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = inttoptr %word 0 to %oop
	store %oop %r4, %oop* %t5
	%r5 = load %oop, %oop* %t2
	%r6 = call %oop @"m_pair?.code"(%oop %r5)
	%r8 = ptrtoint %oop %r6 to %word
	%r7 = icmp ne %word %r8, 0
	br i1 %r7, label %L1, label %L2
L1:
	%r9 = inttoptr %word 0 to %oop
	%r10 = load %oop, %oop* %t2
	%r14 = bitcast %oop %r10 to [0 x %oop]*
	%r13 = ptrtoint %oop %r9 to %word
	%r12 = getelementptr [0 x %oop], [0 x %oop]* %r14, %word 0, %word %r13
	%r11 = load %oop, %oop* %r12
	store %oop %r11, %oop* %t3
	%r15 = inttoptr %word 0 to %oop
	store %oop %r15, %oop* %t7
	%r16 = load %oop, %oop* %t3
	%r17 = call %oop @m_type-of.code(%oop %r16)
	%r18 = inttoptr %word 17 to %oop
	%r22 = ptrtoint %oop %r18 to %word
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = icmp eq %word %r22, %r21
	%r19 = inttoptr i1 %r20 to %oop
	store %oop %r19, %oop* %t7
	%r23 = inttoptr %word 0 to %oop
	%r27 = ptrtoint %oop %r23 to %word
	%r26 = ptrtoint %oop %r19 to %word
	%r25 = icmp eq %word %r27, %r26
	%r24 = inttoptr i1 %r25 to %oop
	%r29 = ptrtoint %oop %r24 to %word
	%r28 = icmp ne %word %r29, 0
	br i1 %r28, label %L5, label %L4
L5:
	%r30 = call %oop @m_error-prologue.code()
	%r31 = getelementptr %"<string>", %"<string>"* @m_ostr610, i32 0, i32 1
	%r32 = bitcast %word* %r31 to %oop
	%r33 = call %oop @"m_%error.code"(%oop %r32)
	%r34 = getelementptr %"<string>", %"<string>"* @m_ostr612, i32 0, i32 1
	%r35 = bitcast %word* %r34 to %oop
	%r36 = call %oop @"m_%error.code"(%oop %r35)
	%r37 = getelementptr %"<string>", %"<string>"* @m_ostr614, i32 0, i32 1
	%r38 = bitcast %word* %r37 to %oop
	%r39 = call %oop @"m_%error.code"(%oop %r38)
	%r40 = getelementptr %"<string>", %"<string>"* @m_ostr616, i32 0, i32 1
	%r41 = bitcast %word* %r40 to %oop
	%r42 = call %oop @"m_%error.code"(%oop %r41)
	%r43 = getelementptr %"<string>", %"<string>"* @m_ostr618, i32 0, i32 1
	%r44 = bitcast %word* %r43 to %oop
	%r45 = call %oop @"m_%error.code"(%oop %r44)
	%r46 = call %oop @m_error-epilogue.code()
	store %oop %r46, %oop* %t7
	%r47 = inttoptr %word 0 to %oop
	%r51 = ptrtoint %oop %r47 to %word
	%r50 = ptrtoint %oop %r46 to %word
	%r49 = icmp eq %word %r51, %r50
	%r48 = inttoptr i1 %r49 to %oop
	%r53 = ptrtoint %oop %r48 to %word
	%r52 = icmp ne %word %r53, 0
	br i1 %r52, label %L6, label %L4
L6:
	br label %L4
L4:
	%r54 = load %oop, %oop* %t7
	%r55 = inttoptr %word 1 to %oop
	%r56 = load %oop, %oop* %t2
	%r60 = bitcast %oop %r56 to [0 x %oop]*
	%r59 = ptrtoint %oop %r55 to %word
	%r58 = getelementptr [0 x %oop], [0 x %oop]* %r60, %word 0, %word %r59
	%r57 = load %oop, %oop* %r58
	store %oop %r57, %oop* %t2
	store %oop %r57, %oop* %t6
	br label %L3
L2:
	%r61 = getelementptr %"<string>", %"<string>"* @m_ostr620, i32 0, i32 1
	%r62 = bitcast %word* %r61 to %oop
	%r63 = load %oop, %oop* %t0
	%r64 = call %oop @"m_%not-enough-arguments.code"(%oop %r62, %oop %r63)
	store %oop %r64, %oop* %t6
	br label %L3
L3:
	%r65 = load %oop, %oop* %t6
	%r66 = load %oop, %oop* %t2
	%r67 = call %oop @"m_pair?.code"(%oop %r66)
	%r69 = ptrtoint %oop %r67 to %word
	%r68 = icmp ne %word %r69, 0
	br i1 %r68, label %L7, label %L8
L7:
	%r70 = inttoptr %word 0 to %oop
	%r71 = load %oop, %oop* %t2
	%r75 = bitcast %oop %r71 to [0 x %oop]*
	%r74 = ptrtoint %oop %r70 to %word
	%r73 = getelementptr [0 x %oop], [0 x %oop]* %r75, %word 0, %word %r74
	%r72 = load %oop, %oop* %r73
	store %oop %r72, %oop* %t4
	%r76 = inttoptr %word 0 to %oop
	store %oop %r76, %oop* %t7
	%r77 = load %oop, %oop* %t4
	%r78 = call %oop @"m_long?.code"(%oop %r77)
	store %oop %r78, %oop* %t7
	%r79 = inttoptr %word 0 to %oop
	%r83 = ptrtoint %oop %r79 to %word
	%r82 = ptrtoint %oop %r78 to %word
	%r81 = icmp eq %word %r83, %r82
	%r80 = inttoptr i1 %r81 to %oop
	%r85 = ptrtoint %oop %r80 to %word
	%r84 = icmp ne %word %r85, 0
	br i1 %r84, label %L11, label %L10
L11:
	%r86 = call %oop @m_error-prologue.code()
	%r87 = getelementptr %"<string>", %"<string>"* @m_ostr622, i32 0, i32 1
	%r88 = bitcast %word* %r87 to %oop
	%r89 = call %oop @"m_%error.code"(%oop %r88)
	%r90 = getelementptr %"<string>", %"<string>"* @m_ostr624, i32 0, i32 1
	%r91 = bitcast %word* %r90 to %oop
	%r92 = call %oop @"m_%error.code"(%oop %r91)
	%r93 = getelementptr %"<string>", %"<string>"* @m_ostr626, i32 0, i32 1
	%r94 = bitcast %word* %r93 to %oop
	%r95 = call %oop @"m_%error.code"(%oop %r94)
	%r96 = getelementptr %"<string>", %"<string>"* @m_ostr628, i32 0, i32 1
	%r97 = bitcast %word* %r96 to %oop
	%r98 = call %oop @"m_%error.code"(%oop %r97)
	%r99 = getelementptr %"<string>", %"<string>"* @m_ostr630, i32 0, i32 1
	%r100 = bitcast %word* %r99 to %oop
	%r101 = call %oop @"m_%error.code"(%oop %r100)
	%r102 = call %oop @m_error-epilogue.code()
	store %oop %r102, %oop* %t7
	%r103 = inttoptr %word 0 to %oop
	%r107 = ptrtoint %oop %r103 to %word
	%r106 = ptrtoint %oop %r102 to %word
	%r105 = icmp eq %word %r107, %r106
	%r104 = inttoptr i1 %r105 to %oop
	%r109 = ptrtoint %oop %r104 to %word
	%r108 = icmp ne %word %r109, 0
	br i1 %r108, label %L12, label %L10
L12:
	br label %L10
L10:
	%r110 = load %oop, %oop* %t7
	%r111 = inttoptr %word 1 to %oop
	%r112 = load %oop, %oop* %t4
	%r116 = ptrtoint %oop %r112 to %word
	%r115 = ptrtoint %oop %r111 to %word
	%r114 = ashr %word %r116, %r115
	%r113 = inttoptr %word %r114 to %oop
	store %oop %r113, %oop* %t4
	%r117 = inttoptr %word 1 to %oop
	%r118 = load %oop, %oop* %t2
	%r122 = bitcast %oop %r118 to [0 x %oop]*
	%r121 = ptrtoint %oop %r117 to %word
	%r120 = getelementptr [0 x %oop], [0 x %oop]* %r122, %word 0, %word %r121
	%r119 = load %oop, %oop* %r120
	store %oop %r119, %oop* %t2
	store %oop %r119, %oop* %t6
	br label %L9
L8:
	%r123 = inttoptr %word 0 to %oop
	store %oop %r123, %oop* %t4
	store %oop %r123, %oop* %t6
	br label %L9
L9:
	%r124 = load %oop, %oop* %t6
	%r125 = load %oop, %oop* %t2
	%r126 = call %oop @"m_pair?.code"(%oop %r125)
	%r128 = ptrtoint %oop %r126 to %word
	%r127 = icmp ne %word %r128, 0
	br i1 %r127, label %L13, label %L14
L13:
	%r129 = inttoptr %word 0 to %oop
	%r130 = load %oop, %oop* %t2
	%r134 = bitcast %oop %r130 to [0 x %oop]*
	%r133 = ptrtoint %oop %r129 to %word
	%r132 = getelementptr [0 x %oop], [0 x %oop]* %r134, %word 0, %word %r133
	%r131 = load %oop, %oop* %r132
	store %oop %r131, %oop* %t5
	%r135 = inttoptr %word 0 to %oop
	store %oop %r135, %oop* %t7
	%r136 = load %oop, %oop* %t5
	%r137 = call %oop @"m_long?.code"(%oop %r136)
	store %oop %r137, %oop* %t7
	%r138 = inttoptr %word 0 to %oop
	%r142 = ptrtoint %oop %r138 to %word
	%r141 = ptrtoint %oop %r137 to %word
	%r140 = icmp eq %word %r142, %r141
	%r139 = inttoptr i1 %r140 to %oop
	%r144 = ptrtoint %oop %r139 to %word
	%r143 = icmp ne %word %r144, 0
	br i1 %r143, label %L17, label %L16
L17:
	%r145 = call %oop @m_error-prologue.code()
	%r146 = getelementptr %"<string>", %"<string>"* @m_ostr632, i32 0, i32 1
	%r147 = bitcast %word* %r146 to %oop
	%r148 = call %oop @"m_%error.code"(%oop %r147)
	%r149 = getelementptr %"<string>", %"<string>"* @m_ostr634, i32 0, i32 1
	%r150 = bitcast %word* %r149 to %oop
	%r151 = call %oop @"m_%error.code"(%oop %r150)
	%r152 = getelementptr %"<string>", %"<string>"* @m_ostr636, i32 0, i32 1
	%r153 = bitcast %word* %r152 to %oop
	%r154 = call %oop @"m_%error.code"(%oop %r153)
	%r155 = getelementptr %"<string>", %"<string>"* @m_ostr638, i32 0, i32 1
	%r156 = bitcast %word* %r155 to %oop
	%r157 = call %oop @"m_%error.code"(%oop %r156)
	%r158 = getelementptr %"<string>", %"<string>"* @m_ostr640, i32 0, i32 1
	%r159 = bitcast %word* %r158 to %oop
	%r160 = call %oop @"m_%error.code"(%oop %r159)
	%r161 = call %oop @m_error-epilogue.code()
	store %oop %r161, %oop* %t7
	%r162 = inttoptr %word 0 to %oop
	%r166 = ptrtoint %oop %r162 to %word
	%r165 = ptrtoint %oop %r161 to %word
	%r164 = icmp eq %word %r166, %r165
	%r163 = inttoptr i1 %r164 to %oop
	%r168 = ptrtoint %oop %r163 to %word
	%r167 = icmp ne %word %r168, 0
	br i1 %r167, label %L18, label %L16
L18:
	br label %L16
L16:
	%r169 = load %oop, %oop* %t7
	%r170 = inttoptr %word 1 to %oop
	%r171 = load %oop, %oop* %t5
	%r175 = ptrtoint %oop %r171 to %word
	%r174 = ptrtoint %oop %r170 to %word
	%r173 = ashr %word %r175, %r174
	%r172 = inttoptr %word %r173 to %oop
	store %oop %r172, %oop* %t5
	%r176 = inttoptr %word 1 to %oop
	%r177 = load %oop, %oop* %t2
	%r181 = bitcast %oop %r177 to [0 x %oop]*
	%r180 = ptrtoint %oop %r176 to %word
	%r179 = getelementptr [0 x %oop], [0 x %oop]* %r181, %word 0, %word %r180
	%r178 = load %oop, %oop* %r179
	store %oop %r178, %oop* %t2
	store %oop %r178, %oop* %t6
	br label %L15
L14:
	%r182 = inttoptr %word 1 to %oop
	%r183 = inttoptr %word 2 to %oop
	%r184 = load %oop, %oop* %t3
	%r188 = bitcast %oop %r184 to [0 x %oop]*
	%r187 = ptrtoint %oop %r183 to %word
	%r186 = getelementptr [0 x %oop], [0 x %oop]* %r188, %word 0, %word %r187
	%r185 = load %oop, %oop* %r186
	%r192 = ptrtoint %oop %r185 to %word
	%r191 = ptrtoint %oop %r182 to %word
	%r190 = ashr %word %r192, %r191
	%r189 = inttoptr %word %r190 to %oop
	store %oop %r189, %oop* %t5
	store %oop %r189, %oop* %t6
	br label %L15
L15:
	%r193 = load %oop, %oop* %t6
	%r194 = load %oop, %oop* %t2
	%r196 = ptrtoint %oop %r194 to %word
	%r195 = icmp ne %word %r196, 0
	br i1 %r195, label %L19, label %L20
L19:
	%r197 = getelementptr %"<string>", %"<string>"* @m_ostr642, i32 0, i32 1
	%r198 = bitcast %word* %r197 to %oop
	%r199 = load %oop, %oop* %t0
	%r200 = call %oop @"m_%too-many-arguments.code"(%oop %r198, %oop %r199)
	store %oop %r200, %oop* %t6
	br label %L21
L20:
	%r201 = inttoptr %word 0 to %oop
	store %oop %r201, %oop* %t6
	br label %L21
L21:
	%r202 = load %oop, %oop* %t6
	%r203 = load %oop, %oop* %t3
	%r204 = load %oop, %oop* %t4
	%r205 = load %oop, %oop* %t5
	%r206 = call %oop @m_environment.code(%oop %r203, %oop %r204, %oop %r205)
	ret %oop %r206
}
@m_cstr643 = private unnamed_addr constant [27 x i8] c"environment/evaluator-stub\00"
@m_ostr644 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 53, %oop bitcast ([27 x i8]* @m_cstr643 to %oop) }
@"m_environment/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_environment/evaluator-stub.code" to %oop), %"<string>"* @m_ostr644 }
define %oop @m_base-context.code(%oop %home, %oop %env) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	store %oop %home, %oop* %t0
	store %oop %env, %oop* %t1
	%r1 = inttoptr %word 19 to %oop
	%r2 = inttoptr %word 4 to %oop
	%r3 = call %oop @m_allocate.code(%oop %r1, %oop %r2)
	store %oop %r3, %oop* %t2
	%r5 = getelementptr %oop, %oop* %t2, %word 0
	%r4 = bitcast %oop* %r5 to %oop
	%r6 = call %oop @"m_gc/push-root.code"(%oop %r4)
	%r7 = load %oop, %oop* %t0
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t2
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	store %oop %r7, %oop* %r11
	%r10 = bitcast %oop %r7 to %oop
	%r14 = load %oop, %oop* %t1
	%r15 = inttoptr %word 1 to %oop
	%r16 = load %oop, %oop* %t2
	%r20 = bitcast %oop %r16 to [0 x %oop]*
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = getelementptr [0 x %oop], [0 x %oop]* %r20, %word 0, %word %r19
	store %oop %r14, %oop* %r18
	%r17 = bitcast %oop %r14 to %oop
	%r21 = inttoptr %word 0 to %oop
	%r22 = call %oop @m_array.code(%oop %r21)
	%r23 = inttoptr %word 2 to %oop
	%r24 = load %oop, %oop* %t2
	%r28 = bitcast %oop %r24 to [0 x %oop]*
	%r27 = ptrtoint %oop %r23 to %word
	%r26 = getelementptr [0 x %oop], [0 x %oop]* %r28, %word 0, %word %r27
	store %oop %r22, %oop* %r26
	%r25 = bitcast %oop %r22 to %oop
	%r29 = load %oop, %oop* %t2
	store %oop %r29, %oop* %t3
	%r31 = getelementptr %oop, %oop* %t2, %word 0
	%r30 = bitcast %oop* %r31 to %oop
	%r32 = call %oop @"m_gc/pop-root.code"(%oop %r30)
	%r33 = load %oop, %oop* %t3
	ret %oop %r33
}
@m_cstr645 = private unnamed_addr constant [13 x i8] c"base-context\00"
@m_ostr646 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 25, %oop bitcast ([13 x i8]* @m_cstr645 to %oop) }
@m_base-context = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @m_base-context.code to %oop), %"<string>"* @m_ostr646 }
define %oop @m_context.code(%oop %home, %oop %caller, %oop %env) {
	%t2 = alloca %oop
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	store %oop %home, %oop* %t0
	store %oop %caller, %oop* %t1
	store %oop %env, %oop* %t2
	%r1 = load %oop, %oop* %t0
	%r2 = load %oop, %oop* %t2
	%r3 = call %oop @m_base-context.code(%oop %r1, %oop %r2)
	store %oop %r3, %oop* %t3
	%r4 = load %oop, %oop* %t1
	%r6 = ptrtoint %oop %r4 to %word
	%r5 = icmp ne %word %r6, 0
	br i1 %r5, label %L1, label %L2
L1:
	%r7 = load %oop, %oop* %t3
	%r8 = inttoptr %word 3 to %oop
	%r9 = load %oop, %oop* %t1
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	store %oop %r7, %oop* %r11
	%r10 = bitcast %oop %r7 to %oop
	store %oop %r10, %oop* %t4
	br label %L3
L2:
	%r14 = inttoptr %word 0 to %oop
	store %oop %r14, %oop* %t4
	br label %L3
L3:
	%r15 = load %oop, %oop* %t4
	%r16 = load %oop, %oop* %t3
	ret %oop %r16
}
@m_cstr647 = private unnamed_addr constant [8 x i8] c"context\00"
@m_ostr648 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr647 to %oop) }
@m_context = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop, %oop)* @m_context.code to %oop), %"<string>"* @m_ostr648 }
define %oop @m_list2.code(%oop %a, %oop %b) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	store %oop %a, %oop* %t0
	store %oop %b, %oop* %t1
	%r1 = load %oop, %oop* %t1
	%r2 = inttoptr %word 0 to %oop
	%r3 = call %oop @m_cons.code(%oop %r1, %oop %r2)
	store %oop %r3, %oop* %t2
	%r5 = getelementptr %oop, %oop* %t2, %word 0
	%r4 = bitcast %oop* %r5 to %oop
	%r6 = call %oop @"m_gc/push-root.code"(%oop %r4)
	%r7 = load %oop, %oop* %t0
	%r8 = load %oop, %oop* %t2
	%r9 = call %oop @m_cons.code(%oop %r7, %oop %r8)
	store %oop %r9, %oop* %t3
	%r11 = getelementptr %oop, %oop* %t2, %word 0
	%r10 = bitcast %oop* %r11 to %oop
	%r12 = call %oop @"m_gc/pop-root.code"(%oop %r10)
	%r13 = load %oop, %oop* %t3
	ret %oop %r13
}
@m_cstr649 = private unnamed_addr constant [6 x i8] c"list2\00"
@m_ostr650 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr649 to %oop) }
@m_list2 = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @m_list2.code to %oop), %"<string>"* @m_ostr650 }
define %oop @m_list3.code(%oop %a, %oop %b, %oop %c) {
	%t2 = alloca %oop
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	store %oop %a, %oop* %t0
	store %oop %b, %oop* %t1
	store %oop %c, %oop* %t2
	%r1 = load %oop, %oop* %t1
	%r2 = load %oop, %oop* %t2
	%r3 = call %oop @m_list2.code(%oop %r1, %oop %r2)
	store %oop %r3, %oop* %t3
	%r5 = getelementptr %oop, %oop* %t3, %word 0
	%r4 = bitcast %oop* %r5 to %oop
	%r6 = call %oop @"m_gc/push-root.code"(%oop %r4)
	%r7 = load %oop, %oop* %t0
	%r8 = load %oop, %oop* %t3
	%r9 = call %oop @m_cons.code(%oop %r7, %oop %r8)
	store %oop %r9, %oop* %t4
	%r11 = getelementptr %oop, %oop* %t3, %word 0
	%r10 = bitcast %oop* %r11 to %oop
	%r12 = call %oop @"m_gc/pop-root.code"(%oop %r10)
	%r13 = load %oop, %oop* %t4
	ret %oop %r13
}
@m_cstr651 = private unnamed_addr constant [6 x i8] c"list3\00"
@m_ostr652 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr651 to %oop) }
@m_list3 = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop, %oop)* @m_list3.code to %oop), %"<string>"* @m_ostr652 }
define %oop @m_concat-list.code(%oop %head, %oop %tail) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	store %oop %head, %oop* %t0
	store %oop %tail, %oop* %t1
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @"m_pair?.code"(%oop %r1)
	%r4 = ptrtoint %oop %r2 to %word
	%r3 = icmp ne %word %r4, 0
	br i1 %r3, label %L1, label %L2
L1:
	%r5 = inttoptr %word 1 to %oop
	%r6 = load %oop, %oop* %t0
	%r10 = bitcast %oop %r6 to [0 x %oop]*
	%r9 = ptrtoint %oop %r5 to %word
	%r8 = getelementptr [0 x %oop], [0 x %oop]* %r10, %word 0, %word %r9
	%r7 = load %oop, %oop* %r8
	%r11 = load %oop, %oop* %t1
	%r12 = call %oop @m_concat-list.code(%oop %r7, %oop %r11)
	store %oop %r12, %oop* %t3
	%r14 = getelementptr %oop, %oop* %t3, %word 0
	%r13 = bitcast %oop* %r14 to %oop
	%r15 = call %oop @"m_gc/push-root.code"(%oop %r13)
	%r16 = inttoptr %word 0 to %oop
	%r17 = load %oop, %oop* %t0
	%r21 = bitcast %oop %r17 to [0 x %oop]*
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = getelementptr [0 x %oop], [0 x %oop]* %r21, %word 0, %word %r20
	%r18 = load %oop, %oop* %r19
	%r22 = load %oop, %oop* %t3
	%r23 = call %oop @m_cons.code(%oop %r18, %oop %r22)
	store %oop %r23, %oop* %t4
	%r25 = getelementptr %oop, %oop* %t3, %word 0
	%r24 = bitcast %oop* %r25 to %oop
	%r26 = call %oop @"m_gc/pop-root.code"(%oop %r24)
	%r27 = load %oop, %oop* %t4
	store %oop %r27, %oop* %t2
	br label %L3
L2:
	%r28 = load %oop, %oop* %t1
	store %oop %r28, %oop* %t2
	br label %L3
L3:
	%r29 = load %oop, %oop* %t2
	ret %oop %r29
}
@m_cstr653 = private unnamed_addr constant [12 x i8] c"concat-list\00"
@m_ostr654 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr653 to %oop) }
@m_concat-list = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @m_concat-list.code to %oop), %"<string>"* @m_ostr654 }
define %oop @m_array-length.code(%oop %obj) {
	%t0 = alloca %oop
	store %oop %obj, %oop* %t0
	%r1 = inttoptr %word 1 to %oop
	%r2 = inttoptr %word 0 to %oop
	%r3 = load %oop, %oop* %t0
	%r7 = bitcast %oop %r3 to [0 x %oop]*
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = getelementptr [0 x %oop], [0 x %oop]* %r7, %word 0, %word %r6
	%r4 = load %oop, %oop* %r5
	%r11 = ptrtoint %oop %r4 to %word
	%r10 = ptrtoint %oop %r1 to %word
	%r9 = ashr %word %r11, %r10
	%r8 = inttoptr %word %r9 to %oop
	ret %oop %r8
}
@m_cstr655 = private unnamed_addr constant [13 x i8] c"array-length\00"
@m_ostr656 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 25, %oop bitcast ([13 x i8]* @m_cstr655 to %oop) }
@m_array-length = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_array-length.code to %oop), %"<string>"* @m_ostr656 }
define %oop @m_array-at.code(%oop %obj, %oop %idx) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	store %oop %obj, %oop* %t0
	store %oop %idx, %oop* %t1
	%r1 = inttoptr %word 0 to %oop
	%r2 = inttoptr %word 1 to %oop
	%r3 = load %oop, %oop* %t0
	%r7 = bitcast %oop %r3 to [0 x %oop]*
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = getelementptr [0 x %oop], [0 x %oop]* %r7, %word 0, %word %r6
	%r4 = load %oop, %oop* %r5
	store %oop %r4, %oop* %t2
	%r8 = load %oop, %oop* %t0
	%r9 = call %oop @m_array-length.code(%oop %r8)
	store %oop %r9, %oop* %t3
	%r10 = inttoptr %word 1 to %oop
	store %oop %r10, %oop* %t4
	%r11 = load %oop, %oop* %t3
	%r12 = load %oop, %oop* %t1
	%r16 = ptrtoint %oop %r12 to %word
	%r15 = ptrtoint %oop %r11 to %word
	%r14 = icmp slt %word %r16, %r15
	%r13 = inttoptr i1 %r14 to %oop
	store %oop %r13, %oop* %t4
	%r17 = inttoptr %word 0 to %oop
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = ptrtoint %oop %r13 to %word
	%r19 = icmp eq %word %r21, %r20
	%r18 = inttoptr i1 %r19 to %oop
	%r23 = ptrtoint %oop %r18 to %word
	%r22 = icmp ne %word %r23, 0
	br i1 %r22, label %L1, label %L2
L2:
	%r24 = load %oop, %oop* %t1
	%r25 = load %oop, %oop* %t2
	%r29 = bitcast %oop %r25 to [0 x %oop]*
	%r28 = ptrtoint %oop %r24 to %word
	%r27 = getelementptr [0 x %oop], [0 x %oop]* %r29, %word 0, %word %r28
	%r26 = load %oop, %oop* %r27
	store %oop %r26, %oop* %t4
	%r30 = inttoptr %word 0 to %oop
	%r34 = ptrtoint %oop %r30 to %word
	%r33 = ptrtoint %oop %r26 to %word
	%r32 = icmp eq %word %r34, %r33
	%r31 = inttoptr i1 %r32 to %oop
	%r36 = ptrtoint %oop %r31 to %word
	%r35 = icmp ne %word %r36, 0
	br i1 %r35, label %L1, label %L3
L3:
	br label %L1
L1:
	%r37 = load %oop, %oop* %t4
	ret %oop %r37
}
@m_cstr657 = private unnamed_addr constant [9 x i8] c"array-at\00"
@m_ostr658 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr657 to %oop) }
@m_array-at = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @m_array-at.code to %oop), %"<string>"* @m_ostr658 }
define %oop @m_set-array-at.code(%oop %obj, %oop %idx, %oop %val) {
	%t2 = alloca %oop
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	%t9 = alloca %oop
	%t8 = alloca %oop
	store %oop %obj, %oop* %t0
	store %oop %idx, %oop* %t1
	store %oop %val, %oop* %t2
	%r1 = inttoptr %word 0 to %oop
	%r2 = inttoptr %word 1 to %oop
	%r3 = load %oop, %oop* %t0
	%r7 = bitcast %oop %r3 to [0 x %oop]*
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = getelementptr [0 x %oop], [0 x %oop]* %r7, %word 0, %word %r6
	%r4 = load %oop, %oop* %r5
	store %oop %r4, %oop* %t3
	%r8 = load %oop, %oop* %t0
	%r9 = call %oop @m_array-length.code(%oop %r8)
	store %oop %r9, %oop* %t4
	%r10 = load %oop, %oop* %t3
	%r12 = ptrtoint %oop %r10 to %word
	%r11 = icmp ne %word %r12, 0
	br i1 %r11, label %L1, label %L2
L1:
	%r13 = inttoptr %word 8 to %oop
	%r14 = load %oop, %oop* %t3
	%r15 = call %oop @"m_gc/object-size.code"(%oop %r14)
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = ptrtoint %oop %r13 to %word
	%r17 = sdiv %word %r19, %r18
	%r16 = inttoptr %word %r17 to %oop
	store %oop %r16, %oop* %t5
	br label %L3
L2:
	%r20 = inttoptr %word 0 to %oop
	store %oop %r20, %oop* %t5
	br label %L3
L3:
	%r21 = load %oop, %oop* %t5
	store %oop %r21, %oop* %t5
	%r22 = load %oop, %oop* %t5
	%r23 = load %oop, %oop* %t1
	%r27 = ptrtoint %oop %r23 to %word
	%r26 = ptrtoint %oop %r22 to %word
	%r25 = icmp slt %word %r27, %r26
	%r24 = inttoptr i1 %r25 to %oop
	%r29 = ptrtoint %oop %r24 to %word
	%r28 = icmp ne %word %r29, 0
	br i1 %r28, label %L4, label %L5
L4:
	%r30 = inttoptr %word 0 to %oop
	store %oop %r30, %oop* %t6
	br label %L6
L5:
	%r31 = load %oop, %oop* %t5
	%r32 = inttoptr %word 0 to %oop
	%r36 = ptrtoint %oop %r32 to %word
	%r35 = ptrtoint %oop %r31 to %word
	%r34 = icmp eq %word %r36, %r35
	%r33 = inttoptr i1 %r34 to %oop
	%r38 = ptrtoint %oop %r33 to %word
	%r37 = icmp ne %word %r38, 0
	br i1 %r37, label %L7, label %L8
L7:
	%r39 = inttoptr %word 4 to %oop
	store %oop %r39, %oop* %t5
	store %oop %r39, %oop* %t7
	br label %L9
L8:
	%r40 = inttoptr %word 0 to %oop
	store %oop %r40, %oop* %t7
	br label %L9
L9:
	%r41 = load %oop, %oop* %t7
	br label %L11
L10:
	%r42 = inttoptr %word 2 to %oop
	%r43 = load %oop, %oop* %t5
	%r47 = ptrtoint %oop %r43 to %word
	%r46 = ptrtoint %oop %r42 to %word
	%r45 = mul %word %r47, %r46
	%r44 = inttoptr %word %r45 to %oop
	store %oop %r44, %oop* %t5
	br label %L11
L11:
	%r48 = load %oop, %oop* %t5
	%r49 = load %oop, %oop* %t1
	%r53 = ptrtoint %oop %r49 to %word
	%r52 = ptrtoint %oop %r48 to %word
	%r51 = icmp slt %word %r53, %r52
	%r50 = inttoptr i1 %r51 to %oop
	%r57 = ptrtoint %oop %r50 to %word
	%r56 = icmp eq %word %r57, 0
	%r55 = zext i1 %r56 to %word
	%r54 = inttoptr %word %r55 to %oop
	%r59 = ptrtoint %oop %r54 to %word
	%r58 = icmp ne %word %r59, 0
	br i1 %r58, label %L10, label %L12
L12:
	%r60 = inttoptr %word 5 to %oop
	%r61 = inttoptr %word 8 to %oop
	%r62 = load %oop, %oop* %t5
	%r66 = ptrtoint %oop %r62 to %word
	%r65 = ptrtoint %oop %r61 to %word
	%r64 = mul %word %r66, %r65
	%r63 = inttoptr %word %r64 to %oop
	%r67 = call %oop @m_allocate.code(%oop %r60, %oop %r63)
	store %oop %r67, %oop* %t7
	%r69 = getelementptr %oop, %oop* %t7, %word 0
	%r68 = bitcast %oop* %r69 to %oop
	%r70 = call %oop @"m_gc/push-root.code"(%oop %r68)
	%r71 = inttoptr %word 0 to %oop
	store %oop %r71, %oop* %t8
	%r72 = load %oop, %oop* %t4
	store %oop %r72, %oop* %t9
	br label %L14
L13:
	%r73 = load %oop, %oop* %t8
	%r74 = load %oop, %oop* %t3
	%r78 = bitcast %oop %r74 to [0 x %oop]*
	%r77 = ptrtoint %oop %r73 to %word
	%r76 = getelementptr [0 x %oop], [0 x %oop]* %r78, %word 0, %word %r77
	%r75 = load %oop, %oop* %r76
	%r79 = load %oop, %oop* %t8
	%r80 = load %oop, %oop* %t7
	%r84 = bitcast %oop %r80 to [0 x %oop]*
	%r83 = ptrtoint %oop %r79 to %word
	%r82 = getelementptr [0 x %oop], [0 x %oop]* %r84, %word 0, %word %r83
	store %oop %r75, %oop* %r82
	%r81 = bitcast %oop %r75 to %oop
	%r85 = inttoptr %word 1 to %oop
	%r86 = load %oop, %oop* %t8
	%r90 = ptrtoint %oop %r86 to %word
	%r89 = ptrtoint %oop %r85 to %word
	%r88 = add %word %r90, %r89
	%r87 = inttoptr %word %r88 to %oop
	store %oop %r87, %oop* %t8
	br label %L14
L14:
	%r91 = load %oop, %oop* %t9
	%r92 = load %oop, %oop* %t8
	%r96 = ptrtoint %oop %r92 to %word
	%r95 = ptrtoint %oop %r91 to %word
	%r94 = icmp eq %word %r96, %r95
	%r93 = inttoptr i1 %r94 to %oop
	%r100 = ptrtoint %oop %r93 to %word
	%r99 = icmp eq %word %r100, 0
	%r98 = zext i1 %r99 to %word
	%r97 = inttoptr %word %r98 to %oop
	%r102 = ptrtoint %oop %r97 to %word
	%r101 = icmp ne %word %r102, 0
	br i1 %r101, label %L13, label %L15
L15:
	%r103 = load %oop, %oop* %t7
	%r104 = inttoptr %word 1 to %oop
	%r105 = load %oop, %oop* %t0
	%r109 = bitcast %oop %r105 to [0 x %oop]*
	%r108 = ptrtoint %oop %r104 to %word
	%r107 = getelementptr [0 x %oop], [0 x %oop]* %r109, %word 0, %word %r108
	store %oop %r103, %oop* %r107
	%r106 = bitcast %oop %r103 to %oop
	store %oop %r106, %oop* %t3
	store %oop %r106, %oop* %t9
	%r111 = getelementptr %oop, %oop* %t7, %word 0
	%r110 = bitcast %oop* %r111 to %oop
	%r112 = call %oop @"m_gc/pop-root.code"(%oop %r110)
	%r113 = load %oop, %oop* %t9
	store %oop %r113, %oop* %t6
	br label %L6
L6:
	%r114 = load %oop, %oop* %t6
	%r115 = load %oop, %oop* %t1
	%r116 = load %oop, %oop* %t4
	%r120 = ptrtoint %oop %r116 to %word
	%r119 = ptrtoint %oop %r115 to %word
	%r118 = icmp sle %word %r120, %r119
	%r117 = inttoptr i1 %r118 to %oop
	%r122 = ptrtoint %oop %r117 to %word
	%r121 = icmp ne %word %r122, 0
	br i1 %r121, label %L16, label %L17
L16:
	%r123 = inttoptr %word 1 to %oop
	%r124 = inttoptr %word 1 to %oop
	%r125 = load %oop, %oop* %t1
	%r126 = inttoptr %word 1 to %oop
	%r130 = ptrtoint %oop %r126 to %word
	%r129 = ptrtoint %oop %r125 to %word
	%r128 = add %word %r130, %r129
	%r127 = inttoptr %word %r128 to %oop
	%r134 = ptrtoint %oop %r127 to %word
	%r133 = ptrtoint %oop %r124 to %word
	%r132 = shl %word %r134, %r133
	%r131 = inttoptr %word %r132 to %oop
	%r138 = ptrtoint %oop %r131 to %word
	%r137 = ptrtoint %oop %r123 to %word
	%r136 = or %word %r138, %r137
	%r135 = inttoptr %word %r136 to %oop
	%r139 = inttoptr %word 0 to %oop
	%r140 = load %oop, %oop* %t0
	%r144 = bitcast %oop %r140 to [0 x %oop]*
	%r143 = ptrtoint %oop %r139 to %word
	%r142 = getelementptr [0 x %oop], [0 x %oop]* %r144, %word 0, %word %r143
	store %oop %r135, %oop* %r142
	%r141 = bitcast %oop %r135 to %oop
	store %oop %r141, %oop* %t6
	br label %L18
L17:
	%r145 = inttoptr %word 0 to %oop
	store %oop %r145, %oop* %t6
	br label %L18
L18:
	%r146 = load %oop, %oop* %t6
	%r147 = load %oop, %oop* %t2
	%r148 = load %oop, %oop* %t1
	%r149 = load %oop, %oop* %t3
	%r153 = bitcast %oop %r149 to [0 x %oop]*
	%r152 = ptrtoint %oop %r148 to %word
	%r151 = getelementptr [0 x %oop], [0 x %oop]* %r153, %word 0, %word %r152
	store %oop %r147, %oop* %r151
	%r150 = bitcast %oop %r147 to %oop
	ret %oop %r150
}
@m_cstr659 = private unnamed_addr constant [13 x i8] c"set-array-at\00"
@m_ostr660 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 25, %oop bitcast ([13 x i8]* @m_cstr659 to %oop) }
@m_set-array-at = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop, %oop)* @m_set-array-at.code to %oop), %"<string>"* @m_ostr660 }
define %oop @m_array-append.code(%oop %obj, %oop %val) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	store %oop %obj, %oop* %t0
	store %oop %val, %oop* %t1
	%r1 = load %oop, %oop* %t0
	%r2 = load %oop, %oop* %t0
	%r3 = call %oop @m_array-length.code(%oop %r2)
	%r4 = load %oop, %oop* %t1
	%r5 = call %oop @m_set-array-at.code(%oop %r1, %oop %r3, %oop %r4)
	ret %oop %r5
}
@m_cstr661 = private unnamed_addr constant [13 x i8] c"array-append\00"
@m_ostr662 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 25, %oop bitcast ([13 x i8]* @m_cstr661 to %oop) }
@m_array-append = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @m_array-append.code to %oop), %"<string>"* @m_ostr662 }
define %oop @m_array-insert.code(%oop %obj, %oop %idx, %oop %value) {
	%t2 = alloca %oop
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	%t8 = alloca %oop
	%t9 = alloca %oop
	%t11 = alloca %oop
	%t12 = alloca %oop
	%t10 = alloca %oop
	store %oop %obj, %oop* %t0
	store %oop %idx, %oop* %t1
	store %oop %value, %oop* %t2
	%r1 = inttoptr %word 0 to %oop
	%r2 = load %oop, %oop* %t0
	%r3 = call %oop @m_array-length.code(%oop %r2)
	store %oop %r3, %oop* %t3
	%r4 = load %oop, %oop* %t3
	%r5 = load %oop, %oop* %t1
	%r9 = ptrtoint %oop %r5 to %word
	%r8 = ptrtoint %oop %r4 to %word
	%r7 = icmp slt %word %r9, %r8
	%r6 = inttoptr i1 %r7 to %oop
	%r11 = ptrtoint %oop %r6 to %word
	%r10 = icmp ne %word %r11, 0
	br i1 %r10, label %L1, label %L2
L1:
	%r12 = load %oop, %oop* %t0
	%r13 = inttoptr %word 0 to %oop
	%r14 = call %oop @m_array-append.code(%oop %r12, %oop %r13)
	%r15 = load %oop, %oop* %t3
	%r16 = load %oop, %oop* %t1
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = icmp slt %word %r20, %r19
	%r17 = inttoptr i1 %r18 to %oop
	%r22 = ptrtoint %oop %r17 to %word
	%r21 = icmp ne %word %r22, 0
	br i1 %r21, label %L4, label %L5
L4:
	%r23 = inttoptr %word 1 to %oop
	%r24 = load %oop, %oop* %t0
	%r28 = bitcast %oop %r24 to [0 x %oop]*
	%r27 = ptrtoint %oop %r23 to %word
	%r26 = getelementptr [0 x %oop], [0 x %oop]* %r28, %word 0, %word %r27
	%r25 = load %oop, %oop* %r26
	store %oop %r25, %oop* %t6
	%r29 = inttoptr %word 8 to %oop
	%r30 = load %oop, %oop* %t1
	%r34 = ptrtoint %oop %r30 to %word
	%r33 = ptrtoint %oop %r29 to %word
	%r32 = mul %word %r34, %r33
	%r31 = inttoptr %word %r32 to %oop
	%r35 = load %oop, %oop* %t6
	%r39 = ptrtoint %oop %r35 to %word
	%r38 = ptrtoint %oop %r31 to %word
	%r37 = add %word %r39, %r38
	%r36 = inttoptr %word %r37 to %oop
	store %oop %r36, %oop* %t7
	%r40 = inttoptr %word 8 to %oop
	%r41 = load %oop, %oop* %t7
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = ptrtoint %oop %r40 to %word
	%r43 = add %word %r45, %r44
	%r42 = inttoptr %word %r43 to %oop
	store %oop %r42, %oop* %t8
	%r46 = load %oop, %oop* %t7
	%r47 = load %oop, %oop* %t8
	%r51 = ptrtoint %oop %r47 to %word
	%r50 = ptrtoint %oop %r46 to %word
	%r49 = icmp slt %word %r51, %r50
	%r48 = inttoptr i1 %r49 to %oop
	%r53 = ptrtoint %oop %r48 to %word
	%r52 = icmp ne %word %r53, 0
	br i1 %r52, label %L7, label %L8
L7:
	%r54 = inttoptr %word 0 to %oop
	store %oop %r54, %oop* %t10
	%r55 = load %oop, %oop* %t1
	%r56 = load %oop, %oop* %t3
	%r60 = ptrtoint %oop %r56 to %word
	%r59 = ptrtoint %oop %r55 to %word
	%r58 = sub %word %r60, %r59
	%r57 = inttoptr %word %r58 to %oop
	store %oop %r57, %oop* %t11
	br label %L11
L10:
	%r61 = load %oop, %oop* %t10
	%r62 = load %oop, %oop* %t7
	%r66 = bitcast %oop %r62 to [0 x %oop]*
	%r65 = ptrtoint %oop %r61 to %word
	%r64 = getelementptr [0 x %oop], [0 x %oop]* %r66, %word 0, %word %r65
	%r63 = load %oop, %oop* %r64
	%r67 = load %oop, %oop* %t10
	%r68 = load %oop, %oop* %t8
	%r72 = bitcast %oop %r68 to [0 x %oop]*
	%r71 = ptrtoint %oop %r67 to %word
	%r70 = getelementptr [0 x %oop], [0 x %oop]* %r72, %word 0, %word %r71
	store %oop %r63, %oop* %r70
	%r69 = bitcast %oop %r63 to %oop
	%r73 = inttoptr %word 1 to %oop
	%r74 = load %oop, %oop* %t10
	%r78 = ptrtoint %oop %r74 to %word
	%r77 = ptrtoint %oop %r73 to %word
	%r76 = add %word %r78, %r77
	%r75 = inttoptr %word %r76 to %oop
	store %oop %r75, %oop* %t10
	br label %L11
L11:
	%r79 = load %oop, %oop* %t11
	%r80 = load %oop, %oop* %t10
	%r84 = ptrtoint %oop %r80 to %word
	%r83 = ptrtoint %oop %r79 to %word
	%r82 = icmp eq %word %r84, %r83
	%r81 = inttoptr i1 %r82 to %oop
	%r88 = ptrtoint %oop %r81 to %word
	%r87 = icmp eq %word %r88, 0
	%r86 = zext i1 %r87 to %word
	%r85 = inttoptr %word %r86 to %oop
	%r90 = ptrtoint %oop %r85 to %word
	%r89 = icmp ne %word %r90, 0
	br i1 %r89, label %L10, label %L12
L12:
	store %oop %r85, %oop* %t9
	br label %L9
L8:
	%r91 = load %oop, %oop* %t8
	%r92 = load %oop, %oop* %t7
	%r96 = ptrtoint %oop %r92 to %word
	%r95 = ptrtoint %oop %r91 to %word
	%r94 = icmp slt %word %r96, %r95
	%r93 = inttoptr i1 %r94 to %oop
	%r98 = ptrtoint %oop %r93 to %word
	%r97 = icmp ne %word %r98, 0
	br i1 %r97, label %L13, label %L14
L13:
	%r99 = inttoptr %word 1 to %oop
	%r100 = load %oop, %oop* %t1
	%r101 = load %oop, %oop* %t3
	%r105 = ptrtoint %oop %r101 to %word
	%r104 = ptrtoint %oop %r100 to %word
	%r103 = sub %word %r105, %r104
	%r102 = inttoptr %word %r103 to %oop
	%r109 = ptrtoint %oop %r102 to %word
	%r108 = ptrtoint %oop %r99 to %word
	%r107 = sub %word %r109, %r108
	%r106 = inttoptr %word %r107 to %oop
	store %oop %r106, %oop* %t10
	%r110 = inttoptr %word -1 to %oop
	store %oop %r110, %oop* %t12
	br label %L17
L16:
	%r111 = load %oop, %oop* %t10
	%r112 = load %oop, %oop* %t7
	%r116 = bitcast %oop %r112 to [0 x %oop]*
	%r115 = ptrtoint %oop %r111 to %word
	%r114 = getelementptr [0 x %oop], [0 x %oop]* %r116, %word 0, %word %r115
	%r113 = load %oop, %oop* %r114
	%r117 = load %oop, %oop* %t10
	%r118 = load %oop, %oop* %t8
	%r122 = bitcast %oop %r118 to [0 x %oop]*
	%r121 = ptrtoint %oop %r117 to %word
	%r120 = getelementptr [0 x %oop], [0 x %oop]* %r122, %word 0, %word %r121
	store %oop %r113, %oop* %r120
	%r119 = bitcast %oop %r113 to %oop
	%r123 = inttoptr %word -1 to %oop
	%r124 = load %oop, %oop* %t10
	%r128 = ptrtoint %oop %r124 to %word
	%r127 = ptrtoint %oop %r123 to %word
	%r126 = add %word %r128, %r127
	%r125 = inttoptr %word %r126 to %oop
	store %oop %r125, %oop* %t10
	br label %L17
L17:
	%r129 = load %oop, %oop* %t12
	%r130 = load %oop, %oop* %t10
	%r134 = ptrtoint %oop %r130 to %word
	%r133 = ptrtoint %oop %r129 to %word
	%r132 = icmp eq %word %r134, %r133
	%r131 = inttoptr i1 %r132 to %oop
	%r138 = ptrtoint %oop %r131 to %word
	%r137 = icmp eq %word %r138, 0
	%r136 = zext i1 %r137 to %word
	%r135 = inttoptr %word %r136 to %oop
	%r140 = ptrtoint %oop %r135 to %word
	%r139 = icmp ne %word %r140, 0
	br i1 %r139, label %L16, label %L18
L18:
	store %oop %r135, %oop* %t11
	br label %L15
L14:
	%r141 = inttoptr %word 0 to %oop
	store %oop %r141, %oop* %t11
	br label %L15
L15:
	%r142 = load %oop, %oop* %t11
	store %oop %r142, %oop* %t9
	br label %L9
L9:
	%r143 = load %oop, %oop* %t9
	store %oop %r143, %oop* %t5
	br label %L6
L5:
	%r144 = inttoptr %word 0 to %oop
	store %oop %r144, %oop* %t5
	br label %L6
L6:
	%r145 = load %oop, %oop* %t5
	store %oop %r145, %oop* %t4
	br label %L3
L2:
	%r146 = inttoptr %word 0 to %oop
	store %oop %r146, %oop* %t4
	br label %L3
L3:
	%r147 = load %oop, %oop* %t4
	%r148 = load %oop, %oop* %t0
	%r149 = load %oop, %oop* %t1
	%r150 = load %oop, %oop* %t2
	%r151 = call %oop @m_set-array-at.code(%oop %r148, %oop %r149, %oop %r150)
	ret %oop %r151
}
@m_cstr663 = private unnamed_addr constant [13 x i8] c"array-insert\00"
@m_ostr664 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 25, %oop bitcast ([13 x i8]* @m_cstr663 to %oop) }
@m_array-insert = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop, %oop)* @m_array-insert.code to %oop), %"<string>"* @m_ostr664 }
define %oop @m_array-ensure-zero-terminated.code(%oop %obj) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	%t2 = alloca %oop
	store %oop %obj, %oop* %t0
	%r1 = load %oop, %oop* @"m_gc/memory-base"
	%r2 = load %oop, %oop* %t0
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = ptrtoint %oop %r1 to %word
	%r4 = icmp slt %word %r6, %r5
	%r3 = inttoptr i1 %r4 to %oop
	%r8 = ptrtoint %oop %r3 to %word
	%r7 = icmp ne %word %r8, 0
	br i1 %r7, label %L1, label %L2
L1:
	%r9 = inttoptr %word 0 to %oop
	store %oop %r9, %oop* %t1
	br label %L3
L2:
	%r10 = load %oop, %oop* %t0
	%r11 = call %oop @m_array-length.code(%oop %r10)
	store %oop %r11, %oop* %t2
	%r12 = load %oop, %oop* %t0
	%r13 = load %oop, %oop* %t2
	%r14 = inttoptr %word 0 to %oop
	%r15 = call %oop @m_set-array-at.code(%oop %r12, %oop %r13, %oop %r14)
	%r16 = inttoptr %word 1 to %oop
	%r17 = inttoptr %word 1 to %oop
	%r18 = load %oop, %oop* %t2
	%r22 = ptrtoint %oop %r18 to %word
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = shl %word %r22, %r21
	%r19 = inttoptr %word %r20 to %oop
	%r26 = ptrtoint %oop %r19 to %word
	%r25 = ptrtoint %oop %r16 to %word
	%r24 = or %word %r26, %r25
	%r23 = inttoptr %word %r24 to %oop
	%r27 = inttoptr %word 0 to %oop
	%r28 = load %oop, %oop* %t0
	%r32 = bitcast %oop %r28 to [0 x %oop]*
	%r31 = ptrtoint %oop %r27 to %word
	%r30 = getelementptr [0 x %oop], [0 x %oop]* %r32, %word 0, %word %r31
	store %oop %r23, %oop* %r30
	%r29 = bitcast %oop %r23 to %oop
	store %oop %r29, %oop* %t1
	br label %L3
L3:
	%r33 = load %oop, %oop* %t1
	%r34 = load %oop, %oop* %t0
	ret %oop %r34
}
@m_cstr665 = private unnamed_addr constant [29 x i8] c"array-ensure-zero-terminated\00"
@m_ostr666 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 57, %oop bitcast ([29 x i8]* @m_cstr665 to %oop) }
@m_array-ensure-zero-terminated = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_array-ensure-zero-terminated.code to %oop), %"<string>"* @m_ostr666 }
define %oop @m_string-length.code(%oop %obj) {
	%t0 = alloca %oop
	store %oop %obj, %oop* %t0
	%r1 = inttoptr %word 1 to %oop
	%r2 = inttoptr %word 0 to %oop
	%r3 = load %oop, %oop* %t0
	%r7 = bitcast %oop %r3 to [0 x %oop]*
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = getelementptr [0 x %oop], [0 x %oop]* %r7, %word 0, %word %r6
	%r4 = load %oop, %oop* %r5
	%r11 = ptrtoint %oop %r4 to %word
	%r10 = ptrtoint %oop %r1 to %word
	%r9 = ashr %word %r11, %r10
	%r8 = inttoptr %word %r9 to %oop
	ret %oop %r8
}
@m_cstr667 = private unnamed_addr constant [14 x i8] c"string-length\00"
@m_ostr668 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr667 to %oop) }
@m_string-length = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_string-length.code to %oop), %"<string>"* @m_ostr668 }
define %oop @m_string-at.code(%oop %obj, %oop %idx) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	store %oop %obj, %oop* %t0
	store %oop %idx, %oop* %t1
	%r1 = inttoptr %word 0 to %oop
	%r2 = inttoptr %word 1 to %oop
	%r3 = load %oop, %oop* %t0
	%r7 = bitcast %oop %r3 to [0 x %oop]*
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = getelementptr [0 x %oop], [0 x %oop]* %r7, %word 0, %word %r6
	%r4 = load %oop, %oop* %r5
	store %oop %r4, %oop* %t2
	%r8 = load %oop, %oop* %t0
	%r9 = call %oop @m_string-length.code(%oop %r8)
	store %oop %r9, %oop* %t3
	%r10 = inttoptr %word 1 to %oop
	store %oop %r10, %oop* %t4
	%r11 = load %oop, %oop* %t3
	%r12 = load %oop, %oop* %t1
	%r16 = ptrtoint %oop %r12 to %word
	%r15 = ptrtoint %oop %r11 to %word
	%r14 = icmp slt %word %r16, %r15
	%r13 = inttoptr i1 %r14 to %oop
	store %oop %r13, %oop* %t4
	%r17 = inttoptr %word 0 to %oop
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = ptrtoint %oop %r13 to %word
	%r19 = icmp eq %word %r21, %r20
	%r18 = inttoptr i1 %r19 to %oop
	%r23 = ptrtoint %oop %r18 to %word
	%r22 = icmp ne %word %r23, 0
	br i1 %r22, label %L1, label %L2
L2:
	%r24 = load %oop, %oop* %t1
	%r25 = load %oop, %oop* %t2
	%r30 = bitcast %oop %r25 to [0 x i8]*
	%r29 = ptrtoint %oop %r24 to %word
	%r28 = getelementptr [0 x i8], [0 x i8]* %r30, %word 0, %word %r29
	%r27 = load i8, i8* %r28
	%r26 = inttoptr i8 %r27 to %oop
	store %oop %r26, %oop* %t4
	%r31 = inttoptr %word 0 to %oop
	%r35 = ptrtoint %oop %r31 to %word
	%r34 = ptrtoint %oop %r26 to %word
	%r33 = icmp eq %word %r35, %r34
	%r32 = inttoptr i1 %r33 to %oop
	%r37 = ptrtoint %oop %r32 to %word
	%r36 = icmp ne %word %r37, 0
	br i1 %r36, label %L1, label %L3
L3:
	br label %L1
L1:
	%r38 = load %oop, %oop* %t4
	ret %oop %r38
}
@m_cstr669 = private unnamed_addr constant [10 x i8] c"string-at\00"
@m_ostr670 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 19, %oop bitcast ([10 x i8]* @m_cstr669 to %oop) }
@m_string-at = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @m_string-at.code to %oop), %"<string>"* @m_ostr670 }
define %oop @m_set-string-at.code(%oop %obj, %oop %idx, %oop %val) {
	%t2 = alloca %oop
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	%t9 = alloca %oop
	%t8 = alloca %oop
	store %oop %obj, %oop* %t0
	store %oop %idx, %oop* %t1
	store %oop %val, %oop* %t2
	%r1 = inttoptr %word 0 to %oop
	%r2 = inttoptr %word 1 to %oop
	%r3 = load %oop, %oop* %t0
	%r7 = bitcast %oop %r3 to [0 x %oop]*
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = getelementptr [0 x %oop], [0 x %oop]* %r7, %word 0, %word %r6
	%r4 = load %oop, %oop* %r5
	store %oop %r4, %oop* %t3
	%r8 = load %oop, %oop* %t0
	%r9 = call %oop @m_string-length.code(%oop %r8)
	store %oop %r9, %oop* %t4
	%r10 = load %oop, %oop* %t3
	%r12 = ptrtoint %oop %r10 to %word
	%r11 = icmp ne %word %r12, 0
	br i1 %r11, label %L1, label %L2
L1:
	%r13 = inttoptr %word 1 to %oop
	%r14 = load %oop, %oop* %t3
	%r15 = call %oop @"m_gc/object-size.code"(%oop %r14)
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = ptrtoint %oop %r13 to %word
	%r17 = sdiv %word %r19, %r18
	%r16 = inttoptr %word %r17 to %oop
	store %oop %r16, %oop* %t5
	br label %L3
L2:
	%r20 = inttoptr %word 0 to %oop
	store %oop %r20, %oop* %t5
	br label %L3
L3:
	%r21 = load %oop, %oop* %t5
	store %oop %r21, %oop* %t5
	%r22 = load %oop, %oop* %t5
	%r23 = load %oop, %oop* %t1
	%r27 = ptrtoint %oop %r23 to %word
	%r26 = ptrtoint %oop %r22 to %word
	%r25 = icmp slt %word %r27, %r26
	%r24 = inttoptr i1 %r25 to %oop
	%r29 = ptrtoint %oop %r24 to %word
	%r28 = icmp ne %word %r29, 0
	br i1 %r28, label %L4, label %L5
L4:
	%r30 = inttoptr %word 0 to %oop
	store %oop %r30, %oop* %t6
	br label %L6
L5:
	%r31 = load %oop, %oop* %t5
	%r32 = inttoptr %word 0 to %oop
	%r36 = ptrtoint %oop %r32 to %word
	%r35 = ptrtoint %oop %r31 to %word
	%r34 = icmp eq %word %r36, %r35
	%r33 = inttoptr i1 %r34 to %oop
	%r38 = ptrtoint %oop %r33 to %word
	%r37 = icmp ne %word %r38, 0
	br i1 %r37, label %L7, label %L8
L7:
	%r39 = inttoptr %word 4 to %oop
	store %oop %r39, %oop* %t5
	store %oop %r39, %oop* %t7
	br label %L9
L8:
	%r40 = inttoptr %word 0 to %oop
	store %oop %r40, %oop* %t7
	br label %L9
L9:
	%r41 = load %oop, %oop* %t7
	br label %L11
L10:
	%r42 = inttoptr %word 2 to %oop
	%r43 = load %oop, %oop* %t5
	%r47 = ptrtoint %oop %r43 to %word
	%r46 = ptrtoint %oop %r42 to %word
	%r45 = mul %word %r47, %r46
	%r44 = inttoptr %word %r45 to %oop
	store %oop %r44, %oop* %t5
	br label %L11
L11:
	%r48 = load %oop, %oop* %t5
	%r49 = load %oop, %oop* %t1
	%r53 = ptrtoint %oop %r49 to %word
	%r52 = ptrtoint %oop %r48 to %word
	%r51 = icmp slt %word %r53, %r52
	%r50 = inttoptr i1 %r51 to %oop
	%r57 = ptrtoint %oop %r50 to %word
	%r56 = icmp eq %word %r57, 0
	%r55 = zext i1 %r56 to %word
	%r54 = inttoptr %word %r55 to %oop
	%r59 = ptrtoint %oop %r54 to %word
	%r58 = icmp ne %word %r59, 0
	br i1 %r58, label %L10, label %L12
L12:
	%r60 = inttoptr %word 1 to %oop
	%r61 = load %oop, %oop* %t5
	%r65 = ptrtoint %oop %r61 to %word
	%r64 = ptrtoint %oop %r60 to %word
	%r63 = mul %word %r65, %r64
	%r62 = inttoptr %word %r63 to %oop
	%r66 = call %oop @m_allocate-data.code(%oop %r62)
	store %oop %r66, %oop* %t7
	%r68 = getelementptr %oop, %oop* %t7, %word 0
	%r67 = bitcast %oop* %r68 to %oop
	%r69 = call %oop @"m_gc/push-root.code"(%oop %r67)
	%r70 = inttoptr %word 0 to %oop
	store %oop %r70, %oop* %t8
	%r71 = load %oop, %oop* %t4
	store %oop %r71, %oop* %t9
	br label %L14
L13:
	%r72 = load %oop, %oop* %t8
	%r73 = load %oop, %oop* %t3
	%r78 = bitcast %oop %r73 to [0 x i8]*
	%r77 = ptrtoint %oop %r72 to %word
	%r76 = getelementptr [0 x i8], [0 x i8]* %r78, %word 0, %word %r77
	%r75 = load i8, i8* %r76
	%r74 = inttoptr i8 %r75 to %oop
	%r79 = load %oop, %oop* %t8
	%r80 = load %oop, %oop* %t7
	%r86 = bitcast %oop %r80 to [0 x i8]*
	%r85 = ptrtoint %oop %r79 to %word
	%r84 = getelementptr [0 x i8], [0 x i8]* %r86, %word 0, %word %r85
	%r83 = ptrtoint %oop %r74 to i8
	store i8 %r83, i8* %r84
	%r82 = zext i8 %r83 to %word
	%r81 = inttoptr %word %r82 to %oop
	%r87 = inttoptr %word 1 to %oop
	%r88 = load %oop, %oop* %t8
	%r92 = ptrtoint %oop %r88 to %word
	%r91 = ptrtoint %oop %r87 to %word
	%r90 = add %word %r92, %r91
	%r89 = inttoptr %word %r90 to %oop
	store %oop %r89, %oop* %t8
	br label %L14
L14:
	%r93 = load %oop, %oop* %t9
	%r94 = load %oop, %oop* %t8
	%r98 = ptrtoint %oop %r94 to %word
	%r97 = ptrtoint %oop %r93 to %word
	%r96 = icmp eq %word %r98, %r97
	%r95 = inttoptr i1 %r96 to %oop
	%r102 = ptrtoint %oop %r95 to %word
	%r101 = icmp eq %word %r102, 0
	%r100 = zext i1 %r101 to %word
	%r99 = inttoptr %word %r100 to %oop
	%r104 = ptrtoint %oop %r99 to %word
	%r103 = icmp ne %word %r104, 0
	br i1 %r103, label %L13, label %L15
L15:
	%r105 = load %oop, %oop* %t7
	%r106 = inttoptr %word 1 to %oop
	%r107 = load %oop, %oop* %t0
	%r111 = bitcast %oop %r107 to [0 x %oop]*
	%r110 = ptrtoint %oop %r106 to %word
	%r109 = getelementptr [0 x %oop], [0 x %oop]* %r111, %word 0, %word %r110
	store %oop %r105, %oop* %r109
	%r108 = bitcast %oop %r105 to %oop
	store %oop %r108, %oop* %t3
	store %oop %r108, %oop* %t9
	%r113 = getelementptr %oop, %oop* %t7, %word 0
	%r112 = bitcast %oop* %r113 to %oop
	%r114 = call %oop @"m_gc/pop-root.code"(%oop %r112)
	%r115 = load %oop, %oop* %t9
	store %oop %r115, %oop* %t6
	br label %L6
L6:
	%r116 = load %oop, %oop* %t6
	%r117 = load %oop, %oop* %t1
	%r118 = load %oop, %oop* %t4
	%r122 = ptrtoint %oop %r118 to %word
	%r121 = ptrtoint %oop %r117 to %word
	%r120 = icmp sle %word %r122, %r121
	%r119 = inttoptr i1 %r120 to %oop
	%r124 = ptrtoint %oop %r119 to %word
	%r123 = icmp ne %word %r124, 0
	br i1 %r123, label %L16, label %L17
L16:
	%r125 = inttoptr %word 1 to %oop
	%r126 = inttoptr %word 1 to %oop
	%r127 = load %oop, %oop* %t1
	%r128 = inttoptr %word 1 to %oop
	%r132 = ptrtoint %oop %r128 to %word
	%r131 = ptrtoint %oop %r127 to %word
	%r130 = add %word %r132, %r131
	%r129 = inttoptr %word %r130 to %oop
	%r136 = ptrtoint %oop %r129 to %word
	%r135 = ptrtoint %oop %r126 to %word
	%r134 = shl %word %r136, %r135
	%r133 = inttoptr %word %r134 to %oop
	%r140 = ptrtoint %oop %r133 to %word
	%r139 = ptrtoint %oop %r125 to %word
	%r138 = or %word %r140, %r139
	%r137 = inttoptr %word %r138 to %oop
	%r141 = inttoptr %word 0 to %oop
	%r142 = load %oop, %oop* %t0
	%r146 = bitcast %oop %r142 to [0 x %oop]*
	%r145 = ptrtoint %oop %r141 to %word
	%r144 = getelementptr [0 x %oop], [0 x %oop]* %r146, %word 0, %word %r145
	store %oop %r137, %oop* %r144
	%r143 = bitcast %oop %r137 to %oop
	store %oop %r143, %oop* %t6
	br label %L18
L17:
	%r147 = inttoptr %word 0 to %oop
	store %oop %r147, %oop* %t6
	br label %L18
L18:
	%r148 = load %oop, %oop* %t6
	%r149 = load %oop, %oop* %t2
	%r150 = load %oop, %oop* %t1
	%r151 = load %oop, %oop* %t3
	%r157 = bitcast %oop %r151 to [0 x i8]*
	%r156 = ptrtoint %oop %r150 to %word
	%r155 = getelementptr [0 x i8], [0 x i8]* %r157, %word 0, %word %r156
	%r154 = ptrtoint %oop %r149 to i8
	store i8 %r154, i8* %r155
	%r153 = zext i8 %r154 to %word
	%r152 = inttoptr %word %r153 to %oop
	ret %oop %r152
}
@m_cstr671 = private unnamed_addr constant [14 x i8] c"set-string-at\00"
@m_ostr672 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr671 to %oop) }
@m_set-string-at = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop, %oop)* @m_set-string-at.code to %oop), %"<string>"* @m_ostr672 }
define %oop @m_string-append.code(%oop %obj, %oop %val) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	store %oop %obj, %oop* %t0
	store %oop %val, %oop* %t1
	%r1 = load %oop, %oop* %t0
	%r2 = load %oop, %oop* %t0
	%r3 = call %oop @m_string-length.code(%oop %r2)
	%r4 = load %oop, %oop* %t1
	%r5 = call %oop @m_set-string-at.code(%oop %r1, %oop %r3, %oop %r4)
	ret %oop %r5
}
@m_cstr673 = private unnamed_addr constant [14 x i8] c"string-append\00"
@m_ostr674 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr673 to %oop) }
@m_string-append = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @m_string-append.code to %oop), %"<string>"* @m_ostr674 }
define %oop @m_string-insert.code(%oop %obj, %oop %idx, %oop %value) {
	%t2 = alloca %oop
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	%t8 = alloca %oop
	%t9 = alloca %oop
	%t11 = alloca %oop
	%t12 = alloca %oop
	%t10 = alloca %oop
	store %oop %obj, %oop* %t0
	store %oop %idx, %oop* %t1
	store %oop %value, %oop* %t2
	%r1 = inttoptr %word 0 to %oop
	%r2 = load %oop, %oop* %t0
	%r3 = call %oop @m_string-length.code(%oop %r2)
	store %oop %r3, %oop* %t3
	%r4 = load %oop, %oop* %t3
	%r5 = load %oop, %oop* %t1
	%r9 = ptrtoint %oop %r5 to %word
	%r8 = ptrtoint %oop %r4 to %word
	%r7 = icmp slt %word %r9, %r8
	%r6 = inttoptr i1 %r7 to %oop
	%r11 = ptrtoint %oop %r6 to %word
	%r10 = icmp ne %word %r11, 0
	br i1 %r10, label %L1, label %L2
L1:
	%r12 = load %oop, %oop* %t0
	%r13 = inttoptr %word 0 to %oop
	%r14 = call %oop @m_string-append.code(%oop %r12, %oop %r13)
	%r15 = load %oop, %oop* %t3
	%r16 = load %oop, %oop* %t1
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = icmp slt %word %r20, %r19
	%r17 = inttoptr i1 %r18 to %oop
	%r22 = ptrtoint %oop %r17 to %word
	%r21 = icmp ne %word %r22, 0
	br i1 %r21, label %L4, label %L5
L4:
	%r23 = inttoptr %word 1 to %oop
	%r24 = load %oop, %oop* %t0
	%r28 = bitcast %oop %r24 to [0 x %oop]*
	%r27 = ptrtoint %oop %r23 to %word
	%r26 = getelementptr [0 x %oop], [0 x %oop]* %r28, %word 0, %word %r27
	%r25 = load %oop, %oop* %r26
	store %oop %r25, %oop* %t6
	%r29 = inttoptr %word 1 to %oop
	%r30 = load %oop, %oop* %t1
	%r34 = ptrtoint %oop %r30 to %word
	%r33 = ptrtoint %oop %r29 to %word
	%r32 = mul %word %r34, %r33
	%r31 = inttoptr %word %r32 to %oop
	%r35 = load %oop, %oop* %t6
	%r39 = ptrtoint %oop %r35 to %word
	%r38 = ptrtoint %oop %r31 to %word
	%r37 = add %word %r39, %r38
	%r36 = inttoptr %word %r37 to %oop
	store %oop %r36, %oop* %t7
	%r40 = inttoptr %word 1 to %oop
	%r41 = load %oop, %oop* %t7
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = ptrtoint %oop %r40 to %word
	%r43 = add %word %r45, %r44
	%r42 = inttoptr %word %r43 to %oop
	store %oop %r42, %oop* %t8
	%r46 = load %oop, %oop* %t7
	%r47 = load %oop, %oop* %t8
	%r51 = ptrtoint %oop %r47 to %word
	%r50 = ptrtoint %oop %r46 to %word
	%r49 = icmp slt %word %r51, %r50
	%r48 = inttoptr i1 %r49 to %oop
	%r53 = ptrtoint %oop %r48 to %word
	%r52 = icmp ne %word %r53, 0
	br i1 %r52, label %L7, label %L8
L7:
	%r54 = inttoptr %word 0 to %oop
	store %oop %r54, %oop* %t10
	%r55 = load %oop, %oop* %t1
	%r56 = load %oop, %oop* %t3
	%r60 = ptrtoint %oop %r56 to %word
	%r59 = ptrtoint %oop %r55 to %word
	%r58 = sub %word %r60, %r59
	%r57 = inttoptr %word %r58 to %oop
	store %oop %r57, %oop* %t11
	br label %L11
L10:
	%r61 = load %oop, %oop* %t10
	%r62 = load %oop, %oop* %t7
	%r67 = bitcast %oop %r62 to [0 x i8]*
	%r66 = ptrtoint %oop %r61 to %word
	%r65 = getelementptr [0 x i8], [0 x i8]* %r67, %word 0, %word %r66
	%r64 = load i8, i8* %r65
	%r63 = inttoptr i8 %r64 to %oop
	%r68 = load %oop, %oop* %t10
	%r69 = load %oop, %oop* %t8
	%r75 = bitcast %oop %r69 to [0 x i8]*
	%r74 = ptrtoint %oop %r68 to %word
	%r73 = getelementptr [0 x i8], [0 x i8]* %r75, %word 0, %word %r74
	%r72 = ptrtoint %oop %r63 to i8
	store i8 %r72, i8* %r73
	%r71 = zext i8 %r72 to %word
	%r70 = inttoptr %word %r71 to %oop
	%r76 = inttoptr %word 1 to %oop
	%r77 = load %oop, %oop* %t10
	%r81 = ptrtoint %oop %r77 to %word
	%r80 = ptrtoint %oop %r76 to %word
	%r79 = add %word %r81, %r80
	%r78 = inttoptr %word %r79 to %oop
	store %oop %r78, %oop* %t10
	br label %L11
L11:
	%r82 = load %oop, %oop* %t11
	%r83 = load %oop, %oop* %t10
	%r87 = ptrtoint %oop %r83 to %word
	%r86 = ptrtoint %oop %r82 to %word
	%r85 = icmp eq %word %r87, %r86
	%r84 = inttoptr i1 %r85 to %oop
	%r91 = ptrtoint %oop %r84 to %word
	%r90 = icmp eq %word %r91, 0
	%r89 = zext i1 %r90 to %word
	%r88 = inttoptr %word %r89 to %oop
	%r93 = ptrtoint %oop %r88 to %word
	%r92 = icmp ne %word %r93, 0
	br i1 %r92, label %L10, label %L12
L12:
	store %oop %r88, %oop* %t9
	br label %L9
L8:
	%r94 = load %oop, %oop* %t8
	%r95 = load %oop, %oop* %t7
	%r99 = ptrtoint %oop %r95 to %word
	%r98 = ptrtoint %oop %r94 to %word
	%r97 = icmp slt %word %r99, %r98
	%r96 = inttoptr i1 %r97 to %oop
	%r101 = ptrtoint %oop %r96 to %word
	%r100 = icmp ne %word %r101, 0
	br i1 %r100, label %L13, label %L14
L13:
	%r102 = inttoptr %word 1 to %oop
	%r103 = load %oop, %oop* %t1
	%r104 = load %oop, %oop* %t3
	%r108 = ptrtoint %oop %r104 to %word
	%r107 = ptrtoint %oop %r103 to %word
	%r106 = sub %word %r108, %r107
	%r105 = inttoptr %word %r106 to %oop
	%r112 = ptrtoint %oop %r105 to %word
	%r111 = ptrtoint %oop %r102 to %word
	%r110 = sub %word %r112, %r111
	%r109 = inttoptr %word %r110 to %oop
	store %oop %r109, %oop* %t10
	%r113 = inttoptr %word -1 to %oop
	store %oop %r113, %oop* %t12
	br label %L17
L16:
	%r114 = load %oop, %oop* %t10
	%r115 = load %oop, %oop* %t7
	%r120 = bitcast %oop %r115 to [0 x i8]*
	%r119 = ptrtoint %oop %r114 to %word
	%r118 = getelementptr [0 x i8], [0 x i8]* %r120, %word 0, %word %r119
	%r117 = load i8, i8* %r118
	%r116 = inttoptr i8 %r117 to %oop
	%r121 = load %oop, %oop* %t10
	%r122 = load %oop, %oop* %t8
	%r128 = bitcast %oop %r122 to [0 x i8]*
	%r127 = ptrtoint %oop %r121 to %word
	%r126 = getelementptr [0 x i8], [0 x i8]* %r128, %word 0, %word %r127
	%r125 = ptrtoint %oop %r116 to i8
	store i8 %r125, i8* %r126
	%r124 = zext i8 %r125 to %word
	%r123 = inttoptr %word %r124 to %oop
	%r129 = inttoptr %word -1 to %oop
	%r130 = load %oop, %oop* %t10
	%r134 = ptrtoint %oop %r130 to %word
	%r133 = ptrtoint %oop %r129 to %word
	%r132 = add %word %r134, %r133
	%r131 = inttoptr %word %r132 to %oop
	store %oop %r131, %oop* %t10
	br label %L17
L17:
	%r135 = load %oop, %oop* %t12
	%r136 = load %oop, %oop* %t10
	%r140 = ptrtoint %oop %r136 to %word
	%r139 = ptrtoint %oop %r135 to %word
	%r138 = icmp eq %word %r140, %r139
	%r137 = inttoptr i1 %r138 to %oop
	%r144 = ptrtoint %oop %r137 to %word
	%r143 = icmp eq %word %r144, 0
	%r142 = zext i1 %r143 to %word
	%r141 = inttoptr %word %r142 to %oop
	%r146 = ptrtoint %oop %r141 to %word
	%r145 = icmp ne %word %r146, 0
	br i1 %r145, label %L16, label %L18
L18:
	store %oop %r141, %oop* %t11
	br label %L15
L14:
	%r147 = inttoptr %word 0 to %oop
	store %oop %r147, %oop* %t11
	br label %L15
L15:
	%r148 = load %oop, %oop* %t11
	store %oop %r148, %oop* %t9
	br label %L9
L9:
	%r149 = load %oop, %oop* %t9
	store %oop %r149, %oop* %t5
	br label %L6
L5:
	%r150 = inttoptr %word 0 to %oop
	store %oop %r150, %oop* %t5
	br label %L6
L6:
	%r151 = load %oop, %oop* %t5
	store %oop %r151, %oop* %t4
	br label %L3
L2:
	%r152 = inttoptr %word 0 to %oop
	store %oop %r152, %oop* %t4
	br label %L3
L3:
	%r153 = load %oop, %oop* %t4
	%r154 = load %oop, %oop* %t0
	%r155 = load %oop, %oop* %t1
	%r156 = load %oop, %oop* %t2
	%r157 = call %oop @m_set-string-at.code(%oop %r154, %oop %r155, %oop %r156)
	ret %oop %r157
}
@m_cstr675 = private unnamed_addr constant [14 x i8] c"string-insert\00"
@m_ostr676 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr675 to %oop) }
@m_string-insert = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop, %oop)* @m_string-insert.code to %oop), %"<string>"* @m_ostr676 }
define %oop @m_string-ensure-zero-terminated.code(%oop %obj) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	%t2 = alloca %oop
	store %oop %obj, %oop* %t0
	%r1 = load %oop, %oop* @"m_gc/memory-base"
	%r2 = load %oop, %oop* %t0
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = ptrtoint %oop %r1 to %word
	%r4 = icmp slt %word %r6, %r5
	%r3 = inttoptr i1 %r4 to %oop
	%r8 = ptrtoint %oop %r3 to %word
	%r7 = icmp ne %word %r8, 0
	br i1 %r7, label %L1, label %L2
L1:
	%r9 = inttoptr %word 0 to %oop
	store %oop %r9, %oop* %t1
	br label %L3
L2:
	%r10 = load %oop, %oop* %t0
	%r11 = call %oop @m_string-length.code(%oop %r10)
	store %oop %r11, %oop* %t2
	%r12 = load %oop, %oop* %t0
	%r13 = load %oop, %oop* %t2
	%r14 = inttoptr %word 0 to %oop
	%r15 = call %oop @m_set-string-at.code(%oop %r12, %oop %r13, %oop %r14)
	%r16 = inttoptr %word 1 to %oop
	%r17 = inttoptr %word 1 to %oop
	%r18 = load %oop, %oop* %t2
	%r22 = ptrtoint %oop %r18 to %word
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = shl %word %r22, %r21
	%r19 = inttoptr %word %r20 to %oop
	%r26 = ptrtoint %oop %r19 to %word
	%r25 = ptrtoint %oop %r16 to %word
	%r24 = or %word %r26, %r25
	%r23 = inttoptr %word %r24 to %oop
	%r27 = inttoptr %word 0 to %oop
	%r28 = load %oop, %oop* %t0
	%r32 = bitcast %oop %r28 to [0 x %oop]*
	%r31 = ptrtoint %oop %r27 to %word
	%r30 = getelementptr [0 x %oop], [0 x %oop]* %r32, %word 0, %word %r31
	store %oop %r23, %oop* %r30
	%r29 = bitcast %oop %r23 to %oop
	store %oop %r29, %oop* %t1
	br label %L3
L3:
	%r33 = load %oop, %oop* %t1
	%r34 = load %oop, %oop* %t0
	ret %oop %r34
}
@m_cstr677 = private unnamed_addr constant [30 x i8] c"string-ensure-zero-terminated\00"
@m_ostr678 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 59, %oop bitcast ([30 x i8]* @m_cstr677 to %oop) }
@m_string-ensure-zero-terminated = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_string-ensure-zero-terminated.code to %oop), %"<string>"* @m_ostr678 }
define %oop @m_string-insert-all.code(%oop %str, %oop %idx, %oop %insertion) {
	%t2 = alloca %oop
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	store %oop %str, %oop* %t0
	store %oop %idx, %oop* %t1
	store %oop %insertion, %oop* %t2
	%r1 = load %oop, %oop* %t2
	store %oop %r1, %oop* %t3
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t4
	%r3 = load %oop, %oop* %t3
	%r4 = call %oop @m_string-length.code(%oop %r3)
	store %oop %r4, %oop* %t5
	br label %L2
L1:
	%r5 = load %oop, %oop* %t3
	%r6 = load %oop, %oop* %t4
	%r7 = call %oop @m_string-at.code(%oop %r5, %oop %r6)
	store %oop %r7, %oop* %t6
	%r8 = load %oop, %oop* %t0
	%r9 = load %oop, %oop* %t1
	%r10 = load %oop, %oop* %t6
	%r11 = call %oop @m_string-insert.code(%oop %r8, %oop %r9, %oop %r10)
	%r12 = inttoptr %word 1 to %oop
	%r13 = load %oop, %oop* %t1
	%r17 = ptrtoint %oop %r13 to %word
	%r16 = ptrtoint %oop %r12 to %word
	%r15 = add %word %r17, %r16
	%r14 = inttoptr %word %r15 to %oop
	store %oop %r14, %oop* %t1
	%r18 = inttoptr %word 1 to %oop
	%r19 = load %oop, %oop* %t4
	%r23 = ptrtoint %oop %r19 to %word
	%r22 = ptrtoint %oop %r18 to %word
	%r21 = add %word %r23, %r22
	%r20 = inttoptr %word %r21 to %oop
	store %oop %r20, %oop* %t4
	br label %L2
L2:
	%r24 = load %oop, %oop* %t5
	%r25 = load %oop, %oop* %t4
	%r29 = ptrtoint %oop %r25 to %word
	%r28 = ptrtoint %oop %r24 to %word
	%r27 = icmp slt %word %r29, %r28
	%r26 = inttoptr i1 %r27 to %oop
	%r31 = ptrtoint %oop %r26 to %word
	%r30 = icmp ne %word %r31, 0
	br i1 %r30, label %L1, label %L3
L3:
	%r32 = load %oop, %oop* %t0
	ret %oop %r32
}
@m_cstr679 = private unnamed_addr constant [18 x i8] c"string-insert-all\00"
@m_ostr680 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr679 to %oop) }
@m_string-insert-all = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop, %oop)* @m_string-insert-all.code to %oop), %"<string>"* @m_ostr680 }
@m_cstr681 = private unnamed_addr constant [18 x i8] c"string-insert-all\00"
@m_ostr682 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr681 to %oop) }
@m_cstr683 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr684 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr683 to %oop) }
@m_cstr685 = private unnamed_addr constant [4 x i8] c"str\00"
@m_ostr686 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr685 to %oop) }
@m_cstr687 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr688 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr687 to %oop) }
@m_cstr689 = private unnamed_addr constant [9 x i8] c"<string>\00"
@m_ostr690 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr689 to %oop) }
@m_cstr691 = private unnamed_addr constant [18 x i8] c"string-insert-all\00"
@m_ostr692 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr691 to %oop) }
@m_cstr693 = private unnamed_addr constant [18 x i8] c"string-insert-all\00"
@m_ostr694 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr693 to %oop) }
@m_cstr695 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr696 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr695 to %oop) }
@m_cstr697 = private unnamed_addr constant [4 x i8] c"idx\00"
@m_ostr698 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr697 to %oop) }
@m_cstr699 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr700 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr699 to %oop) }
@m_cstr701 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr702 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr701 to %oop) }
@m_cstr703 = private unnamed_addr constant [18 x i8] c"string-insert-all\00"
@m_ostr704 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr703 to %oop) }
@m_cstr705 = private unnamed_addr constant [18 x i8] c"string-insert-all\00"
@m_ostr706 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr705 to %oop) }
@m_cstr707 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr708 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr707 to %oop) }
@m_cstr709 = private unnamed_addr constant [10 x i8] c"insertion\00"
@m_ostr710 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 19, %oop bitcast ([10 x i8]* @m_cstr709 to %oop) }
@m_cstr711 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr712 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr711 to %oop) }
@m_cstr713 = private unnamed_addr constant [9 x i8] c"<string>\00"
@m_ostr714 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr713 to %oop) }
@m_cstr715 = private unnamed_addr constant [18 x i8] c"string-insert-all\00"
@m_ostr716 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr715 to %oop) }
@m_cstr717 = private unnamed_addr constant [18 x i8] c"string-insert-all\00"
@m_ostr718 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr717 to %oop) }
define %oop @"m_string-insert-all/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t5 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = inttoptr %word 0 to %oop
	store %oop %r4, %oop* %t5
	%r5 = load %oop, %oop* %t2
	%r6 = call %oop @"m_pair?.code"(%oop %r5)
	%r8 = ptrtoint %oop %r6 to %word
	%r7 = icmp ne %word %r8, 0
	br i1 %r7, label %L1, label %L2
L1:
	%r9 = inttoptr %word 0 to %oop
	%r10 = load %oop, %oop* %t2
	%r14 = bitcast %oop %r10 to [0 x %oop]*
	%r13 = ptrtoint %oop %r9 to %word
	%r12 = getelementptr [0 x %oop], [0 x %oop]* %r14, %word 0, %word %r13
	%r11 = load %oop, %oop* %r12
	store %oop %r11, %oop* %t3
	%r15 = inttoptr %word 0 to %oop
	store %oop %r15, %oop* %t7
	%r16 = load %oop, %oop* %t3
	%r17 = call %oop @"m_string?.code"(%oop %r16)
	store %oop %r17, %oop* %t7
	%r18 = inttoptr %word 0 to %oop
	%r22 = ptrtoint %oop %r18 to %word
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = icmp eq %word %r22, %r21
	%r19 = inttoptr i1 %r20 to %oop
	%r24 = ptrtoint %oop %r19 to %word
	%r23 = icmp ne %word %r24, 0
	br i1 %r23, label %L5, label %L4
L5:
	%r25 = call %oop @m_error-prologue.code()
	%r26 = getelementptr %"<string>", %"<string>"* @m_ostr682, i32 0, i32 1
	%r27 = bitcast %word* %r26 to %oop
	%r28 = call %oop @"m_%error.code"(%oop %r27)
	%r29 = getelementptr %"<string>", %"<string>"* @m_ostr684, i32 0, i32 1
	%r30 = bitcast %word* %r29 to %oop
	%r31 = call %oop @"m_%error.code"(%oop %r30)
	%r32 = getelementptr %"<string>", %"<string>"* @m_ostr686, i32 0, i32 1
	%r33 = bitcast %word* %r32 to %oop
	%r34 = call %oop @"m_%error.code"(%oop %r33)
	%r35 = getelementptr %"<string>", %"<string>"* @m_ostr688, i32 0, i32 1
	%r36 = bitcast %word* %r35 to %oop
	%r37 = call %oop @"m_%error.code"(%oop %r36)
	%r38 = getelementptr %"<string>", %"<string>"* @m_ostr690, i32 0, i32 1
	%r39 = bitcast %word* %r38 to %oop
	%r40 = call %oop @"m_%error.code"(%oop %r39)
	%r41 = call %oop @m_error-epilogue.code()
	store %oop %r41, %oop* %t7
	%r42 = inttoptr %word 0 to %oop
	%r46 = ptrtoint %oop %r42 to %word
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = icmp eq %word %r46, %r45
	%r43 = inttoptr i1 %r44 to %oop
	%r48 = ptrtoint %oop %r43 to %word
	%r47 = icmp ne %word %r48, 0
	br i1 %r47, label %L6, label %L4
L6:
	br label %L4
L4:
	%r49 = load %oop, %oop* %t7
	%r50 = inttoptr %word 1 to %oop
	%r51 = load %oop, %oop* %t2
	%r55 = bitcast %oop %r51 to [0 x %oop]*
	%r54 = ptrtoint %oop %r50 to %word
	%r53 = getelementptr [0 x %oop], [0 x %oop]* %r55, %word 0, %word %r54
	%r52 = load %oop, %oop* %r53
	store %oop %r52, %oop* %t2
	store %oop %r52, %oop* %t6
	br label %L3
L2:
	%r56 = getelementptr %"<string>", %"<string>"* @m_ostr692, i32 0, i32 1
	%r57 = bitcast %word* %r56 to %oop
	%r58 = load %oop, %oop* %t0
	%r59 = call %oop @"m_%not-enough-arguments.code"(%oop %r57, %oop %r58)
	store %oop %r59, %oop* %t6
	br label %L3
L3:
	%r60 = load %oop, %oop* %t6
	%r61 = load %oop, %oop* %t2
	%r62 = call %oop @"m_pair?.code"(%oop %r61)
	%r64 = ptrtoint %oop %r62 to %word
	%r63 = icmp ne %word %r64, 0
	br i1 %r63, label %L7, label %L8
L7:
	%r65 = inttoptr %word 0 to %oop
	%r66 = load %oop, %oop* %t2
	%r70 = bitcast %oop %r66 to [0 x %oop]*
	%r69 = ptrtoint %oop %r65 to %word
	%r68 = getelementptr [0 x %oop], [0 x %oop]* %r70, %word 0, %word %r69
	%r67 = load %oop, %oop* %r68
	store %oop %r67, %oop* %t4
	%r71 = inttoptr %word 0 to %oop
	store %oop %r71, %oop* %t7
	%r72 = load %oop, %oop* %t4
	%r73 = call %oop @"m_long?.code"(%oop %r72)
	store %oop %r73, %oop* %t7
	%r74 = inttoptr %word 0 to %oop
	%r78 = ptrtoint %oop %r74 to %word
	%r77 = ptrtoint %oop %r73 to %word
	%r76 = icmp eq %word %r78, %r77
	%r75 = inttoptr i1 %r76 to %oop
	%r80 = ptrtoint %oop %r75 to %word
	%r79 = icmp ne %word %r80, 0
	br i1 %r79, label %L11, label %L10
L11:
	%r81 = call %oop @m_error-prologue.code()
	%r82 = getelementptr %"<string>", %"<string>"* @m_ostr694, i32 0, i32 1
	%r83 = bitcast %word* %r82 to %oop
	%r84 = call %oop @"m_%error.code"(%oop %r83)
	%r85 = getelementptr %"<string>", %"<string>"* @m_ostr696, i32 0, i32 1
	%r86 = bitcast %word* %r85 to %oop
	%r87 = call %oop @"m_%error.code"(%oop %r86)
	%r88 = getelementptr %"<string>", %"<string>"* @m_ostr698, i32 0, i32 1
	%r89 = bitcast %word* %r88 to %oop
	%r90 = call %oop @"m_%error.code"(%oop %r89)
	%r91 = getelementptr %"<string>", %"<string>"* @m_ostr700, i32 0, i32 1
	%r92 = bitcast %word* %r91 to %oop
	%r93 = call %oop @"m_%error.code"(%oop %r92)
	%r94 = getelementptr %"<string>", %"<string>"* @m_ostr702, i32 0, i32 1
	%r95 = bitcast %word* %r94 to %oop
	%r96 = call %oop @"m_%error.code"(%oop %r95)
	%r97 = call %oop @m_error-epilogue.code()
	store %oop %r97, %oop* %t7
	%r98 = inttoptr %word 0 to %oop
	%r102 = ptrtoint %oop %r98 to %word
	%r101 = ptrtoint %oop %r97 to %word
	%r100 = icmp eq %word %r102, %r101
	%r99 = inttoptr i1 %r100 to %oop
	%r104 = ptrtoint %oop %r99 to %word
	%r103 = icmp ne %word %r104, 0
	br i1 %r103, label %L12, label %L10
L12:
	br label %L10
L10:
	%r105 = load %oop, %oop* %t7
	%r106 = inttoptr %word 1 to %oop
	%r107 = load %oop, %oop* %t4
	%r111 = ptrtoint %oop %r107 to %word
	%r110 = ptrtoint %oop %r106 to %word
	%r109 = ashr %word %r111, %r110
	%r108 = inttoptr %word %r109 to %oop
	store %oop %r108, %oop* %t4
	%r112 = inttoptr %word 1 to %oop
	%r113 = load %oop, %oop* %t2
	%r117 = bitcast %oop %r113 to [0 x %oop]*
	%r116 = ptrtoint %oop %r112 to %word
	%r115 = getelementptr [0 x %oop], [0 x %oop]* %r117, %word 0, %word %r116
	%r114 = load %oop, %oop* %r115
	store %oop %r114, %oop* %t2
	store %oop %r114, %oop* %t6
	br label %L9
L8:
	%r118 = getelementptr %"<string>", %"<string>"* @m_ostr704, i32 0, i32 1
	%r119 = bitcast %word* %r118 to %oop
	%r120 = load %oop, %oop* %t0
	%r121 = call %oop @"m_%not-enough-arguments.code"(%oop %r119, %oop %r120)
	store %oop %r121, %oop* %t6
	br label %L9
L9:
	%r122 = load %oop, %oop* %t6
	%r123 = load %oop, %oop* %t2
	%r124 = call %oop @"m_pair?.code"(%oop %r123)
	%r126 = ptrtoint %oop %r124 to %word
	%r125 = icmp ne %word %r126, 0
	br i1 %r125, label %L13, label %L14
L13:
	%r127 = inttoptr %word 0 to %oop
	%r128 = load %oop, %oop* %t2
	%r132 = bitcast %oop %r128 to [0 x %oop]*
	%r131 = ptrtoint %oop %r127 to %word
	%r130 = getelementptr [0 x %oop], [0 x %oop]* %r132, %word 0, %word %r131
	%r129 = load %oop, %oop* %r130
	store %oop %r129, %oop* %t5
	%r133 = inttoptr %word 0 to %oop
	store %oop %r133, %oop* %t7
	%r134 = load %oop, %oop* %t5
	%r135 = call %oop @"m_string?.code"(%oop %r134)
	store %oop %r135, %oop* %t7
	%r136 = inttoptr %word 0 to %oop
	%r140 = ptrtoint %oop %r136 to %word
	%r139 = ptrtoint %oop %r135 to %word
	%r138 = icmp eq %word %r140, %r139
	%r137 = inttoptr i1 %r138 to %oop
	%r142 = ptrtoint %oop %r137 to %word
	%r141 = icmp ne %word %r142, 0
	br i1 %r141, label %L17, label %L16
L17:
	%r143 = call %oop @m_error-prologue.code()
	%r144 = getelementptr %"<string>", %"<string>"* @m_ostr706, i32 0, i32 1
	%r145 = bitcast %word* %r144 to %oop
	%r146 = call %oop @"m_%error.code"(%oop %r145)
	%r147 = getelementptr %"<string>", %"<string>"* @m_ostr708, i32 0, i32 1
	%r148 = bitcast %word* %r147 to %oop
	%r149 = call %oop @"m_%error.code"(%oop %r148)
	%r150 = getelementptr %"<string>", %"<string>"* @m_ostr710, i32 0, i32 1
	%r151 = bitcast %word* %r150 to %oop
	%r152 = call %oop @"m_%error.code"(%oop %r151)
	%r153 = getelementptr %"<string>", %"<string>"* @m_ostr712, i32 0, i32 1
	%r154 = bitcast %word* %r153 to %oop
	%r155 = call %oop @"m_%error.code"(%oop %r154)
	%r156 = getelementptr %"<string>", %"<string>"* @m_ostr714, i32 0, i32 1
	%r157 = bitcast %word* %r156 to %oop
	%r158 = call %oop @"m_%error.code"(%oop %r157)
	%r159 = call %oop @m_error-epilogue.code()
	store %oop %r159, %oop* %t7
	%r160 = inttoptr %word 0 to %oop
	%r164 = ptrtoint %oop %r160 to %word
	%r163 = ptrtoint %oop %r159 to %word
	%r162 = icmp eq %word %r164, %r163
	%r161 = inttoptr i1 %r162 to %oop
	%r166 = ptrtoint %oop %r161 to %word
	%r165 = icmp ne %word %r166, 0
	br i1 %r165, label %L18, label %L16
L18:
	br label %L16
L16:
	%r167 = load %oop, %oop* %t7
	%r168 = inttoptr %word 1 to %oop
	%r169 = load %oop, %oop* %t2
	%r173 = bitcast %oop %r169 to [0 x %oop]*
	%r172 = ptrtoint %oop %r168 to %word
	%r171 = getelementptr [0 x %oop], [0 x %oop]* %r173, %word 0, %word %r172
	%r170 = load %oop, %oop* %r171
	store %oop %r170, %oop* %t2
	store %oop %r170, %oop* %t6
	br label %L15
L14:
	%r174 = getelementptr %"<string>", %"<string>"* @m_ostr716, i32 0, i32 1
	%r175 = bitcast %word* %r174 to %oop
	%r176 = load %oop, %oop* %t0
	%r177 = call %oop @"m_%not-enough-arguments.code"(%oop %r175, %oop %r176)
	store %oop %r177, %oop* %t6
	br label %L15
L15:
	%r178 = load %oop, %oop* %t6
	%r179 = load %oop, %oop* %t2
	%r181 = ptrtoint %oop %r179 to %word
	%r180 = icmp ne %word %r181, 0
	br i1 %r180, label %L19, label %L20
L19:
	%r182 = getelementptr %"<string>", %"<string>"* @m_ostr718, i32 0, i32 1
	%r183 = bitcast %word* %r182 to %oop
	%r184 = load %oop, %oop* %t0
	%r185 = call %oop @"m_%too-many-arguments.code"(%oop %r183, %oop %r184)
	store %oop %r185, %oop* %t6
	br label %L21
L20:
	%r186 = inttoptr %word 0 to %oop
	store %oop %r186, %oop* %t6
	br label %L21
L21:
	%r187 = load %oop, %oop* %t6
	%r188 = load %oop, %oop* %t3
	%r189 = load %oop, %oop* %t4
	%r190 = load %oop, %oop* %t5
	%r191 = call %oop @m_string-insert-all.code(%oop %r188, %oop %r189, %oop %r190)
	ret %oop %r191
}
@m_cstr719 = private unnamed_addr constant [33 x i8] c"string-insert-all/evaluator-stub\00"
@m_ostr720 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 65, %oop bitcast ([33 x i8]* @m_cstr719 to %oop) }
@"m_string-insert-all/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_string-insert-all/evaluator-stub.code" to %oop), %"<string>"* @m_ostr720 }
define %oop @m_string-append-all.code(%oop %str, %oop %val) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	store %oop %str, %oop* %t0
	store %oop %val, %oop* %t1
	%r1 = load %oop, %oop* %t0
	%r2 = load %oop, %oop* %t0
	%r3 = call %oop @m_string-length.code(%oop %r2)
	%r4 = load %oop, %oop* %t1
	%r5 = call %oop @m_string-insert-all.code(%oop %r1, %oop %r3, %oop %r4)
	ret %oop %r5
}
@m_cstr721 = private unnamed_addr constant [18 x i8] c"string-append-all\00"
@m_ostr722 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr721 to %oop) }
@m_string-append-all = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @m_string-append-all.code to %oop), %"<string>"* @m_ostr722 }
define %oop @m_compare-strings.code(%oop %str-a, %oop %str-b) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	%t8 = alloca %oop
	%t9 = alloca %oop
	%t10 = alloca %oop
	store %oop %str-a, %oop* %t0
	store %oop %str-b, %oop* %t1
	%r1 = inttoptr %word 0 to %oop
	%r2 = load %oop, %oop* %t0
	%r3 = call %oop @m_string-length.code(%oop %r2)
	store %oop %r3, %oop* %t2
	%r4 = load %oop, %oop* %t1
	%r5 = call %oop @m_string-length.code(%oop %r4)
	store %oop %r5, %oop* %t3
	%r6 = inttoptr %word 1 to %oop
	%r7 = load %oop, %oop* %t0
	%r11 = bitcast %oop %r7 to [0 x %oop]*
	%r10 = ptrtoint %oop %r6 to %word
	%r9 = getelementptr [0 x %oop], [0 x %oop]* %r11, %word 0, %word %r10
	%r8 = load %oop, %oop* %r9
	store %oop %r8, %oop* %t4
	%r12 = inttoptr %word 1 to %oop
	%r13 = load %oop, %oop* %t1
	%r17 = bitcast %oop %r13 to [0 x %oop]*
	%r16 = ptrtoint %oop %r12 to %word
	%r15 = getelementptr [0 x %oop], [0 x %oop]* %r17, %word 0, %word %r16
	%r14 = load %oop, %oop* %r15
	store %oop %r14, %oop* %t5
	%r18 = load %oop, %oop* %t2
	%r19 = load %oop, %oop* %t3
	%r20 = call %oop @m_min.code(%oop %r18, %oop %r19)
	store %oop %r20, %oop* %t6
	%r21 = inttoptr %word 0 to %oop
	store %oop %r21, %oop* %t7
	%r22 = inttoptr %word 0 to %oop
	store %oop %r22, %oop* %t8
	br label %L2
L1:
	%r23 = inttoptr %word 1 to %oop
	%r24 = load %oop, %oop* %t8
	%r28 = ptrtoint %oop %r24 to %word
	%r27 = ptrtoint %oop %r23 to %word
	%r26 = add %word %r28, %r27
	%r25 = inttoptr %word %r26 to %oop
	store %oop %r25, %oop* %t8
	br label %L2
L2:
	%r29 = inttoptr %word 1 to %oop
	store %oop %r29, %oop* %t9
	%r30 = load %oop, %oop* %t6
	%r31 = load %oop, %oop* %t8
	%r35 = ptrtoint %oop %r31 to %word
	%r34 = ptrtoint %oop %r30 to %word
	%r33 = icmp slt %word %r35, %r34
	%r32 = inttoptr i1 %r33 to %oop
	store %oop %r32, %oop* %t9
	%r36 = inttoptr %word 0 to %oop
	%r40 = ptrtoint %oop %r36 to %word
	%r39 = ptrtoint %oop %r32 to %word
	%r38 = icmp eq %word %r40, %r39
	%r37 = inttoptr i1 %r38 to %oop
	%r42 = ptrtoint %oop %r37 to %word
	%r41 = icmp ne %word %r42, 0
	br i1 %r41, label %L4, label %L5
L5:
	%r43 = load %oop, %oop* %t8
	%r44 = load %oop, %oop* %t5
	%r49 = bitcast %oop %r44 to [0 x i8]*
	%r48 = ptrtoint %oop %r43 to %word
	%r47 = getelementptr [0 x i8], [0 x i8]* %r49, %word 0, %word %r48
	%r46 = load i8, i8* %r47
	%r45 = inttoptr i8 %r46 to %oop
	%r50 = load %oop, %oop* %t8
	%r51 = load %oop, %oop* %t4
	%r56 = bitcast %oop %r51 to [0 x i8]*
	%r55 = ptrtoint %oop %r50 to %word
	%r54 = getelementptr [0 x i8], [0 x i8]* %r56, %word 0, %word %r55
	%r53 = load i8, i8* %r54
	%r52 = inttoptr i8 %r53 to %oop
	%r60 = ptrtoint %oop %r52 to %word
	%r59 = ptrtoint %oop %r45 to %word
	%r58 = sub %word %r60, %r59
	%r57 = inttoptr %word %r58 to %oop
	store %oop %r57, %oop* %t7
	%r61 = inttoptr %word 0 to %oop
	%r65 = ptrtoint %oop %r61 to %word
	%r64 = ptrtoint %oop %r57 to %word
	%r63 = icmp eq %word %r65, %r64
	%r62 = inttoptr i1 %r63 to %oop
	store %oop %r62, %oop* %t9
	%r66 = inttoptr %word 0 to %oop
	%r70 = ptrtoint %oop %r66 to %word
	%r69 = ptrtoint %oop %r62 to %word
	%r68 = icmp eq %word %r70, %r69
	%r67 = inttoptr i1 %r68 to %oop
	%r72 = ptrtoint %oop %r67 to %word
	%r71 = icmp ne %word %r72, 0
	br i1 %r71, label %L4, label %L6
L6:
	br label %L4
L4:
	%r73 = load %oop, %oop* %t9
	%r75 = ptrtoint %oop %r73 to %word
	%r74 = icmp ne %word %r75, 0
	br i1 %r74, label %L1, label %L3
L3:
	%r76 = inttoptr %word 0 to %oop
	store %oop %r76, %oop* %t10
	%r77 = load %oop, %oop* %t7
	%r78 = inttoptr %word 0 to %oop
	%r82 = ptrtoint %oop %r78 to %word
	%r81 = ptrtoint %oop %r77 to %word
	%r80 = icmp eq %word %r82, %r81
	%r79 = inttoptr i1 %r80 to %oop
	%r86 = ptrtoint %oop %r79 to %word
	%r85 = icmp eq %word %r86, 0
	%r84 = zext i1 %r85 to %word
	%r83 = inttoptr %word %r84 to %oop
	store %oop %r83, %oop* %t10
	%r87 = inttoptr %word 0 to %oop
	%r91 = ptrtoint %oop %r87 to %word
	%r90 = ptrtoint %oop %r83 to %word
	%r89 = icmp eq %word %r91, %r90
	%r88 = inttoptr i1 %r89 to %oop
	%r93 = ptrtoint %oop %r88 to %word
	%r92 = icmp ne %word %r93, 0
	br i1 %r92, label %L11, label %L10
L11:
	%r94 = load %oop, %oop* %t3
	%r95 = load %oop, %oop* %t2
	%r99 = ptrtoint %oop %r95 to %word
	%r98 = ptrtoint %oop %r94 to %word
	%r97 = icmp eq %word %r99, %r98
	%r96 = inttoptr i1 %r97 to %oop
	store %oop %r96, %oop* %t10
	%r100 = inttoptr %word 0 to %oop
	%r104 = ptrtoint %oop %r100 to %word
	%r103 = ptrtoint %oop %r96 to %word
	%r102 = icmp eq %word %r104, %r103
	%r101 = inttoptr i1 %r102 to %oop
	%r106 = ptrtoint %oop %r101 to %word
	%r105 = icmp ne %word %r106, 0
	br i1 %r105, label %L12, label %L10
L12:
	br label %L10
L10:
	%r107 = load %oop, %oop* %t10
	%r109 = ptrtoint %oop %r107 to %word
	%r108 = icmp ne %word %r109, 0
	br i1 %r108, label %L7, label %L8
L7:
	%r110 = load %oop, %oop* %t7
	store %oop %r110, %oop* %t9
	br label %L9
L8:
	%r111 = load %oop, %oop* %t3
	%r112 = load %oop, %oop* %t2
	%r116 = ptrtoint %oop %r112 to %word
	%r115 = ptrtoint %oop %r111 to %word
	%r114 = icmp slt %word %r116, %r115
	%r113 = inttoptr i1 %r114 to %oop
	%r118 = ptrtoint %oop %r113 to %word
	%r117 = icmp ne %word %r118, 0
	br i1 %r117, label %L13, label %L14
L13:
	%r119 = load %oop, %oop* %t2
	%r120 = load %oop, %oop* %t5
	%r125 = bitcast %oop %r120 to [0 x i8]*
	%r124 = ptrtoint %oop %r119 to %word
	%r123 = getelementptr [0 x i8], [0 x i8]* %r125, %word 0, %word %r124
	%r122 = load i8, i8* %r123
	%r121 = inttoptr i8 %r122 to %oop
	%r126 = inttoptr %word 0 to %oop
	%r130 = ptrtoint %oop %r126 to %word
	%r129 = ptrtoint %oop %r121 to %word
	%r128 = sub %word %r130, %r129
	%r127 = inttoptr %word %r128 to %oop
	store %oop %r127, %oop* %t10
	br label %L15
L14:
	%r131 = inttoptr %word 0 to %oop
	%r132 = load %oop, %oop* %t3
	%r133 = load %oop, %oop* %t4
	%r138 = bitcast %oop %r133 to [0 x i8]*
	%r137 = ptrtoint %oop %r132 to %word
	%r136 = getelementptr [0 x i8], [0 x i8]* %r138, %word 0, %word %r137
	%r135 = load i8, i8* %r136
	%r134 = inttoptr i8 %r135 to %oop
	%r142 = ptrtoint %oop %r134 to %word
	%r141 = ptrtoint %oop %r131 to %word
	%r140 = sub %word %r142, %r141
	%r139 = inttoptr %word %r140 to %oop
	store %oop %r139, %oop* %t10
	br label %L15
L15:
	%r143 = load %oop, %oop* %t10
	store %oop %r143, %oop* %t9
	br label %L9
L9:
	%r144 = load %oop, %oop* %t9
	ret %oop %r144
}
@m_cstr723 = private unnamed_addr constant [16 x i8] c"compare-strings\00"
@m_ostr724 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 31, %oop bitcast ([16 x i8]* @m_cstr723 to %oop) }
@m_compare-strings = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @m_compare-strings.code to %oop), %"<string>"* @m_ostr724 }
define %oop @"m_string=.code"(%oop %a, %oop %b) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	store %oop %a, %oop* %t0
	store %oop %b, %oop* %t1
	%r1 = load %oop, %oop* %t0
	%r2 = load %oop, %oop* %t1
	%r3 = call %oop @m_compare-strings.code(%oop %r1, %oop %r2)
	%r4 = inttoptr %word 0 to %oop
	%r8 = ptrtoint %oop %r4 to %word
	%r7 = ptrtoint %oop %r3 to %word
	%r6 = icmp eq %word %r8, %r7
	%r5 = inttoptr i1 %r6 to %oop
	ret %oop %r5
}
@m_cstr725 = private unnamed_addr constant [8 x i8] c"string=\00"
@m_ostr726 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr725 to %oop) }
@"m_string=" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_string=.code" to %oop), %"<string>"* @m_ostr726 }
define %oop @m_array-binary-search.code(%oop %array, %oop %item, %oop %comparator, %oop %inserter) {
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t5 = alloca %oop
	%t4 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	%t8 = alloca %oop
	%t9 = alloca %oop
	%t10 = alloca %oop
	store %oop %array, %oop* %t0
	store %oop %item, %oop* %t1
	store %oop %comparator, %oop* %t2
	store %oop %inserter, %oop* %t3
	%r1 = inttoptr %word 0 to %oop
	store %oop %r1, %oop* %t4
	%r2 = inttoptr %word 1 to %oop
	%r3 = load %oop, %oop* %t0
	%r4 = call %oop @m_array-length.code(%oop %r3)
	%r8 = ptrtoint %oop %r4 to %word
	%r7 = ptrtoint %oop %r2 to %word
	%r6 = sub %word %r8, %r7
	%r5 = inttoptr %word %r6 to %oop
	store %oop %r5, %oop* %t5
	br label %L2
L1:
	%r9 = inttoptr %word 2 to %oop
	%r10 = load %oop, %oop* %t5
	%r11 = load %oop, %oop* %t4
	%r15 = ptrtoint %oop %r11 to %word
	%r14 = ptrtoint %oop %r10 to %word
	%r13 = add %word %r15, %r14
	%r12 = inttoptr %word %r13 to %oop
	%r19 = ptrtoint %oop %r12 to %word
	%r18 = ptrtoint %oop %r9 to %word
	%r17 = sdiv %word %r19, %r18
	%r16 = inttoptr %word %r17 to %oop
	store %oop %r16, %oop* %t6
	%r20 = load %oop, %oop* %t0
	%r21 = load %oop, %oop* %t6
	%r22 = call %oop @m_array-at.code(%oop %r20, %oop %r21)
	store %oop %r22, %oop* %t7
	%r23 = load %oop, %oop* %t1
	%r24 = load %oop, %oop* %t7
	%r25 = load %oop, %oop* %t2
	%r26 = bitcast %oop %r25 to %"<target-function>"*
	%r27 = getelementptr %"<target-function>", %"<target-function>"* %r26, i32 0, i32 1
	%r28 = load %oop, %oop* %r27
	%r30 = bitcast %oop %r28 to %oop (%oop, %oop)*
	%r29 = call %oop %r30(%oop %r23, %oop %r24)
	store %oop %r29, %oop* %t8
	%r31 = inttoptr %word 0 to %oop
	%r32 = load %oop, %oop* %t8
	%r36 = ptrtoint %oop %r32 to %word
	%r35 = ptrtoint %oop %r31 to %word
	%r34 = icmp slt %word %r36, %r35
	%r33 = inttoptr i1 %r34 to %oop
	%r38 = ptrtoint %oop %r33 to %word
	%r37 = icmp ne %word %r38, 0
	br i1 %r37, label %L4, label %L5
L4:
	%r39 = inttoptr %word 1 to %oop
	%r40 = load %oop, %oop* %t6
	%r44 = ptrtoint %oop %r40 to %word
	%r43 = ptrtoint %oop %r39 to %word
	%r42 = sub %word %r44, %r43
	%r41 = inttoptr %word %r42 to %oop
	store %oop %r41, %oop* %t5
	store %oop %r41, %oop* %t9
	br label %L6
L5:
	%r45 = inttoptr %word 0 to %oop
	%r46 = load %oop, %oop* %t8
	%r50 = ptrtoint %oop %r46 to %word
	%r49 = ptrtoint %oop %r45 to %word
	%r48 = icmp sgt %word %r50, %r49
	%r47 = inttoptr i1 %r48 to %oop
	%r52 = ptrtoint %oop %r47 to %word
	%r51 = icmp ne %word %r52, 0
	br i1 %r51, label %L7, label %L8
L7:
	%r53 = inttoptr %word 1 to %oop
	%r54 = load %oop, %oop* %t6
	%r58 = ptrtoint %oop %r54 to %word
	%r57 = ptrtoint %oop %r53 to %word
	%r56 = add %word %r58, %r57
	%r55 = inttoptr %word %r56 to %oop
	store %oop %r55, %oop* %t4
	store %oop %r55, %oop* %t10
	br label %L9
L8:
	%r59 = load %oop, %oop* %t7
	ret %oop %r59
	store %oop %r59, %oop* %t10
	br label %L9
L9:
	%r61 = load %oop, %oop* %t10
	store %oop %r61, %oop* %t9
	br label %L6
L6:
	%r62 = load %oop, %oop* %t9
	br label %L2
L2:
	%r63 = load %oop, %oop* %t5
	%r64 = load %oop, %oop* %t4
	%r68 = ptrtoint %oop %r64 to %word
	%r67 = ptrtoint %oop %r63 to %word
	%r66 = icmp sle %word %r68, %r67
	%r65 = inttoptr i1 %r66 to %oop
	%r70 = ptrtoint %oop %r65 to %word
	%r69 = icmp ne %word %r70, 0
	br i1 %r69, label %L1, label %L3
L3:
	%r71 = load %oop, %oop* %t3
	%r73 = ptrtoint %oop %r71 to %word
	%r72 = icmp ne %word %r73, 0
	br i1 %r72, label %L10, label %L11
L10:
	%r74 = load %oop, %oop* %t0
	%r75 = load %oop, %oop* %t4
	%r76 = load %oop, %oop* %t1
	%r77 = load %oop, %oop* %t3
	%r78 = bitcast %oop %r77 to %"<target-function>"*
	%r79 = getelementptr %"<target-function>", %"<target-function>"* %r78, i32 0, i32 1
	%r80 = load %oop, %oop* %r79
	%r82 = bitcast %oop %r80 to %oop (%oop, %oop, %oop)*
	%r81 = call %oop %r82(%oop %r74, %oop %r75, %oop %r76)
	store %oop %r81, %oop* %t6
	br label %L12
L11:
	%r83 = inttoptr %word 0 to %oop
	store %oop %r83, %oop* %t6
	br label %L12
L12:
	%r84 = load %oop, %oop* %t6
	ret %oop %r84
}
@m_cstr727 = private unnamed_addr constant [20 x i8] c"array-binary-search\00"
@m_ostr728 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 39, %oop bitcast ([20 x i8]* @m_cstr727 to %oop) }
@m_array-binary-search = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop, %oop, %oop)* @m_array-binary-search.code to %oop), %"<string>"* @m_ostr728 }
define %oop @"m_C-string->string.code"(%oop %cstr) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	store %oop %cstr, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @m_C-string-length.code(%oop %r1)
	store %oop %r2, %oop* %t1
	%r3 = load %oop, %oop* %t1
	%r4 = call %oop @m_string.code(%oop %r3)
	store %oop %r4, %oop* %t2
	%r5 = inttoptr %word 1 to %oop
	%r6 = inttoptr %word 1 to %oop
	%r7 = load %oop, %oop* %t1
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = ptrtoint %oop %r6 to %word
	%r9 = shl %word %r11, %r10
	%r8 = inttoptr %word %r9 to %oop
	%r15 = ptrtoint %oop %r8 to %word
	%r14 = ptrtoint %oop %r5 to %word
	%r13 = or %word %r15, %r14
	%r12 = inttoptr %word %r13 to %oop
	%r16 = inttoptr %word 0 to %oop
	%r17 = load %oop, %oop* %t2
	%r21 = bitcast %oop %r17 to [0 x %oop]*
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = getelementptr [0 x %oop], [0 x %oop]* %r21, %word 0, %word %r20
	store %oop %r12, %oop* %r19
	%r18 = bitcast %oop %r12 to %oop
	%r22 = inttoptr %word 0 to %oop
	store %oop %r22, %oop* %t3
	%r23 = load %oop, %oop* %t1
	store %oop %r23, %oop* %t4
	br label %L2
L1:
	%r24 = load %oop, %oop* %t3
	%r25 = load %oop, %oop* %t0
	%r30 = bitcast %oop %r25 to [0 x i8]*
	%r29 = ptrtoint %oop %r24 to %word
	%r28 = getelementptr [0 x i8], [0 x i8]* %r30, %word 0, %word %r29
	%r27 = load i8, i8* %r28
	%r26 = inttoptr i8 %r27 to %oop
	%r31 = load %oop, %oop* %t3
	%r32 = inttoptr %word 1 to %oop
	%r33 = load %oop, %oop* %t2
	%r37 = bitcast %oop %r33 to [0 x %oop]*
	%r36 = ptrtoint %oop %r32 to %word
	%r35 = getelementptr [0 x %oop], [0 x %oop]* %r37, %word 0, %word %r36
	%r34 = load %oop, %oop* %r35
	%r43 = bitcast %oop %r34 to [0 x i8]*
	%r42 = ptrtoint %oop %r31 to %word
	%r41 = getelementptr [0 x i8], [0 x i8]* %r43, %word 0, %word %r42
	%r40 = ptrtoint %oop %r26 to i8
	store i8 %r40, i8* %r41
	%r39 = zext i8 %r40 to %word
	%r38 = inttoptr %word %r39 to %oop
	%r44 = inttoptr %word 1 to %oop
	%r45 = load %oop, %oop* %t3
	%r49 = ptrtoint %oop %r45 to %word
	%r48 = ptrtoint %oop %r44 to %word
	%r47 = add %word %r49, %r48
	%r46 = inttoptr %word %r47 to %oop
	store %oop %r46, %oop* %t3
	br label %L2
L2:
	%r50 = load %oop, %oop* %t4
	%r51 = load %oop, %oop* %t3
	%r55 = ptrtoint %oop %r51 to %word
	%r54 = ptrtoint %oop %r50 to %word
	%r53 = icmp eq %word %r55, %r54
	%r52 = inttoptr i1 %r53 to %oop
	%r59 = ptrtoint %oop %r52 to %word
	%r58 = icmp eq %word %r59, 0
	%r57 = zext i1 %r58 to %word
	%r56 = inttoptr %word %r57 to %oop
	%r61 = ptrtoint %oop %r56 to %word
	%r60 = icmp ne %word %r61, 0
	br i1 %r60, label %L1, label %L3
L3:
	%r62 = load %oop, %oop* %t2
	ret %oop %r62
}
@m_cstr729 = private unnamed_addr constant [17 x i8] c"C-string->string\00"
@m_ostr730 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 33, %oop bitcast ([17 x i8]* @m_cstr729 to %oop) }
@"m_C-string->string" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @"m_C-string->string.code" to %oop), %"<string>"* @m_ostr730 }
@m_cstr731 = private unnamed_addr constant [24 x i8] c"kernel assertion failed\00"
@m_ostr732 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 47, %oop bitcast ([24 x i8]* @m_cstr731 to %oop) }
define %oop @"m_long->string*.code"(%oop %num, %oop %radix) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	store %oop %num, %oop* %t0
	store %oop %radix, %oop* %t1
	%r1 = inttoptr %word 0 to %oop
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 1 to %oop
	store %oop %r2, %oop* %t3
	%r3 = load %oop, %oop* %t1
	%r4 = inttoptr %word 0 to %oop
	%r8 = ptrtoint %oop %r4 to %word
	%r7 = ptrtoint %oop %r3 to %word
	%r6 = icmp slt %word %r8, %r7
	%r5 = inttoptr i1 %r6 to %oop
	store %oop %r5, %oop* %t3
	%r9 = inttoptr %word 0 to %oop
	%r13 = ptrtoint %oop %r9 to %word
	%r12 = ptrtoint %oop %r5 to %word
	%r11 = icmp eq %word %r13, %r12
	%r10 = inttoptr i1 %r11 to %oop
	%r15 = ptrtoint %oop %r10 to %word
	%r14 = icmp ne %word %r15, 0
	br i1 %r14, label %L2, label %L3
L3:
	%r16 = inttoptr %word 35 to %oop
	%r17 = load %oop, %oop* %t1
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = icmp sle %word %r21, %r20
	%r18 = inttoptr i1 %r19 to %oop
	store %oop %r18, %oop* %t3
	%r22 = inttoptr %word 0 to %oop
	%r26 = ptrtoint %oop %r22 to %word
	%r25 = ptrtoint %oop %r18 to %word
	%r24 = icmp eq %word %r26, %r25
	%r23 = inttoptr i1 %r24 to %oop
	%r28 = ptrtoint %oop %r23 to %word
	%r27 = icmp ne %word %r28, 0
	br i1 %r27, label %L2, label %L4
L4:
	br label %L2
L2:
	%r29 = load %oop, %oop* %t3
	store %oop %r29, %oop* %t2
	%r30 = inttoptr %word 0 to %oop
	%r34 = ptrtoint %oop %r30 to %word
	%r33 = ptrtoint %oop %r29 to %word
	%r32 = icmp eq %word %r34, %r33
	%r31 = inttoptr i1 %r32 to %oop
	%r36 = ptrtoint %oop %r31 to %word
	%r35 = icmp ne %word %r36, 0
	br i1 %r35, label %L5, label %L1
L5:
	%r37 = call %oop @m_error-prologue.code()
	%r38 = getelementptr %"<string>", %"<string>"* @m_ostr732, i32 0, i32 1
	%r39 = bitcast %word* %r38 to %oop
	%r40 = call %oop @"m_%error.code"(%oop %r39)
	%r41 = call %oop @m_error-epilogue.code()
	store %oop %r41, %oop* %t2
	%r42 = inttoptr %word 0 to %oop
	%r46 = ptrtoint %oop %r42 to %word
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = icmp eq %word %r46, %r45
	%r43 = inttoptr i1 %r44 to %oop
	%r48 = ptrtoint %oop %r43 to %word
	%r47 = icmp ne %word %r48, 0
	br i1 %r47, label %L6, label %L1
L6:
	br label %L1
L1:
	%r49 = load %oop, %oop* %t2
	%r50 = inttoptr %word 0 to %oop
	store %oop %r50, %oop* %t2
	%r51 = inttoptr %word 10 to %oop
	%r52 = call %oop @m_string.code(%oop %r51)
	store %oop %r52, %oop* %t3
	%r54 = getelementptr %oop, %oop* %t3, %word 0
	%r53 = bitcast %oop* %r54 to %oop
	%r55 = call %oop @"m_gc/push-root.code"(%oop %r53)
	%r56 = inttoptr %word 0 to %oop
	%r57 = load %oop, %oop* %t0
	%r61 = ptrtoint %oop %r57 to %word
	%r60 = ptrtoint %oop %r56 to %word
	%r59 = icmp slt %word %r61, %r60
	%r58 = inttoptr i1 %r59 to %oop
	%r63 = ptrtoint %oop %r58 to %word
	%r62 = icmp ne %word %r63, 0
	br i1 %r62, label %L7, label %L8
L7:
	%r64 = inttoptr %word 1 to %oop
	store %oop %r64, %oop* %t2
	%r65 = load %oop, %oop* %t0
	%r68 = ptrtoint %oop %r65 to %word
	%r67 = sub nsw %word 0, %r68
	%r66 = inttoptr %word %r67 to %oop
	store %oop %r66, %oop* %t0
	store %oop %r66, %oop* %t4
	br label %L9
L8:
	%r69 = inttoptr %word 0 to %oop
	store %oop %r69, %oop* %t4
	br label %L9
L9:
	%r70 = load %oop, %oop* %t4
	%r71 = load %oop, %oop* %t0
	%r72 = inttoptr %word 0 to %oop
	%r76 = ptrtoint %oop %r72 to %word
	%r75 = ptrtoint %oop %r71 to %word
	%r74 = icmp eq %word %r76, %r75
	%r73 = inttoptr i1 %r74 to %oop
	%r78 = ptrtoint %oop %r73 to %word
	%r77 = icmp ne %word %r78, 0
	br i1 %r77, label %L10, label %L11
L10:
	%r79 = load %oop, %oop* %t3
	%r80 = inttoptr %word 48 to %oop
	%r81 = call %oop @m_string-append.code(%oop %r79, %oop %r80)
	store %oop %r81, %oop* %t4
	br label %L12
L11:
	br label %L14
L13:
	%r82 = load %oop, %oop* %t1
	%r83 = load %oop, %oop* %t0
	%r87 = ptrtoint %oop %r83 to %word
	%r86 = ptrtoint %oop %r82 to %word
	%r85 = sdiv %word %r87, %r86
	%r84 = inttoptr %word %r85 to %oop
	store %oop %r84, %oop* %t5
	%r88 = load %oop, %oop* %t1
	%r89 = load %oop, %oop* %t5
	%r93 = ptrtoint %oop %r89 to %word
	%r92 = ptrtoint %oop %r88 to %word
	%r91 = mul %word %r93, %r92
	%r90 = inttoptr %word %r91 to %oop
	%r94 = load %oop, %oop* %t0
	%r98 = ptrtoint %oop %r94 to %word
	%r97 = ptrtoint %oop %r90 to %word
	%r96 = sub %word %r98, %r97
	%r95 = inttoptr %word %r96 to %oop
	store %oop %r95, %oop* %t6
	%r99 = inttoptr %word 9 to %oop
	%r100 = load %oop, %oop* %t6
	%r104 = ptrtoint %oop %r100 to %word
	%r103 = ptrtoint %oop %r99 to %word
	%r102 = icmp sle %word %r104, %r103
	%r101 = inttoptr i1 %r102 to %oop
	%r106 = ptrtoint %oop %r101 to %word
	%r105 = icmp ne %word %r106, 0
	br i1 %r105, label %L16, label %L17
L16:
	%r107 = load %oop, %oop* %t6
	%r108 = inttoptr %word 48 to %oop
	%r112 = ptrtoint %oop %r108 to %word
	%r111 = ptrtoint %oop %r107 to %word
	%r110 = add %word %r112, %r111
	%r109 = inttoptr %word %r110 to %oop
	store %oop %r109, %oop* %t7
	br label %L18
L17:
	%r113 = inttoptr %word 10 to %oop
	%r114 = load %oop, %oop* %t6
	%r118 = ptrtoint %oop %r114 to %word
	%r117 = ptrtoint %oop %r113 to %word
	%r116 = sub %word %r118, %r117
	%r115 = inttoptr %word %r116 to %oop
	%r119 = inttoptr %word 97 to %oop
	%r123 = ptrtoint %oop %r119 to %word
	%r122 = ptrtoint %oop %r115 to %word
	%r121 = add %word %r123, %r122
	%r120 = inttoptr %word %r121 to %oop
	store %oop %r120, %oop* %t7
	br label %L18
L18:
	%r124 = load %oop, %oop* %t7
	store %oop %r124, %oop* %t7
	%r125 = load %oop, %oop* %t3
	%r126 = inttoptr %word 0 to %oop
	%r127 = load %oop, %oop* %t7
	%r128 = call %oop @m_string-insert.code(%oop %r125, %oop %r126, %oop %r127)
	%r129 = load %oop, %oop* %t5
	store %oop %r129, %oop* %t0
	br label %L14
L14:
	%r130 = load %oop, %oop* %t0
	%r131 = inttoptr %word 0 to %oop
	%r135 = ptrtoint %oop %r131 to %word
	%r134 = ptrtoint %oop %r130 to %word
	%r133 = icmp slt %word %r135, %r134
	%r132 = inttoptr i1 %r133 to %oop
	%r137 = ptrtoint %oop %r132 to %word
	%r136 = icmp ne %word %r137, 0
	br i1 %r136, label %L13, label %L15
L15:
	store %oop %r132, %oop* %t4
	br label %L12
L12:
	%r138 = load %oop, %oop* %t4
	%r139 = load %oop, %oop* %t2
	%r141 = ptrtoint %oop %r139 to %word
	%r140 = icmp ne %word %r141, 0
	br i1 %r140, label %L19, label %L20
L19:
	%r142 = load %oop, %oop* %t3
	%r143 = inttoptr %word 0 to %oop
	%r144 = inttoptr %word 45 to %oop
	%r145 = call %oop @m_string-insert.code(%oop %r142, %oop %r143, %oop %r144)
	store %oop %r145, %oop* %t4
	br label %L21
L20:
	%r146 = inttoptr %word 0 to %oop
	store %oop %r146, %oop* %t4
	br label %L21
L21:
	%r147 = load %oop, %oop* %t4
	%r148 = load %oop, %oop* %t3
	store %oop %r148, %oop* %t4
	%r150 = getelementptr %oop, %oop* %t3, %word 0
	%r149 = bitcast %oop* %r150 to %oop
	%r151 = call %oop @"m_gc/pop-root.code"(%oop %r149)
	%r152 = load %oop, %oop* %t4
	ret %oop %r152
}
@m_cstr733 = private unnamed_addr constant [14 x i8] c"long->string*\00"
@m_ostr734 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr733 to %oop) }
@"m_long->string*" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_long->string*.code" to %oop), %"<string>"* @m_ostr734 }
define %oop @"m_long->string.code"(%oop %num) {
	%t0 = alloca %oop
	store %oop %num, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r2 = inttoptr %word 10 to %oop
	%r3 = call %oop @"m_long->string*.code"(%oop %r1, %oop %r2)
	ret %oop %r3
}
@m_cstr735 = private unnamed_addr constant [13 x i8] c"long->string\00"
@m_ostr736 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 25, %oop bitcast ([13 x i8]* @m_cstr735 to %oop) }
@"m_long->string" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @"m_long->string.code" to %oop), %"<string>"* @m_ostr736 }
@m_cstr737 = private unnamed_addr constant [24 x i8] c"kernel assertion failed\00"
@m_ostr738 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 47, %oop bitcast ([24 x i8]* @m_cstr737 to %oop) }
define %oop @"m_string->long*.code"(%oop %str, %oop %radix) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t5 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	%t8 = alloca %oop
	%t9 = alloca %oop
	%t10 = alloca %oop
	store %oop %str, %oop* %t0
	store %oop %radix, %oop* %t1
	%r1 = inttoptr %word 0 to %oop
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 1 to %oop
	store %oop %r2, %oop* %t3
	%r3 = load %oop, %oop* %t1
	%r4 = inttoptr %word 0 to %oop
	%r8 = ptrtoint %oop %r4 to %word
	%r7 = ptrtoint %oop %r3 to %word
	%r6 = icmp slt %word %r8, %r7
	%r5 = inttoptr i1 %r6 to %oop
	store %oop %r5, %oop* %t3
	%r9 = inttoptr %word 0 to %oop
	%r13 = ptrtoint %oop %r9 to %word
	%r12 = ptrtoint %oop %r5 to %word
	%r11 = icmp eq %word %r13, %r12
	%r10 = inttoptr i1 %r11 to %oop
	%r15 = ptrtoint %oop %r10 to %word
	%r14 = icmp ne %word %r15, 0
	br i1 %r14, label %L2, label %L3
L3:
	%r16 = inttoptr %word 35 to %oop
	%r17 = load %oop, %oop* %t1
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = icmp sle %word %r21, %r20
	%r18 = inttoptr i1 %r19 to %oop
	store %oop %r18, %oop* %t3
	%r22 = inttoptr %word 0 to %oop
	%r26 = ptrtoint %oop %r22 to %word
	%r25 = ptrtoint %oop %r18 to %word
	%r24 = icmp eq %word %r26, %r25
	%r23 = inttoptr i1 %r24 to %oop
	%r28 = ptrtoint %oop %r23 to %word
	%r27 = icmp ne %word %r28, 0
	br i1 %r27, label %L2, label %L4
L4:
	br label %L2
L2:
	%r29 = load %oop, %oop* %t3
	store %oop %r29, %oop* %t2
	%r30 = inttoptr %word 0 to %oop
	%r34 = ptrtoint %oop %r30 to %word
	%r33 = ptrtoint %oop %r29 to %word
	%r32 = icmp eq %word %r34, %r33
	%r31 = inttoptr i1 %r32 to %oop
	%r36 = ptrtoint %oop %r31 to %word
	%r35 = icmp ne %word %r36, 0
	br i1 %r35, label %L5, label %L1
L5:
	%r37 = call %oop @m_error-prologue.code()
	%r38 = getelementptr %"<string>", %"<string>"* @m_ostr738, i32 0, i32 1
	%r39 = bitcast %word* %r38 to %oop
	%r40 = call %oop @"m_%error.code"(%oop %r39)
	%r41 = call %oop @m_error-epilogue.code()
	store %oop %r41, %oop* %t2
	%r42 = inttoptr %word 0 to %oop
	%r46 = ptrtoint %oop %r42 to %word
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = icmp eq %word %r46, %r45
	%r43 = inttoptr i1 %r44 to %oop
	%r48 = ptrtoint %oop %r43 to %word
	%r47 = icmp ne %word %r48, 0
	br i1 %r47, label %L6, label %L1
L6:
	br label %L1
L1:
	%r49 = load %oop, %oop* %t2
	%r50 = inttoptr %word 0 to %oop
	store %oop %r50, %oop* %t2
	%r51 = inttoptr %word 0 to %oop
	store %oop %r51, %oop* %t3
	%r52 = load %oop, %oop* %t0
	%r53 = call %oop @m_string-length.code(%oop %r52)
	store %oop %r53, %oop* %t4
	%r54 = inttoptr %word 1 to %oop
	store %oop %r54, %oop* %t5
	%r55 = inttoptr %word 1 to %oop
	store %oop %r55, %oop* %t7
	%r56 = load %oop, %oop* %t4
	%r57 = load %oop, %oop* %t3
	%r61 = ptrtoint %oop %r57 to %word
	%r60 = ptrtoint %oop %r56 to %word
	%r59 = icmp slt %word %r61, %r60
	%r58 = inttoptr i1 %r59 to %oop
	store %oop %r58, %oop* %t7
	%r62 = inttoptr %word 0 to %oop
	%r66 = ptrtoint %oop %r62 to %word
	%r65 = ptrtoint %oop %r58 to %word
	%r64 = icmp eq %word %r66, %r65
	%r63 = inttoptr i1 %r64 to %oop
	%r68 = ptrtoint %oop %r63 to %word
	%r67 = icmp ne %word %r68, 0
	br i1 %r67, label %L10, label %L11
L11:
	%r69 = load %oop, %oop* %t0
	%r70 = load %oop, %oop* %t3
	%r71 = call %oop @m_string-at.code(%oop %r69, %oop %r70)
	%r72 = inttoptr %word 45 to %oop
	%r76 = ptrtoint %oop %r72 to %word
	%r75 = ptrtoint %oop %r71 to %word
	%r74 = icmp eq %word %r76, %r75
	%r73 = inttoptr i1 %r74 to %oop
	store %oop %r73, %oop* %t7
	%r77 = inttoptr %word 0 to %oop
	%r81 = ptrtoint %oop %r77 to %word
	%r80 = ptrtoint %oop %r73 to %word
	%r79 = icmp eq %word %r81, %r80
	%r78 = inttoptr i1 %r79 to %oop
	%r83 = ptrtoint %oop %r78 to %word
	%r82 = icmp ne %word %r83, 0
	br i1 %r82, label %L10, label %L12
L12:
	br label %L10
L10:
	%r84 = load %oop, %oop* %t7
	%r86 = ptrtoint %oop %r84 to %word
	%r85 = icmp ne %word %r86, 0
	br i1 %r85, label %L7, label %L8
L7:
	%r87 = load %oop, %oop* %t5
	%r90 = ptrtoint %oop %r87 to %word
	%r89 = sub nsw %word 0, %r90
	%r88 = inttoptr %word %r89 to %oop
	store %oop %r88, %oop* %t5
	%r91 = inttoptr %word 1 to %oop
	%r92 = load %oop, %oop* %t3
	%r96 = ptrtoint %oop %r92 to %word
	%r95 = ptrtoint %oop %r91 to %word
	%r94 = add %word %r96, %r95
	%r93 = inttoptr %word %r94 to %oop
	store %oop %r93, %oop* %t3
	store %oop %r93, %oop* %t6
	br label %L9
L8:
	%r97 = inttoptr %word 0 to %oop
	store %oop %r97, %oop* %t6
	br label %L9
L9:
	%r98 = load %oop, %oop* %t6
	br label %L14
L13:
	%r99 = load %oop, %oop* %t0
	%r100 = load %oop, %oop* %t3
	%r101 = call %oop @m_string-at.code(%oop %r99, %oop %r100)
	store %oop %r101, %oop* %t6
	%r102 = inttoptr %word 1 to %oop
	store %oop %r102, %oop* %t8
	%r103 = load %oop, %oop* %t6
	%r104 = inttoptr %word 48 to %oop
	%r108 = ptrtoint %oop %r104 to %word
	%r107 = ptrtoint %oop %r103 to %word
	%r106 = icmp sle %word %r108, %r107
	%r105 = inttoptr i1 %r106 to %oop
	store %oop %r105, %oop* %t8
	%r109 = inttoptr %word 0 to %oop
	%r113 = ptrtoint %oop %r109 to %word
	%r112 = ptrtoint %oop %r105 to %word
	%r111 = icmp eq %word %r113, %r112
	%r110 = inttoptr i1 %r111 to %oop
	%r115 = ptrtoint %oop %r110 to %word
	%r114 = icmp ne %word %r115, 0
	br i1 %r114, label %L19, label %L20
L20:
	%r116 = inttoptr %word 57 to %oop
	%r117 = load %oop, %oop* %t6
	%r121 = ptrtoint %oop %r117 to %word
	%r120 = ptrtoint %oop %r116 to %word
	%r119 = icmp sle %word %r121, %r120
	%r118 = inttoptr i1 %r119 to %oop
	store %oop %r118, %oop* %t8
	%r122 = inttoptr %word 0 to %oop
	%r126 = ptrtoint %oop %r122 to %word
	%r125 = ptrtoint %oop %r118 to %word
	%r124 = icmp eq %word %r126, %r125
	%r123 = inttoptr i1 %r124 to %oop
	%r128 = ptrtoint %oop %r123 to %word
	%r127 = icmp ne %word %r128, 0
	br i1 %r127, label %L19, label %L21
L21:
	br label %L19
L19:
	%r129 = load %oop, %oop* %t8
	%r131 = ptrtoint %oop %r129 to %word
	%r130 = icmp ne %word %r131, 0
	br i1 %r130, label %L16, label %L17
L16:
	%r132 = inttoptr %word 48 to %oop
	%r133 = load %oop, %oop* %t6
	%r137 = ptrtoint %oop %r133 to %word
	%r136 = ptrtoint %oop %r132 to %word
	%r135 = sub %word %r137, %r136
	%r134 = inttoptr %word %r135 to %oop
	store %oop %r134, %oop* %t7
	br label %L18
L17:
	%r138 = inttoptr %word 1 to %oop
	store %oop %r138, %oop* %t9
	%r139 = load %oop, %oop* %t6
	%r140 = inttoptr %word 65 to %oop
	%r144 = ptrtoint %oop %r140 to %word
	%r143 = ptrtoint %oop %r139 to %word
	%r142 = icmp sle %word %r144, %r143
	%r141 = inttoptr i1 %r142 to %oop
	store %oop %r141, %oop* %t9
	%r145 = inttoptr %word 0 to %oop
	%r149 = ptrtoint %oop %r145 to %word
	%r148 = ptrtoint %oop %r141 to %word
	%r147 = icmp eq %word %r149, %r148
	%r146 = inttoptr i1 %r147 to %oop
	%r151 = ptrtoint %oop %r146 to %word
	%r150 = icmp ne %word %r151, 0
	br i1 %r150, label %L25, label %L26
L26:
	%r152 = inttoptr %word 90 to %oop
	%r153 = load %oop, %oop* %t6
	%r157 = ptrtoint %oop %r153 to %word
	%r156 = ptrtoint %oop %r152 to %word
	%r155 = icmp sle %word %r157, %r156
	%r154 = inttoptr i1 %r155 to %oop
	store %oop %r154, %oop* %t9
	%r158 = inttoptr %word 0 to %oop
	%r162 = ptrtoint %oop %r158 to %word
	%r161 = ptrtoint %oop %r154 to %word
	%r160 = icmp eq %word %r162, %r161
	%r159 = inttoptr i1 %r160 to %oop
	%r164 = ptrtoint %oop %r159 to %word
	%r163 = icmp ne %word %r164, 0
	br i1 %r163, label %L25, label %L27
L27:
	br label %L25
L25:
	%r165 = load %oop, %oop* %t9
	%r167 = ptrtoint %oop %r165 to %word
	%r166 = icmp ne %word %r167, 0
	br i1 %r166, label %L22, label %L23
L22:
	%r168 = inttoptr %word 65 to %oop
	%r169 = load %oop, %oop* %t6
	%r173 = ptrtoint %oop %r169 to %word
	%r172 = ptrtoint %oop %r168 to %word
	%r171 = sub %word %r173, %r172
	%r170 = inttoptr %word %r171 to %oop
	%r174 = inttoptr %word 10 to %oop
	%r178 = ptrtoint %oop %r174 to %word
	%r177 = ptrtoint %oop %r170 to %word
	%r176 = add %word %r178, %r177
	%r175 = inttoptr %word %r176 to %oop
	store %oop %r175, %oop* %t8
	br label %L24
L23:
	%r179 = inttoptr %word 1 to %oop
	store %oop %r179, %oop* %t10
	%r180 = load %oop, %oop* %t6
	%r181 = inttoptr %word 97 to %oop
	%r185 = ptrtoint %oop %r181 to %word
	%r184 = ptrtoint %oop %r180 to %word
	%r183 = icmp sle %word %r185, %r184
	%r182 = inttoptr i1 %r183 to %oop
	store %oop %r182, %oop* %t10
	%r186 = inttoptr %word 0 to %oop
	%r190 = ptrtoint %oop %r186 to %word
	%r189 = ptrtoint %oop %r182 to %word
	%r188 = icmp eq %word %r190, %r189
	%r187 = inttoptr i1 %r188 to %oop
	%r192 = ptrtoint %oop %r187 to %word
	%r191 = icmp ne %word %r192, 0
	br i1 %r191, label %L31, label %L32
L32:
	%r193 = inttoptr %word 122 to %oop
	%r194 = load %oop, %oop* %t6
	%r198 = ptrtoint %oop %r194 to %word
	%r197 = ptrtoint %oop %r193 to %word
	%r196 = icmp sle %word %r198, %r197
	%r195 = inttoptr i1 %r196 to %oop
	store %oop %r195, %oop* %t10
	%r199 = inttoptr %word 0 to %oop
	%r203 = ptrtoint %oop %r199 to %word
	%r202 = ptrtoint %oop %r195 to %word
	%r201 = icmp eq %word %r203, %r202
	%r200 = inttoptr i1 %r201 to %oop
	%r205 = ptrtoint %oop %r200 to %word
	%r204 = icmp ne %word %r205, 0
	br i1 %r204, label %L31, label %L33
L33:
	br label %L31
L31:
	%r206 = load %oop, %oop* %t10
	%r208 = ptrtoint %oop %r206 to %word
	%r207 = icmp ne %word %r208, 0
	br i1 %r207, label %L28, label %L29
L28:
	%r209 = inttoptr %word 97 to %oop
	%r210 = load %oop, %oop* %t6
	%r214 = ptrtoint %oop %r210 to %word
	%r213 = ptrtoint %oop %r209 to %word
	%r212 = sub %word %r214, %r213
	%r211 = inttoptr %word %r212 to %oop
	%r215 = inttoptr %word 10 to %oop
	%r219 = ptrtoint %oop %r215 to %word
	%r218 = ptrtoint %oop %r211 to %word
	%r217 = add %word %r219, %r218
	%r216 = inttoptr %word %r217 to %oop
	store %oop %r216, %oop* %t9
	br label %L30
L29:
	%r220 = load %oop, %oop* @"m_+end+"
	ret %oop %r220
	store %oop %r220, %oop* %t9
	br label %L30
L30:
	%r222 = load %oop, %oop* %t9
	store %oop %r222, %oop* %t8
	br label %L24
L24:
	%r223 = load %oop, %oop* %t8
	store %oop %r223, %oop* %t7
	br label %L18
L18:
	%r224 = load %oop, %oop* %t7
	store %oop %r224, %oop* %t7
	%r225 = load %oop, %oop* %t1
	%r226 = load %oop, %oop* %t7
	%r230 = ptrtoint %oop %r226 to %word
	%r229 = ptrtoint %oop %r225 to %word
	%r228 = icmp slt %word %r230, %r229
	%r227 = inttoptr i1 %r228 to %oop
	%r232 = ptrtoint %oop %r227 to %word
	%r231 = icmp ne %word %r232, 0
	br i1 %r231, label %L34, label %L35
L34:
	%r233 = inttoptr %word 0 to %oop
	store %oop %r233, %oop* %t8
	br label %L36
L35:
	%r234 = load %oop, %oop* @"m_+end+"
	ret %oop %r234
	store %oop %r234, %oop* %t8
	br label %L36
L36:
	%r236 = load %oop, %oop* %t8
	%r237 = load %oop, %oop* %t7
	%r238 = load %oop, %oop* %t2
	%r239 = load %oop, %oop* %t1
	%r243 = ptrtoint %oop %r239 to %word
	%r242 = ptrtoint %oop %r238 to %word
	%r241 = mul %word %r243, %r242
	%r240 = inttoptr %word %r241 to %oop
	%r247 = ptrtoint %oop %r240 to %word
	%r246 = ptrtoint %oop %r237 to %word
	%r245 = add %word %r247, %r246
	%r244 = inttoptr %word %r245 to %oop
	store %oop %r244, %oop* %t2
	%r248 = inttoptr %word 1 to %oop
	%r249 = load %oop, %oop* %t3
	%r253 = ptrtoint %oop %r249 to %word
	%r252 = ptrtoint %oop %r248 to %word
	%r251 = add %word %r253, %r252
	%r250 = inttoptr %word %r251 to %oop
	store %oop %r250, %oop* %t3
	br label %L14
L14:
	%r254 = load %oop, %oop* %t4
	%r255 = load %oop, %oop* %t3
	%r259 = ptrtoint %oop %r255 to %word
	%r258 = ptrtoint %oop %r254 to %word
	%r257 = icmp slt %word %r259, %r258
	%r256 = inttoptr i1 %r257 to %oop
	%r261 = ptrtoint %oop %r256 to %word
	%r260 = icmp ne %word %r261, 0
	br i1 %r260, label %L13, label %L15
L15:
	%r262 = load %oop, %oop* %t2
	%r263 = load %oop, %oop* %t5
	%r267 = ptrtoint %oop %r263 to %word
	%r266 = ptrtoint %oop %r262 to %word
	%r265 = mul %word %r267, %r266
	%r264 = inttoptr %word %r265 to %oop
	ret %oop %r264
}
@m_cstr739 = private unnamed_addr constant [14 x i8] c"string->long*\00"
@m_ostr740 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr739 to %oop) }
@"m_string->long*" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_string->long*.code" to %oop), %"<string>"* @m_ostr740 }
@m_cstr741 = private unnamed_addr constant [26 x i8] c"string->long: failed for \00"
@m_ostr742 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 51, %oop bitcast ([26 x i8]* @m_cstr741 to %oop) }
define %oop @"m_string->long.code"(%oop %str) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	%t2 = alloca %oop
	store %oop %str, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r2 = inttoptr %word 10 to %oop
	%r3 = call %oop @"m_string->long*.code"(%oop %r1, %oop %r2)
	store %oop %r3, %oop* %t1
	%r4 = load %oop, %oop* @"m_+end+"
	%r5 = load %oop, %oop* %t1
	%r9 = ptrtoint %oop %r5 to %word
	%r8 = ptrtoint %oop %r4 to %word
	%r7 = icmp eq %word %r9, %r8
	%r6 = inttoptr i1 %r7 to %oop
	%r11 = ptrtoint %oop %r6 to %word
	%r10 = icmp ne %word %r11, 0
	br i1 %r10, label %L1, label %L2
L1:
	%r12 = call %oop @m_error-prologue.code()
	%r13 = getelementptr %"<string>", %"<string>"* @m_ostr742, i32 0, i32 1
	%r14 = bitcast %word* %r13 to %oop
	%r15 = call %oop @"m_%error.code"(%oop %r14)
	%r16 = load %oop, %oop* %t0
	%r17 = call %oop @"m_%error.code"(%oop %r16)
	%r18 = call %oop @m_error-epilogue.code()
	store %oop %r18, %oop* %t2
	br label %L3
L2:
	%r19 = inttoptr %word 0 to %oop
	store %oop %r19, %oop* %t2
	br label %L3
L3:
	%r20 = load %oop, %oop* %t2
	%r21 = load %oop, %oop* %t1
	ret %oop %r21
}
@m_cstr743 = private unnamed_addr constant [13 x i8] c"string->long\00"
@m_ostr744 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 25, %oop bitcast ([13 x i8]* @m_cstr743 to %oop) }
@"m_string->long" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @"m_string->long.code" to %oop), %"<string>"* @m_ostr744 }
@m_cstr745 = private unnamed_addr constant [15 x i8] c"string->symbol\00"
@m_ostr746 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr745 to %oop) }
@m_cstr747 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr748 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr747 to %oop) }
@m_cstr749 = private unnamed_addr constant [4 x i8] c"str\00"
@m_ostr750 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr749 to %oop) }
@m_cstr751 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr752 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr751 to %oop) }
@m_cstr753 = private unnamed_addr constant [9 x i8] c"<string>\00"
@m_ostr754 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr753 to %oop) }
@m_cstr755 = private unnamed_addr constant [15 x i8] c"string->symbol\00"
@m_ostr756 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr755 to %oop) }
@m_cstr757 = private unnamed_addr constant [15 x i8] c"string->symbol\00"
@m_ostr758 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr757 to %oop) }
define %oop @"m_string->symbol/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = load %oop, %oop* %t2
	%r4 = call %oop @"m_pair?.code"(%oop %r3)
	%r6 = ptrtoint %oop %r4 to %word
	%r5 = icmp ne %word %r6, 0
	br i1 %r5, label %L1, label %L2
L1:
	%r7 = inttoptr %word 0 to %oop
	%r8 = load %oop, %oop* %t2
	%r12 = bitcast %oop %r8 to [0 x %oop]*
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = getelementptr [0 x %oop], [0 x %oop]* %r12, %word 0, %word %r11
	%r9 = load %oop, %oop* %r10
	store %oop %r9, %oop* %t3
	%r13 = inttoptr %word 0 to %oop
	store %oop %r13, %oop* %t5
	%r14 = load %oop, %oop* %t3
	%r15 = call %oop @"m_string?.code"(%oop %r14)
	store %oop %r15, %oop* %t5
	%r16 = inttoptr %word 0 to %oop
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = icmp eq %word %r20, %r19
	%r17 = inttoptr i1 %r18 to %oop
	%r22 = ptrtoint %oop %r17 to %word
	%r21 = icmp ne %word %r22, 0
	br i1 %r21, label %L5, label %L4
L5:
	%r23 = call %oop @m_error-prologue.code()
	%r24 = getelementptr %"<string>", %"<string>"* @m_ostr746, i32 0, i32 1
	%r25 = bitcast %word* %r24 to %oop
	%r26 = call %oop @"m_%error.code"(%oop %r25)
	%r27 = getelementptr %"<string>", %"<string>"* @m_ostr748, i32 0, i32 1
	%r28 = bitcast %word* %r27 to %oop
	%r29 = call %oop @"m_%error.code"(%oop %r28)
	%r30 = getelementptr %"<string>", %"<string>"* @m_ostr750, i32 0, i32 1
	%r31 = bitcast %word* %r30 to %oop
	%r32 = call %oop @"m_%error.code"(%oop %r31)
	%r33 = getelementptr %"<string>", %"<string>"* @m_ostr752, i32 0, i32 1
	%r34 = bitcast %word* %r33 to %oop
	%r35 = call %oop @"m_%error.code"(%oop %r34)
	%r36 = getelementptr %"<string>", %"<string>"* @m_ostr754, i32 0, i32 1
	%r37 = bitcast %word* %r36 to %oop
	%r38 = call %oop @"m_%error.code"(%oop %r37)
	%r39 = call %oop @m_error-epilogue.code()
	store %oop %r39, %oop* %t5
	%r40 = inttoptr %word 0 to %oop
	%r44 = ptrtoint %oop %r40 to %word
	%r43 = ptrtoint %oop %r39 to %word
	%r42 = icmp eq %word %r44, %r43
	%r41 = inttoptr i1 %r42 to %oop
	%r46 = ptrtoint %oop %r41 to %word
	%r45 = icmp ne %word %r46, 0
	br i1 %r45, label %L6, label %L4
L6:
	br label %L4
L4:
	%r47 = load %oop, %oop* %t5
	%r48 = inttoptr %word 1 to %oop
	%r49 = load %oop, %oop* %t2
	%r53 = bitcast %oop %r49 to [0 x %oop]*
	%r52 = ptrtoint %oop %r48 to %word
	%r51 = getelementptr [0 x %oop], [0 x %oop]* %r53, %word 0, %word %r52
	%r50 = load %oop, %oop* %r51
	store %oop %r50, %oop* %t2
	store %oop %r50, %oop* %t4
	br label %L3
L2:
	%r54 = getelementptr %"<string>", %"<string>"* @m_ostr756, i32 0, i32 1
	%r55 = bitcast %word* %r54 to %oop
	%r56 = load %oop, %oop* %t0
	%r57 = call %oop @"m_%not-enough-arguments.code"(%oop %r55, %oop %r56)
	store %oop %r57, %oop* %t4
	br label %L3
L3:
	%r58 = load %oop, %oop* %t4
	%r59 = load %oop, %oop* %t2
	%r61 = ptrtoint %oop %r59 to %word
	%r60 = icmp ne %word %r61, 0
	br i1 %r60, label %L7, label %L8
L7:
	%r62 = getelementptr %"<string>", %"<string>"* @m_ostr758, i32 0, i32 1
	%r63 = bitcast %word* %r62 to %oop
	%r64 = load %oop, %oop* %t0
	%r65 = call %oop @"m_%too-many-arguments.code"(%oop %r63, %oop %r64)
	store %oop %r65, %oop* %t4
	br label %L9
L8:
	%r66 = inttoptr %word 0 to %oop
	store %oop %r66, %oop* %t4
	br label %L9
L9:
	%r67 = load %oop, %oop* %t4
	%r68 = load %oop, %oop* %t3
	%r69 = call %oop @"m_string->symbol.code"(%oop %r68)
	ret %oop %r69
}
@m_cstr759 = private unnamed_addr constant [30 x i8] c"string->symbol/evaluator-stub\00"
@m_ostr760 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 59, %oop bitcast ([30 x i8]* @m_cstr759 to %oop) }
@"m_string->symbol/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_string->symbol/evaluator-stub.code" to %oop), %"<string>"* @m_ostr760 }
define %oop @"m_symbol->string.code"(%oop %symbol) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	store %oop %symbol, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @"m_string?.code"(%oop %r1)
	%r4 = ptrtoint %oop %r2 to %word
	%r3 = icmp ne %word %r4, 0
	br i1 %r3, label %L1, label %L2
L1:
	%r5 = load %oop, %oop* %t0
	store %oop %r5, %oop* %t1
	br label %L3
L2:
	%r6 = inttoptr %word 0 to %oop
	%r7 = load %oop, %oop* %t0
	%r11 = bitcast %oop %r7 to [0 x %oop]*
	%r10 = ptrtoint %oop %r6 to %word
	%r9 = getelementptr [0 x %oop], [0 x %oop]* %r11, %word 0, %word %r10
	%r8 = load %oop, %oop* %r9
	store %oop %r8, %oop* %t1
	br label %L3
L3:
	%r12 = load %oop, %oop* %t1
	ret %oop %r12
}
@m_cstr761 = private unnamed_addr constant [15 x i8] c"symbol->string\00"
@m_ostr762 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr761 to %oop) }
@"m_symbol->string" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @"m_symbol->string.code" to %oop), %"<string>"* @m_ostr762 }
@m_cstr763 = private unnamed_addr constant [15 x i8] c"symbol->string\00"
@m_ostr764 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr763 to %oop) }
@m_cstr765 = private unnamed_addr constant [15 x i8] c"symbol->string\00"
@m_ostr766 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr765 to %oop) }
define %oop @"m_symbol->string/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = load %oop, %oop* %t2
	%r4 = call %oop @"m_pair?.code"(%oop %r3)
	%r6 = ptrtoint %oop %r4 to %word
	%r5 = icmp ne %word %r6, 0
	br i1 %r5, label %L1, label %L2
L1:
	%r7 = inttoptr %word 0 to %oop
	%r8 = load %oop, %oop* %t2
	%r12 = bitcast %oop %r8 to [0 x %oop]*
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = getelementptr [0 x %oop], [0 x %oop]* %r12, %word 0, %word %r11
	%r9 = load %oop, %oop* %r10
	store %oop %r9, %oop* %t3
	%r13 = inttoptr %word 1 to %oop
	%r14 = load %oop, %oop* %t2
	%r18 = bitcast %oop %r14 to [0 x %oop]*
	%r17 = ptrtoint %oop %r13 to %word
	%r16 = getelementptr [0 x %oop], [0 x %oop]* %r18, %word 0, %word %r17
	%r15 = load %oop, %oop* %r16
	store %oop %r15, %oop* %t2
	store %oop %r15, %oop* %t4
	br label %L3
L2:
	%r19 = getelementptr %"<string>", %"<string>"* @m_ostr764, i32 0, i32 1
	%r20 = bitcast %word* %r19 to %oop
	%r21 = load %oop, %oop* %t0
	%r22 = call %oop @"m_%not-enough-arguments.code"(%oop %r20, %oop %r21)
	store %oop %r22, %oop* %t4
	br label %L3
L3:
	%r23 = load %oop, %oop* %t4
	%r24 = load %oop, %oop* %t2
	%r26 = ptrtoint %oop %r24 to %word
	%r25 = icmp ne %word %r26, 0
	br i1 %r25, label %L4, label %L5
L4:
	%r27 = getelementptr %"<string>", %"<string>"* @m_ostr766, i32 0, i32 1
	%r28 = bitcast %word* %r27 to %oop
	%r29 = load %oop, %oop* %t0
	%r30 = call %oop @"m_%too-many-arguments.code"(%oop %r28, %oop %r29)
	store %oop %r30, %oop* %t4
	br label %L6
L5:
	%r31 = inttoptr %word 0 to %oop
	store %oop %r31, %oop* %t4
	br label %L6
L6:
	%r32 = load %oop, %oop* %t4
	%r33 = load %oop, %oop* %t3
	%r34 = call %oop @"m_symbol->string.code"(%oop %r33)
	ret %oop %r34
}
@m_cstr767 = private unnamed_addr constant [30 x i8] c"symbol->string/evaluator-stub\00"
@m_ostr768 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 59, %oop bitcast ([30 x i8]* @m_cstr767 to %oop) }
@"m_symbol->string/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_symbol->string/evaluator-stub.code" to %oop), %"<string>"* @m_ostr768 }
@m_cstr769 = private unnamed_addr constant [68 x i8] c"module-env called while the module's globals slot is not an <env>; \00"
@m_ostr770 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 135, %oop bitcast ([68 x i8]* @m_cstr769 to %oop) }
@m_cstr771 = private unnamed_addr constant [3 x i8] c", \00"
@m_ostr772 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 5, %oop bitcast ([3 x i8]* @m_cstr771 to %oop) }
define %oop @m_module-env.code(%oop %module) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	%t2 = alloca %oop
	store %oop %module, %oop* %t0
	%r1 = inttoptr %word 0 to %oop
	%r2 = load %oop, %oop* %t0
	%r6 = bitcast %oop %r2 to [0 x %oop]*
	%r5 = ptrtoint %oop %r1 to %word
	%r4 = getelementptr [0 x %oop], [0 x %oop]* %r6, %word 0, %word %r5
	%r3 = load %oop, %oop* %r4
	store %oop %r3, %oop* %t1
	%r7 = inttoptr %word 0 to %oop
	store %oop %r7, %oop* %t2
	%r8 = load %oop, %oop* %t1
	%r9 = call %oop @m_type-of.code(%oop %r8)
	%r10 = inttoptr %word 17 to %oop
	%r14 = ptrtoint %oop %r10 to %word
	%r13 = ptrtoint %oop %r9 to %word
	%r12 = icmp eq %word %r14, %r13
	%r11 = inttoptr i1 %r12 to %oop
	store %oop %r11, %oop* %t2
	%r15 = inttoptr %word 0 to %oop
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = ptrtoint %oop %r11 to %word
	%r17 = icmp eq %word %r19, %r18
	%r16 = inttoptr i1 %r17 to %oop
	%r21 = ptrtoint %oop %r16 to %word
	%r20 = icmp ne %word %r21, 0
	br i1 %r20, label %L2, label %L1
L2:
	%r22 = call %oop @m_error-prologue.code()
	%r23 = getelementptr %"<string>", %"<string>"* @m_ostr770, i32 0, i32 1
	%r24 = bitcast %word* %r23 to %oop
	%r25 = call %oop @"m_%error.code"(%oop %r24)
	%r26 = load %oop, %oop* %t0
	%r27 = call %oop @"m_%error.code"(%oop %r26)
	%r28 = getelementptr %"<string>", %"<string>"* @m_ostr772, i32 0, i32 1
	%r29 = bitcast %word* %r28 to %oop
	%r30 = call %oop @"m_%error.code"(%oop %r29)
	%r31 = load %oop, %oop* %t1
	%r32 = call %oop @"m_%error.code"(%oop %r31)
	%r33 = call %oop @m_error-epilogue.code()
	store %oop %r33, %oop* %t2
	%r34 = inttoptr %word 0 to %oop
	%r38 = ptrtoint %oop %r34 to %word
	%r37 = ptrtoint %oop %r33 to %word
	%r36 = icmp eq %word %r38, %r37
	%r35 = inttoptr i1 %r36 to %oop
	%r40 = ptrtoint %oop %r35 to %word
	%r39 = icmp ne %word %r40, 0
	br i1 %r39, label %L3, label %L1
L3:
	br label %L1
L1:
	%r41 = load %oop, %oop* %t2
	%r42 = load %oop, %oop* %t1
	ret %oop %r42
}
@m_cstr773 = private unnamed_addr constant [11 x i8] c"module-env\00"
@m_ostr774 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr773 to %oop) }
@m_module-env = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_module-env.code to %oop), %"<string>"* @m_ostr774 }
define %oop @m_copy-module-bindings.code(%oop %from, %oop %to, %oop %filter) {
	%t2 = alloca %oop
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	%t8 = alloca %oop
	%t7 = alloca %oop
	%t9 = alloca %oop
	%t10 = alloca %oop
	%t11 = alloca %oop
	%t12 = alloca %oop
	%t13 = alloca %oop
	store %oop %from, %oop* %t0
	store %oop %to, %oop* %t1
	store %oop %filter, %oop* %t2
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @m_module-env.code(%oop %r1)
	store %oop %r2, %oop* %t3
	%r3 = load %oop, %oop* %t1
	%r4 = call %oop @m_module-env.code(%oop %r3)
	store %oop %r4, %oop* %t4
	%r5 = inttoptr %word 3 to %oop
	%r6 = load %oop, %oop* %t3
	%r10 = bitcast %oop %r6 to [0 x %oop]*
	%r9 = ptrtoint %oop %r5 to %word
	%r8 = getelementptr [0 x %oop], [0 x %oop]* %r10, %word 0, %word %r9
	%r7 = load %oop, %oop* %r8
	store %oop %r7, %oop* %t5
	%r11 = load %oop, %oop* %t5
	%r12 = call %oop @m_array-length.code(%oop %r11)
	store %oop %r12, %oop* %t6
	%r13 = inttoptr %word 0 to %oop
	store %oop %r13, %oop* %t7
	%r14 = load %oop, %oop* %t6
	store %oop %r14, %oop* %t8
	br label %L2
L1:
	%r15 = load %oop, %oop* %t5
	%r16 = load %oop, %oop* %t7
	%r17 = call %oop @m_array-at.code(%oop %r15, %oop %r16)
	store %oop %r17, %oop* %t9
	%r18 = inttoptr %word 0 to %oop
	%r19 = load %oop, %oop* %t9
	%r23 = bitcast %oop %r19 to [0 x %oop]*
	%r22 = ptrtoint %oop %r18 to %word
	%r21 = getelementptr [0 x %oop], [0 x %oop]* %r23, %word 0, %word %r22
	%r20 = load %oop, %oop* %r21
	store %oop %r20, %oop* %t10
	%r24 = inttoptr %word 1 to %oop
	%r25 = load %oop, %oop* %t9
	%r29 = bitcast %oop %r25 to [0 x %oop]*
	%r28 = ptrtoint %oop %r24 to %word
	%r27 = getelementptr [0 x %oop], [0 x %oop]* %r29, %word 0, %word %r28
	%r26 = load %oop, %oop* %r27
	store %oop %r26, %oop* %t11
	%r30 = inttoptr %word 0 to %oop
	store %oop %r30, %oop* %t13
	%r31 = load %oop, %oop* %t2
	%r35 = ptrtoint %oop %r31 to %word
	%r34 = icmp eq %word %r35, 0
	%r33 = zext i1 %r34 to %word
	%r32 = inttoptr %word %r33 to %oop
	store %oop %r32, %oop* %t13
	%r36 = inttoptr %word 0 to %oop
	%r40 = ptrtoint %oop %r36 to %word
	%r39 = ptrtoint %oop %r32 to %word
	%r38 = icmp eq %word %r40, %r39
	%r37 = inttoptr i1 %r38 to %oop
	%r42 = ptrtoint %oop %r37 to %word
	%r41 = icmp ne %word %r42, 0
	br i1 %r41, label %L8, label %L7
L8:
	%r43 = load %oop, %oop* %t10
	%r44 = load %oop, %oop* %t11
	%r45 = load %oop, %oop* %t2
	%r46 = bitcast %oop %r45 to %"<target-function>"*
	%r47 = getelementptr %"<target-function>", %"<target-function>"* %r46, i32 0, i32 1
	%r48 = load %oop, %oop* %r47
	%r50 = bitcast %oop %r48 to %oop (%oop, %oop)*
	%r49 = call %oop %r50(%oop %r43, %oop %r44)
	store %oop %r49, %oop* %t13
	%r51 = inttoptr %word 0 to %oop
	%r55 = ptrtoint %oop %r51 to %word
	%r54 = ptrtoint %oop %r49 to %word
	%r53 = icmp eq %word %r55, %r54
	%r52 = inttoptr i1 %r53 to %oop
	%r57 = ptrtoint %oop %r52 to %word
	%r56 = icmp ne %word %r57, 0
	br i1 %r56, label %L9, label %L7
L9:
	br label %L7
L7:
	%r58 = load %oop, %oop* %t13
	%r60 = ptrtoint %oop %r58 to %word
	%r59 = icmp ne %word %r60, 0
	br i1 %r59, label %L4, label %L5
L4:
	%r61 = load %oop, %oop* %t4
	%r62 = load %oop, %oop* %t10
	%r63 = load %oop, %oop* %t11
	%r64 = call %oop @m_environment-define.code(%oop %r61, %oop %r62, %oop %r63)
	store %oop %r64, %oop* %t12
	br label %L6
L5:
	%r65 = inttoptr %word 0 to %oop
	store %oop %r65, %oop* %t12
	br label %L6
L6:
	%r66 = load %oop, %oop* %t12
	%r67 = inttoptr %word 1 to %oop
	%r68 = load %oop, %oop* %t7
	%r72 = ptrtoint %oop %r68 to %word
	%r71 = ptrtoint %oop %r67 to %word
	%r70 = add %word %r72, %r71
	%r69 = inttoptr %word %r70 to %oop
	store %oop %r69, %oop* %t7
	br label %L2
L2:
	%r73 = load %oop, %oop* %t8
	%r74 = load %oop, %oop* %t7
	%r78 = ptrtoint %oop %r74 to %word
	%r77 = ptrtoint %oop %r73 to %word
	%r76 = icmp eq %word %r78, %r77
	%r75 = inttoptr i1 %r76 to %oop
	%r82 = ptrtoint %oop %r75 to %word
	%r81 = icmp eq %word %r82, 0
	%r80 = zext i1 %r81 to %word
	%r79 = inttoptr %word %r80 to %oop
	%r84 = ptrtoint %oop %r79 to %word
	%r83 = icmp ne %word %r84, 0
	br i1 %r83, label %L1, label %L3
L3:
	%r85 = inttoptr %word 0 to %oop
	ret %oop %r85
}
@m_cstr775 = private unnamed_addr constant [21 x i8] c"copy-module-bindings\00"
@m_ostr776 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 41, %oop bitcast ([21 x i8]* @m_cstr775 to %oop) }
@m_copy-module-bindings = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop, %oop)* @m_copy-module-bindings.code to %oop), %"<string>"* @m_ostr776 }
define %oop @m_find-local-variable.code(%oop %env, %oop %name) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	store %oop %env, %oop* %t0
	store %oop %name, %oop* %t1
	%r1 = inttoptr %word 0 to %oop
	%r2 = inttoptr %word 0 to %oop
	%r3 = inttoptr %word 3 to %oop
	%r4 = load %oop, %oop* %t0
	%r8 = bitcast %oop %r4 to [0 x %oop]*
	%r7 = ptrtoint %oop %r3 to %word
	%r6 = getelementptr [0 x %oop], [0 x %oop]* %r8, %word 0, %word %r7
	%r5 = load %oop, %oop* %r6
	store %oop %r5, %oop* %t2
	%r9 = load %oop, %oop* %t2
	%r10 = call %oop @m_array-length.code(%oop %r9)
	store %oop %r10, %oop* %t3
	%r11 = inttoptr %word 0 to %oop
	store %oop %r11, %oop* %t4
	%r12 = inttoptr %word 1 to %oop
	%r13 = load %oop, %oop* %t2
	%r17 = bitcast %oop %r13 to [0 x %oop]*
	%r16 = ptrtoint %oop %r12 to %word
	%r15 = getelementptr [0 x %oop], [0 x %oop]* %r17, %word 0, %word %r16
	%r14 = load %oop, %oop* %r15
	store %oop %r14, %oop* %t5
	br label %L2
L1:
	%r18 = load %oop, %oop* %t3
	%r19 = load %oop, %oop* %t5
	%r23 = bitcast %oop %r19 to [0 x %oop]*
	%r22 = ptrtoint %oop %r18 to %word
	%r21 = getelementptr [0 x %oop], [0 x %oop]* %r23, %word 0, %word %r22
	%r20 = load %oop, %oop* %r21
	store %oop %r20, %oop* %t6
	%r24 = inttoptr %word 1 to %oop
	store %oop %r24, %oop* %t7
	%r25 = inttoptr %word 0 to %oop
	%r26 = load %oop, %oop* %t6
	%r30 = bitcast %oop %r26 to [0 x %oop]*
	%r29 = ptrtoint %oop %r25 to %word
	%r28 = getelementptr [0 x %oop], [0 x %oop]* %r30, %word 0, %word %r29
	%r27 = load %oop, %oop* %r28
	%r31 = load %oop, %oop* %t1
	%r35 = ptrtoint %oop %r31 to %word
	%r34 = ptrtoint %oop %r27 to %word
	%r33 = icmp eq %word %r35, %r34
	%r32 = inttoptr i1 %r33 to %oop
	store %oop %r32, %oop* %t7
	%r36 = inttoptr %word 0 to %oop
	%r40 = ptrtoint %oop %r36 to %word
	%r39 = ptrtoint %oop %r32 to %word
	%r38 = icmp eq %word %r40, %r39
	%r37 = inttoptr i1 %r38 to %oop
	%r42 = ptrtoint %oop %r37 to %word
	%r41 = icmp ne %word %r42, 0
	br i1 %r41, label %L4, label %L5
L5:
	%r43 = load %oop, %oop* %t6
	store %oop %r43, %oop* %t7
	%r44 = inttoptr %word 0 to %oop
	%r48 = ptrtoint %oop %r44 to %word
	%r47 = ptrtoint %oop %r43 to %word
	%r46 = icmp eq %word %r48, %r47
	%r45 = inttoptr i1 %r46 to %oop
	%r50 = ptrtoint %oop %r45 to %word
	%r49 = icmp ne %word %r50, 0
	br i1 %r49, label %L4, label %L6
L6:
	br label %L4
L4:
	%r51 = load %oop, %oop* %t7
	store %oop %r51, %oop* %t4
	br label %L2
L2:
	%r52 = inttoptr %word 1 to %oop
	store %oop %r52, %oop* %t6
	%r53 = load %oop, %oop* %t4
	%r57 = ptrtoint %oop %r53 to %word
	%r56 = icmp eq %word %r57, 0
	%r55 = zext i1 %r56 to %word
	%r54 = inttoptr %word %r55 to %oop
	store %oop %r54, %oop* %t6
	%r58 = inttoptr %word 0 to %oop
	%r62 = ptrtoint %oop %r58 to %word
	%r61 = ptrtoint %oop %r54 to %word
	%r60 = icmp eq %word %r62, %r61
	%r59 = inttoptr i1 %r60 to %oop
	%r64 = ptrtoint %oop %r59 to %word
	%r63 = icmp ne %word %r64, 0
	br i1 %r63, label %L7, label %L8
L8:
	%r65 = inttoptr %word 1 to %oop
	%r66 = load %oop, %oop* %t3
	%r70 = ptrtoint %oop %r66 to %word
	%r69 = ptrtoint %oop %r65 to %word
	%r68 = sub %word %r70, %r69
	%r67 = inttoptr %word %r68 to %oop
	store %oop %r67, %oop* %t3
	%r71 = inttoptr %word 0 to %oop
	%r75 = ptrtoint %oop %r71 to %word
	%r74 = ptrtoint %oop %r67 to %word
	%r73 = icmp sle %word %r75, %r74
	%r72 = inttoptr i1 %r73 to %oop
	store %oop %r72, %oop* %t6
	%r76 = inttoptr %word 0 to %oop
	%r80 = ptrtoint %oop %r76 to %word
	%r79 = ptrtoint %oop %r72 to %word
	%r78 = icmp eq %word %r80, %r79
	%r77 = inttoptr i1 %r78 to %oop
	%r82 = ptrtoint %oop %r77 to %word
	%r81 = icmp ne %word %r82, 0
	br i1 %r81, label %L7, label %L9
L9:
	br label %L7
L7:
	%r83 = load %oop, %oop* %t6
	%r85 = ptrtoint %oop %r83 to %word
	%r84 = icmp ne %word %r85, 0
	br i1 %r84, label %L1, label %L3
L3:
	%r86 = load %oop, %oop* %t4
	ret %oop %r86
}
@m_cstr777 = private unnamed_addr constant [20 x i8] c"find-local-variable\00"
@m_ostr778 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 39, %oop bitcast ([20 x i8]* @m_cstr777 to %oop) }
@m_find-local-variable = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @m_find-local-variable.code to %oop), %"<string>"* @m_ostr778 }
@m_cstr779 = private unnamed_addr constant [9 x i8] c"defined?\00"
@m_ostr780 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr779 to %oop) }
@m_cstr781 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr782 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr781 to %oop) }
@m_cstr783 = private unnamed_addr constant [5 x i8] c"name\00"
@m_ostr784 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr783 to %oop) }
@m_cstr785 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr786 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr785 to %oop) }
@m_cstr787 = private unnamed_addr constant [9 x i8] c"<symbol>\00"
@m_ostr788 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr787 to %oop) }
@m_cstr789 = private unnamed_addr constant [9 x i8] c"defined?\00"
@m_ostr790 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr789 to %oop) }
@m_cstr791 = private unnamed_addr constant [9 x i8] c"defined?\00"
@m_ostr792 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr791 to %oop) }
@m_cstr793 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr794 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr793 to %oop) }
@m_cstr795 = private unnamed_addr constant [4 x i8] c"env\00"
@m_ostr796 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr795 to %oop) }
@m_cstr797 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr798 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr797 to %oop) }
@m_cstr799 = private unnamed_addr constant [6 x i8] c"<env>\00"
@m_ostr800 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr799 to %oop) }
@m_cstr801 = private unnamed_addr constant [9 x i8] c"defined?\00"
@m_ostr802 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr801 to %oop) }
define %oop @"m_defined?/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = load %oop, %oop* %t2
	%r5 = call %oop @"m_pair?.code"(%oop %r4)
	%r7 = ptrtoint %oop %r5 to %word
	%r6 = icmp ne %word %r7, 0
	br i1 %r6, label %L1, label %L2
L1:
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t2
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	%r10 = load %oop, %oop* %r11
	store %oop %r10, %oop* %t3
	%r14 = inttoptr %word 0 to %oop
	store %oop %r14, %oop* %t6
	%r15 = load %oop, %oop* %t3
	%r16 = call %oop @"m_symbol?.code"(%oop %r15)
	store %oop %r16, %oop* %t6
	%r17 = inttoptr %word 0 to %oop
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = icmp eq %word %r21, %r20
	%r18 = inttoptr i1 %r19 to %oop
	%r23 = ptrtoint %oop %r18 to %word
	%r22 = icmp ne %word %r23, 0
	br i1 %r22, label %L5, label %L4
L5:
	%r24 = call %oop @m_error-prologue.code()
	%r25 = getelementptr %"<string>", %"<string>"* @m_ostr780, i32 0, i32 1
	%r26 = bitcast %word* %r25 to %oop
	%r27 = call %oop @"m_%error.code"(%oop %r26)
	%r28 = getelementptr %"<string>", %"<string>"* @m_ostr782, i32 0, i32 1
	%r29 = bitcast %word* %r28 to %oop
	%r30 = call %oop @"m_%error.code"(%oop %r29)
	%r31 = getelementptr %"<string>", %"<string>"* @m_ostr784, i32 0, i32 1
	%r32 = bitcast %word* %r31 to %oop
	%r33 = call %oop @"m_%error.code"(%oop %r32)
	%r34 = getelementptr %"<string>", %"<string>"* @m_ostr786, i32 0, i32 1
	%r35 = bitcast %word* %r34 to %oop
	%r36 = call %oop @"m_%error.code"(%oop %r35)
	%r37 = getelementptr %"<string>", %"<string>"* @m_ostr788, i32 0, i32 1
	%r38 = bitcast %word* %r37 to %oop
	%r39 = call %oop @"m_%error.code"(%oop %r38)
	%r40 = call %oop @m_error-epilogue.code()
	store %oop %r40, %oop* %t6
	%r41 = inttoptr %word 0 to %oop
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = ptrtoint %oop %r40 to %word
	%r43 = icmp eq %word %r45, %r44
	%r42 = inttoptr i1 %r43 to %oop
	%r47 = ptrtoint %oop %r42 to %word
	%r46 = icmp ne %word %r47, 0
	br i1 %r46, label %L6, label %L4
L6:
	br label %L4
L4:
	%r48 = load %oop, %oop* %t6
	%r49 = inttoptr %word 1 to %oop
	%r50 = load %oop, %oop* %t2
	%r54 = bitcast %oop %r50 to [0 x %oop]*
	%r53 = ptrtoint %oop %r49 to %word
	%r52 = getelementptr [0 x %oop], [0 x %oop]* %r54, %word 0, %word %r53
	%r51 = load %oop, %oop* %r52
	store %oop %r51, %oop* %t2
	store %oop %r51, %oop* %t5
	br label %L3
L2:
	%r55 = getelementptr %"<string>", %"<string>"* @m_ostr790, i32 0, i32 1
	%r56 = bitcast %word* %r55 to %oop
	%r57 = load %oop, %oop* %t0
	%r58 = call %oop @"m_%not-enough-arguments.code"(%oop %r56, %oop %r57)
	store %oop %r58, %oop* %t5
	br label %L3
L3:
	%r59 = load %oop, %oop* %t5
	%r60 = load %oop, %oop* %t2
	%r61 = call %oop @"m_pair?.code"(%oop %r60)
	%r63 = ptrtoint %oop %r61 to %word
	%r62 = icmp ne %word %r63, 0
	br i1 %r62, label %L7, label %L8
L7:
	%r64 = inttoptr %word 0 to %oop
	%r65 = load %oop, %oop* %t2
	%r69 = bitcast %oop %r65 to [0 x %oop]*
	%r68 = ptrtoint %oop %r64 to %word
	%r67 = getelementptr [0 x %oop], [0 x %oop]* %r69, %word 0, %word %r68
	%r66 = load %oop, %oop* %r67
	store %oop %r66, %oop* %t4
	%r70 = inttoptr %word 0 to %oop
	store %oop %r70, %oop* %t6
	%r71 = load %oop, %oop* %t4
	%r72 = call %oop @m_type-of.code(%oop %r71)
	%r73 = inttoptr %word 17 to %oop
	%r77 = ptrtoint %oop %r73 to %word
	%r76 = ptrtoint %oop %r72 to %word
	%r75 = icmp eq %word %r77, %r76
	%r74 = inttoptr i1 %r75 to %oop
	store %oop %r74, %oop* %t6
	%r78 = inttoptr %word 0 to %oop
	%r82 = ptrtoint %oop %r78 to %word
	%r81 = ptrtoint %oop %r74 to %word
	%r80 = icmp eq %word %r82, %r81
	%r79 = inttoptr i1 %r80 to %oop
	%r84 = ptrtoint %oop %r79 to %word
	%r83 = icmp ne %word %r84, 0
	br i1 %r83, label %L11, label %L10
L11:
	%r85 = call %oop @m_error-prologue.code()
	%r86 = getelementptr %"<string>", %"<string>"* @m_ostr792, i32 0, i32 1
	%r87 = bitcast %word* %r86 to %oop
	%r88 = call %oop @"m_%error.code"(%oop %r87)
	%r89 = getelementptr %"<string>", %"<string>"* @m_ostr794, i32 0, i32 1
	%r90 = bitcast %word* %r89 to %oop
	%r91 = call %oop @"m_%error.code"(%oop %r90)
	%r92 = getelementptr %"<string>", %"<string>"* @m_ostr796, i32 0, i32 1
	%r93 = bitcast %word* %r92 to %oop
	%r94 = call %oop @"m_%error.code"(%oop %r93)
	%r95 = getelementptr %"<string>", %"<string>"* @m_ostr798, i32 0, i32 1
	%r96 = bitcast %word* %r95 to %oop
	%r97 = call %oop @"m_%error.code"(%oop %r96)
	%r98 = getelementptr %"<string>", %"<string>"* @m_ostr800, i32 0, i32 1
	%r99 = bitcast %word* %r98 to %oop
	%r100 = call %oop @"m_%error.code"(%oop %r99)
	%r101 = call %oop @m_error-epilogue.code()
	store %oop %r101, %oop* %t6
	%r102 = inttoptr %word 0 to %oop
	%r106 = ptrtoint %oop %r102 to %word
	%r105 = ptrtoint %oop %r101 to %word
	%r104 = icmp eq %word %r106, %r105
	%r103 = inttoptr i1 %r104 to %oop
	%r108 = ptrtoint %oop %r103 to %word
	%r107 = icmp ne %word %r108, 0
	br i1 %r107, label %L12, label %L10
L12:
	br label %L10
L10:
	%r109 = load %oop, %oop* %t6
	%r110 = inttoptr %word 1 to %oop
	%r111 = load %oop, %oop* %t2
	%r115 = bitcast %oop %r111 to [0 x %oop]*
	%r114 = ptrtoint %oop %r110 to %word
	%r113 = getelementptr [0 x %oop], [0 x %oop]* %r115, %word 0, %word %r114
	%r112 = load %oop, %oop* %r113
	store %oop %r112, %oop* %t2
	store %oop %r112, %oop* %t5
	br label %L9
L8:
	%r116 = load %oop, %oop* @"m_*module*"
	%r117 = call %oop @m_module-env.code(%oop %r116)
	store %oop %r117, %oop* %t4
	store %oop %r117, %oop* %t5
	br label %L9
L9:
	%r118 = load %oop, %oop* %t5
	%r119 = load %oop, %oop* %t2
	%r121 = ptrtoint %oop %r119 to %word
	%r120 = icmp ne %word %r121, 0
	br i1 %r120, label %L13, label %L14
L13:
	%r122 = getelementptr %"<string>", %"<string>"* @m_ostr802, i32 0, i32 1
	%r123 = bitcast %word* %r122 to %oop
	%r124 = load %oop, %oop* %t0
	%r125 = call %oop @"m_%too-many-arguments.code"(%oop %r123, %oop %r124)
	store %oop %r125, %oop* %t5
	br label %L15
L14:
	%r126 = inttoptr %word 0 to %oop
	store %oop %r126, %oop* %t5
	br label %L15
L15:
	%r127 = load %oop, %oop* %t5
	%r128 = load %oop, %oop* %t3
	%r129 = load %oop, %oop* %t4
	%r130 = call %oop @"m_defined?.code"(%oop %r128, %oop %r129)
	ret %oop %r130
}
@m_cstr803 = private unnamed_addr constant [24 x i8] c"defined?/evaluator-stub\00"
@m_ostr804 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 47, %oop bitcast ([24 x i8]* @m_cstr803 to %oop) }
@"m_defined?/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_defined?/evaluator-stub.code" to %oop), %"<string>"* @m_ostr804 }
define %oop @m_new-variable.code(%oop %env, %oop %name) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	store %oop %env, %oop* %t0
	store %oop %name, %oop* %t1
	%r1 = inttoptr %word 0 to %oop
	%r2 = inttoptr %word 0 to %oop
	%r3 = inttoptr %word 0 to %oop
	%r4 = inttoptr %word 1 to %oop
	%r5 = inttoptr %word 2 to %oop
	%r6 = load %oop, %oop* %t0
	%r10 = bitcast %oop %r6 to [0 x %oop]*
	%r9 = ptrtoint %oop %r5 to %word
	%r8 = getelementptr [0 x %oop], [0 x %oop]* %r10, %word 0, %word %r9
	%r7 = load %oop, %oop* %r8
	%r14 = ptrtoint %oop %r7 to %word
	%r13 = ptrtoint %oop %r4 to %word
	%r12 = ashr %word %r14, %r13
	%r11 = inttoptr %word %r12 to %oop
	store %oop %r11, %oop* %t2
	%r15 = load %oop, %oop* %t1
	%r16 = inttoptr %word 0 to %oop
	%r17 = load %oop, %oop* %t0
	%r18 = load %oop, %oop* %t2
	%r19 = call %oop @m_variable.code(%oop %r15, %oop %r16, %oop %r17, %oop %r18)
	store %oop %r19, %oop* %t3
	%r21 = getelementptr %oop, %oop* %t3, %word 0
	%r20 = bitcast %oop* %r21 to %oop
	%r22 = call %oop @"m_gc/push-root.code"(%oop %r20)
	%r23 = inttoptr %word 1 to %oop
	%r24 = inttoptr %word 1 to %oop
	%r25 = inttoptr %word 1 to %oop
	%r26 = load %oop, %oop* %t2
	%r30 = ptrtoint %oop %r26 to %word
	%r29 = ptrtoint %oop %r25 to %word
	%r28 = add %word %r30, %r29
	%r27 = inttoptr %word %r28 to %oop
	%r34 = ptrtoint %oop %r27 to %word
	%r33 = ptrtoint %oop %r24 to %word
	%r32 = shl %word %r34, %r33
	%r31 = inttoptr %word %r32 to %oop
	%r38 = ptrtoint %oop %r31 to %word
	%r37 = ptrtoint %oop %r23 to %word
	%r36 = or %word %r38, %r37
	%r35 = inttoptr %word %r36 to %oop
	%r39 = inttoptr %word 2 to %oop
	%r40 = load %oop, %oop* %t0
	%r44 = bitcast %oop %r40 to [0 x %oop]*
	%r43 = ptrtoint %oop %r39 to %word
	%r42 = getelementptr [0 x %oop], [0 x %oop]* %r44, %word 0, %word %r43
	store %oop %r35, %oop* %r42
	%r41 = bitcast %oop %r35 to %oop
	%r45 = inttoptr %word 3 to %oop
	%r46 = load %oop, %oop* %t0
	%r50 = bitcast %oop %r46 to [0 x %oop]*
	%r49 = ptrtoint %oop %r45 to %word
	%r48 = getelementptr [0 x %oop], [0 x %oop]* %r50, %word 0, %word %r49
	%r47 = load %oop, %oop* %r48
	%r51 = load %oop, %oop* %t3
	%r52 = call %oop @m_array-append.code(%oop %r47, %oop %r51)
	store %oop %r52, %oop* %t4
	%r54 = getelementptr %oop, %oop* %t3, %word 0
	%r53 = bitcast %oop* %r54 to %oop
	%r55 = call %oop @"m_gc/pop-root.code"(%oop %r53)
	%r56 = load %oop, %oop* %t4
	ret %oop %r56
}
@m_cstr805 = private unnamed_addr constant [13 x i8] c"new-variable\00"
@m_ostr806 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 25, %oop bitcast ([13 x i8]* @m_cstr805 to %oop) }
@m_new-variable = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @m_new-variable.code to %oop), %"<string>"* @m_ostr806 }
@m_cstr807 = private unnamed_addr constant [19 x i8] c"environment-define\00"
@m_ostr808 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 37, %oop bitcast ([19 x i8]* @m_cstr807 to %oop) }
@m_cstr809 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr810 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr809 to %oop) }
@m_cstr811 = private unnamed_addr constant [4 x i8] c"env\00"
@m_ostr812 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr811 to %oop) }
@m_cstr813 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr814 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr813 to %oop) }
@m_cstr815 = private unnamed_addr constant [6 x i8] c"<env>\00"
@m_ostr816 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr815 to %oop) }
@m_cstr817 = private unnamed_addr constant [19 x i8] c"environment-define\00"
@m_ostr818 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 37, %oop bitcast ([19 x i8]* @m_cstr817 to %oop) }
@m_cstr819 = private unnamed_addr constant [19 x i8] c"environment-define\00"
@m_ostr820 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 37, %oop bitcast ([19 x i8]* @m_cstr819 to %oop) }
@m_cstr821 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr822 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr821 to %oop) }
@m_cstr823 = private unnamed_addr constant [5 x i8] c"name\00"
@m_ostr824 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr823 to %oop) }
@m_cstr825 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr826 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr825 to %oop) }
@m_cstr827 = private unnamed_addr constant [9 x i8] c"<symbol>\00"
@m_ostr828 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr827 to %oop) }
@m_cstr829 = private unnamed_addr constant [19 x i8] c"environment-define\00"
@m_ostr830 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 37, %oop bitcast ([19 x i8]* @m_cstr829 to %oop) }
@m_cstr831 = private unnamed_addr constant [19 x i8] c"environment-define\00"
@m_ostr832 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 37, %oop bitcast ([19 x i8]* @m_cstr831 to %oop) }
@m_cstr833 = private unnamed_addr constant [19 x i8] c"environment-define\00"
@m_ostr834 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 37, %oop bitcast ([19 x i8]* @m_cstr833 to %oop) }
define %oop @"m_environment-define/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t5 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = inttoptr %word 0 to %oop
	store %oop %r4, %oop* %t5
	%r5 = load %oop, %oop* %t2
	%r6 = call %oop @"m_pair?.code"(%oop %r5)
	%r8 = ptrtoint %oop %r6 to %word
	%r7 = icmp ne %word %r8, 0
	br i1 %r7, label %L1, label %L2
L1:
	%r9 = inttoptr %word 0 to %oop
	%r10 = load %oop, %oop* %t2
	%r14 = bitcast %oop %r10 to [0 x %oop]*
	%r13 = ptrtoint %oop %r9 to %word
	%r12 = getelementptr [0 x %oop], [0 x %oop]* %r14, %word 0, %word %r13
	%r11 = load %oop, %oop* %r12
	store %oop %r11, %oop* %t3
	%r15 = inttoptr %word 0 to %oop
	store %oop %r15, %oop* %t7
	%r16 = load %oop, %oop* %t3
	%r17 = call %oop @m_type-of.code(%oop %r16)
	%r18 = inttoptr %word 17 to %oop
	%r22 = ptrtoint %oop %r18 to %word
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = icmp eq %word %r22, %r21
	%r19 = inttoptr i1 %r20 to %oop
	store %oop %r19, %oop* %t7
	%r23 = inttoptr %word 0 to %oop
	%r27 = ptrtoint %oop %r23 to %word
	%r26 = ptrtoint %oop %r19 to %word
	%r25 = icmp eq %word %r27, %r26
	%r24 = inttoptr i1 %r25 to %oop
	%r29 = ptrtoint %oop %r24 to %word
	%r28 = icmp ne %word %r29, 0
	br i1 %r28, label %L5, label %L4
L5:
	%r30 = call %oop @m_error-prologue.code()
	%r31 = getelementptr %"<string>", %"<string>"* @m_ostr808, i32 0, i32 1
	%r32 = bitcast %word* %r31 to %oop
	%r33 = call %oop @"m_%error.code"(%oop %r32)
	%r34 = getelementptr %"<string>", %"<string>"* @m_ostr810, i32 0, i32 1
	%r35 = bitcast %word* %r34 to %oop
	%r36 = call %oop @"m_%error.code"(%oop %r35)
	%r37 = getelementptr %"<string>", %"<string>"* @m_ostr812, i32 0, i32 1
	%r38 = bitcast %word* %r37 to %oop
	%r39 = call %oop @"m_%error.code"(%oop %r38)
	%r40 = getelementptr %"<string>", %"<string>"* @m_ostr814, i32 0, i32 1
	%r41 = bitcast %word* %r40 to %oop
	%r42 = call %oop @"m_%error.code"(%oop %r41)
	%r43 = getelementptr %"<string>", %"<string>"* @m_ostr816, i32 0, i32 1
	%r44 = bitcast %word* %r43 to %oop
	%r45 = call %oop @"m_%error.code"(%oop %r44)
	%r46 = call %oop @m_error-epilogue.code()
	store %oop %r46, %oop* %t7
	%r47 = inttoptr %word 0 to %oop
	%r51 = ptrtoint %oop %r47 to %word
	%r50 = ptrtoint %oop %r46 to %word
	%r49 = icmp eq %word %r51, %r50
	%r48 = inttoptr i1 %r49 to %oop
	%r53 = ptrtoint %oop %r48 to %word
	%r52 = icmp ne %word %r53, 0
	br i1 %r52, label %L6, label %L4
L6:
	br label %L4
L4:
	%r54 = load %oop, %oop* %t7
	%r55 = inttoptr %word 1 to %oop
	%r56 = load %oop, %oop* %t2
	%r60 = bitcast %oop %r56 to [0 x %oop]*
	%r59 = ptrtoint %oop %r55 to %word
	%r58 = getelementptr [0 x %oop], [0 x %oop]* %r60, %word 0, %word %r59
	%r57 = load %oop, %oop* %r58
	store %oop %r57, %oop* %t2
	store %oop %r57, %oop* %t6
	br label %L3
L2:
	%r61 = getelementptr %"<string>", %"<string>"* @m_ostr818, i32 0, i32 1
	%r62 = bitcast %word* %r61 to %oop
	%r63 = load %oop, %oop* %t0
	%r64 = call %oop @"m_%not-enough-arguments.code"(%oop %r62, %oop %r63)
	store %oop %r64, %oop* %t6
	br label %L3
L3:
	%r65 = load %oop, %oop* %t6
	%r66 = load %oop, %oop* %t2
	%r67 = call %oop @"m_pair?.code"(%oop %r66)
	%r69 = ptrtoint %oop %r67 to %word
	%r68 = icmp ne %word %r69, 0
	br i1 %r68, label %L7, label %L8
L7:
	%r70 = inttoptr %word 0 to %oop
	%r71 = load %oop, %oop* %t2
	%r75 = bitcast %oop %r71 to [0 x %oop]*
	%r74 = ptrtoint %oop %r70 to %word
	%r73 = getelementptr [0 x %oop], [0 x %oop]* %r75, %word 0, %word %r74
	%r72 = load %oop, %oop* %r73
	store %oop %r72, %oop* %t4
	%r76 = inttoptr %word 0 to %oop
	store %oop %r76, %oop* %t7
	%r77 = load %oop, %oop* %t4
	%r78 = call %oop @"m_symbol?.code"(%oop %r77)
	store %oop %r78, %oop* %t7
	%r79 = inttoptr %word 0 to %oop
	%r83 = ptrtoint %oop %r79 to %word
	%r82 = ptrtoint %oop %r78 to %word
	%r81 = icmp eq %word %r83, %r82
	%r80 = inttoptr i1 %r81 to %oop
	%r85 = ptrtoint %oop %r80 to %word
	%r84 = icmp ne %word %r85, 0
	br i1 %r84, label %L11, label %L10
L11:
	%r86 = call %oop @m_error-prologue.code()
	%r87 = getelementptr %"<string>", %"<string>"* @m_ostr820, i32 0, i32 1
	%r88 = bitcast %word* %r87 to %oop
	%r89 = call %oop @"m_%error.code"(%oop %r88)
	%r90 = getelementptr %"<string>", %"<string>"* @m_ostr822, i32 0, i32 1
	%r91 = bitcast %word* %r90 to %oop
	%r92 = call %oop @"m_%error.code"(%oop %r91)
	%r93 = getelementptr %"<string>", %"<string>"* @m_ostr824, i32 0, i32 1
	%r94 = bitcast %word* %r93 to %oop
	%r95 = call %oop @"m_%error.code"(%oop %r94)
	%r96 = getelementptr %"<string>", %"<string>"* @m_ostr826, i32 0, i32 1
	%r97 = bitcast %word* %r96 to %oop
	%r98 = call %oop @"m_%error.code"(%oop %r97)
	%r99 = getelementptr %"<string>", %"<string>"* @m_ostr828, i32 0, i32 1
	%r100 = bitcast %word* %r99 to %oop
	%r101 = call %oop @"m_%error.code"(%oop %r100)
	%r102 = call %oop @m_error-epilogue.code()
	store %oop %r102, %oop* %t7
	%r103 = inttoptr %word 0 to %oop
	%r107 = ptrtoint %oop %r103 to %word
	%r106 = ptrtoint %oop %r102 to %word
	%r105 = icmp eq %word %r107, %r106
	%r104 = inttoptr i1 %r105 to %oop
	%r109 = ptrtoint %oop %r104 to %word
	%r108 = icmp ne %word %r109, 0
	br i1 %r108, label %L12, label %L10
L12:
	br label %L10
L10:
	%r110 = load %oop, %oop* %t7
	%r111 = inttoptr %word 1 to %oop
	%r112 = load %oop, %oop* %t2
	%r116 = bitcast %oop %r112 to [0 x %oop]*
	%r115 = ptrtoint %oop %r111 to %word
	%r114 = getelementptr [0 x %oop], [0 x %oop]* %r116, %word 0, %word %r115
	%r113 = load %oop, %oop* %r114
	store %oop %r113, %oop* %t2
	store %oop %r113, %oop* %t6
	br label %L9
L8:
	%r117 = getelementptr %"<string>", %"<string>"* @m_ostr830, i32 0, i32 1
	%r118 = bitcast %word* %r117 to %oop
	%r119 = load %oop, %oop* %t0
	%r120 = call %oop @"m_%not-enough-arguments.code"(%oop %r118, %oop %r119)
	store %oop %r120, %oop* %t6
	br label %L9
L9:
	%r121 = load %oop, %oop* %t6
	%r122 = load %oop, %oop* %t2
	%r123 = call %oop @"m_pair?.code"(%oop %r122)
	%r125 = ptrtoint %oop %r123 to %word
	%r124 = icmp ne %word %r125, 0
	br i1 %r124, label %L13, label %L14
L13:
	%r126 = inttoptr %word 0 to %oop
	%r127 = load %oop, %oop* %t2
	%r131 = bitcast %oop %r127 to [0 x %oop]*
	%r130 = ptrtoint %oop %r126 to %word
	%r129 = getelementptr [0 x %oop], [0 x %oop]* %r131, %word 0, %word %r130
	%r128 = load %oop, %oop* %r129
	store %oop %r128, %oop* %t5
	%r132 = inttoptr %word 1 to %oop
	%r133 = load %oop, %oop* %t2
	%r137 = bitcast %oop %r133 to [0 x %oop]*
	%r136 = ptrtoint %oop %r132 to %word
	%r135 = getelementptr [0 x %oop], [0 x %oop]* %r137, %word 0, %word %r136
	%r134 = load %oop, %oop* %r135
	store %oop %r134, %oop* %t2
	store %oop %r134, %oop* %t6
	br label %L15
L14:
	%r138 = getelementptr %"<string>", %"<string>"* @m_ostr832, i32 0, i32 1
	%r139 = bitcast %word* %r138 to %oop
	%r140 = load %oop, %oop* %t0
	%r141 = call %oop @"m_%not-enough-arguments.code"(%oop %r139, %oop %r140)
	store %oop %r141, %oop* %t6
	br label %L15
L15:
	%r142 = load %oop, %oop* %t6
	%r143 = load %oop, %oop* %t2
	%r145 = ptrtoint %oop %r143 to %word
	%r144 = icmp ne %word %r145, 0
	br i1 %r144, label %L16, label %L17
L16:
	%r146 = getelementptr %"<string>", %"<string>"* @m_ostr834, i32 0, i32 1
	%r147 = bitcast %word* %r146 to %oop
	%r148 = load %oop, %oop* %t0
	%r149 = call %oop @"m_%too-many-arguments.code"(%oop %r147, %oop %r148)
	store %oop %r149, %oop* %t6
	br label %L18
L17:
	%r150 = inttoptr %word 0 to %oop
	store %oop %r150, %oop* %t6
	br label %L18
L18:
	%r151 = load %oop, %oop* %t6
	%r152 = load %oop, %oop* %t3
	%r153 = load %oop, %oop* %t4
	%r154 = load %oop, %oop* %t5
	%r155 = call %oop @m_environment-define.code(%oop %r152, %oop %r153, %oop %r154)
	ret %oop %r155
}
@m_cstr835 = private unnamed_addr constant [34 x i8] c"environment-define/evaluator-stub\00"
@m_ostr836 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 67, %oop bitcast ([34 x i8]* @m_cstr835 to %oop) }
@"m_environment-define/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_environment-define/evaluator-stub.code" to %oop), %"<string>"* @m_ostr836 }
define %oop @m_maybe-object-in-variable.code(%oop %var, %oop %type) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	store %oop %var, %oop* %t0
	store %oop %type, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 1 to %oop
	store %oop %r2, %oop* %t3
	%r3 = load %oop, %oop* %t2
	store %oop %r3, %oop* %t3
	%r4 = inttoptr %word 0 to %oop
	%r8 = ptrtoint %oop %r4 to %word
	%r7 = ptrtoint %oop %r3 to %word
	%r6 = icmp eq %word %r8, %r7
	%r5 = inttoptr i1 %r6 to %oop
	%r10 = ptrtoint %oop %r5 to %word
	%r9 = icmp ne %word %r10, 0
	br i1 %r9, label %L1, label %L2
L2:
	%r11 = load %oop, %oop* %t2
	%r12 = call %oop @m_type-of.code(%oop %r11)
	%r13 = inttoptr %word 16 to %oop
	%r17 = ptrtoint %oop %r13 to %word
	%r16 = ptrtoint %oop %r12 to %word
	%r15 = icmp eq %word %r17, %r16
	%r14 = inttoptr i1 %r15 to %oop
	store %oop %r14, %oop* %t3
	%r18 = inttoptr %word 0 to %oop
	%r22 = ptrtoint %oop %r18 to %word
	%r21 = ptrtoint %oop %r14 to %word
	%r20 = icmp eq %word %r22, %r21
	%r19 = inttoptr i1 %r20 to %oop
	%r24 = ptrtoint %oop %r19 to %word
	%r23 = icmp ne %word %r24, 0
	br i1 %r23, label %L1, label %L3
L3:
	%r25 = inttoptr %word 1 to %oop
	%r26 = load %oop, %oop* %t2
	%r30 = bitcast %oop %r26 to [0 x %oop]*
	%r29 = ptrtoint %oop %r25 to %word
	%r28 = getelementptr [0 x %oop], [0 x %oop]* %r30, %word 0, %word %r29
	%r27 = load %oop, %oop* %r28
	store %oop %r27, %oop* %t2
	store %oop %r27, %oop* %t3
	%r31 = inttoptr %word 0 to %oop
	%r35 = ptrtoint %oop %r31 to %word
	%r34 = ptrtoint %oop %r27 to %word
	%r33 = icmp eq %word %r35, %r34
	%r32 = inttoptr i1 %r33 to %oop
	%r37 = ptrtoint %oop %r32 to %word
	%r36 = icmp ne %word %r37, 0
	br i1 %r36, label %L1, label %L4
L4:
	%r38 = inttoptr %word 0 to %oop
	store %oop %r38, %oop* %t4
	%r39 = load %oop, %oop* %t1
	%r43 = ptrtoint %oop %r39 to %word
	%r42 = icmp eq %word %r43, 0
	%r41 = zext i1 %r42 to %word
	%r40 = inttoptr %word %r41 to %oop
	store %oop %r40, %oop* %t4
	%r44 = inttoptr %word 0 to %oop
	%r48 = ptrtoint %oop %r44 to %word
	%r47 = ptrtoint %oop %r40 to %word
	%r46 = icmp eq %word %r48, %r47
	%r45 = inttoptr i1 %r46 to %oop
	%r50 = ptrtoint %oop %r45 to %word
	%r49 = icmp ne %word %r50, 0
	br i1 %r49, label %L6, label %L5
L6:
	%r51 = load %oop, %oop* %t2
	%r52 = call %oop @m_type-of.code(%oop %r51)
	%r53 = load %oop, %oop* %t1
	%r57 = ptrtoint %oop %r53 to %word
	%r56 = ptrtoint %oop %r52 to %word
	%r55 = icmp eq %word %r57, %r56
	%r54 = inttoptr i1 %r55 to %oop
	store %oop %r54, %oop* %t4
	%r58 = inttoptr %word 0 to %oop
	%r62 = ptrtoint %oop %r58 to %word
	%r61 = ptrtoint %oop %r54 to %word
	%r60 = icmp eq %word %r62, %r61
	%r59 = inttoptr i1 %r60 to %oop
	%r64 = ptrtoint %oop %r59 to %word
	%r63 = icmp ne %word %r64, 0
	br i1 %r63, label %L7, label %L5
L7:
	br label %L5
L5:
	%r65 = load %oop, %oop* %t4
	store %oop %r65, %oop* %t3
	%r66 = inttoptr %word 0 to %oop
	%r70 = ptrtoint %oop %r66 to %word
	%r69 = ptrtoint %oop %r65 to %word
	%r68 = icmp eq %word %r70, %r69
	%r67 = inttoptr i1 %r68 to %oop
	%r72 = ptrtoint %oop %r67 to %word
	%r71 = icmp ne %word %r72, 0
	br i1 %r71, label %L1, label %L8
L8:
	%r73 = load %oop, %oop* %t2
	store %oop %r73, %oop* %t3
	%r74 = inttoptr %word 0 to %oop
	%r78 = ptrtoint %oop %r74 to %word
	%r77 = ptrtoint %oop %r73 to %word
	%r76 = icmp eq %word %r78, %r77
	%r75 = inttoptr i1 %r76 to %oop
	%r80 = ptrtoint %oop %r75 to %word
	%r79 = icmp ne %word %r80, 0
	br i1 %r79, label %L1, label %L9
L9:
	br label %L1
L1:
	%r81 = load %oop, %oop* %t3
	ret %oop %r81
}
@m_cstr837 = private unnamed_addr constant [25 x i8] c"maybe-object-in-variable\00"
@m_ostr838 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 49, %oop bitcast ([25 x i8]* @m_cstr837 to %oop) }
@m_maybe-object-in-variable = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @m_maybe-object-in-variable.code to %oop), %"<string>"* @m_ostr838 }
define %oop @m_maybe-object-in-env.code(%oop %env, %oop %name, %oop %type) {
	%t2 = alloca %oop
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	store %oop %env, %oop* %t0
	store %oop %name, %oop* %t1
	store %oop %type, %oop* %t2
	%r1 = load %oop, %oop* %t1
	%r2 = call %oop @"m_symbol?.code"(%oop %r1)
	%r4 = ptrtoint %oop %r2 to %word
	%r3 = icmp ne %word %r4, 0
	br i1 %r3, label %L1, label %L2
L1:
	%r5 = load %oop, %oop* %t1
	%r6 = load %oop, %oop* %t0
	%r7 = call %oop @"m_defined?.code"(%oop %r5, %oop %r6)
	%r8 = load %oop, %oop* %t2
	%r9 = call %oop @m_maybe-object-in-variable.code(%oop %r7, %oop %r8)
	store %oop %r9, %oop* %t3
	br label %L3
L2:
	%r10 = inttoptr %word 0 to %oop
	store %oop %r10, %oop* %t3
	br label %L3
L3:
	%r11 = load %oop, %oop* %t3
	ret %oop %r11
}
@m_cstr839 = private unnamed_addr constant [20 x i8] c"maybe-object-in-env\00"
@m_ostr840 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 39, %oop bitcast ([20 x i8]* @m_cstr839 to %oop) }
@m_maybe-object-in-env = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop, %oop)* @m_maybe-object-in-env.code to %oop), %"<string>"* @m_ostr840 }
define %oop @"m_global-variable?.code"(%oop %var) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	store %oop %var, %oop* %t0
	%r1 = inttoptr %word 2 to %oop
	%r2 = load %oop, %oop* %t0
	%r6 = bitcast %oop %r2 to [0 x %oop]*
	%r5 = ptrtoint %oop %r1 to %word
	%r4 = getelementptr [0 x %oop], [0 x %oop]* %r6, %word 0, %word %r5
	%r3 = load %oop, %oop* %r4
	store %oop %r3, %oop* %t1
	%r7 = inttoptr %word 1 to %oop
	%r8 = inttoptr %word 1 to %oop
	%r9 = load %oop, %oop* %t1
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	%r10 = load %oop, %oop* %r11
	%r17 = ptrtoint %oop %r10 to %word
	%r16 = ptrtoint %oop %r7 to %word
	%r15 = ashr %word %r17, %r16
	%r14 = inttoptr %word %r15 to %oop
	%r18 = inttoptr %word 0 to %oop
	%r22 = ptrtoint %oop %r18 to %word
	%r21 = ptrtoint %oop %r14 to %word
	%r20 = icmp eq %word %r22, %r21
	%r19 = inttoptr i1 %r20 to %oop
	ret %oop %r19
}
@m_cstr841 = private unnamed_addr constant [17 x i8] c"global-variable?\00"
@m_ostr842 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 33, %oop bitcast ([17 x i8]* @m_cstr841 to %oop) }
@"m_global-variable?" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @"m_global-variable?.code" to %oop), %"<string>"* @m_ostr842 }
@m_cstr843 = private unnamed_addr constant [15 x i8] c"current-module\00"
@m_ostr844 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr843 to %oop) }
define %oop @"m_current-module/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = load %oop, %oop* %t2
	%r4 = ptrtoint %oop %r2 to %word
	%r3 = icmp ne %word %r4, 0
	br i1 %r3, label %L1, label %L2
L1:
	%r5 = getelementptr %"<string>", %"<string>"* @m_ostr844, i32 0, i32 1
	%r6 = bitcast %word* %r5 to %oop
	%r7 = load %oop, %oop* %t0
	%r8 = call %oop @"m_%too-many-arguments.code"(%oop %r6, %oop %r7)
	store %oop %r8, %oop* %t3
	br label %L3
L2:
	%r9 = inttoptr %word 0 to %oop
	store %oop %r9, %oop* %t3
	br label %L3
L3:
	%r10 = load %oop, %oop* %t3
	%r11 = load %oop, %oop* @"m_*module*"
	ret %oop %r11
}
@m_cstr845 = private unnamed_addr constant [30 x i8] c"current-module/evaluator-stub\00"
@m_ostr846 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 59, %oop bitcast ([30 x i8]* @m_cstr845 to %oop) }
@"m_current-module/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_current-module/evaluator-stub.code" to %oop), %"<string>"* @m_ostr846 }
define %oop @m_set-current-module.code(%oop %module) {
	%t0 = alloca %oop
	store %oop %module, %oop* %t0
	%r1 = inttoptr %word 0 to %oop
	%r2 = load %oop, %oop* %t0
	store %oop %r2, %oop* @"m_*module*"
	%r3 = call %oop @m_capture-well-known-module-values.code()
	%r4 = load %oop, %oop* %t0
	ret %oop %r4
}
@m_cstr847 = private unnamed_addr constant [19 x i8] c"set-current-module\00"
@m_ostr848 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 37, %oop bitcast ([19 x i8]* @m_cstr847 to %oop) }
@m_set-current-module = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_set-current-module.code to %oop), %"<string>"* @m_ostr848 }
@m_cstr849 = private unnamed_addr constant [19 x i8] c"set-current-module\00"
@m_ostr850 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 37, %oop bitcast ([19 x i8]* @m_cstr849 to %oop) }
@m_cstr851 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr852 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr851 to %oop) }
@m_cstr853 = private unnamed_addr constant [7 x i8] c"module\00"
@m_ostr854 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr853 to %oop) }
@m_cstr855 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr856 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr855 to %oop) }
@m_cstr857 = private unnamed_addr constant [9 x i8] c"<module>\00"
@m_ostr858 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr857 to %oop) }
@m_cstr859 = private unnamed_addr constant [19 x i8] c"set-current-module\00"
@m_ostr860 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 37, %oop bitcast ([19 x i8]* @m_cstr859 to %oop) }
@m_cstr861 = private unnamed_addr constant [19 x i8] c"set-current-module\00"
@m_ostr862 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 37, %oop bitcast ([19 x i8]* @m_cstr861 to %oop) }
define %oop @"m_set-current-module/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = load %oop, %oop* %t2
	%r4 = call %oop @"m_pair?.code"(%oop %r3)
	%r6 = ptrtoint %oop %r4 to %word
	%r5 = icmp ne %word %r6, 0
	br i1 %r5, label %L1, label %L2
L1:
	%r7 = inttoptr %word 0 to %oop
	%r8 = load %oop, %oop* %t2
	%r12 = bitcast %oop %r8 to [0 x %oop]*
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = getelementptr [0 x %oop], [0 x %oop]* %r12, %word 0, %word %r11
	%r9 = load %oop, %oop* %r10
	store %oop %r9, %oop* %t3
	%r13 = inttoptr %word 0 to %oop
	store %oop %r13, %oop* %t5
	%r14 = load %oop, %oop* %t3
	%r15 = call %oop @m_type-of.code(%oop %r14)
	%r16 = inttoptr %word 18 to %oop
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = icmp eq %word %r20, %r19
	%r17 = inttoptr i1 %r18 to %oop
	store %oop %r17, %oop* %t5
	%r21 = inttoptr %word 0 to %oop
	%r25 = ptrtoint %oop %r21 to %word
	%r24 = ptrtoint %oop %r17 to %word
	%r23 = icmp eq %word %r25, %r24
	%r22 = inttoptr i1 %r23 to %oop
	%r27 = ptrtoint %oop %r22 to %word
	%r26 = icmp ne %word %r27, 0
	br i1 %r26, label %L5, label %L4
L5:
	%r28 = call %oop @m_error-prologue.code()
	%r29 = getelementptr %"<string>", %"<string>"* @m_ostr850, i32 0, i32 1
	%r30 = bitcast %word* %r29 to %oop
	%r31 = call %oop @"m_%error.code"(%oop %r30)
	%r32 = getelementptr %"<string>", %"<string>"* @m_ostr852, i32 0, i32 1
	%r33 = bitcast %word* %r32 to %oop
	%r34 = call %oop @"m_%error.code"(%oop %r33)
	%r35 = getelementptr %"<string>", %"<string>"* @m_ostr854, i32 0, i32 1
	%r36 = bitcast %word* %r35 to %oop
	%r37 = call %oop @"m_%error.code"(%oop %r36)
	%r38 = getelementptr %"<string>", %"<string>"* @m_ostr856, i32 0, i32 1
	%r39 = bitcast %word* %r38 to %oop
	%r40 = call %oop @"m_%error.code"(%oop %r39)
	%r41 = getelementptr %"<string>", %"<string>"* @m_ostr858, i32 0, i32 1
	%r42 = bitcast %word* %r41 to %oop
	%r43 = call %oop @"m_%error.code"(%oop %r42)
	%r44 = call %oop @m_error-epilogue.code()
	store %oop %r44, %oop* %t5
	%r45 = inttoptr %word 0 to %oop
	%r49 = ptrtoint %oop %r45 to %word
	%r48 = ptrtoint %oop %r44 to %word
	%r47 = icmp eq %word %r49, %r48
	%r46 = inttoptr i1 %r47 to %oop
	%r51 = ptrtoint %oop %r46 to %word
	%r50 = icmp ne %word %r51, 0
	br i1 %r50, label %L6, label %L4
L6:
	br label %L4
L4:
	%r52 = load %oop, %oop* %t5
	%r53 = inttoptr %word 1 to %oop
	%r54 = load %oop, %oop* %t2
	%r58 = bitcast %oop %r54 to [0 x %oop]*
	%r57 = ptrtoint %oop %r53 to %word
	%r56 = getelementptr [0 x %oop], [0 x %oop]* %r58, %word 0, %word %r57
	%r55 = load %oop, %oop* %r56
	store %oop %r55, %oop* %t2
	store %oop %r55, %oop* %t4
	br label %L3
L2:
	%r59 = getelementptr %"<string>", %"<string>"* @m_ostr860, i32 0, i32 1
	%r60 = bitcast %word* %r59 to %oop
	%r61 = load %oop, %oop* %t0
	%r62 = call %oop @"m_%not-enough-arguments.code"(%oop %r60, %oop %r61)
	store %oop %r62, %oop* %t4
	br label %L3
L3:
	%r63 = load %oop, %oop* %t4
	%r64 = load %oop, %oop* %t2
	%r66 = ptrtoint %oop %r64 to %word
	%r65 = icmp ne %word %r66, 0
	br i1 %r65, label %L7, label %L8
L7:
	%r67 = getelementptr %"<string>", %"<string>"* @m_ostr862, i32 0, i32 1
	%r68 = bitcast %word* %r67 to %oop
	%r69 = load %oop, %oop* %t0
	%r70 = call %oop @"m_%too-many-arguments.code"(%oop %r68, %oop %r69)
	store %oop %r70, %oop* %t4
	br label %L9
L8:
	%r71 = inttoptr %word 0 to %oop
	store %oop %r71, %oop* %t4
	br label %L9
L9:
	%r72 = load %oop, %oop* %t4
	%r73 = load %oop, %oop* %t3
	%r74 = call %oop @m_set-current-module.code(%oop %r73)
	ret %oop %r74
}
@m_cstr863 = private unnamed_addr constant [34 x i8] c"set-current-module/evaluator-stub\00"
@m_ostr864 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 67, %oop bitcast ([34 x i8]* @m_cstr863 to %oop) }
@"m_set-current-module/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_set-current-module/evaluator-stub.code" to %oop), %"<string>"* @m_ostr864 }
define %oop @m_code865(%oop %self) {
	%t0 = alloca %oop
	store %oop %self, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @"m_%ensure-peeked.code"(%oop %r1)
	%r3 = inttoptr %word 0 to %oop
	%r4 = inttoptr %word 1 to %oop
	%r5 = load %oop, %oop* %t0
	%r9 = bitcast %oop %r5 to [0 x %oop]*
	%r8 = ptrtoint %oop %r4 to %word
	%r7 = getelementptr [0 x %oop], [0 x %oop]* %r9, %word 0, %word %r8
	%r6 = load %oop, %oop* %r7
	%r13 = ptrtoint %oop %r6 to %word
	%r12 = ptrtoint %oop %r3 to %word
	%r11 = icmp slt %word %r13, %r12
	%r10 = inttoptr i1 %r11 to %oop
	ret %oop %r10
}
@m_oclosure866 = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_code865 to %oop), %"<string>"* null }
@m_arr867 = private unnamed_addr constant [1 x %oop] [%oop bitcast (%"<target-function>"* @m_oclosure866 to %oop)]
@"m_$at-end?-table" = global %oop bitcast ([1 x %oop]* @m_arr867 to %oop)@m_cstr868 = private unnamed_addr constant [11 x i8] c"selector '\00"
@m_ostr869 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr868 to %oop) }
@m_cstr870 = private unnamed_addr constant [9 x i8] c"$at-end?\00"
@m_ostr871 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr870 to %oop) }
@m_cstr872 = private unnamed_addr constant [25 x i8] c" has no method for type \00"
@m_ostr873 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 49, %oop bitcast ([25 x i8]* @m_cstr872 to %oop) }
define %oop @"m_$at-end?.code"(%oop %self) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	store %oop %self, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @m_type-of.code(%oop %r1)
	store %oop %r2, %oop* %t1
	%r3 = inttoptr %word 1 to %oop
	store %oop %r3, %oop* %t3
	%r4 = load %oop, %oop* %t1
	%r5 = inttoptr %word 26 to %oop
	%r9 = ptrtoint %oop %r5 to %word
	%r8 = ptrtoint %oop %r4 to %word
	%r7 = icmp sle %word %r9, %r8
	%r6 = inttoptr i1 %r7 to %oop
	store %oop %r6, %oop* %t3
	%r10 = inttoptr %word 0 to %oop
	%r14 = ptrtoint %oop %r10 to %word
	%r13 = ptrtoint %oop %r6 to %word
	%r12 = icmp eq %word %r14, %r13
	%r11 = inttoptr i1 %r12 to %oop
	%r16 = ptrtoint %oop %r11 to %word
	%r15 = icmp ne %word %r16, 0
	br i1 %r15, label %L4, label %L5
L5:
	%r17 = inttoptr %word 26 to %oop
	%r18 = load %oop, %oop* %t1
	%r22 = ptrtoint %oop %r18 to %word
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = icmp sle %word %r22, %r21
	%r19 = inttoptr i1 %r20 to %oop
	store %oop %r19, %oop* %t3
	%r23 = inttoptr %word 0 to %oop
	%r27 = ptrtoint %oop %r23 to %word
	%r26 = ptrtoint %oop %r19 to %word
	%r25 = icmp eq %word %r27, %r26
	%r24 = inttoptr i1 %r25 to %oop
	%r29 = ptrtoint %oop %r24 to %word
	%r28 = icmp ne %word %r29, 0
	br i1 %r28, label %L4, label %L6
L6:
	br label %L4
L4:
	%r30 = load %oop, %oop* %t3
	%r32 = ptrtoint %oop %r30 to %word
	%r31 = icmp ne %word %r32, 0
	br i1 %r31, label %L1, label %L2
L1:
	%r33 = inttoptr %word 0 to %oop
	store %oop %r33, %oop* %t2
	br label %L3
L2:
	%r34 = call %oop @m_error-prologue.code()
	%r35 = getelementptr %"<string>", %"<string>"* @m_ostr869, i32 0, i32 1
	%r36 = bitcast %word* %r35 to %oop
	%r37 = call %oop @"m_%error.code"(%oop %r36)
	%r38 = getelementptr %"<string>", %"<string>"* @m_ostr871, i32 0, i32 1
	%r39 = bitcast %word* %r38 to %oop
	%r40 = call %oop @"m_%error.code"(%oop %r39)
	%r41 = getelementptr %"<string>", %"<string>"* @m_ostr873, i32 0, i32 1
	%r42 = bitcast %word* %r41 to %oop
	%r43 = call %oop @"m_%error.code"(%oop %r42)
	%r44 = inttoptr %word 1 to %oop
	%r45 = inttoptr %word 1 to %oop
	%r46 = load %oop, %oop* %t1
	%r50 = ptrtoint %oop %r46 to %word
	%r49 = ptrtoint %oop %r45 to %word
	%r48 = shl %word %r50, %r49
	%r47 = inttoptr %word %r48 to %oop
	%r54 = ptrtoint %oop %r47 to %word
	%r53 = ptrtoint %oop %r44 to %word
	%r52 = or %word %r54, %r53
	%r51 = inttoptr %word %r52 to %oop
	%r55 = call %oop @"m_%error.code"(%oop %r51)
	%r56 = call %oop @m_error-epilogue.code()
	store %oop %r56, %oop* %t2
	br label %L3
L3:
	%r57 = load %oop, %oop* %t2
	%r58 = load %oop, %oop* %t0
	%r59 = inttoptr %word 26 to %oop
	%r60 = load %oop, %oop* %t1
	%r64 = ptrtoint %oop %r60 to %word
	%r63 = ptrtoint %oop %r59 to %word
	%r62 = sub %word %r64, %r63
	%r61 = inttoptr %word %r62 to %oop
	%r65 = load %oop, %oop* @"m_$at-end?-table"
	%r69 = bitcast %oop %r65 to [0 x %oop]*
	%r68 = ptrtoint %oop %r61 to %word
	%r67 = getelementptr [0 x %oop], [0 x %oop]* %r69, %word 0, %word %r68
	%r66 = load %oop, %oop* %r67
	%r70 = bitcast %oop %r66 to %"<target-function>"*
	%r71 = getelementptr %"<target-function>", %"<target-function>"* %r70, i32 0, i32 1
	%r72 = load %oop, %oop* %r71
	%r74 = bitcast %oop %r72 to %oop (%oop)*
	%r73 = call %oop %r74(%oop %r58)
	ret %oop %r73
}
@m_cstr874 = private unnamed_addr constant [9 x i8] c"$at-end?\00"
@m_ostr875 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr874 to %oop) }
@"m_$at-end?" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @"m_$at-end?.code" to %oop), %"<string>"* @m_ostr875 }
define %oop @m_code876(%oop %self) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	store %oop %self, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @"m_%ensure-peeked.code"(%oop %r1)
	%r3 = inttoptr %word 1 to %oop
	%r4 = load %oop, %oop* %t0
	%r8 = bitcast %oop %r4 to [0 x %oop]*
	%r7 = ptrtoint %oop %r3 to %word
	%r6 = getelementptr [0 x %oop], [0 x %oop]* %r8, %word 0, %word %r7
	%r5 = load %oop, %oop* %r6
	%r9 = inttoptr %word 0 to %oop
	%r13 = ptrtoint %oop %r9 to %word
	%r12 = ptrtoint %oop %r5 to %word
	%r11 = icmp sle %word %r13, %r12
	%r10 = inttoptr i1 %r11 to %oop
	%r15 = ptrtoint %oop %r10 to %word
	%r14 = icmp ne %word %r15, 0
	br i1 %r14, label %L1, label %L2
L1:
	%r16 = inttoptr %word 1 to %oop
	%r17 = load %oop, %oop* %t0
	%r21 = bitcast %oop %r17 to [0 x %oop]*
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = getelementptr [0 x %oop], [0 x %oop]* %r21, %word 0, %word %r20
	%r18 = load %oop, %oop* %r19
	store %oop %r18, %oop* %t1
	br label %L3
L2:
	%r22 = load %oop, %oop* @"m_+end+"
	store %oop %r22, %oop* %t1
	br label %L3
L3:
	%r23 = load %oop, %oop* %t1
	ret %oop %r23
}
@m_oclosure877 = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_code876 to %oop), %"<string>"* null }
@m_arr878 = private unnamed_addr constant [1 x %oop] [%oop bitcast (%"<target-function>"* @m_oclosure877 to %oop)]
@m_$peek-table = global %oop bitcast ([1 x %oop]* @m_arr878 to %oop)@m_cstr879 = private unnamed_addr constant [11 x i8] c"selector '\00"
@m_ostr880 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr879 to %oop) }
@m_cstr881 = private unnamed_addr constant [6 x i8] c"$peek\00"
@m_ostr882 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr881 to %oop) }
@m_cstr883 = private unnamed_addr constant [25 x i8] c" has no method for type \00"
@m_ostr884 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 49, %oop bitcast ([25 x i8]* @m_cstr883 to %oop) }
define %oop @m_$peek.code(%oop %self) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	store %oop %self, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @m_type-of.code(%oop %r1)
	store %oop %r2, %oop* %t1
	%r3 = inttoptr %word 1 to %oop
	store %oop %r3, %oop* %t3
	%r4 = load %oop, %oop* %t1
	%r5 = inttoptr %word 26 to %oop
	%r9 = ptrtoint %oop %r5 to %word
	%r8 = ptrtoint %oop %r4 to %word
	%r7 = icmp sle %word %r9, %r8
	%r6 = inttoptr i1 %r7 to %oop
	store %oop %r6, %oop* %t3
	%r10 = inttoptr %word 0 to %oop
	%r14 = ptrtoint %oop %r10 to %word
	%r13 = ptrtoint %oop %r6 to %word
	%r12 = icmp eq %word %r14, %r13
	%r11 = inttoptr i1 %r12 to %oop
	%r16 = ptrtoint %oop %r11 to %word
	%r15 = icmp ne %word %r16, 0
	br i1 %r15, label %L4, label %L5
L5:
	%r17 = inttoptr %word 26 to %oop
	%r18 = load %oop, %oop* %t1
	%r22 = ptrtoint %oop %r18 to %word
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = icmp sle %word %r22, %r21
	%r19 = inttoptr i1 %r20 to %oop
	store %oop %r19, %oop* %t3
	%r23 = inttoptr %word 0 to %oop
	%r27 = ptrtoint %oop %r23 to %word
	%r26 = ptrtoint %oop %r19 to %word
	%r25 = icmp eq %word %r27, %r26
	%r24 = inttoptr i1 %r25 to %oop
	%r29 = ptrtoint %oop %r24 to %word
	%r28 = icmp ne %word %r29, 0
	br i1 %r28, label %L4, label %L6
L6:
	br label %L4
L4:
	%r30 = load %oop, %oop* %t3
	%r32 = ptrtoint %oop %r30 to %word
	%r31 = icmp ne %word %r32, 0
	br i1 %r31, label %L1, label %L2
L1:
	%r33 = inttoptr %word 0 to %oop
	store %oop %r33, %oop* %t2
	br label %L3
L2:
	%r34 = call %oop @m_error-prologue.code()
	%r35 = getelementptr %"<string>", %"<string>"* @m_ostr880, i32 0, i32 1
	%r36 = bitcast %word* %r35 to %oop
	%r37 = call %oop @"m_%error.code"(%oop %r36)
	%r38 = getelementptr %"<string>", %"<string>"* @m_ostr882, i32 0, i32 1
	%r39 = bitcast %word* %r38 to %oop
	%r40 = call %oop @"m_%error.code"(%oop %r39)
	%r41 = getelementptr %"<string>", %"<string>"* @m_ostr884, i32 0, i32 1
	%r42 = bitcast %word* %r41 to %oop
	%r43 = call %oop @"m_%error.code"(%oop %r42)
	%r44 = inttoptr %word 1 to %oop
	%r45 = inttoptr %word 1 to %oop
	%r46 = load %oop, %oop* %t1
	%r50 = ptrtoint %oop %r46 to %word
	%r49 = ptrtoint %oop %r45 to %word
	%r48 = shl %word %r50, %r49
	%r47 = inttoptr %word %r48 to %oop
	%r54 = ptrtoint %oop %r47 to %word
	%r53 = ptrtoint %oop %r44 to %word
	%r52 = or %word %r54, %r53
	%r51 = inttoptr %word %r52 to %oop
	%r55 = call %oop @"m_%error.code"(%oop %r51)
	%r56 = call %oop @m_error-epilogue.code()
	store %oop %r56, %oop* %t2
	br label %L3
L3:
	%r57 = load %oop, %oop* %t2
	%r58 = load %oop, %oop* %t0
	%r59 = inttoptr %word 26 to %oop
	%r60 = load %oop, %oop* %t1
	%r64 = ptrtoint %oop %r60 to %word
	%r63 = ptrtoint %oop %r59 to %word
	%r62 = sub %word %r64, %r63
	%r61 = inttoptr %word %r62 to %oop
	%r65 = load %oop, %oop* @m_$peek-table
	%r69 = bitcast %oop %r65 to [0 x %oop]*
	%r68 = ptrtoint %oop %r61 to %word
	%r67 = getelementptr [0 x %oop], [0 x %oop]* %r69, %word 0, %word %r68
	%r66 = load %oop, %oop* %r67
	%r70 = bitcast %oop %r66 to %"<target-function>"*
	%r71 = getelementptr %"<target-function>", %"<target-function>"* %r70, i32 0, i32 1
	%r72 = load %oop, %oop* %r71
	%r74 = bitcast %oop %r72 to %oop (%oop)*
	%r73 = call %oop %r74(%oop %r58)
	ret %oop %r73
}
@m_cstr885 = private unnamed_addr constant [6 x i8] c"$peek\00"
@m_ostr886 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr885 to %oop) }
@m_$peek = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_$peek.code to %oop), %"<string>"* @m_ostr886 }
define %oop @m_code887(%oop %self) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	%t2 = alloca %oop
	store %oop %self, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @"m_%ensure-peeked.code"(%oop %r1)
	%r3 = inttoptr %word 1 to %oop
	%r4 = load %oop, %oop* %t0
	%r8 = bitcast %oop %r4 to [0 x %oop]*
	%r7 = ptrtoint %oop %r3 to %word
	%r6 = getelementptr [0 x %oop], [0 x %oop]* %r8, %word 0, %word %r7
	%r5 = load %oop, %oop* %r6
	%r9 = inttoptr %word 0 to %oop
	%r13 = ptrtoint %oop %r9 to %word
	%r12 = ptrtoint %oop %r5 to %word
	%r11 = icmp sle %word %r13, %r12
	%r10 = inttoptr i1 %r11 to %oop
	%r15 = ptrtoint %oop %r10 to %word
	%r14 = icmp ne %word %r15, 0
	br i1 %r14, label %L1, label %L2
L1:
	%r16 = inttoptr %word 1 to %oop
	%r17 = load %oop, %oop* %t0
	%r21 = bitcast %oop %r17 to [0 x %oop]*
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = getelementptr [0 x %oop], [0 x %oop]* %r21, %word 0, %word %r20
	%r18 = load %oop, %oop* %r19
	store %oop %r18, %oop* %t2
	%r22 = inttoptr %word -1 to %oop
	%r23 = inttoptr %word 1 to %oop
	%r24 = load %oop, %oop* %t0
	%r28 = bitcast %oop %r24 to [0 x %oop]*
	%r27 = ptrtoint %oop %r23 to %word
	%r26 = getelementptr [0 x %oop], [0 x %oop]* %r28, %word 0, %word %r27
	store %oop %r22, %oop* %r26
	%r25 = bitcast %oop %r22 to %oop
	%r29 = load %oop, %oop* %t2
	store %oop %r29, %oop* %t1
	br label %L3
L2:
	%r30 = load %oop, %oop* @"m_+end+"
	store %oop %r30, %oop* %t1
	br label %L3
L3:
	%r31 = load %oop, %oop* %t1
	ret %oop %r31
}
@m_oclosure888 = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_code887 to %oop), %"<string>"* null }
@m_arr889 = private unnamed_addr constant [1 x %oop] [%oop bitcast (%"<target-function>"* @m_oclosure888 to %oop)]
@m_$next-table = global %oop bitcast ([1 x %oop]* @m_arr889 to %oop)@m_cstr890 = private unnamed_addr constant [11 x i8] c"selector '\00"
@m_ostr891 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr890 to %oop) }
@m_cstr892 = private unnamed_addr constant [6 x i8] c"$next\00"
@m_ostr893 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr892 to %oop) }
@m_cstr894 = private unnamed_addr constant [25 x i8] c" has no method for type \00"
@m_ostr895 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 49, %oop bitcast ([25 x i8]* @m_cstr894 to %oop) }
define %oop @m_$next.code(%oop %self) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	store %oop %self, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @m_type-of.code(%oop %r1)
	store %oop %r2, %oop* %t1
	%r3 = inttoptr %word 1 to %oop
	store %oop %r3, %oop* %t3
	%r4 = load %oop, %oop* %t1
	%r5 = inttoptr %word 26 to %oop
	%r9 = ptrtoint %oop %r5 to %word
	%r8 = ptrtoint %oop %r4 to %word
	%r7 = icmp sle %word %r9, %r8
	%r6 = inttoptr i1 %r7 to %oop
	store %oop %r6, %oop* %t3
	%r10 = inttoptr %word 0 to %oop
	%r14 = ptrtoint %oop %r10 to %word
	%r13 = ptrtoint %oop %r6 to %word
	%r12 = icmp eq %word %r14, %r13
	%r11 = inttoptr i1 %r12 to %oop
	%r16 = ptrtoint %oop %r11 to %word
	%r15 = icmp ne %word %r16, 0
	br i1 %r15, label %L4, label %L5
L5:
	%r17 = inttoptr %word 26 to %oop
	%r18 = load %oop, %oop* %t1
	%r22 = ptrtoint %oop %r18 to %word
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = icmp sle %word %r22, %r21
	%r19 = inttoptr i1 %r20 to %oop
	store %oop %r19, %oop* %t3
	%r23 = inttoptr %word 0 to %oop
	%r27 = ptrtoint %oop %r23 to %word
	%r26 = ptrtoint %oop %r19 to %word
	%r25 = icmp eq %word %r27, %r26
	%r24 = inttoptr i1 %r25 to %oop
	%r29 = ptrtoint %oop %r24 to %word
	%r28 = icmp ne %word %r29, 0
	br i1 %r28, label %L4, label %L6
L6:
	br label %L4
L4:
	%r30 = load %oop, %oop* %t3
	%r32 = ptrtoint %oop %r30 to %word
	%r31 = icmp ne %word %r32, 0
	br i1 %r31, label %L1, label %L2
L1:
	%r33 = inttoptr %word 0 to %oop
	store %oop %r33, %oop* %t2
	br label %L3
L2:
	%r34 = call %oop @m_error-prologue.code()
	%r35 = getelementptr %"<string>", %"<string>"* @m_ostr891, i32 0, i32 1
	%r36 = bitcast %word* %r35 to %oop
	%r37 = call %oop @"m_%error.code"(%oop %r36)
	%r38 = getelementptr %"<string>", %"<string>"* @m_ostr893, i32 0, i32 1
	%r39 = bitcast %word* %r38 to %oop
	%r40 = call %oop @"m_%error.code"(%oop %r39)
	%r41 = getelementptr %"<string>", %"<string>"* @m_ostr895, i32 0, i32 1
	%r42 = bitcast %word* %r41 to %oop
	%r43 = call %oop @"m_%error.code"(%oop %r42)
	%r44 = inttoptr %word 1 to %oop
	%r45 = inttoptr %word 1 to %oop
	%r46 = load %oop, %oop* %t1
	%r50 = ptrtoint %oop %r46 to %word
	%r49 = ptrtoint %oop %r45 to %word
	%r48 = shl %word %r50, %r49
	%r47 = inttoptr %word %r48 to %oop
	%r54 = ptrtoint %oop %r47 to %word
	%r53 = ptrtoint %oop %r44 to %word
	%r52 = or %word %r54, %r53
	%r51 = inttoptr %word %r52 to %oop
	%r55 = call %oop @"m_%error.code"(%oop %r51)
	%r56 = call %oop @m_error-epilogue.code()
	store %oop %r56, %oop* %t2
	br label %L3
L3:
	%r57 = load %oop, %oop* %t2
	%r58 = load %oop, %oop* %t0
	%r59 = inttoptr %word 26 to %oop
	%r60 = load %oop, %oop* %t1
	%r64 = ptrtoint %oop %r60 to %word
	%r63 = ptrtoint %oop %r59 to %word
	%r62 = sub %word %r64, %r63
	%r61 = inttoptr %word %r62 to %oop
	%r65 = load %oop, %oop* @m_$next-table
	%r69 = bitcast %oop %r65 to [0 x %oop]*
	%r68 = ptrtoint %oop %r61 to %word
	%r67 = getelementptr [0 x %oop], [0 x %oop]* %r69, %word 0, %word %r68
	%r66 = load %oop, %oop* %r67
	%r70 = bitcast %oop %r66 to %"<target-function>"*
	%r71 = getelementptr %"<target-function>", %"<target-function>"* %r70, i32 0, i32 1
	%r72 = load %oop, %oop* %r71
	%r74 = bitcast %oop %r72 to %oop (%oop)*
	%r73 = call %oop %r74(%oop %r58)
	ret %oop %r73
}
@m_cstr896 = private unnamed_addr constant [6 x i8] c"$next\00"
@m_ostr897 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr896 to %oop) }
@m_$next = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_$next.code to %oop), %"<string>"* @m_ostr897 }
@m_cstr899 = private unnamed_addr constant [31 x i8] c"<fd-stream> $put: write failed\00"
@m_ostr900 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 61, %oop bitcast ([31 x i8]* @m_cstr899 to %oop) }
define %oop @m_code898(%oop %self, %oop %"u/char") {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	store %oop %self, %oop* %t0
	store %oop %"u/char", %oop* %t1
	%r1 = inttoptr %word 1 to %oop
	%r2 = inttoptr %word 0 to %oop
	%r3 = load %oop, %oop* %t0
	%r7 = bitcast %oop %r3 to [0 x %oop]*
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = getelementptr [0 x %oop], [0 x %oop]* %r7, %word 0, %word %r6
	%r4 = load %oop, %oop* %r5
	%r9 = getelementptr %oop, %oop* %t1, %word 0
	%r8 = bitcast %oop* %r9 to %oop
	%r10 = inttoptr %word 1 to %oop
	%r11 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r1, %oop %r4, %oop %r8, %oop %r10)
	%r12 = inttoptr %word 1 to %oop
	%r16 = ptrtoint %oop %r12 to %word
	%r15 = ptrtoint %oop %r11 to %word
	%r14 = icmp eq %word %r16, %r15
	%r13 = inttoptr i1 %r14 to %oop
	%r18 = ptrtoint %oop %r13 to %word
	%r17 = icmp ne %word %r18, 0
	br i1 %r17, label %L1, label %L2
L1:
	%r19 = inttoptr %word 0 to %oop
	store %oop %r19, %oop* %t2
	br label %L3
L2:
	%r20 = call %oop @m_error-prologue.code()
	%r21 = getelementptr %"<string>", %"<string>"* @m_ostr900, i32 0, i32 1
	%r22 = bitcast %word* %r21 to %oop
	%r23 = call %oop @"m_%error.code"(%oop %r22)
	%r24 = call %oop @m_error-epilogue.code()
	store %oop %r24, %oop* %t2
	br label %L3
L3:
	%r25 = load %oop, %oop* %t2
	%r26 = load %oop, %oop* %t1
	ret %oop %r26
}
@m_oclosure901 = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @m_code898 to %oop), %"<string>"* null }
@m_arr902 = private unnamed_addr constant [1 x %oop] [%oop bitcast (%"<target-function>"* @m_oclosure901 to %oop)]
@m_$put-table = global %oop bitcast ([1 x %oop]* @m_arr902 to %oop)@m_cstr903 = private unnamed_addr constant [11 x i8] c"selector '\00"
@m_ostr904 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr903 to %oop) }
@m_cstr905 = private unnamed_addr constant [5 x i8] c"$put\00"
@m_ostr906 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr905 to %oop) }
@m_cstr907 = private unnamed_addr constant [25 x i8] c" has no method for type \00"
@m_ostr908 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 49, %oop bitcast ([25 x i8]* @m_cstr907 to %oop) }
define %oop @m_$put.code(%oop %self, %oop %"u/char") {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	store %oop %self, %oop* %t0
	store %oop %"u/char", %oop* %t1
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @m_type-of.code(%oop %r1)
	store %oop %r2, %oop* %t2
	%r3 = inttoptr %word 1 to %oop
	store %oop %r3, %oop* %t4
	%r4 = load %oop, %oop* %t2
	%r5 = inttoptr %word 26 to %oop
	%r9 = ptrtoint %oop %r5 to %word
	%r8 = ptrtoint %oop %r4 to %word
	%r7 = icmp sle %word %r9, %r8
	%r6 = inttoptr i1 %r7 to %oop
	store %oop %r6, %oop* %t4
	%r10 = inttoptr %word 0 to %oop
	%r14 = ptrtoint %oop %r10 to %word
	%r13 = ptrtoint %oop %r6 to %word
	%r12 = icmp eq %word %r14, %r13
	%r11 = inttoptr i1 %r12 to %oop
	%r16 = ptrtoint %oop %r11 to %word
	%r15 = icmp ne %word %r16, 0
	br i1 %r15, label %L4, label %L5
L5:
	%r17 = inttoptr %word 26 to %oop
	%r18 = load %oop, %oop* %t2
	%r22 = ptrtoint %oop %r18 to %word
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = icmp sle %word %r22, %r21
	%r19 = inttoptr i1 %r20 to %oop
	store %oop %r19, %oop* %t4
	%r23 = inttoptr %word 0 to %oop
	%r27 = ptrtoint %oop %r23 to %word
	%r26 = ptrtoint %oop %r19 to %word
	%r25 = icmp eq %word %r27, %r26
	%r24 = inttoptr i1 %r25 to %oop
	%r29 = ptrtoint %oop %r24 to %word
	%r28 = icmp ne %word %r29, 0
	br i1 %r28, label %L4, label %L6
L6:
	br label %L4
L4:
	%r30 = load %oop, %oop* %t4
	%r32 = ptrtoint %oop %r30 to %word
	%r31 = icmp ne %word %r32, 0
	br i1 %r31, label %L1, label %L2
L1:
	%r33 = inttoptr %word 0 to %oop
	store %oop %r33, %oop* %t3
	br label %L3
L2:
	%r34 = call %oop @m_error-prologue.code()
	%r35 = getelementptr %"<string>", %"<string>"* @m_ostr904, i32 0, i32 1
	%r36 = bitcast %word* %r35 to %oop
	%r37 = call %oop @"m_%error.code"(%oop %r36)
	%r38 = getelementptr %"<string>", %"<string>"* @m_ostr906, i32 0, i32 1
	%r39 = bitcast %word* %r38 to %oop
	%r40 = call %oop @"m_%error.code"(%oop %r39)
	%r41 = getelementptr %"<string>", %"<string>"* @m_ostr908, i32 0, i32 1
	%r42 = bitcast %word* %r41 to %oop
	%r43 = call %oop @"m_%error.code"(%oop %r42)
	%r44 = inttoptr %word 1 to %oop
	%r45 = inttoptr %word 1 to %oop
	%r46 = load %oop, %oop* %t2
	%r50 = ptrtoint %oop %r46 to %word
	%r49 = ptrtoint %oop %r45 to %word
	%r48 = shl %word %r50, %r49
	%r47 = inttoptr %word %r48 to %oop
	%r54 = ptrtoint %oop %r47 to %word
	%r53 = ptrtoint %oop %r44 to %word
	%r52 = or %word %r54, %r53
	%r51 = inttoptr %word %r52 to %oop
	%r55 = call %oop @"m_%error.code"(%oop %r51)
	%r56 = call %oop @m_error-epilogue.code()
	store %oop %r56, %oop* %t3
	br label %L3
L3:
	%r57 = load %oop, %oop* %t3
	%r58 = load %oop, %oop* %t0
	%r59 = load %oop, %oop* %t1
	%r60 = inttoptr %word 26 to %oop
	%r61 = load %oop, %oop* %t2
	%r65 = ptrtoint %oop %r61 to %word
	%r64 = ptrtoint %oop %r60 to %word
	%r63 = sub %word %r65, %r64
	%r62 = inttoptr %word %r63 to %oop
	%r66 = load %oop, %oop* @m_$put-table
	%r70 = bitcast %oop %r66 to [0 x %oop]*
	%r69 = ptrtoint %oop %r62 to %word
	%r68 = getelementptr [0 x %oop], [0 x %oop]* %r70, %word 0, %word %r69
	%r67 = load %oop, %oop* %r68
	%r71 = bitcast %oop %r67 to %"<target-function>"*
	%r72 = getelementptr %"<target-function>", %"<target-function>"* %r71, i32 0, i32 1
	%r73 = load %oop, %oop* %r72
	%r75 = bitcast %oop %r73 to %oop (%oop, %oop)*
	%r74 = call %oop %r75(%oop %r58, %oop %r59)
	ret %oop %r74
}
@m_cstr909 = private unnamed_addr constant [5 x i8] c"$put\00"
@m_ostr910 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr909 to %oop) }
@m_$put = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @m_$put.code to %oop), %"<string>"* @m_ostr910 }
@m_cstr912 = private unnamed_addr constant [35 x i8] c"<fd-stream> $put-all: write failed\00"
@m_ostr913 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 69, %oop bitcast ([35 x i8]* @m_cstr912 to %oop) }
@m_cstr914 = private unnamed_addr constant [44 x i8] c"<fd-stream> $put-all: unexpected elements: \00"
@m_ostr915 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 87, %oop bitcast ([44 x i8]* @m_cstr914 to %oop) }
define %oop @m_code911(%oop %self, %oop %elements) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	%t5 = alloca %oop
	%t4 = alloca %oop
	%t6 = alloca %oop
	store %oop %self, %oop* %t0
	store %oop %elements, %oop* %t1
	%r1 = load %oop, %oop* %t1
	store %oop %r1, %oop* %t2
	%r2 = load %oop, %oop* %t2
	%r3 = call %oop @m_type-of.code(%oop %r2)
	%r4 = inttoptr %word 13 to %oop
	%r8 = ptrtoint %oop %r4 to %word
	%r7 = ptrtoint %oop %r3 to %word
	%r6 = icmp eq %word %r8, %r7
	%r5 = inttoptr i1 %r6 to %oop
	%r10 = ptrtoint %oop %r5 to %word
	%r9 = icmp ne %word %r10, 0
	br i1 %r9, label %L1, label %L2
L1:
	%r11 = load %oop, %oop* %t1
	%r12 = call %oop @"m_%string->C-string.code"(%oop %r11)
	store %oop %r12, %oop* %t4
	%r13 = load %oop, %oop* %t1
	%r14 = call %oop @m_string-length.code(%oop %r13)
	store %oop %r14, %oop* %t5
	%r15 = inttoptr %word 1 to %oop
	%r16 = inttoptr %word 0 to %oop
	%r17 = load %oop, %oop* %t0
	%r21 = bitcast %oop %r17 to [0 x %oop]*
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = getelementptr [0 x %oop], [0 x %oop]* %r21, %word 0, %word %r20
	%r18 = load %oop, %oop* %r19
	%r22 = load %oop, %oop* %t4
	%r23 = load %oop, %oop* %t5
	%r24 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r15, %oop %r18, %oop %r22, %oop %r23)
	%r25 = load %oop, %oop* %t5
	%r29 = ptrtoint %oop %r25 to %word
	%r28 = ptrtoint %oop %r24 to %word
	%r27 = icmp eq %word %r29, %r28
	%r26 = inttoptr i1 %r27 to %oop
	%r31 = ptrtoint %oop %r26 to %word
	%r30 = icmp ne %word %r31, 0
	br i1 %r30, label %L4, label %L5
L4:
	%r32 = inttoptr %word 0 to %oop
	store %oop %r32, %oop* %t6
	br label %L6
L5:
	%r33 = call %oop @m_error-prologue.code()
	%r34 = getelementptr %"<string>", %"<string>"* @m_ostr913, i32 0, i32 1
	%r35 = bitcast %word* %r34 to %oop
	%r36 = call %oop @"m_%error.code"(%oop %r35)
	%r37 = call %oop @m_error-epilogue.code()
	store %oop %r37, %oop* %t6
	br label %L6
L6:
	%r38 = load %oop, %oop* %t6
	store %oop %r38, %oop* %t3
	br label %L3
L2:
	%r39 = call %oop @m_error-prologue.code()
	%r40 = getelementptr %"<string>", %"<string>"* @m_ostr915, i32 0, i32 1
	%r41 = bitcast %word* %r40 to %oop
	%r42 = call %oop @"m_%error.code"(%oop %r41)
	%r43 = load %oop, %oop* %t1
	%r44 = call %oop @"m_%error.code"(%oop %r43)
	%r45 = call %oop @m_error-epilogue.code()
	store %oop %r45, %oop* %t3
	br label %L3
L3:
	%r46 = load %oop, %oop* %t3
	%r47 = load %oop, %oop* %t1
	ret %oop %r47
}
@m_oclosure916 = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @m_code911 to %oop), %"<string>"* null }
@m_arr917 = private unnamed_addr constant [1 x %oop] [%oop bitcast (%"<target-function>"* @m_oclosure916 to %oop)]
@m_$put-all-table = global %oop bitcast ([1 x %oop]* @m_arr917 to %oop)@m_cstr918 = private unnamed_addr constant [11 x i8] c"selector '\00"
@m_ostr919 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr918 to %oop) }
@m_cstr920 = private unnamed_addr constant [9 x i8] c"$put-all\00"
@m_ostr921 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr920 to %oop) }
@m_cstr922 = private unnamed_addr constant [25 x i8] c" has no method for type \00"
@m_ostr923 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 49, %oop bitcast ([25 x i8]* @m_cstr922 to %oop) }
define %oop @m_$put-all.code(%oop %self, %oop %elements) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	store %oop %self, %oop* %t0
	store %oop %elements, %oop* %t1
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @m_type-of.code(%oop %r1)
	store %oop %r2, %oop* %t2
	%r3 = inttoptr %word 1 to %oop
	store %oop %r3, %oop* %t4
	%r4 = load %oop, %oop* %t2
	%r5 = inttoptr %word 26 to %oop
	%r9 = ptrtoint %oop %r5 to %word
	%r8 = ptrtoint %oop %r4 to %word
	%r7 = icmp sle %word %r9, %r8
	%r6 = inttoptr i1 %r7 to %oop
	store %oop %r6, %oop* %t4
	%r10 = inttoptr %word 0 to %oop
	%r14 = ptrtoint %oop %r10 to %word
	%r13 = ptrtoint %oop %r6 to %word
	%r12 = icmp eq %word %r14, %r13
	%r11 = inttoptr i1 %r12 to %oop
	%r16 = ptrtoint %oop %r11 to %word
	%r15 = icmp ne %word %r16, 0
	br i1 %r15, label %L4, label %L5
L5:
	%r17 = inttoptr %word 26 to %oop
	%r18 = load %oop, %oop* %t2
	%r22 = ptrtoint %oop %r18 to %word
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = icmp sle %word %r22, %r21
	%r19 = inttoptr i1 %r20 to %oop
	store %oop %r19, %oop* %t4
	%r23 = inttoptr %word 0 to %oop
	%r27 = ptrtoint %oop %r23 to %word
	%r26 = ptrtoint %oop %r19 to %word
	%r25 = icmp eq %word %r27, %r26
	%r24 = inttoptr i1 %r25 to %oop
	%r29 = ptrtoint %oop %r24 to %word
	%r28 = icmp ne %word %r29, 0
	br i1 %r28, label %L4, label %L6
L6:
	br label %L4
L4:
	%r30 = load %oop, %oop* %t4
	%r32 = ptrtoint %oop %r30 to %word
	%r31 = icmp ne %word %r32, 0
	br i1 %r31, label %L1, label %L2
L1:
	%r33 = inttoptr %word 0 to %oop
	store %oop %r33, %oop* %t3
	br label %L3
L2:
	%r34 = call %oop @m_error-prologue.code()
	%r35 = getelementptr %"<string>", %"<string>"* @m_ostr919, i32 0, i32 1
	%r36 = bitcast %word* %r35 to %oop
	%r37 = call %oop @"m_%error.code"(%oop %r36)
	%r38 = getelementptr %"<string>", %"<string>"* @m_ostr921, i32 0, i32 1
	%r39 = bitcast %word* %r38 to %oop
	%r40 = call %oop @"m_%error.code"(%oop %r39)
	%r41 = getelementptr %"<string>", %"<string>"* @m_ostr923, i32 0, i32 1
	%r42 = bitcast %word* %r41 to %oop
	%r43 = call %oop @"m_%error.code"(%oop %r42)
	%r44 = inttoptr %word 1 to %oop
	%r45 = inttoptr %word 1 to %oop
	%r46 = load %oop, %oop* %t2
	%r50 = ptrtoint %oop %r46 to %word
	%r49 = ptrtoint %oop %r45 to %word
	%r48 = shl %word %r50, %r49
	%r47 = inttoptr %word %r48 to %oop
	%r54 = ptrtoint %oop %r47 to %word
	%r53 = ptrtoint %oop %r44 to %word
	%r52 = or %word %r54, %r53
	%r51 = inttoptr %word %r52 to %oop
	%r55 = call %oop @"m_%error.code"(%oop %r51)
	%r56 = call %oop @m_error-epilogue.code()
	store %oop %r56, %oop* %t3
	br label %L3
L3:
	%r57 = load %oop, %oop* %t3
	%r58 = load %oop, %oop* %t0
	%r59 = load %oop, %oop* %t1
	%r60 = inttoptr %word 26 to %oop
	%r61 = load %oop, %oop* %t2
	%r65 = ptrtoint %oop %r61 to %word
	%r64 = ptrtoint %oop %r60 to %word
	%r63 = sub %word %r65, %r64
	%r62 = inttoptr %word %r63 to %oop
	%r66 = load %oop, %oop* @m_$put-all-table
	%r70 = bitcast %oop %r66 to [0 x %oop]*
	%r69 = ptrtoint %oop %r62 to %word
	%r68 = getelementptr [0 x %oop], [0 x %oop]* %r70, %word 0, %word %r69
	%r67 = load %oop, %oop* %r68
	%r71 = bitcast %oop %r67 to %"<target-function>"*
	%r72 = getelementptr %"<target-function>", %"<target-function>"* %r71, i32 0, i32 1
	%r73 = load %oop, %oop* %r72
	%r75 = bitcast %oop %r73 to %oop (%oop, %oop)*
	%r74 = call %oop %r75(%oop %r58, %oop %r59)
	ret %oop %r74
}
@m_cstr924 = private unnamed_addr constant [9 x i8] c"$put-all\00"
@m_ostr925 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr924 to %oop) }
@m_$put-all = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @m_$put-all.code to %oop), %"<string>"* @m_ostr925 }
define %oop @m_is_blank.code(%oop %c) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	store %oop %c, %oop* %t0
	%r1 = inttoptr %word 0 to %oop
	store %oop %r1, %oop* %t1
	%r2 = load %oop, %oop* %t0
	%r3 = inttoptr %word 32 to %oop
	%r7 = ptrtoint %oop %r3 to %word
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = icmp eq %word %r7, %r6
	%r4 = inttoptr i1 %r5 to %oop
	store %oop %r4, %oop* %t1
	%r8 = inttoptr %word 0 to %oop
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = ptrtoint %oop %r4 to %word
	%r10 = icmp eq %word %r12, %r11
	%r9 = inttoptr i1 %r10 to %oop
	%r14 = ptrtoint %oop %r9 to %word
	%r13 = icmp ne %word %r14, 0
	br i1 %r13, label %L2, label %L1
L2:
	%r15 = load %oop, %oop* %t0
	%r16 = inttoptr %word 9 to %oop
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = icmp eq %word %r20, %r19
	%r17 = inttoptr i1 %r18 to %oop
	store %oop %r17, %oop* %t1
	%r21 = inttoptr %word 0 to %oop
	%r25 = ptrtoint %oop %r21 to %word
	%r24 = ptrtoint %oop %r17 to %word
	%r23 = icmp eq %word %r25, %r24
	%r22 = inttoptr i1 %r23 to %oop
	%r27 = ptrtoint %oop %r22 to %word
	%r26 = icmp ne %word %r27, 0
	br i1 %r26, label %L3, label %L1
L3:
	%r28 = load %oop, %oop* %t0
	%r29 = inttoptr %word 10 to %oop
	%r33 = ptrtoint %oop %r29 to %word
	%r32 = ptrtoint %oop %r28 to %word
	%r31 = icmp eq %word %r33, %r32
	%r30 = inttoptr i1 %r31 to %oop
	store %oop %r30, %oop* %t1
	%r34 = inttoptr %word 0 to %oop
	%r38 = ptrtoint %oop %r34 to %word
	%r37 = ptrtoint %oop %r30 to %word
	%r36 = icmp eq %word %r38, %r37
	%r35 = inttoptr i1 %r36 to %oop
	%r40 = ptrtoint %oop %r35 to %word
	%r39 = icmp ne %word %r40, 0
	br i1 %r39, label %L4, label %L1
L4:
	%r41 = load %oop, %oop* %t0
	%r42 = inttoptr %word 11 to %oop
	%r46 = ptrtoint %oop %r42 to %word
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = icmp eq %word %r46, %r45
	%r43 = inttoptr i1 %r44 to %oop
	store %oop %r43, %oop* %t1
	%r47 = inttoptr %word 0 to %oop
	%r51 = ptrtoint %oop %r47 to %word
	%r50 = ptrtoint %oop %r43 to %word
	%r49 = icmp eq %word %r51, %r50
	%r48 = inttoptr i1 %r49 to %oop
	%r53 = ptrtoint %oop %r48 to %word
	%r52 = icmp ne %word %r53, 0
	br i1 %r52, label %L5, label %L1
L5:
	%r54 = load %oop, %oop* %t0
	%r55 = inttoptr %word 12 to %oop
	%r59 = ptrtoint %oop %r55 to %word
	%r58 = ptrtoint %oop %r54 to %word
	%r57 = icmp eq %word %r59, %r58
	%r56 = inttoptr i1 %r57 to %oop
	store %oop %r56, %oop* %t1
	%r60 = inttoptr %word 0 to %oop
	%r64 = ptrtoint %oop %r60 to %word
	%r63 = ptrtoint %oop %r56 to %word
	%r62 = icmp eq %word %r64, %r63
	%r61 = inttoptr i1 %r62 to %oop
	%r66 = ptrtoint %oop %r61 to %word
	%r65 = icmp ne %word %r66, 0
	br i1 %r65, label %L6, label %L1
L6:
	%r67 = load %oop, %oop* %t0
	%r68 = inttoptr %word 13 to %oop
	%r72 = ptrtoint %oop %r68 to %word
	%r71 = ptrtoint %oop %r67 to %word
	%r70 = icmp eq %word %r72, %r71
	%r69 = inttoptr i1 %r70 to %oop
	store %oop %r69, %oop* %t1
	%r73 = inttoptr %word 0 to %oop
	%r77 = ptrtoint %oop %r73 to %word
	%r76 = ptrtoint %oop %r69 to %word
	%r75 = icmp eq %word %r77, %r76
	%r74 = inttoptr i1 %r75 to %oop
	%r79 = ptrtoint %oop %r74 to %word
	%r78 = icmp ne %word %r79, 0
	br i1 %r78, label %L7, label %L1
L7:
	br label %L1
L1:
	%r80 = load %oop, %oop* %t1
	ret %oop %r80
}
@m_cstr926 = private unnamed_addr constant [9 x i8] c"is_blank\00"
@m_ostr927 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr926 to %oop) }
@m_is_blank = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_is_blank.code to %oop), %"<string>"* @m_ostr927 }
define %oop @m_is_alpha.code(%oop %c) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	%t2 = alloca %oop
	store %oop %c, %oop* %t0
	%r1 = inttoptr %word 0 to %oop
	store %oop %r1, %oop* %t1
	%r2 = inttoptr %word 1 to %oop
	store %oop %r2, %oop* %t2
	%r3 = load %oop, %oop* %t0
	%r4 = inttoptr %word 97 to %oop
	%r8 = ptrtoint %oop %r4 to %word
	%r7 = ptrtoint %oop %r3 to %word
	%r6 = icmp sle %word %r8, %r7
	%r5 = inttoptr i1 %r6 to %oop
	store %oop %r5, %oop* %t2
	%r9 = inttoptr %word 0 to %oop
	%r13 = ptrtoint %oop %r9 to %word
	%r12 = ptrtoint %oop %r5 to %word
	%r11 = icmp eq %word %r13, %r12
	%r10 = inttoptr i1 %r11 to %oop
	%r15 = ptrtoint %oop %r10 to %word
	%r14 = icmp ne %word %r15, 0
	br i1 %r14, label %L2, label %L3
L3:
	%r16 = inttoptr %word 122 to %oop
	%r17 = load %oop, %oop* %t0
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = icmp sle %word %r21, %r20
	%r18 = inttoptr i1 %r19 to %oop
	store %oop %r18, %oop* %t2
	%r22 = inttoptr %word 0 to %oop
	%r26 = ptrtoint %oop %r22 to %word
	%r25 = ptrtoint %oop %r18 to %word
	%r24 = icmp eq %word %r26, %r25
	%r23 = inttoptr i1 %r24 to %oop
	%r28 = ptrtoint %oop %r23 to %word
	%r27 = icmp ne %word %r28, 0
	br i1 %r27, label %L2, label %L4
L4:
	br label %L2
L2:
	%r29 = load %oop, %oop* %t2
	store %oop %r29, %oop* %t1
	%r30 = inttoptr %word 0 to %oop
	%r34 = ptrtoint %oop %r30 to %word
	%r33 = ptrtoint %oop %r29 to %word
	%r32 = icmp eq %word %r34, %r33
	%r31 = inttoptr i1 %r32 to %oop
	%r36 = ptrtoint %oop %r31 to %word
	%r35 = icmp ne %word %r36, 0
	br i1 %r35, label %L5, label %L1
L5:
	%r37 = inttoptr %word 1 to %oop
	store %oop %r37, %oop* %t2
	%r38 = load %oop, %oop* %t0
	%r39 = inttoptr %word 65 to %oop
	%r43 = ptrtoint %oop %r39 to %word
	%r42 = ptrtoint %oop %r38 to %word
	%r41 = icmp sle %word %r43, %r42
	%r40 = inttoptr i1 %r41 to %oop
	store %oop %r40, %oop* %t2
	%r44 = inttoptr %word 0 to %oop
	%r48 = ptrtoint %oop %r44 to %word
	%r47 = ptrtoint %oop %r40 to %word
	%r46 = icmp eq %word %r48, %r47
	%r45 = inttoptr i1 %r46 to %oop
	%r50 = ptrtoint %oop %r45 to %word
	%r49 = icmp ne %word %r50, 0
	br i1 %r49, label %L6, label %L7
L7:
	%r51 = inttoptr %word 90 to %oop
	%r52 = load %oop, %oop* %t0
	%r56 = ptrtoint %oop %r52 to %word
	%r55 = ptrtoint %oop %r51 to %word
	%r54 = icmp sle %word %r56, %r55
	%r53 = inttoptr i1 %r54 to %oop
	store %oop %r53, %oop* %t2
	%r57 = inttoptr %word 0 to %oop
	%r61 = ptrtoint %oop %r57 to %word
	%r60 = ptrtoint %oop %r53 to %word
	%r59 = icmp eq %word %r61, %r60
	%r58 = inttoptr i1 %r59 to %oop
	%r63 = ptrtoint %oop %r58 to %word
	%r62 = icmp ne %word %r63, 0
	br i1 %r62, label %L6, label %L8
L8:
	br label %L6
L6:
	%r64 = load %oop, %oop* %t2
	store %oop %r64, %oop* %t1
	%r65 = inttoptr %word 0 to %oop
	%r69 = ptrtoint %oop %r65 to %word
	%r68 = ptrtoint %oop %r64 to %word
	%r67 = icmp eq %word %r69, %r68
	%r66 = inttoptr i1 %r67 to %oop
	%r71 = ptrtoint %oop %r66 to %word
	%r70 = icmp ne %word %r71, 0
	br i1 %r70, label %L9, label %L1
L9:
	br label %L1
L1:
	%r72 = load %oop, %oop* %t1
	ret %oop %r72
}
@m_cstr928 = private unnamed_addr constant [9 x i8] c"is_alpha\00"
@m_ostr929 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr928 to %oop) }
@m_is_alpha = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_is_alpha.code to %oop), %"<string>"* @m_ostr929 }
define %oop @m_is_letter.code(%oop %c) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	%t2 = alloca %oop
	store %oop %c, %oop* %t0
	%r1 = inttoptr %word 0 to %oop
	store %oop %r1, %oop* %t1
	%r2 = load %oop, %oop* %t0
	%r3 = inttoptr %word 33 to %oop
	%r7 = ptrtoint %oop %r3 to %word
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = icmp eq %word %r7, %r6
	%r4 = inttoptr i1 %r5 to %oop
	store %oop %r4, %oop* %t1
	%r8 = inttoptr %word 0 to %oop
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = ptrtoint %oop %r4 to %word
	%r10 = icmp eq %word %r12, %r11
	%r9 = inttoptr i1 %r10 to %oop
	%r14 = ptrtoint %oop %r9 to %word
	%r13 = icmp ne %word %r14, 0
	br i1 %r13, label %L2, label %L1
L2:
	%r15 = inttoptr %word 1 to %oop
	store %oop %r15, %oop* %t2
	%r16 = load %oop, %oop* %t0
	%r17 = inttoptr %word 35 to %oop
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = icmp sle %word %r21, %r20
	%r18 = inttoptr i1 %r19 to %oop
	store %oop %r18, %oop* %t2
	%r22 = inttoptr %word 0 to %oop
	%r26 = ptrtoint %oop %r22 to %word
	%r25 = ptrtoint %oop %r18 to %word
	%r24 = icmp eq %word %r26, %r25
	%r23 = inttoptr i1 %r24 to %oop
	%r28 = ptrtoint %oop %r23 to %word
	%r27 = icmp ne %word %r28, 0
	br i1 %r27, label %L3, label %L4
L4:
	%r29 = inttoptr %word 38 to %oop
	%r30 = load %oop, %oop* %t0
	%r34 = ptrtoint %oop %r30 to %word
	%r33 = ptrtoint %oop %r29 to %word
	%r32 = icmp sle %word %r34, %r33
	%r31 = inttoptr i1 %r32 to %oop
	store %oop %r31, %oop* %t2
	%r35 = inttoptr %word 0 to %oop
	%r39 = ptrtoint %oop %r35 to %word
	%r38 = ptrtoint %oop %r31 to %word
	%r37 = icmp eq %word %r39, %r38
	%r36 = inttoptr i1 %r37 to %oop
	%r41 = ptrtoint %oop %r36 to %word
	%r40 = icmp ne %word %r41, 0
	br i1 %r40, label %L3, label %L5
L5:
	br label %L3
L3:
	%r42 = load %oop, %oop* %t2
	store %oop %r42, %oop* %t1
	%r43 = inttoptr %word 0 to %oop
	%r47 = ptrtoint %oop %r43 to %word
	%r46 = ptrtoint %oop %r42 to %word
	%r45 = icmp eq %word %r47, %r46
	%r44 = inttoptr i1 %r45 to %oop
	%r49 = ptrtoint %oop %r44 to %word
	%r48 = icmp ne %word %r49, 0
	br i1 %r48, label %L6, label %L1
L6:
	%r50 = inttoptr %word 1 to %oop
	store %oop %r50, %oop* %t2
	%r51 = load %oop, %oop* %t0
	%r52 = inttoptr %word 42 to %oop
	%r56 = ptrtoint %oop %r52 to %word
	%r55 = ptrtoint %oop %r51 to %word
	%r54 = icmp sle %word %r56, %r55
	%r53 = inttoptr i1 %r54 to %oop
	store %oop %r53, %oop* %t2
	%r57 = inttoptr %word 0 to %oop
	%r61 = ptrtoint %oop %r57 to %word
	%r60 = ptrtoint %oop %r53 to %word
	%r59 = icmp eq %word %r61, %r60
	%r58 = inttoptr i1 %r59 to %oop
	%r63 = ptrtoint %oop %r58 to %word
	%r62 = icmp ne %word %r63, 0
	br i1 %r62, label %L7, label %L8
L8:
	%r64 = inttoptr %word 47 to %oop
	%r65 = load %oop, %oop* %t0
	%r69 = ptrtoint %oop %r65 to %word
	%r68 = ptrtoint %oop %r64 to %word
	%r67 = icmp sle %word %r69, %r68
	%r66 = inttoptr i1 %r67 to %oop
	store %oop %r66, %oop* %t2
	%r70 = inttoptr %word 0 to %oop
	%r74 = ptrtoint %oop %r70 to %word
	%r73 = ptrtoint %oop %r66 to %word
	%r72 = icmp eq %word %r74, %r73
	%r71 = inttoptr i1 %r72 to %oop
	%r76 = ptrtoint %oop %r71 to %word
	%r75 = icmp ne %word %r76, 0
	br i1 %r75, label %L7, label %L9
L9:
	br label %L7
L7:
	%r77 = load %oop, %oop* %t2
	store %oop %r77, %oop* %t1
	%r78 = inttoptr %word 0 to %oop
	%r82 = ptrtoint %oop %r78 to %word
	%r81 = ptrtoint %oop %r77 to %word
	%r80 = icmp eq %word %r82, %r81
	%r79 = inttoptr i1 %r80 to %oop
	%r84 = ptrtoint %oop %r79 to %word
	%r83 = icmp ne %word %r84, 0
	br i1 %r83, label %L10, label %L1
L10:
	%r85 = load %oop, %oop* %t0
	%r86 = inttoptr %word 58 to %oop
	%r90 = ptrtoint %oop %r86 to %word
	%r89 = ptrtoint %oop %r85 to %word
	%r88 = icmp eq %word %r90, %r89
	%r87 = inttoptr i1 %r88 to %oop
	store %oop %r87, %oop* %t1
	%r91 = inttoptr %word 0 to %oop
	%r95 = ptrtoint %oop %r91 to %word
	%r94 = ptrtoint %oop %r87 to %word
	%r93 = icmp eq %word %r95, %r94
	%r92 = inttoptr i1 %r93 to %oop
	%r97 = ptrtoint %oop %r92 to %word
	%r96 = icmp ne %word %r97, 0
	br i1 %r96, label %L11, label %L1
L11:
	%r98 = inttoptr %word 1 to %oop
	store %oop %r98, %oop* %t2
	%r99 = load %oop, %oop* %t0
	%r100 = inttoptr %word 60 to %oop
	%r104 = ptrtoint %oop %r100 to %word
	%r103 = ptrtoint %oop %r99 to %word
	%r102 = icmp sle %word %r104, %r103
	%r101 = inttoptr i1 %r102 to %oop
	store %oop %r101, %oop* %t2
	%r105 = inttoptr %word 0 to %oop
	%r109 = ptrtoint %oop %r105 to %word
	%r108 = ptrtoint %oop %r101 to %word
	%r107 = icmp eq %word %r109, %r108
	%r106 = inttoptr i1 %r107 to %oop
	%r111 = ptrtoint %oop %r106 to %word
	%r110 = icmp ne %word %r111, 0
	br i1 %r110, label %L12, label %L13
L13:
	%r112 = inttoptr %word 90 to %oop
	%r113 = load %oop, %oop* %t0
	%r117 = ptrtoint %oop %r113 to %word
	%r116 = ptrtoint %oop %r112 to %word
	%r115 = icmp sle %word %r117, %r116
	%r114 = inttoptr i1 %r115 to %oop
	store %oop %r114, %oop* %t2
	%r118 = inttoptr %word 0 to %oop
	%r122 = ptrtoint %oop %r118 to %word
	%r121 = ptrtoint %oop %r114 to %word
	%r120 = icmp eq %word %r122, %r121
	%r119 = inttoptr i1 %r120 to %oop
	%r124 = ptrtoint %oop %r119 to %word
	%r123 = icmp ne %word %r124, 0
	br i1 %r123, label %L12, label %L14
L14:
	br label %L12
L12:
	%r125 = load %oop, %oop* %t2
	store %oop %r125, %oop* %t1
	%r126 = inttoptr %word 0 to %oop
	%r130 = ptrtoint %oop %r126 to %word
	%r129 = ptrtoint %oop %r125 to %word
	%r128 = icmp eq %word %r130, %r129
	%r127 = inttoptr i1 %r128 to %oop
	%r132 = ptrtoint %oop %r127 to %word
	%r131 = icmp ne %word %r132, 0
	br i1 %r131, label %L15, label %L1
L15:
	%r133 = load %oop, %oop* %t0
	%r134 = inttoptr %word 92 to %oop
	%r138 = ptrtoint %oop %r134 to %word
	%r137 = ptrtoint %oop %r133 to %word
	%r136 = icmp eq %word %r138, %r137
	%r135 = inttoptr i1 %r136 to %oop
	store %oop %r135, %oop* %t1
	%r139 = inttoptr %word 0 to %oop
	%r143 = ptrtoint %oop %r139 to %word
	%r142 = ptrtoint %oop %r135 to %word
	%r141 = icmp eq %word %r143, %r142
	%r140 = inttoptr i1 %r141 to %oop
	%r145 = ptrtoint %oop %r140 to %word
	%r144 = icmp ne %word %r145, 0
	br i1 %r144, label %L16, label %L1
L16:
	%r146 = load %oop, %oop* %t0
	%r147 = inttoptr %word 94 to %oop
	%r151 = ptrtoint %oop %r147 to %word
	%r150 = ptrtoint %oop %r146 to %word
	%r149 = icmp eq %word %r151, %r150
	%r148 = inttoptr i1 %r149 to %oop
	store %oop %r148, %oop* %t1
	%r152 = inttoptr %word 0 to %oop
	%r156 = ptrtoint %oop %r152 to %word
	%r155 = ptrtoint %oop %r148 to %word
	%r154 = icmp eq %word %r156, %r155
	%r153 = inttoptr i1 %r154 to %oop
	%r158 = ptrtoint %oop %r153 to %word
	%r157 = icmp ne %word %r158, 0
	br i1 %r157, label %L17, label %L1
L17:
	%r159 = load %oop, %oop* %t0
	%r160 = inttoptr %word 95 to %oop
	%r164 = ptrtoint %oop %r160 to %word
	%r163 = ptrtoint %oop %r159 to %word
	%r162 = icmp eq %word %r164, %r163
	%r161 = inttoptr i1 %r162 to %oop
	store %oop %r161, %oop* %t1
	%r165 = inttoptr %word 0 to %oop
	%r169 = ptrtoint %oop %r165 to %word
	%r168 = ptrtoint %oop %r161 to %word
	%r167 = icmp eq %word %r169, %r168
	%r166 = inttoptr i1 %r167 to %oop
	%r171 = ptrtoint %oop %r166 to %word
	%r170 = icmp ne %word %r171, 0
	br i1 %r170, label %L18, label %L1
L18:
	%r172 = inttoptr %word 1 to %oop
	store %oop %r172, %oop* %t2
	%r173 = load %oop, %oop* %t0
	%r174 = inttoptr %word 97 to %oop
	%r178 = ptrtoint %oop %r174 to %word
	%r177 = ptrtoint %oop %r173 to %word
	%r176 = icmp sle %word %r178, %r177
	%r175 = inttoptr i1 %r176 to %oop
	store %oop %r175, %oop* %t2
	%r179 = inttoptr %word 0 to %oop
	%r183 = ptrtoint %oop %r179 to %word
	%r182 = ptrtoint %oop %r175 to %word
	%r181 = icmp eq %word %r183, %r182
	%r180 = inttoptr i1 %r181 to %oop
	%r185 = ptrtoint %oop %r180 to %word
	%r184 = icmp ne %word %r185, 0
	br i1 %r184, label %L19, label %L20
L20:
	%r186 = inttoptr %word 122 to %oop
	%r187 = load %oop, %oop* %t0
	%r191 = ptrtoint %oop %r187 to %word
	%r190 = ptrtoint %oop %r186 to %word
	%r189 = icmp sle %word %r191, %r190
	%r188 = inttoptr i1 %r189 to %oop
	store %oop %r188, %oop* %t2
	%r192 = inttoptr %word 0 to %oop
	%r196 = ptrtoint %oop %r192 to %word
	%r195 = ptrtoint %oop %r188 to %word
	%r194 = icmp eq %word %r196, %r195
	%r193 = inttoptr i1 %r194 to %oop
	%r198 = ptrtoint %oop %r193 to %word
	%r197 = icmp ne %word %r198, 0
	br i1 %r197, label %L19, label %L21
L21:
	br label %L19
L19:
	%r199 = load %oop, %oop* %t2
	store %oop %r199, %oop* %t1
	%r200 = inttoptr %word 0 to %oop
	%r204 = ptrtoint %oop %r200 to %word
	%r203 = ptrtoint %oop %r199 to %word
	%r202 = icmp eq %word %r204, %r203
	%r201 = inttoptr i1 %r202 to %oop
	%r206 = ptrtoint %oop %r201 to %word
	%r205 = icmp ne %word %r206, 0
	br i1 %r205, label %L22, label %L1
L22:
	%r207 = load %oop, %oop* %t0
	%r208 = inttoptr %word 124 to %oop
	%r212 = ptrtoint %oop %r208 to %word
	%r211 = ptrtoint %oop %r207 to %word
	%r210 = icmp eq %word %r212, %r211
	%r209 = inttoptr i1 %r210 to %oop
	store %oop %r209, %oop* %t1
	%r213 = inttoptr %word 0 to %oop
	%r217 = ptrtoint %oop %r213 to %word
	%r216 = ptrtoint %oop %r209 to %word
	%r215 = icmp eq %word %r217, %r216
	%r214 = inttoptr i1 %r215 to %oop
	%r219 = ptrtoint %oop %r214 to %word
	%r218 = icmp ne %word %r219, 0
	br i1 %r218, label %L23, label %L1
L23:
	%r220 = load %oop, %oop* %t0
	%r221 = inttoptr %word 126 to %oop
	%r225 = ptrtoint %oop %r221 to %word
	%r224 = ptrtoint %oop %r220 to %word
	%r223 = icmp eq %word %r225, %r224
	%r222 = inttoptr i1 %r223 to %oop
	store %oop %r222, %oop* %t1
	%r226 = inttoptr %word 0 to %oop
	%r230 = ptrtoint %oop %r226 to %word
	%r229 = ptrtoint %oop %r222 to %word
	%r228 = icmp eq %word %r230, %r229
	%r227 = inttoptr i1 %r228 to %oop
	%r232 = ptrtoint %oop %r227 to %word
	%r231 = icmp ne %word %r232, 0
	br i1 %r231, label %L24, label %L1
L24:
	br label %L1
L1:
	%r233 = load %oop, %oop* %t1
	ret %oop %r233
}
@m_cstr930 = private unnamed_addr constant [10 x i8] c"is_letter\00"
@m_ostr931 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 19, %oop bitcast ([10 x i8]* @m_cstr930 to %oop) }
@m_is_letter = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_is_letter.code to %oop), %"<string>"* @m_ostr931 }
define %oop @m_is_digit8.code(%oop %c) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	store %oop %c, %oop* %t0
	%r1 = inttoptr %word 1 to %oop
	store %oop %r1, %oop* %t1
	%r2 = load %oop, %oop* %t0
	%r3 = inttoptr %word 48 to %oop
	%r7 = ptrtoint %oop %r3 to %word
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = icmp sle %word %r7, %r6
	%r4 = inttoptr i1 %r5 to %oop
	store %oop %r4, %oop* %t1
	%r8 = inttoptr %word 0 to %oop
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = ptrtoint %oop %r4 to %word
	%r10 = icmp eq %word %r12, %r11
	%r9 = inttoptr i1 %r10 to %oop
	%r14 = ptrtoint %oop %r9 to %word
	%r13 = icmp ne %word %r14, 0
	br i1 %r13, label %L1, label %L2
L2:
	%r15 = inttoptr %word 55 to %oop
	%r16 = load %oop, %oop* %t0
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = icmp sle %word %r20, %r19
	%r17 = inttoptr i1 %r18 to %oop
	store %oop %r17, %oop* %t1
	%r21 = inttoptr %word 0 to %oop
	%r25 = ptrtoint %oop %r21 to %word
	%r24 = ptrtoint %oop %r17 to %word
	%r23 = icmp eq %word %r25, %r24
	%r22 = inttoptr i1 %r23 to %oop
	%r27 = ptrtoint %oop %r22 to %word
	%r26 = icmp ne %word %r27, 0
	br i1 %r26, label %L1, label %L3
L3:
	br label %L1
L1:
	%r28 = load %oop, %oop* %t1
	ret %oop %r28
}
@m_cstr932 = private unnamed_addr constant [10 x i8] c"is_digit8\00"
@m_ostr933 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 19, %oop bitcast ([10 x i8]* @m_cstr932 to %oop) }
@m_is_digit8 = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_is_digit8.code to %oop), %"<string>"* @m_ostr933 }
define %oop @m_is_digit10.code(%oop %c) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	store %oop %c, %oop* %t0
	%r1 = inttoptr %word 1 to %oop
	store %oop %r1, %oop* %t1
	%r2 = load %oop, %oop* %t0
	%r3 = inttoptr %word 48 to %oop
	%r7 = ptrtoint %oop %r3 to %word
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = icmp sle %word %r7, %r6
	%r4 = inttoptr i1 %r5 to %oop
	store %oop %r4, %oop* %t1
	%r8 = inttoptr %word 0 to %oop
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = ptrtoint %oop %r4 to %word
	%r10 = icmp eq %word %r12, %r11
	%r9 = inttoptr i1 %r10 to %oop
	%r14 = ptrtoint %oop %r9 to %word
	%r13 = icmp ne %word %r14, 0
	br i1 %r13, label %L1, label %L2
L2:
	%r15 = inttoptr %word 57 to %oop
	%r16 = load %oop, %oop* %t0
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = icmp sle %word %r20, %r19
	%r17 = inttoptr i1 %r18 to %oop
	store %oop %r17, %oop* %t1
	%r21 = inttoptr %word 0 to %oop
	%r25 = ptrtoint %oop %r21 to %word
	%r24 = ptrtoint %oop %r17 to %word
	%r23 = icmp eq %word %r25, %r24
	%r22 = inttoptr i1 %r23 to %oop
	%r27 = ptrtoint %oop %r22 to %word
	%r26 = icmp ne %word %r27, 0
	br i1 %r26, label %L1, label %L3
L3:
	br label %L1
L1:
	%r28 = load %oop, %oop* %t1
	ret %oop %r28
}
@m_cstr934 = private unnamed_addr constant [11 x i8] c"is_digit10\00"
@m_ostr935 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr934 to %oop) }
@m_is_digit10 = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_is_digit10.code to %oop), %"<string>"* @m_ostr935 }
define %oop @m_is_digit16.code(%oop %c) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	%t2 = alloca %oop
	store %oop %c, %oop* %t0
	%r1 = inttoptr %word 0 to %oop
	store %oop %r1, %oop* %t1
	%r2 = inttoptr %word 1 to %oop
	store %oop %r2, %oop* %t2
	%r3 = load %oop, %oop* %t0
	%r4 = inttoptr %word 48 to %oop
	%r8 = ptrtoint %oop %r4 to %word
	%r7 = ptrtoint %oop %r3 to %word
	%r6 = icmp sle %word %r8, %r7
	%r5 = inttoptr i1 %r6 to %oop
	store %oop %r5, %oop* %t2
	%r9 = inttoptr %word 0 to %oop
	%r13 = ptrtoint %oop %r9 to %word
	%r12 = ptrtoint %oop %r5 to %word
	%r11 = icmp eq %word %r13, %r12
	%r10 = inttoptr i1 %r11 to %oop
	%r15 = ptrtoint %oop %r10 to %word
	%r14 = icmp ne %word %r15, 0
	br i1 %r14, label %L2, label %L3
L3:
	%r16 = inttoptr %word 57 to %oop
	%r17 = load %oop, %oop* %t0
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = icmp sle %word %r21, %r20
	%r18 = inttoptr i1 %r19 to %oop
	store %oop %r18, %oop* %t2
	%r22 = inttoptr %word 0 to %oop
	%r26 = ptrtoint %oop %r22 to %word
	%r25 = ptrtoint %oop %r18 to %word
	%r24 = icmp eq %word %r26, %r25
	%r23 = inttoptr i1 %r24 to %oop
	%r28 = ptrtoint %oop %r23 to %word
	%r27 = icmp ne %word %r28, 0
	br i1 %r27, label %L2, label %L4
L4:
	br label %L2
L2:
	%r29 = load %oop, %oop* %t2
	store %oop %r29, %oop* %t1
	%r30 = inttoptr %word 0 to %oop
	%r34 = ptrtoint %oop %r30 to %word
	%r33 = ptrtoint %oop %r29 to %word
	%r32 = icmp eq %word %r34, %r33
	%r31 = inttoptr i1 %r32 to %oop
	%r36 = ptrtoint %oop %r31 to %word
	%r35 = icmp ne %word %r36, 0
	br i1 %r35, label %L5, label %L1
L5:
	%r37 = inttoptr %word 1 to %oop
	store %oop %r37, %oop* %t2
	%r38 = load %oop, %oop* %t0
	%r39 = inttoptr %word 97 to %oop
	%r43 = ptrtoint %oop %r39 to %word
	%r42 = ptrtoint %oop %r38 to %word
	%r41 = icmp sle %word %r43, %r42
	%r40 = inttoptr i1 %r41 to %oop
	store %oop %r40, %oop* %t2
	%r44 = inttoptr %word 0 to %oop
	%r48 = ptrtoint %oop %r44 to %word
	%r47 = ptrtoint %oop %r40 to %word
	%r46 = icmp eq %word %r48, %r47
	%r45 = inttoptr i1 %r46 to %oop
	%r50 = ptrtoint %oop %r45 to %word
	%r49 = icmp ne %word %r50, 0
	br i1 %r49, label %L6, label %L7
L7:
	%r51 = inttoptr %word 102 to %oop
	%r52 = load %oop, %oop* %t0
	%r56 = ptrtoint %oop %r52 to %word
	%r55 = ptrtoint %oop %r51 to %word
	%r54 = icmp sle %word %r56, %r55
	%r53 = inttoptr i1 %r54 to %oop
	store %oop %r53, %oop* %t2
	%r57 = inttoptr %word 0 to %oop
	%r61 = ptrtoint %oop %r57 to %word
	%r60 = ptrtoint %oop %r53 to %word
	%r59 = icmp eq %word %r61, %r60
	%r58 = inttoptr i1 %r59 to %oop
	%r63 = ptrtoint %oop %r58 to %word
	%r62 = icmp ne %word %r63, 0
	br i1 %r62, label %L6, label %L8
L8:
	br label %L6
L6:
	%r64 = load %oop, %oop* %t2
	store %oop %r64, %oop* %t1
	%r65 = inttoptr %word 0 to %oop
	%r69 = ptrtoint %oop %r65 to %word
	%r68 = ptrtoint %oop %r64 to %word
	%r67 = icmp eq %word %r69, %r68
	%r66 = inttoptr i1 %r67 to %oop
	%r71 = ptrtoint %oop %r66 to %word
	%r70 = icmp ne %word %r71, 0
	br i1 %r70, label %L9, label %L1
L9:
	%r72 = inttoptr %word 1 to %oop
	store %oop %r72, %oop* %t2
	%r73 = load %oop, %oop* %t0
	%r74 = inttoptr %word 65 to %oop
	%r78 = ptrtoint %oop %r74 to %word
	%r77 = ptrtoint %oop %r73 to %word
	%r76 = icmp sle %word %r78, %r77
	%r75 = inttoptr i1 %r76 to %oop
	store %oop %r75, %oop* %t2
	%r79 = inttoptr %word 0 to %oop
	%r83 = ptrtoint %oop %r79 to %word
	%r82 = ptrtoint %oop %r75 to %word
	%r81 = icmp eq %word %r83, %r82
	%r80 = inttoptr i1 %r81 to %oop
	%r85 = ptrtoint %oop %r80 to %word
	%r84 = icmp ne %word %r85, 0
	br i1 %r84, label %L10, label %L11
L11:
	%r86 = inttoptr %word 70 to %oop
	%r87 = load %oop, %oop* %t0
	%r91 = ptrtoint %oop %r87 to %word
	%r90 = ptrtoint %oop %r86 to %word
	%r89 = icmp sle %word %r91, %r90
	%r88 = inttoptr i1 %r89 to %oop
	store %oop %r88, %oop* %t2
	%r92 = inttoptr %word 0 to %oop
	%r96 = ptrtoint %oop %r92 to %word
	%r95 = ptrtoint %oop %r88 to %word
	%r94 = icmp eq %word %r96, %r95
	%r93 = inttoptr i1 %r94 to %oop
	%r98 = ptrtoint %oop %r93 to %word
	%r97 = icmp ne %word %r98, 0
	br i1 %r97, label %L10, label %L12
L12:
	br label %L10
L10:
	%r99 = load %oop, %oop* %t2
	store %oop %r99, %oop* %t1
	%r100 = inttoptr %word 0 to %oop
	%r104 = ptrtoint %oop %r100 to %word
	%r103 = ptrtoint %oop %r99 to %word
	%r102 = icmp eq %word %r104, %r103
	%r101 = inttoptr i1 %r102 to %oop
	%r106 = ptrtoint %oop %r101 to %word
	%r105 = icmp ne %word %r106, 0
	br i1 %r105, label %L13, label %L1
L13:
	br label %L1
L1:
	%r107 = load %oop, %oop* %t1
	ret %oop %r107
}
@m_cstr936 = private unnamed_addr constant [11 x i8] c"is_digit16\00"
@m_ostr937 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr936 to %oop) }
@m_is_digit16 = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_is_digit16.code to %oop), %"<string>"* @m_ostr937 }
@m_cstr938 = private unnamed_addr constant [38 x i8] c"illegal digit in character escape: %c\00"
@m_cstr939 = private unnamed_addr constant [2 x i8] c"\0A\00"
define %oop @m_digit_value.code(%oop %c) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	store %oop %c, %oop* %t0
	%r1 = inttoptr %word 1 to %oop
	store %oop %r1, %oop* %t2
	%r2 = load %oop, %oop* %t0
	%r3 = inttoptr %word 48 to %oop
	%r7 = ptrtoint %oop %r3 to %word
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = icmp sle %word %r7, %r6
	%r4 = inttoptr i1 %r5 to %oop
	store %oop %r4, %oop* %t2
	%r8 = inttoptr %word 0 to %oop
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = ptrtoint %oop %r4 to %word
	%r10 = icmp eq %word %r12, %r11
	%r9 = inttoptr i1 %r10 to %oop
	%r14 = ptrtoint %oop %r9 to %word
	%r13 = icmp ne %word %r14, 0
	br i1 %r13, label %L4, label %L5
L5:
	%r15 = inttoptr %word 57 to %oop
	%r16 = load %oop, %oop* %t0
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = icmp sle %word %r20, %r19
	%r17 = inttoptr i1 %r18 to %oop
	store %oop %r17, %oop* %t2
	%r21 = inttoptr %word 0 to %oop
	%r25 = ptrtoint %oop %r21 to %word
	%r24 = ptrtoint %oop %r17 to %word
	%r23 = icmp eq %word %r25, %r24
	%r22 = inttoptr i1 %r23 to %oop
	%r27 = ptrtoint %oop %r22 to %word
	%r26 = icmp ne %word %r27, 0
	br i1 %r26, label %L4, label %L6
L6:
	br label %L4
L4:
	%r28 = load %oop, %oop* %t2
	%r30 = ptrtoint %oop %r28 to %word
	%r29 = icmp ne %word %r30, 0
	br i1 %r29, label %L1, label %L2
L1:
	%r31 = inttoptr %word 48 to %oop
	%r32 = load %oop, %oop* %t0
	%r36 = ptrtoint %oop %r32 to %word
	%r35 = ptrtoint %oop %r31 to %word
	%r34 = sub %word %r36, %r35
	%r33 = inttoptr %word %r34 to %oop
	store %oop %r33, %oop* %t1
	br label %L3
L2:
	%r37 = inttoptr %word 1 to %oop
	store %oop %r37, %oop* %t3
	%r38 = load %oop, %oop* %t0
	%r39 = inttoptr %word 97 to %oop
	%r43 = ptrtoint %oop %r39 to %word
	%r42 = ptrtoint %oop %r38 to %word
	%r41 = icmp sle %word %r43, %r42
	%r40 = inttoptr i1 %r41 to %oop
	store %oop %r40, %oop* %t3
	%r44 = inttoptr %word 0 to %oop
	%r48 = ptrtoint %oop %r44 to %word
	%r47 = ptrtoint %oop %r40 to %word
	%r46 = icmp eq %word %r48, %r47
	%r45 = inttoptr i1 %r46 to %oop
	%r50 = ptrtoint %oop %r45 to %word
	%r49 = icmp ne %word %r50, 0
	br i1 %r49, label %L10, label %L11
L11:
	%r51 = inttoptr %word 122 to %oop
	%r52 = load %oop, %oop* %t0
	%r56 = ptrtoint %oop %r52 to %word
	%r55 = ptrtoint %oop %r51 to %word
	%r54 = icmp sle %word %r56, %r55
	%r53 = inttoptr i1 %r54 to %oop
	store %oop %r53, %oop* %t3
	%r57 = inttoptr %word 0 to %oop
	%r61 = ptrtoint %oop %r57 to %word
	%r60 = ptrtoint %oop %r53 to %word
	%r59 = icmp eq %word %r61, %r60
	%r58 = inttoptr i1 %r59 to %oop
	%r63 = ptrtoint %oop %r58 to %word
	%r62 = icmp ne %word %r63, 0
	br i1 %r62, label %L10, label %L12
L12:
	br label %L10
L10:
	%r64 = load %oop, %oop* %t3
	%r66 = ptrtoint %oop %r64 to %word
	%r65 = icmp ne %word %r66, 0
	br i1 %r65, label %L7, label %L8
L7:
	%r67 = inttoptr %word 10 to %oop
	%r68 = inttoptr %word 97 to %oop
	%r72 = ptrtoint %oop %r68 to %word
	%r71 = ptrtoint %oop %r67 to %word
	%r70 = sub %word %r72, %r71
	%r69 = inttoptr %word %r70 to %oop
	%r73 = load %oop, %oop* %t0
	%r77 = ptrtoint %oop %r73 to %word
	%r76 = ptrtoint %oop %r69 to %word
	%r75 = sub %word %r77, %r76
	%r74 = inttoptr %word %r75 to %oop
	store %oop %r74, %oop* %t2
	br label %L9
L8:
	%r78 = inttoptr %word 1 to %oop
	store %oop %r78, %oop* %t4
	%r79 = load %oop, %oop* %t0
	%r80 = inttoptr %word 65 to %oop
	%r84 = ptrtoint %oop %r80 to %word
	%r83 = ptrtoint %oop %r79 to %word
	%r82 = icmp sle %word %r84, %r83
	%r81 = inttoptr i1 %r82 to %oop
	store %oop %r81, %oop* %t4
	%r85 = inttoptr %word 0 to %oop
	%r89 = ptrtoint %oop %r85 to %word
	%r88 = ptrtoint %oop %r81 to %word
	%r87 = icmp eq %word %r89, %r88
	%r86 = inttoptr i1 %r87 to %oop
	%r91 = ptrtoint %oop %r86 to %word
	%r90 = icmp ne %word %r91, 0
	br i1 %r90, label %L16, label %L17
L17:
	%r92 = inttoptr %word 90 to %oop
	%r93 = load %oop, %oop* %t0
	%r97 = ptrtoint %oop %r93 to %word
	%r96 = ptrtoint %oop %r92 to %word
	%r95 = icmp sle %word %r97, %r96
	%r94 = inttoptr i1 %r95 to %oop
	store %oop %r94, %oop* %t4
	%r98 = inttoptr %word 0 to %oop
	%r102 = ptrtoint %oop %r98 to %word
	%r101 = ptrtoint %oop %r94 to %word
	%r100 = icmp eq %word %r102, %r101
	%r99 = inttoptr i1 %r100 to %oop
	%r104 = ptrtoint %oop %r99 to %word
	%r103 = icmp ne %word %r104, 0
	br i1 %r103, label %L16, label %L18
L18:
	br label %L16
L16:
	%r105 = load %oop, %oop* %t4
	%r107 = ptrtoint %oop %r105 to %word
	%r106 = icmp ne %word %r107, 0
	br i1 %r106, label %L13, label %L14
L13:
	%r108 = inttoptr %word 10 to %oop
	%r109 = inttoptr %word 65 to %oop
	%r113 = ptrtoint %oop %r109 to %word
	%r112 = ptrtoint %oop %r108 to %word
	%r111 = sub %word %r113, %r112
	%r110 = inttoptr %word %r111 to %oop
	%r114 = load %oop, %oop* %t0
	%r118 = ptrtoint %oop %r114 to %word
	%r117 = ptrtoint %oop %r110 to %word
	%r116 = sub %word %r118, %r117
	%r115 = inttoptr %word %r116 to %oop
	store %oop %r115, %oop* %t3
	br label %L15
L14:
	%r119 = call %oop @m_fatal-prologue.code()
	%r120 = inttoptr %word 1 to %oop
	%r121 = inttoptr %word 2 to %oop
	%r122 = getelementptr [38 x i8], [38 x i8]* @m_cstr938, %word 0, %word 0
	%r124 = inttoptr %word 37 to %oop
	%r125 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r120, %oop %r121, %oop %r122, %oop %r124)
	%r126 = inttoptr %word 1 to %oop
	%r127 = inttoptr %word 2 to %oop
	%r128 = getelementptr [2 x i8], [2 x i8]* @m_cstr939, %word 0, %word 0
	%r130 = inttoptr %word 1 to %oop
	%r131 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r126, %oop %r127, %oop %r128, %oop %r130)
	%r132 = call %oop @m_fatal-epilogue.code()
	store %oop %r132, %oop* %t3
	br label %L15
L15:
	%r133 = load %oop, %oop* %t3
	store %oop %r133, %oop* %t2
	br label %L9
L9:
	%r134 = load %oop, %oop* %t2
	store %oop %r134, %oop* %t1
	br label %L3
L3:
	%r135 = load %oop, %oop* %t1
	ret %oop %r135
}
@m_cstr940 = private unnamed_addr constant [12 x i8] c"digit_value\00"
@m_ostr941 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr940 to %oop) }
@m_digit_value = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_digit_value.code to %oop), %"<string>"* @m_ostr941 }
@m_cstr942 = private unnamed_addr constant [25 x i8] c"illegal character escape\00"
@m_ostr943 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 49, %oop bitcast ([25 x i8]* @m_cstr942 to %oop) }
@m_cstr944 = private unnamed_addr constant [37 x i8] c"illegal hexadecimal character escape\00"
@m_ostr945 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 73, %oop bitcast ([37 x i8]* @m_cstr944 to %oop) }
@m_cstr946 = private unnamed_addr constant [31 x i8] c"illegal octal character escape\00"
@m_ostr947 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 61, %oop bitcast ([31 x i8]* @m_cstr946 to %oop) }
@m_cstr948 = private unnamed_addr constant [30 x i8] c"illegal character escape: \5C%c\00"
@m_cstr949 = private unnamed_addr constant [2 x i8] c"\0A\00"
define %oop @"m_read/char.code"(%oop %c, %oop %stream) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	%t8 = alloca %oop
	%t9 = alloca %oop
	%t10 = alloca %oop
	%t11 = alloca %oop
	%t12 = alloca %oop
	%t16 = alloca %oop
	%t15 = alloca %oop
	%t14 = alloca %oop
	%t13 = alloca %oop
	%t17 = alloca %oop
	%t18 = alloca %oop
	store %oop %c, %oop* %t0
	store %oop %stream, %oop* %t1
	%r1 = load %oop, %oop* %t0
	%r2 = inttoptr %word 92 to %oop
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = ptrtoint %oop %r1 to %word
	%r4 = icmp eq %word %r6, %r5
	%r3 = inttoptr i1 %r4 to %oop
	%r8 = ptrtoint %oop %r3 to %word
	%r7 = icmp ne %word %r8, 0
	br i1 %r7, label %L1, label %L2
L1:
	%r9 = load %oop, %oop* %t1
	%r10 = call %oop @m_$next.code(%oop %r9)
	store %oop %r10, %oop* %t0
	%r11 = load %oop, %oop* %t0
	store %oop %r11, %oop* %t3
	%r12 = inttoptr %word 0 to %oop
	store %oop %r12, %oop* %t5
	%r13 = inttoptr %word 97 to %oop
	%r14 = load %oop, %oop* %t3
	%r18 = ptrtoint %oop %r14 to %word
	%r17 = ptrtoint %oop %r13 to %word
	%r16 = icmp eq %word %r18, %r17
	%r15 = inttoptr i1 %r16 to %oop
	store %oop %r15, %oop* %t5
	%r19 = inttoptr %word 0 to %oop
	%r23 = ptrtoint %oop %r19 to %word
	%r22 = ptrtoint %oop %r15 to %word
	%r21 = icmp eq %word %r23, %r22
	%r20 = inttoptr i1 %r21 to %oop
	%r25 = ptrtoint %oop %r20 to %word
	%r24 = icmp ne %word %r25, 0
	br i1 %r24, label %L8, label %L7
L8:
	br label %L7
L7:
	%r26 = load %oop, %oop* %t5
	%r28 = ptrtoint %oop %r26 to %word
	%r27 = icmp ne %word %r28, 0
	br i1 %r27, label %L4, label %L5
L4:
	%r29 = inttoptr %word 7 to %oop
	store %oop %r29, %oop* %t4
	br label %L6
L5:
	%r30 = inttoptr %word 0 to %oop
	store %oop %r30, %oop* %t6
	%r31 = inttoptr %word 98 to %oop
	%r32 = load %oop, %oop* %t3
	%r36 = ptrtoint %oop %r32 to %word
	%r35 = ptrtoint %oop %r31 to %word
	%r34 = icmp eq %word %r36, %r35
	%r33 = inttoptr i1 %r34 to %oop
	store %oop %r33, %oop* %t6
	%r37 = inttoptr %word 0 to %oop
	%r41 = ptrtoint %oop %r37 to %word
	%r40 = ptrtoint %oop %r33 to %word
	%r39 = icmp eq %word %r41, %r40
	%r38 = inttoptr i1 %r39 to %oop
	%r43 = ptrtoint %oop %r38 to %word
	%r42 = icmp ne %word %r43, 0
	br i1 %r42, label %L13, label %L12
L13:
	br label %L12
L12:
	%r44 = load %oop, %oop* %t6
	%r46 = ptrtoint %oop %r44 to %word
	%r45 = icmp ne %word %r46, 0
	br i1 %r45, label %L9, label %L10
L9:
	%r47 = inttoptr %word 8 to %oop
	store %oop %r47, %oop* %t5
	br label %L11
L10:
	%r48 = inttoptr %word 0 to %oop
	store %oop %r48, %oop* %t7
	%r49 = inttoptr %word 101 to %oop
	%r50 = load %oop, %oop* %t3
	%r54 = ptrtoint %oop %r50 to %word
	%r53 = ptrtoint %oop %r49 to %word
	%r52 = icmp eq %word %r54, %r53
	%r51 = inttoptr i1 %r52 to %oop
	store %oop %r51, %oop* %t7
	%r55 = inttoptr %word 0 to %oop
	%r59 = ptrtoint %oop %r55 to %word
	%r58 = ptrtoint %oop %r51 to %word
	%r57 = icmp eq %word %r59, %r58
	%r56 = inttoptr i1 %r57 to %oop
	%r61 = ptrtoint %oop %r56 to %word
	%r60 = icmp ne %word %r61, 0
	br i1 %r60, label %L18, label %L17
L18:
	br label %L17
L17:
	%r62 = load %oop, %oop* %t7
	%r64 = ptrtoint %oop %r62 to %word
	%r63 = icmp ne %word %r64, 0
	br i1 %r63, label %L14, label %L15
L14:
	%r65 = inttoptr %word 27 to %oop
	store %oop %r65, %oop* %t6
	br label %L16
L15:
	%r66 = inttoptr %word 0 to %oop
	store %oop %r66, %oop* %t8
	%r67 = inttoptr %word 102 to %oop
	%r68 = load %oop, %oop* %t3
	%r72 = ptrtoint %oop %r68 to %word
	%r71 = ptrtoint %oop %r67 to %word
	%r70 = icmp eq %word %r72, %r71
	%r69 = inttoptr i1 %r70 to %oop
	store %oop %r69, %oop* %t8
	%r73 = inttoptr %word 0 to %oop
	%r77 = ptrtoint %oop %r73 to %word
	%r76 = ptrtoint %oop %r69 to %word
	%r75 = icmp eq %word %r77, %r76
	%r74 = inttoptr i1 %r75 to %oop
	%r79 = ptrtoint %oop %r74 to %word
	%r78 = icmp ne %word %r79, 0
	br i1 %r78, label %L23, label %L22
L23:
	br label %L22
L22:
	%r80 = load %oop, %oop* %t8
	%r82 = ptrtoint %oop %r80 to %word
	%r81 = icmp ne %word %r82, 0
	br i1 %r81, label %L19, label %L20
L19:
	%r83 = inttoptr %word 12 to %oop
	store %oop %r83, %oop* %t7
	br label %L21
L20:
	%r84 = inttoptr %word 0 to %oop
	store %oop %r84, %oop* %t9
	%r85 = inttoptr %word 110 to %oop
	%r86 = load %oop, %oop* %t3
	%r90 = ptrtoint %oop %r86 to %word
	%r89 = ptrtoint %oop %r85 to %word
	%r88 = icmp eq %word %r90, %r89
	%r87 = inttoptr i1 %r88 to %oop
	store %oop %r87, %oop* %t9
	%r91 = inttoptr %word 0 to %oop
	%r95 = ptrtoint %oop %r91 to %word
	%r94 = ptrtoint %oop %r87 to %word
	%r93 = icmp eq %word %r95, %r94
	%r92 = inttoptr i1 %r93 to %oop
	%r97 = ptrtoint %oop %r92 to %word
	%r96 = icmp ne %word %r97, 0
	br i1 %r96, label %L28, label %L27
L28:
	br label %L27
L27:
	%r98 = load %oop, %oop* %t9
	%r100 = ptrtoint %oop %r98 to %word
	%r99 = icmp ne %word %r100, 0
	br i1 %r99, label %L24, label %L25
L24:
	%r101 = inttoptr %word 10 to %oop
	store %oop %r101, %oop* %t8
	br label %L26
L25:
	%r102 = inttoptr %word 0 to %oop
	store %oop %r102, %oop* %t10
	%r103 = inttoptr %word 114 to %oop
	%r104 = load %oop, %oop* %t3
	%r108 = ptrtoint %oop %r104 to %word
	%r107 = ptrtoint %oop %r103 to %word
	%r106 = icmp eq %word %r108, %r107
	%r105 = inttoptr i1 %r106 to %oop
	store %oop %r105, %oop* %t10
	%r109 = inttoptr %word 0 to %oop
	%r113 = ptrtoint %oop %r109 to %word
	%r112 = ptrtoint %oop %r105 to %word
	%r111 = icmp eq %word %r113, %r112
	%r110 = inttoptr i1 %r111 to %oop
	%r115 = ptrtoint %oop %r110 to %word
	%r114 = icmp ne %word %r115, 0
	br i1 %r114, label %L33, label %L32
L33:
	br label %L32
L32:
	%r116 = load %oop, %oop* %t10
	%r118 = ptrtoint %oop %r116 to %word
	%r117 = icmp ne %word %r118, 0
	br i1 %r117, label %L29, label %L30
L29:
	%r119 = inttoptr %word 13 to %oop
	store %oop %r119, %oop* %t9
	br label %L31
L30:
	%r120 = inttoptr %word 0 to %oop
	store %oop %r120, %oop* %t11
	%r121 = inttoptr %word 116 to %oop
	%r122 = load %oop, %oop* %t3
	%r126 = ptrtoint %oop %r122 to %word
	%r125 = ptrtoint %oop %r121 to %word
	%r124 = icmp eq %word %r126, %r125
	%r123 = inttoptr i1 %r124 to %oop
	store %oop %r123, %oop* %t11
	%r127 = inttoptr %word 0 to %oop
	%r131 = ptrtoint %oop %r127 to %word
	%r130 = ptrtoint %oop %r123 to %word
	%r129 = icmp eq %word %r131, %r130
	%r128 = inttoptr i1 %r129 to %oop
	%r133 = ptrtoint %oop %r128 to %word
	%r132 = icmp ne %word %r133, 0
	br i1 %r132, label %L38, label %L37
L38:
	br label %L37
L37:
	%r134 = load %oop, %oop* %t11
	%r136 = ptrtoint %oop %r134 to %word
	%r135 = icmp ne %word %r136, 0
	br i1 %r135, label %L34, label %L35
L34:
	%r137 = inttoptr %word 9 to %oop
	store %oop %r137, %oop* %t10
	br label %L36
L35:
	%r138 = inttoptr %word 0 to %oop
	store %oop %r138, %oop* %t12
	%r139 = inttoptr %word 118 to %oop
	%r140 = load %oop, %oop* %t3
	%r144 = ptrtoint %oop %r140 to %word
	%r143 = ptrtoint %oop %r139 to %word
	%r142 = icmp eq %word %r144, %r143
	%r141 = inttoptr i1 %r142 to %oop
	store %oop %r141, %oop* %t12
	%r145 = inttoptr %word 0 to %oop
	%r149 = ptrtoint %oop %r145 to %word
	%r148 = ptrtoint %oop %r141 to %word
	%r147 = icmp eq %word %r149, %r148
	%r146 = inttoptr i1 %r147 to %oop
	%r151 = ptrtoint %oop %r146 to %word
	%r150 = icmp ne %word %r151, 0
	br i1 %r150, label %L43, label %L42
L43:
	br label %L42
L42:
	%r152 = load %oop, %oop* %t12
	%r154 = ptrtoint %oop %r152 to %word
	%r153 = icmp ne %word %r154, 0
	br i1 %r153, label %L39, label %L40
L39:
	%r155 = inttoptr %word 11 to %oop
	store %oop %r155, %oop* %t11
	br label %L41
L40:
	%r156 = inttoptr %word 0 to %oop
	store %oop %r156, %oop* %t13
	%r157 = inttoptr %word 117 to %oop
	%r158 = load %oop, %oop* %t3
	%r162 = ptrtoint %oop %r158 to %word
	%r161 = ptrtoint %oop %r157 to %word
	%r160 = icmp eq %word %r162, %r161
	%r159 = inttoptr i1 %r160 to %oop
	store %oop %r159, %oop* %t13
	%r163 = inttoptr %word 0 to %oop
	%r167 = ptrtoint %oop %r163 to %word
	%r166 = ptrtoint %oop %r159 to %word
	%r165 = icmp eq %word %r167, %r166
	%r164 = inttoptr i1 %r165 to %oop
	%r169 = ptrtoint %oop %r164 to %word
	%r168 = icmp ne %word %r169, 0
	br i1 %r168, label %L48, label %L47
L48:
	br label %L47
L47:
	%r170 = load %oop, %oop* %t13
	%r172 = ptrtoint %oop %r170 to %word
	%r171 = icmp ne %word %r172, 0
	br i1 %r171, label %L44, label %L45
L44:
	%r173 = load %oop, %oop* %t1
	%r174 = call %oop @m_$next.code(%oop %r173)
	store %oop %r174, %oop* %t13
	%r175 = load %oop, %oop* %t1
	%r176 = call %oop @m_$next.code(%oop %r175)
	store %oop %r176, %oop* %t14
	%r177 = load %oop, %oop* %t1
	%r178 = call %oop @m_$next.code(%oop %r177)
	store %oop %r178, %oop* %t15
	%r179 = load %oop, %oop* %t1
	%r180 = call %oop @m_$next.code(%oop %r179)
	store %oop %r180, %oop* %t16
	%r181 = inttoptr %word 0 to %oop
	store %oop %r181, %oop* %t17
	%r182 = inttoptr %word 1 to %oop
	store %oop %r182, %oop* %t18
	%r183 = load %oop, %oop* %t13
	%r184 = call %oop @m_is_digit16.code(%oop %r183)
	store %oop %r184, %oop* %t18
	%r185 = inttoptr %word 0 to %oop
	%r189 = ptrtoint %oop %r185 to %word
	%r188 = ptrtoint %oop %r184 to %word
	%r187 = icmp eq %word %r189, %r188
	%r186 = inttoptr i1 %r187 to %oop
	%r191 = ptrtoint %oop %r186 to %word
	%r190 = icmp ne %word %r191, 0
	br i1 %r190, label %L50, label %L51
L51:
	%r192 = load %oop, %oop* %t14
	%r193 = call %oop @m_is_digit16.code(%oop %r192)
	store %oop %r193, %oop* %t18
	%r194 = inttoptr %word 0 to %oop
	%r198 = ptrtoint %oop %r194 to %word
	%r197 = ptrtoint %oop %r193 to %word
	%r196 = icmp eq %word %r198, %r197
	%r195 = inttoptr i1 %r196 to %oop
	%r200 = ptrtoint %oop %r195 to %word
	%r199 = icmp ne %word %r200, 0
	br i1 %r199, label %L50, label %L52
L52:
	%r201 = load %oop, %oop* %t15
	%r202 = call %oop @m_is_digit16.code(%oop %r201)
	store %oop %r202, %oop* %t18
	%r203 = inttoptr %word 0 to %oop
	%r207 = ptrtoint %oop %r203 to %word
	%r206 = ptrtoint %oop %r202 to %word
	%r205 = icmp eq %word %r207, %r206
	%r204 = inttoptr i1 %r205 to %oop
	%r209 = ptrtoint %oop %r204 to %word
	%r208 = icmp ne %word %r209, 0
	br i1 %r208, label %L50, label %L53
L53:
	%r210 = load %oop, %oop* %t16
	%r211 = call %oop @m_is_digit16.code(%oop %r210)
	store %oop %r211, %oop* %t18
	%r212 = inttoptr %word 0 to %oop
	%r216 = ptrtoint %oop %r212 to %word
	%r215 = ptrtoint %oop %r211 to %word
	%r214 = icmp eq %word %r216, %r215
	%r213 = inttoptr i1 %r214 to %oop
	%r218 = ptrtoint %oop %r213 to %word
	%r217 = icmp ne %word %r218, 0
	br i1 %r217, label %L50, label %L54
L54:
	br label %L50
L50:
	%r219 = load %oop, %oop* %t18
	store %oop %r219, %oop* %t17
	%r220 = inttoptr %word 0 to %oop
	%r224 = ptrtoint %oop %r220 to %word
	%r223 = ptrtoint %oop %r219 to %word
	%r222 = icmp eq %word %r224, %r223
	%r221 = inttoptr i1 %r222 to %oop
	%r226 = ptrtoint %oop %r221 to %word
	%r225 = icmp ne %word %r226, 0
	br i1 %r225, label %L55, label %L49
L55:
	%r227 = call %oop @m_error-prologue.code()
	%r228 = getelementptr %"<string>", %"<string>"* @m_ostr943, i32 0, i32 1
	%r229 = bitcast %word* %r228 to %oop
	%r230 = call %oop @"m_%error.code"(%oop %r229)
	%r231 = call %oop @m_error-epilogue.code()
	store %oop %r231, %oop* %t17
	%r232 = inttoptr %word 0 to %oop
	%r236 = ptrtoint %oop %r232 to %word
	%r235 = ptrtoint %oop %r231 to %word
	%r234 = icmp eq %word %r236, %r235
	%r233 = inttoptr i1 %r234 to %oop
	%r238 = ptrtoint %oop %r233 to %word
	%r237 = icmp ne %word %r238, 0
	br i1 %r237, label %L56, label %L49
L56:
	br label %L49
L49:
	%r239 = load %oop, %oop* %t17
	%r240 = load %oop, %oop* %t16
	%r241 = call %oop @m_digit_value.code(%oop %r240)
	%r242 = inttoptr %word 8 to %oop
	%r243 = load %oop, %oop* %t15
	%r244 = call %oop @m_digit_value.code(%oop %r243)
	%r248 = ptrtoint %oop %r244 to %word
	%r247 = ptrtoint %oop %r242 to %word
	%r246 = shl %word %r248, %r247
	%r245 = inttoptr %word %r246 to %oop
	%r252 = ptrtoint %oop %r245 to %word
	%r251 = ptrtoint %oop %r241 to %word
	%r250 = add %word %r252, %r251
	%r249 = inttoptr %word %r250 to %oop
	%r253 = inttoptr %word 16 to %oop
	%r254 = load %oop, %oop* %t14
	%r255 = call %oop @m_digit_value.code(%oop %r254)
	%r259 = ptrtoint %oop %r255 to %word
	%r258 = ptrtoint %oop %r253 to %word
	%r257 = shl %word %r259, %r258
	%r256 = inttoptr %word %r257 to %oop
	%r263 = ptrtoint %oop %r256 to %word
	%r262 = ptrtoint %oop %r249 to %word
	%r261 = add %word %r263, %r262
	%r260 = inttoptr %word %r261 to %oop
	%r264 = inttoptr %word 24 to %oop
	%r265 = load %oop, %oop* %t13
	%r266 = call %oop @m_digit_value.code(%oop %r265)
	%r270 = ptrtoint %oop %r266 to %word
	%r269 = ptrtoint %oop %r264 to %word
	%r268 = shl %word %r270, %r269
	%r267 = inttoptr %word %r268 to %oop
	%r274 = ptrtoint %oop %r267 to %word
	%r273 = ptrtoint %oop %r260 to %word
	%r272 = add %word %r274, %r273
	%r271 = inttoptr %word %r272 to %oop
	store %oop %r271, %oop* %t12
	br label %L46
L45:
	%r275 = inttoptr %word 0 to %oop
	store %oop %r275, %oop* %t15
	%r276 = inttoptr %word 120 to %oop
	%r277 = load %oop, %oop* %t3
	%r281 = ptrtoint %oop %r277 to %word
	%r280 = ptrtoint %oop %r276 to %word
	%r279 = icmp eq %word %r281, %r280
	%r278 = inttoptr i1 %r279 to %oop
	store %oop %r278, %oop* %t15
	%r282 = inttoptr %word 0 to %oop
	%r286 = ptrtoint %oop %r282 to %word
	%r285 = ptrtoint %oop %r278 to %word
	%r284 = icmp eq %word %r286, %r285
	%r283 = inttoptr i1 %r284 to %oop
	%r288 = ptrtoint %oop %r283 to %word
	%r287 = icmp ne %word %r288, 0
	br i1 %r287, label %L61, label %L60
L61:
	br label %L60
L60:
	%r289 = load %oop, %oop* %t15
	%r291 = ptrtoint %oop %r289 to %word
	%r290 = icmp ne %word %r291, 0
	br i1 %r290, label %L57, label %L58
L57:
	%r292 = inttoptr %word 0 to %oop
	store %oop %r292, %oop* %t15
	%r293 = inttoptr %word 1 to %oop
	store %oop %r293, %oop* %t13
	%r294 = load %oop, %oop* %t1
	%r295 = call %oop @m_$peek.code(%oop %r294)
	%r296 = call %oop @m_is_digit16.code(%oop %r295)
	store %oop %r296, %oop* %t13
	%r297 = inttoptr %word 0 to %oop
	%r301 = ptrtoint %oop %r297 to %word
	%r300 = ptrtoint %oop %r296 to %word
	%r299 = icmp eq %word %r301, %r300
	%r298 = inttoptr i1 %r299 to %oop
	%r303 = ptrtoint %oop %r298 to %word
	%r302 = icmp ne %word %r303, 0
	br i1 %r302, label %L65, label %L66
L66:
	%r304 = inttoptr %word 0 to %oop
	store %oop %r304, %oop* %t17
	%r305 = load %oop, %oop* %t1
	%r306 = call %oop @m_$next.code(%oop %r305)
	%r307 = call %oop @m_digit_value.code(%oop %r306)
	store %oop %r307, %oop* %t15
	store %oop %r307, %oop* %t17
	%r308 = inttoptr %word 0 to %oop
	%r312 = ptrtoint %oop %r308 to %word
	%r311 = ptrtoint %oop %r307 to %word
	%r310 = icmp eq %word %r312, %r311
	%r309 = inttoptr i1 %r310 to %oop
	%r314 = ptrtoint %oop %r309 to %word
	%r313 = icmp ne %word %r314, 0
	br i1 %r313, label %L68, label %L67
L68:
	%r315 = inttoptr %word 1 to %oop
	store %oop %r315, %oop* %t17
	%r316 = inttoptr %word 0 to %oop
	%r320 = ptrtoint %oop %r316 to %word
	%r319 = ptrtoint %oop %r315 to %word
	%r318 = icmp eq %word %r320, %r319
	%r317 = inttoptr i1 %r318 to %oop
	%r322 = ptrtoint %oop %r317 to %word
	%r321 = icmp ne %word %r322, 0
	br i1 %r321, label %L69, label %L67
L69:
	br label %L67
L67:
	%r323 = load %oop, %oop* %t17
	store %oop %r323, %oop* %t13
	%r324 = inttoptr %word 0 to %oop
	%r328 = ptrtoint %oop %r324 to %word
	%r327 = ptrtoint %oop %r323 to %word
	%r326 = icmp eq %word %r328, %r327
	%r325 = inttoptr i1 %r326 to %oop
	%r330 = ptrtoint %oop %r325 to %word
	%r329 = icmp ne %word %r330, 0
	br i1 %r329, label %L65, label %L70
L70:
	%r331 = load %oop, %oop* %t1
	%r332 = call %oop @m_$peek.code(%oop %r331)
	%r333 = call %oop @m_is_digit16.code(%oop %r332)
	store %oop %r333, %oop* %t13
	%r334 = inttoptr %word 0 to %oop
	%r338 = ptrtoint %oop %r334 to %word
	%r337 = ptrtoint %oop %r333 to %word
	%r336 = icmp eq %word %r338, %r337
	%r335 = inttoptr i1 %r336 to %oop
	%r340 = ptrtoint %oop %r335 to %word
	%r339 = icmp ne %word %r340, 0
	br i1 %r339, label %L65, label %L71
L71:
	br label %L65
L65:
	%r341 = load %oop, %oop* %t13
	%r343 = ptrtoint %oop %r341 to %word
	%r342 = icmp ne %word %r343, 0
	br i1 %r342, label %L62, label %L63
L62:
	%r344 = load %oop, %oop* %t1
	%r345 = call %oop @m_$next.code(%oop %r344)
	%r346 = call %oop @m_digit_value.code(%oop %r345)
	%r347 = inttoptr %word 16 to %oop
	%r348 = load %oop, %oop* %t15
	%r352 = ptrtoint %oop %r348 to %word
	%r351 = ptrtoint %oop %r347 to %word
	%r350 = mul %word %r352, %r351
	%r349 = inttoptr %word %r350 to %oop
	%r356 = ptrtoint %oop %r349 to %word
	%r355 = ptrtoint %oop %r346 to %word
	%r354 = add %word %r356, %r355
	%r353 = inttoptr %word %r354 to %oop
	store %oop %r353, %oop* %t15
	store %oop %r353, %oop* %t14
	br label %L64
L63:
	%r357 = call %oop @m_error-prologue.code()
	%r358 = getelementptr %"<string>", %"<string>"* @m_ostr945, i32 0, i32 1
	%r359 = bitcast %word* %r358 to %oop
	%r360 = call %oop @"m_%error.code"(%oop %r359)
	%r361 = call %oop @m_error-epilogue.code()
	store %oop %r361, %oop* %t14
	br label %L64
L64:
	%r362 = load %oop, %oop* %t14
	%r363 = load %oop, %oop* %t15
	store %oop %r363, %oop* %t16
	br label %L59
L58:
	%r364 = inttoptr %word 1 to %oop
	store %oop %r364, %oop* %t14
	%r365 = load %oop, %oop* %t0
	%r366 = inttoptr %word 48 to %oop
	%r370 = ptrtoint %oop %r366 to %word
	%r369 = ptrtoint %oop %r365 to %word
	%r368 = icmp sle %word %r370, %r369
	%r367 = inttoptr i1 %r368 to %oop
	store %oop %r367, %oop* %t14
	%r371 = inttoptr %word 0 to %oop
	%r375 = ptrtoint %oop %r371 to %word
	%r374 = ptrtoint %oop %r367 to %word
	%r373 = icmp eq %word %r375, %r374
	%r372 = inttoptr i1 %r373 to %oop
	%r377 = ptrtoint %oop %r372 to %word
	%r376 = icmp ne %word %r377, 0
	br i1 %r376, label %L75, label %L76
L76:
	%r378 = inttoptr %word 55 to %oop
	%r379 = load %oop, %oop* %t0
	%r383 = ptrtoint %oop %r379 to %word
	%r382 = ptrtoint %oop %r378 to %word
	%r381 = icmp sle %word %r383, %r382
	%r380 = inttoptr i1 %r381 to %oop
	store %oop %r380, %oop* %t14
	%r384 = inttoptr %word 0 to %oop
	%r388 = ptrtoint %oop %r384 to %word
	%r387 = ptrtoint %oop %r380 to %word
	%r386 = icmp eq %word %r388, %r387
	%r385 = inttoptr i1 %r386 to %oop
	%r390 = ptrtoint %oop %r385 to %word
	%r389 = icmp ne %word %r390, 0
	br i1 %r389, label %L75, label %L77
L77:
	br label %L75
L75:
	%r391 = load %oop, %oop* %t14
	%r393 = ptrtoint %oop %r391 to %word
	%r392 = icmp ne %word %r393, 0
	br i1 %r392, label %L72, label %L73
L72:
	%r394 = load %oop, %oop* %t0
	%r395 = call %oop @m_digit_value.code(%oop %r394)
	store %oop %r395, %oop* %t14
	%r396 = inttoptr %word 1 to %oop
	store %oop %r396, %oop* %t17
	%r397 = load %oop, %oop* %t1
	%r398 = call %oop @m_$peek.code(%oop %r397)
	%r399 = call %oop @m_is_digit8.code(%oop %r398)
	store %oop %r399, %oop* %t17
	%r400 = inttoptr %word 0 to %oop
	%r404 = ptrtoint %oop %r400 to %word
	%r403 = ptrtoint %oop %r399 to %word
	%r402 = icmp eq %word %r404, %r403
	%r401 = inttoptr i1 %r402 to %oop
	%r406 = ptrtoint %oop %r401 to %word
	%r405 = icmp ne %word %r406, 0
	br i1 %r405, label %L81, label %L82
L82:
	%r407 = inttoptr %word 0 to %oop
	store %oop %r407, %oop* %t18
	%r408 = load %oop, %oop* %t1
	%r409 = call %oop @m_$next.code(%oop %r408)
	%r410 = call %oop @m_digit_value.code(%oop %r409)
	%r411 = inttoptr %word 8 to %oop
	%r412 = load %oop, %oop* %t14
	%r416 = ptrtoint %oop %r412 to %word
	%r415 = ptrtoint %oop %r411 to %word
	%r414 = mul %word %r416, %r415
	%r413 = inttoptr %word %r414 to %oop
	%r420 = ptrtoint %oop %r413 to %word
	%r419 = ptrtoint %oop %r410 to %word
	%r418 = add %word %r420, %r419
	%r417 = inttoptr %word %r418 to %oop
	store %oop %r417, %oop* %t14
	store %oop %r417, %oop* %t18
	%r421 = inttoptr %word 0 to %oop
	%r425 = ptrtoint %oop %r421 to %word
	%r424 = ptrtoint %oop %r417 to %word
	%r423 = icmp eq %word %r425, %r424
	%r422 = inttoptr i1 %r423 to %oop
	%r427 = ptrtoint %oop %r422 to %word
	%r426 = icmp ne %word %r427, 0
	br i1 %r426, label %L84, label %L83
L84:
	%r428 = inttoptr %word 1 to %oop
	store %oop %r428, %oop* %t18
	%r429 = inttoptr %word 0 to %oop
	%r433 = ptrtoint %oop %r429 to %word
	%r432 = ptrtoint %oop %r428 to %word
	%r431 = icmp eq %word %r433, %r432
	%r430 = inttoptr i1 %r431 to %oop
	%r435 = ptrtoint %oop %r430 to %word
	%r434 = icmp ne %word %r435, 0
	br i1 %r434, label %L85, label %L83
L85:
	br label %L83
L83:
	%r436 = load %oop, %oop* %t18
	store %oop %r436, %oop* %t17
	%r437 = inttoptr %word 0 to %oop
	%r441 = ptrtoint %oop %r437 to %word
	%r440 = ptrtoint %oop %r436 to %word
	%r439 = icmp eq %word %r441, %r440
	%r438 = inttoptr i1 %r439 to %oop
	%r443 = ptrtoint %oop %r438 to %word
	%r442 = icmp ne %word %r443, 0
	br i1 %r442, label %L81, label %L86
L86:
	%r444 = load %oop, %oop* %t1
	%r445 = call %oop @m_$peek.code(%oop %r444)
	%r446 = call %oop @m_is_digit8.code(%oop %r445)
	store %oop %r446, %oop* %t17
	%r447 = inttoptr %word 0 to %oop
	%r451 = ptrtoint %oop %r447 to %word
	%r450 = ptrtoint %oop %r446 to %word
	%r449 = icmp eq %word %r451, %r450
	%r448 = inttoptr i1 %r449 to %oop
	%r453 = ptrtoint %oop %r448 to %word
	%r452 = icmp ne %word %r453, 0
	br i1 %r452, label %L81, label %L87
L87:
	br label %L81
L81:
	%r454 = load %oop, %oop* %t17
	%r456 = ptrtoint %oop %r454 to %word
	%r455 = icmp ne %word %r456, 0
	br i1 %r455, label %L78, label %L79
L78:
	%r457 = load %oop, %oop* %t1
	%r458 = call %oop @m_$next.code(%oop %r457)
	%r459 = call %oop @m_digit_value.code(%oop %r458)
	%r460 = inttoptr %word 8 to %oop
	%r461 = load %oop, %oop* %t14
	%r465 = ptrtoint %oop %r461 to %word
	%r464 = ptrtoint %oop %r460 to %word
	%r463 = mul %word %r465, %r464
	%r462 = inttoptr %word %r463 to %oop
	%r469 = ptrtoint %oop %r462 to %word
	%r468 = ptrtoint %oop %r459 to %word
	%r467 = add %word %r469, %r468
	%r466 = inttoptr %word %r467 to %oop
	store %oop %r466, %oop* %t14
	store %oop %r466, %oop* %t13
	br label %L80
L79:
	%r470 = call %oop @m_error-prologue.code()
	%r471 = getelementptr %"<string>", %"<string>"* @m_ostr947, i32 0, i32 1
	%r472 = bitcast %word* %r471 to %oop
	%r473 = call %oop @"m_%error.code"(%oop %r472)
	%r474 = call %oop @m_error-epilogue.code()
	store %oop %r474, %oop* %t13
	br label %L80
L80:
	%r475 = load %oop, %oop* %t13
	%r476 = load %oop, %oop* %t14
	store %oop %r476, %oop* %t15
	br label %L74
L73:
	%r477 = inttoptr %word 0 to %oop
	store %oop %r477, %oop* %t13
	%r478 = load %oop, %oop* %t0
	%r479 = call %oop @m_is_alpha.code(%oop %r478)
	store %oop %r479, %oop* %t13
	%r480 = inttoptr %word 0 to %oop
	%r484 = ptrtoint %oop %r480 to %word
	%r483 = ptrtoint %oop %r479 to %word
	%r482 = icmp eq %word %r484, %r483
	%r481 = inttoptr i1 %r482 to %oop
	%r486 = ptrtoint %oop %r481 to %word
	%r485 = icmp ne %word %r486, 0
	br i1 %r485, label %L92, label %L91
L92:
	%r487 = load %oop, %oop* %t0
	%r488 = call %oop @m_is_digit10.code(%oop %r487)
	store %oop %r488, %oop* %t13
	%r489 = inttoptr %word 0 to %oop
	%r493 = ptrtoint %oop %r489 to %word
	%r492 = ptrtoint %oop %r488 to %word
	%r491 = icmp eq %word %r493, %r492
	%r490 = inttoptr i1 %r491 to %oop
	%r495 = ptrtoint %oop %r490 to %word
	%r494 = icmp ne %word %r495, 0
	br i1 %r494, label %L93, label %L91
L93:
	br label %L91
L91:
	%r496 = load %oop, %oop* %t13
	%r498 = ptrtoint %oop %r496 to %word
	%r497 = icmp ne %word %r498, 0
	br i1 %r497, label %L88, label %L89
L88:
	%r499 = call %oop @m_fatal-prologue.code()
	%r500 = inttoptr %word 1 to %oop
	%r501 = inttoptr %word 2 to %oop
	%r502 = getelementptr [30 x i8], [30 x i8]* @m_cstr948, %word 0, %word 0
	%r504 = inttoptr %word 29 to %oop
	%r505 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r500, %oop %r501, %oop %r502, %oop %r504)
	%r506 = inttoptr %word 1 to %oop
	%r507 = inttoptr %word 2 to %oop
	%r508 = getelementptr [2 x i8], [2 x i8]* @m_cstr949, %word 0, %word 0
	%r510 = inttoptr %word 1 to %oop
	%r511 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r506, %oop %r507, %oop %r508, %oop %r510)
	%r512 = call %oop @m_fatal-epilogue.code()
	store %oop %r512, %oop* %t14
	br label %L90
L89:
	%r513 = load %oop, %oop* %t0
	store %oop %r513, %oop* %t14
	br label %L90
L90:
	%r514 = load %oop, %oop* %t14
	store %oop %r514, %oop* %t15
	br label %L74
L74:
	%r515 = load %oop, %oop* %t15
	store %oop %r515, %oop* %t16
	br label %L59
L59:
	%r516 = load %oop, %oop* %t16
	store %oop %r516, %oop* %t12
	br label %L46
L46:
	%r517 = load %oop, %oop* %t12
	store %oop %r517, %oop* %t11
	br label %L41
L41:
	%r518 = load %oop, %oop* %t11
	store %oop %r518, %oop* %t10
	br label %L36
L36:
	%r519 = load %oop, %oop* %t10
	store %oop %r519, %oop* %t9
	br label %L31
L31:
	%r520 = load %oop, %oop* %t9
	store %oop %r520, %oop* %t8
	br label %L26
L26:
	%r521 = load %oop, %oop* %t8
	store %oop %r521, %oop* %t7
	br label %L21
L21:
	%r522 = load %oop, %oop* %t7
	store %oop %r522, %oop* %t6
	br label %L16
L16:
	%r523 = load %oop, %oop* %t6
	store %oop %r523, %oop* %t5
	br label %L11
L11:
	%r524 = load %oop, %oop* %t5
	store %oop %r524, %oop* %t4
	br label %L6
L6:
	%r525 = load %oop, %oop* %t4
	store %oop %r525, %oop* %t2
	br label %L3
L2:
	%r526 = load %oop, %oop* %t0
	store %oop %r526, %oop* %t2
	br label %L3
L3:
	%r527 = load %oop, %oop* %t2
	ret %oop %r527
}
@m_cstr950 = private unnamed_addr constant [10 x i8] c"read/char\00"
@m_ostr951 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 19, %oop bitcast ([10 x i8]* @m_cstr950 to %oop) }
@"m_read/char" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_read/char.code" to %oop), %"<string>"* @m_ostr951 }
@m_cstr952 = private unnamed_addr constant [62 x i8] c"invalid number in source code, string->long* has failed for '\00"
@m_ostr953 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 123, %oop bitcast ([62 x i8]* @m_cstr952 to %oop) }
@m_cstr954 = private unnamed_addr constant [39 x i8] c"' (it's printed without the sign here)\00"
@m_ostr955 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 77, %oop bitcast ([39 x i8]* @m_cstr954 to %oop) }
define %oop @"m_read/number.code"(%oop %c, %oop %stream) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	store %oop %c, %oop* %t0
	store %oop %stream, %oop* %t1
	%r1 = inttoptr %word 16 to %oop
	%r2 = call %oop @m_string.code(%oop %r1)
	store %oop %r2, %oop* %t2
	%r4 = getelementptr %oop, %oop* %t2, %word 0
	%r3 = bitcast %oop* %r4 to %oop
	%r5 = call %oop @"m_gc/push-root.code"(%oop %r3)
	%r6 = inttoptr %word 0 to %oop
	store %oop %r6, %oop* %t3
	%r7 = inttoptr %word 10 to %oop
	store %oop %r7, %oop* %t4
	%r8 = load %oop, %oop* %t0
	%r9 = inttoptr %word 45 to %oop
	%r13 = ptrtoint %oop %r9 to %word
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = icmp eq %word %r13, %r12
	%r10 = inttoptr i1 %r11 to %oop
	%r15 = ptrtoint %oop %r10 to %word
	%r14 = icmp ne %word %r15, 0
	br i1 %r14, label %L1, label %L2
L1:
	%r16 = inttoptr %word 1 to %oop
	store %oop %r16, %oop* %t3
	store %oop %r16, %oop* %t5
	br label %L3
L2:
	%r17 = load %oop, %oop* %t2
	%r18 = load %oop, %oop* %t0
	%r19 = call %oop @m_string-append.code(%oop %r17, %oop %r18)
	store %oop %r19, %oop* %t5
	br label %L3
L3:
	%r20 = load %oop, %oop* %t5
	br label %L5
L4:
	%r21 = load %oop, %oop* %t2
	%r22 = load %oop, %oop* %t1
	%r23 = call %oop @m_$next.code(%oop %r22)
	%r24 = call %oop @m_string-append.code(%oop %r21, %oop %r23)
	br label %L5
L5:
	%r25 = load %oop, %oop* %t1
	%r26 = call %oop @m_$peek.code(%oop %r25)
	store %oop %r26, %oop* %t0
	%r27 = call %oop @m_is_digit10.code(%oop %r26)
	%r29 = ptrtoint %oop %r27 to %word
	%r28 = icmp ne %word %r29, 0
	br i1 %r28, label %L4, label %L6
L6:
	%r30 = inttoptr %word 1 to %oop
	store %oop %r30, %oop* %t6
	%r31 = load %oop, %oop* %t0
	%r32 = inttoptr %word 120 to %oop
	%r36 = ptrtoint %oop %r32 to %word
	%r35 = ptrtoint %oop %r31 to %word
	%r34 = icmp eq %word %r36, %r35
	%r33 = inttoptr i1 %r34 to %oop
	store %oop %r33, %oop* %t6
	%r37 = inttoptr %word 0 to %oop
	%r41 = ptrtoint %oop %r37 to %word
	%r40 = ptrtoint %oop %r33 to %word
	%r39 = icmp eq %word %r41, %r40
	%r38 = inttoptr i1 %r39 to %oop
	%r43 = ptrtoint %oop %r38 to %word
	%r42 = icmp ne %word %r43, 0
	br i1 %r42, label %L10, label %L11
L11:
	%r44 = load %oop, %oop* %t2
	%r45 = call %oop @m_string-length.code(%oop %r44)
	%r46 = inttoptr %word 1 to %oop
	%r50 = ptrtoint %oop %r46 to %word
	%r49 = ptrtoint %oop %r45 to %word
	%r48 = icmp eq %word %r50, %r49
	%r47 = inttoptr i1 %r48 to %oop
	store %oop %r47, %oop* %t6
	%r51 = inttoptr %word 0 to %oop
	%r55 = ptrtoint %oop %r51 to %word
	%r54 = ptrtoint %oop %r47 to %word
	%r53 = icmp eq %word %r55, %r54
	%r52 = inttoptr i1 %r53 to %oop
	%r57 = ptrtoint %oop %r52 to %word
	%r56 = icmp ne %word %r57, 0
	br i1 %r56, label %L10, label %L12
L12:
	br label %L10
L10:
	%r58 = load %oop, %oop* %t6
	%r60 = ptrtoint %oop %r58 to %word
	%r59 = icmp ne %word %r60, 0
	br i1 %r59, label %L7, label %L8
L7:
	%r61 = load %oop, %oop* %t1
	%r62 = call %oop @m_$next.code(%oop %r61)
	%r63 = inttoptr %word 16 to %oop
	store %oop %r63, %oop* %t4
	%r64 = inttoptr %word 1 to %oop
	%r65 = inttoptr %word 1 to %oop
	%r66 = inttoptr %word 0 to %oop
	%r70 = ptrtoint %oop %r66 to %word
	%r69 = ptrtoint %oop %r65 to %word
	%r68 = shl %word %r70, %r69
	%r67 = inttoptr %word %r68 to %oop
	%r74 = ptrtoint %oop %r67 to %word
	%r73 = ptrtoint %oop %r64 to %word
	%r72 = or %word %r74, %r73
	%r71 = inttoptr %word %r72 to %oop
	%r75 = inttoptr %word 0 to %oop
	%r76 = load %oop, %oop* %t2
	%r80 = bitcast %oop %r76 to [0 x %oop]*
	%r79 = ptrtoint %oop %r75 to %word
	%r78 = getelementptr [0 x %oop], [0 x %oop]* %r80, %word 0, %word %r79
	store %oop %r71, %oop* %r78
	%r77 = bitcast %oop %r71 to %oop
	br label %L14
L13:
	%r81 = load %oop, %oop* %t2
	%r82 = load %oop, %oop* %t1
	%r83 = call %oop @m_$next.code(%oop %r82)
	%r84 = call %oop @m_string-append.code(%oop %r81, %oop %r83)
	br label %L14
L14:
	%r85 = load %oop, %oop* %t1
	%r86 = call %oop @m_$peek.code(%oop %r85)
	%r87 = call %oop @m_is_digit16.code(%oop %r86)
	%r89 = ptrtoint %oop %r87 to %word
	%r88 = icmp ne %word %r89, 0
	br i1 %r88, label %L13, label %L15
L15:
	store %oop %r87, %oop* %t5
	br label %L9
L8:
	%r90 = inttoptr %word 0 to %oop
	store %oop %r90, %oop* %t5
	br label %L9
L9:
	%r91 = load %oop, %oop* %t5
	%r92 = load %oop, %oop* %t2
	%r93 = load %oop, %oop* %t4
	%r94 = call %oop @"m_string->long*.code"(%oop %r92, %oop %r93)
	store %oop %r94, %oop* %t5
	%r95 = load %oop, %oop* %t5
	%r96 = load %oop, %oop* @"m_+end+"
	%r100 = ptrtoint %oop %r96 to %word
	%r99 = ptrtoint %oop %r95 to %word
	%r98 = icmp eq %word %r100, %r99
	%r97 = inttoptr i1 %r98 to %oop
	%r102 = ptrtoint %oop %r97 to %word
	%r101 = icmp ne %word %r102, 0
	br i1 %r101, label %L16, label %L17
L16:
	%r103 = call %oop @m_error-prologue.code()
	%r104 = getelementptr %"<string>", %"<string>"* @m_ostr953, i32 0, i32 1
	%r105 = bitcast %word* %r104 to %oop
	%r106 = call %oop @"m_%error.code"(%oop %r105)
	%r107 = load %oop, %oop* %t2
	%r108 = call %oop @"m_%error.code"(%oop %r107)
	%r109 = getelementptr %"<string>", %"<string>"* @m_ostr955, i32 0, i32 1
	%r110 = bitcast %word* %r109 to %oop
	%r111 = call %oop @"m_%error.code"(%oop %r110)
	%r112 = call %oop @m_error-epilogue.code()
	store %oop %r112, %oop* %t6
	br label %L18
L17:
	%r113 = inttoptr %word 0 to %oop
	store %oop %r113, %oop* %t6
	br label %L18
L18:
	%r114 = load %oop, %oop* %t6
	%r115 = inttoptr %word 1 to %oop
	%r116 = inttoptr %word 1 to %oop
	%r117 = load %oop, %oop* %t3
	%r119 = ptrtoint %oop %r117 to %word
	%r118 = icmp ne %word %r119, 0
	br i1 %r118, label %L19, label %L20
L19:
	%r120 = load %oop, %oop* %t5
	%r123 = ptrtoint %oop %r120 to %word
	%r122 = sub nsw %word 0, %r123
	%r121 = inttoptr %word %r122 to %oop
	store %oop %r121, %oop* %t6
	br label %L21
L20:
	%r124 = load %oop, %oop* %t5
	store %oop %r124, %oop* %t6
	br label %L21
L21:
	%r125 = load %oop, %oop* %t6
	%r129 = ptrtoint %oop %r125 to %word
	%r128 = ptrtoint %oop %r116 to %word
	%r127 = shl %word %r129, %r128
	%r126 = inttoptr %word %r127 to %oop
	%r133 = ptrtoint %oop %r126 to %word
	%r132 = ptrtoint %oop %r115 to %word
	%r131 = or %word %r133, %r132
	%r130 = inttoptr %word %r131 to %oop
	store %oop %r130, %oop* %t4
	%r135 = getelementptr %oop, %oop* %t2, %word 0
	%r134 = bitcast %oop* %r135 to %oop
	%r136 = call %oop @"m_gc/pop-root.code"(%oop %r134)
	%r137 = load %oop, %oop* %t4
	ret %oop %r137
}
@m_cstr956 = private unnamed_addr constant [12 x i8] c"read/number\00"
@m_ostr957 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr956 to %oop) }
@"m_read/number" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_read/number.code" to %oop), %"<string>"* @m_ostr957 }
@m_cstr958 = private unnamed_addr constant [24 x i8] c"kernel assertion failed\00"
@m_ostr959 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 47, %oop bitcast ([24 x i8]* @m_cstr958 to %oop) }
define %oop @"m_read/symbol.code"(%oop %c, %oop %stream) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	store %oop %c, %oop* %t0
	store %oop %stream, %oop* %t1
	%r1 = inttoptr %word 16 to %oop
	%r2 = call %oop @m_string.code(%oop %r1)
	store %oop %r2, %oop* %t2
	%r4 = getelementptr %oop, %oop* %t2, %word 0
	%r3 = bitcast %oop* %r4 to %oop
	%r5 = call %oop @"m_gc/push-root.code"(%oop %r3)
	%r6 = inttoptr %word 0 to %oop
	store %oop %r6, %oop* %t3
	%r7 = inttoptr %word 0 to %oop
	store %oop %r7, %oop* %t4
	%r8 = load %oop, %oop* %t0
	%r9 = call %oop @m_is_letter.code(%oop %r8)
	store %oop %r9, %oop* %t4
	%r10 = inttoptr %word 0 to %oop
	%r14 = ptrtoint %oop %r10 to %word
	%r13 = ptrtoint %oop %r9 to %word
	%r12 = icmp eq %word %r14, %r13
	%r11 = inttoptr i1 %r12 to %oop
	%r16 = ptrtoint %oop %r11 to %word
	%r15 = icmp ne %word %r16, 0
	br i1 %r15, label %L3, label %L2
L3:
	%r17 = load %oop, %oop* %t0
	%r18 = call %oop @m_is_digit10.code(%oop %r17)
	store %oop %r18, %oop* %t4
	%r19 = inttoptr %word 0 to %oop
	%r23 = ptrtoint %oop %r19 to %word
	%r22 = ptrtoint %oop %r18 to %word
	%r21 = icmp eq %word %r23, %r22
	%r20 = inttoptr i1 %r21 to %oop
	%r25 = ptrtoint %oop %r20 to %word
	%r24 = icmp ne %word %r25, 0
	br i1 %r24, label %L4, label %L2
L4:
	br label %L2
L2:
	%r26 = load %oop, %oop* %t4
	store %oop %r26, %oop* %t3
	%r27 = inttoptr %word 0 to %oop
	%r31 = ptrtoint %oop %r27 to %word
	%r30 = ptrtoint %oop %r26 to %word
	%r29 = icmp eq %word %r31, %r30
	%r28 = inttoptr i1 %r29 to %oop
	%r33 = ptrtoint %oop %r28 to %word
	%r32 = icmp ne %word %r33, 0
	br i1 %r32, label %L5, label %L1
L5:
	%r34 = call %oop @m_error-prologue.code()
	%r35 = getelementptr %"<string>", %"<string>"* @m_ostr959, i32 0, i32 1
	%r36 = bitcast %word* %r35 to %oop
	%r37 = call %oop @"m_%error.code"(%oop %r36)
	%r38 = call %oop @m_error-epilogue.code()
	store %oop %r38, %oop* %t3
	%r39 = inttoptr %word 0 to %oop
	%r43 = ptrtoint %oop %r39 to %word
	%r42 = ptrtoint %oop %r38 to %word
	%r41 = icmp eq %word %r43, %r42
	%r40 = inttoptr i1 %r41 to %oop
	%r45 = ptrtoint %oop %r40 to %word
	%r44 = icmp ne %word %r45, 0
	br i1 %r44, label %L6, label %L1
L6:
	br label %L1
L1:
	%r46 = load %oop, %oop* %t3
	%r47 = load %oop, %oop* %t2
	%r48 = load %oop, %oop* %t0
	%r49 = call %oop @m_string-append.code(%oop %r47, %oop %r48)
	br label %L8
L7:
	%r50 = load %oop, %oop* %t2
	%r51 = load %oop, %oop* %t1
	%r52 = call %oop @m_$next.code(%oop %r51)
	%r53 = call %oop @m_string-append.code(%oop %r50, %oop %r52)
	br label %L8
L8:
	%r54 = inttoptr %word 1 to %oop
	store %oop %r54, %oop* %t3
	%r55 = load %oop, %oop* %t1
	%r56 = call %oop @m_$peek.code(%oop %r55)
	store %oop %r56, %oop* %t0
	store %oop %r56, %oop* %t3
	%r57 = inttoptr %word 0 to %oop
	%r61 = ptrtoint %oop %r57 to %word
	%r60 = ptrtoint %oop %r56 to %word
	%r59 = icmp eq %word %r61, %r60
	%r58 = inttoptr i1 %r59 to %oop
	%r63 = ptrtoint %oop %r58 to %word
	%r62 = icmp ne %word %r63, 0
	br i1 %r62, label %L10, label %L11
L11:
	%r64 = inttoptr %word 0 to %oop
	store %oop %r64, %oop* %t4
	%r65 = load %oop, %oop* %t0
	%r66 = call %oop @m_is_letter.code(%oop %r65)
	store %oop %r66, %oop* %t4
	%r67 = inttoptr %word 0 to %oop
	%r71 = ptrtoint %oop %r67 to %word
	%r70 = ptrtoint %oop %r66 to %word
	%r69 = icmp eq %word %r71, %r70
	%r68 = inttoptr i1 %r69 to %oop
	%r73 = ptrtoint %oop %r68 to %word
	%r72 = icmp ne %word %r73, 0
	br i1 %r72, label %L13, label %L12
L13:
	%r74 = load %oop, %oop* %t0
	%r75 = call %oop @m_is_digit10.code(%oop %r74)
	store %oop %r75, %oop* %t4
	%r76 = inttoptr %word 0 to %oop
	%r80 = ptrtoint %oop %r76 to %word
	%r79 = ptrtoint %oop %r75 to %word
	%r78 = icmp eq %word %r80, %r79
	%r77 = inttoptr i1 %r78 to %oop
	%r82 = ptrtoint %oop %r77 to %word
	%r81 = icmp ne %word %r82, 0
	br i1 %r81, label %L14, label %L12
L14:
	br label %L12
L12:
	%r83 = load %oop, %oop* %t4
	store %oop %r83, %oop* %t3
	%r84 = inttoptr %word 0 to %oop
	%r88 = ptrtoint %oop %r84 to %word
	%r87 = ptrtoint %oop %r83 to %word
	%r86 = icmp eq %word %r88, %r87
	%r85 = inttoptr i1 %r86 to %oop
	%r90 = ptrtoint %oop %r85 to %word
	%r89 = icmp ne %word %r90, 0
	br i1 %r89, label %L10, label %L15
L15:
	br label %L10
L10:
	%r91 = load %oop, %oop* %t3
	%r93 = ptrtoint %oop %r91 to %word
	%r92 = icmp ne %word %r93, 0
	br i1 %r92, label %L7, label %L9
L9:
	%r94 = load %oop, %oop* %t2
	%r95 = call %oop @"m_string->symbol.code"(%oop %r94)
	store %oop %r95, %oop* %t3
	%r97 = getelementptr %oop, %oop* %t2, %word 0
	%r96 = bitcast %oop* %r97 to %oop
	%r98 = call %oop @"m_gc/pop-root.code"(%oop %r96)
	%r99 = load %oop, %oop* %t3
	ret %oop %r99
}
@m_cstr960 = private unnamed_addr constant [12 x i8] c"read/symbol\00"
@m_ostr961 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr960 to %oop) }
@"m_read/symbol" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_read/symbol.code" to %oop), %"<string>"* @m_ostr961 }
@m_cstr962 = private unnamed_addr constant [28 x i8] c"unterminated string literal\00"
@m_ostr963 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 55, %oop bitcast ([28 x i8]* @m_cstr962 to %oop) }
define %oop @"m_read/string-literal.code"(%oop %stream) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	store %oop %stream, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @m_$next.code(%oop %r1)
	%r3 = inttoptr %word 8 to %oop
	%r4 = call %oop @m_string.code(%oop %r3)
	store %oop %r4, %oop* %t1
	%r6 = getelementptr %oop, %oop* %t1, %word 0
	%r5 = bitcast %oop* %r6 to %oop
	%r7 = call %oop @"m_gc/push-root.code"(%oop %r5)
	%r8 = inttoptr %word 0 to %oop
	store %oop %r8, %oop* %t2
	br label %L2
L1:
	%r9 = load %oop, %oop* %t2
	%r10 = load %oop, %oop* %t0
	%r11 = call %oop @"m_read/char.code"(%oop %r9, %oop %r10)
	store %oop %r11, %oop* %t2
	%r12 = load %oop, %oop* %t2
	%r13 = load %oop, %oop* @"m_+end+"
	%r17 = ptrtoint %oop %r13 to %word
	%r16 = ptrtoint %oop %r12 to %word
	%r15 = icmp eq %word %r17, %r16
	%r14 = inttoptr i1 %r15 to %oop
	%r19 = ptrtoint %oop %r14 to %word
	%r18 = icmp ne %word %r19, 0
	br i1 %r18, label %L4, label %L5
L4:
	%r20 = call %oop @m_error-prologue.code()
	%r21 = getelementptr %"<string>", %"<string>"* @m_ostr963, i32 0, i32 1
	%r22 = bitcast %word* %r21 to %oop
	%r23 = call %oop @"m_%error.code"(%oop %r22)
	%r24 = call %oop @m_error-epilogue.code()
	store %oop %r24, %oop* %t3
	br label %L6
L5:
	%r25 = inttoptr %word 0 to %oop
	store %oop %r25, %oop* %t3
	br label %L6
L6:
	%r26 = load %oop, %oop* %t3
	%r27 = load %oop, %oop* %t1
	%r28 = load %oop, %oop* %t2
	%r29 = call %oop @m_string-append.code(%oop %r27, %oop %r28)
	br label %L2
L2:
	%r30 = load %oop, %oop* %t0
	%r31 = call %oop @m_$next.code(%oop %r30)
	store %oop %r31, %oop* %t2
	%r32 = inttoptr %word 34 to %oop
	%r36 = ptrtoint %oop %r32 to %word
	%r35 = ptrtoint %oop %r31 to %word
	%r34 = icmp eq %word %r36, %r35
	%r33 = inttoptr i1 %r34 to %oop
	%r40 = ptrtoint %oop %r33 to %word
	%r39 = icmp eq %word %r40, 0
	%r38 = zext i1 %r39 to %word
	%r37 = inttoptr %word %r38 to %oop
	%r42 = ptrtoint %oop %r37 to %word
	%r41 = icmp ne %word %r42, 0
	br i1 %r41, label %L1, label %L3
L3:
	%r43 = load %oop, %oop* %t1
	store %oop %r43, %oop* %t2
	%r45 = getelementptr %oop, %oop* %t1, %word 0
	%r44 = bitcast %oop* %r45 to %oop
	%r46 = call %oop @"m_gc/pop-root.code"(%oop %r44)
	%r47 = load %oop, %oop* %t2
	ret %oop %r47
}
@m_cstr964 = private unnamed_addr constant [20 x i8] c"read/string-literal\00"
@m_ostr965 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 39, %oop bitcast ([20 x i8]* @m_cstr964 to %oop) }
@"m_read/string-literal" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @"m_read/string-literal.code" to %oop), %"<string>"* @m_ostr965 }
@m_cstr966 = private unnamed_addr constant [22 x i8] c"illegal character: %c\00"
@m_cstr967 = private unnamed_addr constant [2 x i8] c"\0A\00"
define %oop @m_read-nested.code(%oop %stream) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	%t8 = alloca %oop
	%t9 = alloca %oop
	%t10 = alloca %oop
	%t11 = alloca %oop
	%t12 = alloca %oop
	%t13 = alloca %oop
	%t14 = alloca %oop
	%t15 = alloca %oop
	%t16 = alloca %oop
	%t17 = alloca %oop
	%t18 = alloca %oop
	store %oop %stream, %oop* %t0
	br label %L2
L1:
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @m_$peek.code(%oop %r1)
	store %oop %r2, %oop* %t1
	%r3 = load %oop, %oop* %t1
	%r4 = call %oop @m_is_blank.code(%oop %r3)
	%r6 = ptrtoint %oop %r4 to %word
	%r5 = icmp ne %word %r6, 0
	br i1 %r5, label %L4, label %L5
L4:
	%r7 = load %oop, %oop* %t0
	%r8 = call %oop @m_$next.code(%oop %r7)
	store %oop %r8, %oop* %t2
	br label %L6
L5:
	%r9 = load %oop, %oop* %t1
	%r10 = inttoptr %word 63 to %oop
	%r14 = ptrtoint %oop %r10 to %word
	%r13 = ptrtoint %oop %r9 to %word
	%r12 = icmp eq %word %r14, %r13
	%r11 = inttoptr i1 %r12 to %oop
	%r16 = ptrtoint %oop %r11 to %word
	%r15 = icmp ne %word %r16, 0
	br i1 %r15, label %L7, label %L8
L7:
	%r17 = load %oop, %oop* %t0
	%r18 = call %oop @m_$next.code(%oop %r17)
	%r19 = inttoptr %word 1 to %oop
	%r20 = inttoptr %word 1 to %oop
	%r21 = load %oop, %oop* %t0
	%r22 = call %oop @m_$next.code(%oop %r21)
	%r23 = load %oop, %oop* %t0
	%r24 = call %oop @"m_read/char.code"(%oop %r22, %oop %r23)
	%r28 = ptrtoint %oop %r24 to %word
	%r27 = ptrtoint %oop %r20 to %word
	%r26 = shl %word %r28, %r27
	%r25 = inttoptr %word %r26 to %oop
	%r32 = ptrtoint %oop %r25 to %word
	%r31 = ptrtoint %oop %r19 to %word
	%r30 = or %word %r32, %r31
	%r29 = inttoptr %word %r30 to %oop
	ret %oop %r29
	store %oop %r29, %oop* %t3
	br label %L9
L8:
	%r34 = load %oop, %oop* %t1
	%r35 = inttoptr %word 45 to %oop
	%r39 = ptrtoint %oop %r35 to %word
	%r38 = ptrtoint %oop %r34 to %word
	%r37 = icmp eq %word %r39, %r38
	%r36 = inttoptr i1 %r37 to %oop
	%r41 = ptrtoint %oop %r36 to %word
	%r40 = icmp ne %word %r41, 0
	br i1 %r40, label %L10, label %L11
L10:
	%r42 = load %oop, %oop* %t0
	%r43 = call %oop @m_$next.code(%oop %r42)
	%r44 = load %oop, %oop* %t0
	%r45 = call %oop @m_$peek.code(%oop %r44)
	%r46 = call %oop @m_is_digit10.code(%oop %r45)
	%r48 = ptrtoint %oop %r46 to %word
	%r47 = icmp ne %word %r48, 0
	br i1 %r47, label %L13, label %L14
L13:
	%r49 = load %oop, %oop* %t1
	%r50 = load %oop, %oop* %t0
	%r51 = call %oop @"m_read/number.code"(%oop %r49, %oop %r50)
	store %oop %r51, %oop* %t5
	br label %L15
L14:
	%r52 = load %oop, %oop* %t1
	%r53 = load %oop, %oop* %t0
	%r54 = call %oop @"m_read/symbol.code"(%oop %r52, %oop %r53)
	store %oop %r54, %oop* %t5
	br label %L15
L15:
	%r55 = load %oop, %oop* %t5
	ret %oop %r55
	store %oop %r55, %oop* %t4
	br label %L12
L11:
	%r57 = load %oop, %oop* %t1
	%r58 = inttoptr %word 39 to %oop
	%r62 = ptrtoint %oop %r58 to %word
	%r61 = ptrtoint %oop %r57 to %word
	%r60 = icmp eq %word %r62, %r61
	%r59 = inttoptr i1 %r60 to %oop
	%r64 = ptrtoint %oop %r59 to %word
	%r63 = icmp ne %word %r64, 0
	br i1 %r63, label %L16, label %L17
L16:
	%r65 = load %oop, %oop* %t0
	%r66 = call %oop @m_$next.code(%oop %r65)
	%r67 = load %oop, %oop* @"m_symbol/quote"
	%r68 = load %oop, %oop* %t0
	%r69 = call %oop @"m_read/quote.code"(%oop %r67, %oop %r68)
	ret %oop %r69
	store %oop %r69, %oop* %t5
	br label %L18
L17:
	%r71 = load %oop, %oop* %t1
	%r72 = inttoptr %word 96 to %oop
	%r76 = ptrtoint %oop %r72 to %word
	%r75 = ptrtoint %oop %r71 to %word
	%r74 = icmp eq %word %r76, %r75
	%r73 = inttoptr i1 %r74 to %oop
	%r78 = ptrtoint %oop %r73 to %word
	%r77 = icmp ne %word %r78, 0
	br i1 %r77, label %L19, label %L20
L19:
	%r79 = load %oop, %oop* %t0
	%r80 = call %oop @m_$next.code(%oop %r79)
	%r81 = load %oop, %oop* @"m_symbol/quasiquote"
	%r82 = load %oop, %oop* %t0
	%r83 = call %oop @"m_read/quote.code"(%oop %r81, %oop %r82)
	ret %oop %r83
	store %oop %r83, %oop* %t6
	br label %L21
L20:
	%r85 = load %oop, %oop* %t1
	%r86 = inttoptr %word 44 to %oop
	%r90 = ptrtoint %oop %r86 to %word
	%r89 = ptrtoint %oop %r85 to %word
	%r88 = icmp eq %word %r90, %r89
	%r87 = inttoptr i1 %r88 to %oop
	%r92 = ptrtoint %oop %r87 to %word
	%r91 = icmp ne %word %r92, 0
	br i1 %r91, label %L22, label %L23
L22:
	%r93 = load %oop, %oop* %t0
	%r94 = call %oop @m_$next.code(%oop %r93)
	%r95 = load %oop, %oop* %t0
	%r96 = call %oop @m_$peek.code(%oop %r95)
	store %oop %r96, %oop* %t8
	%r97 = load %oop, %oop* %t8
	%r98 = inttoptr %word 64 to %oop
	%r102 = ptrtoint %oop %r98 to %word
	%r101 = ptrtoint %oop %r97 to %word
	%r100 = icmp eq %word %r102, %r101
	%r99 = inttoptr i1 %r100 to %oop
	%r104 = ptrtoint %oop %r99 to %word
	%r103 = icmp ne %word %r104, 0
	br i1 %r103, label %L25, label %L26
L25:
	%r105 = load %oop, %oop* %t0
	%r106 = call %oop @m_$next.code(%oop %r105)
	%r107 = load %oop, %oop* @"m_symbol/unquote-splicing"
	%r108 = load %oop, %oop* %t0
	%r109 = call %oop @"m_read/quote.code"(%oop %r107, %oop %r108)
	store %oop %r109, %oop* %t9
	br label %L27
L26:
	%r110 = load %oop, %oop* @"m_symbol/unquote"
	%r111 = load %oop, %oop* %t0
	%r112 = call %oop @"m_read/quote.code"(%oop %r110, %oop %r111)
	store %oop %r112, %oop* %t9
	br label %L27
L27:
	%r113 = load %oop, %oop* %t9
	ret %oop %r113
	store %oop %r113, %oop* %t7
	br label %L24
L23:
	%r115 = load %oop, %oop* %t1
	%r116 = call %oop @m_is_letter.code(%oop %r115)
	%r118 = ptrtoint %oop %r116 to %word
	%r117 = icmp ne %word %r118, 0
	br i1 %r117, label %L28, label %L29
L28:
	%r119 = load %oop, %oop* %t0
	%r120 = call %oop @m_$next.code(%oop %r119)
	%r121 = load %oop, %oop* %t0
	%r122 = call %oop @"m_read/symbol.code"(%oop %r120, %oop %r121)
	ret %oop %r122
	store %oop %r122, %oop* %t8
	br label %L30
L29:
	%r124 = load %oop, %oop* %t1
	%r125 = inttoptr %word 40 to %oop
	%r129 = ptrtoint %oop %r125 to %word
	%r128 = ptrtoint %oop %r124 to %word
	%r127 = icmp eq %word %r129, %r128
	%r126 = inttoptr i1 %r127 to %oop
	%r131 = ptrtoint %oop %r126 to %word
	%r130 = icmp ne %word %r131, 0
	br i1 %r130, label %L31, label %L32
L31:
	%r132 = inttoptr %word 41 to %oop
	%r133 = load %oop, %oop* %t0
	%r134 = call %oop @"m_read/list.code"(%oop %r132, %oop %r133)
	ret %oop %r134
	store %oop %r134, %oop* %t9
	br label %L33
L32:
	%r136 = load %oop, %oop* %t1
	%r137 = inttoptr %word 41 to %oop
	%r141 = ptrtoint %oop %r137 to %word
	%r140 = ptrtoint %oop %r136 to %word
	%r139 = icmp eq %word %r141, %r140
	%r138 = inttoptr i1 %r139 to %oop
	%r143 = ptrtoint %oop %r138 to %word
	%r142 = icmp ne %word %r143, 0
	br i1 %r142, label %L34, label %L35
L34:
	%r144 = inttoptr %word 572732501 to %oop
	ret %oop %r144
	store %oop %r144, %oop* %t10
	br label %L36
L35:
	%r146 = load %oop, %oop* %t1
	%r147 = inttoptr %word 91 to %oop
	%r151 = ptrtoint %oop %r147 to %word
	%r150 = ptrtoint %oop %r146 to %word
	%r149 = icmp eq %word %r151, %r150
	%r148 = inttoptr i1 %r149 to %oop
	%r153 = ptrtoint %oop %r148 to %word
	%r152 = icmp ne %word %r153, 0
	br i1 %r152, label %L37, label %L38
L37:
	%r154 = inttoptr %word 93 to %oop
	%r155 = load %oop, %oop* %t0
	%r156 = call %oop @"m_read/list.code"(%oop %r154, %oop %r155)
	ret %oop %r156
	store %oop %r156, %oop* %t11
	br label %L39
L38:
	%r158 = load %oop, %oop* %t1
	%r159 = inttoptr %word 93 to %oop
	%r163 = ptrtoint %oop %r159 to %word
	%r162 = ptrtoint %oop %r158 to %word
	%r161 = icmp eq %word %r163, %r162
	%r160 = inttoptr i1 %r161 to %oop
	%r165 = ptrtoint %oop %r160 to %word
	%r164 = icmp ne %word %r165, 0
	br i1 %r164, label %L40, label %L41
L40:
	%r166 = inttoptr %word 572732501 to %oop
	ret %oop %r166
	store %oop %r166, %oop* %t12
	br label %L42
L41:
	%r168 = load %oop, %oop* %t1
	%r169 = inttoptr %word 123 to %oop
	%r173 = ptrtoint %oop %r169 to %word
	%r172 = ptrtoint %oop %r168 to %word
	%r171 = icmp eq %word %r173, %r172
	%r170 = inttoptr i1 %r171 to %oop
	%r175 = ptrtoint %oop %r170 to %word
	%r174 = icmp ne %word %r175, 0
	br i1 %r174, label %L43, label %L44
L43:
	%r176 = inttoptr %word 125 to %oop
	%r177 = load %oop, %oop* %t0
	%r178 = call %oop @"m_read/list.code"(%oop %r176, %oop %r177)
	ret %oop %r178
	store %oop %r178, %oop* %t13
	br label %L45
L44:
	%r180 = load %oop, %oop* %t1
	%r181 = inttoptr %word 125 to %oop
	%r185 = ptrtoint %oop %r181 to %word
	%r184 = ptrtoint %oop %r180 to %word
	%r183 = icmp eq %word %r185, %r184
	%r182 = inttoptr i1 %r183 to %oop
	%r187 = ptrtoint %oop %r182 to %word
	%r186 = icmp ne %word %r187, 0
	br i1 %r186, label %L46, label %L47
L46:
	%r188 = inttoptr %word 572732501 to %oop
	ret %oop %r188
	store %oop %r188, %oop* %t14
	br label %L48
L47:
	%r190 = load %oop, %oop* %t1
	%r191 = call %oop @m_is_digit10.code(%oop %r190)
	%r193 = ptrtoint %oop %r191 to %word
	%r192 = icmp ne %word %r193, 0
	br i1 %r192, label %L49, label %L50
L49:
	%r194 = load %oop, %oop* %t0
	%r195 = call %oop @m_$next.code(%oop %r194)
	%r196 = load %oop, %oop* %t0
	%r197 = call %oop @"m_read/number.code"(%oop %r195, %oop %r196)
	ret %oop %r197
	store %oop %r197, %oop* %t15
	br label %L51
L50:
	%r199 = load %oop, %oop* %t1
	%r200 = inttoptr %word 59 to %oop
	%r204 = ptrtoint %oop %r200 to %word
	%r203 = ptrtoint %oop %r199 to %word
	%r202 = icmp eq %word %r204, %r203
	%r201 = inttoptr i1 %r202 to %oop
	%r206 = ptrtoint %oop %r201 to %word
	%r205 = icmp ne %word %r206, 0
	br i1 %r205, label %L52, label %L53
L52:
	br label %L56
L55:
	br label %L56
L56:
	%r207 = inttoptr %word 1 to %oop
	store %oop %r207, %oop* %t17
	%r208 = load %oop, %oop* %t0
	%r209 = call %oop @m_$next.code(%oop %r208)
	store %oop %r209, %oop* %t1
	%r210 = inttoptr %word 10 to %oop
	%r214 = ptrtoint %oop %r210 to %word
	%r213 = ptrtoint %oop %r209 to %word
	%r212 = icmp eq %word %r214, %r213
	%r211 = inttoptr i1 %r212 to %oop
	%r218 = ptrtoint %oop %r211 to %word
	%r217 = icmp eq %word %r218, 0
	%r216 = zext i1 %r217 to %word
	%r215 = inttoptr %word %r216 to %oop
	store %oop %r215, %oop* %t17
	%r219 = inttoptr %word 0 to %oop
	%r223 = ptrtoint %oop %r219 to %word
	%r222 = ptrtoint %oop %r215 to %word
	%r221 = icmp eq %word %r223, %r222
	%r220 = inttoptr i1 %r221 to %oop
	%r225 = ptrtoint %oop %r220 to %word
	%r224 = icmp ne %word %r225, 0
	br i1 %r224, label %L58, label %L59
L59:
	%r226 = load %oop, %oop* %t1
	%r227 = inttoptr %word 13 to %oop
	%r231 = ptrtoint %oop %r227 to %word
	%r230 = ptrtoint %oop %r226 to %word
	%r229 = icmp eq %word %r231, %r230
	%r228 = inttoptr i1 %r229 to %oop
	%r235 = ptrtoint %oop %r228 to %word
	%r234 = icmp eq %word %r235, 0
	%r233 = zext i1 %r234 to %word
	%r232 = inttoptr %word %r233 to %oop
	store %oop %r232, %oop* %t17
	%r236 = inttoptr %word 0 to %oop
	%r240 = ptrtoint %oop %r236 to %word
	%r239 = ptrtoint %oop %r232 to %word
	%r238 = icmp eq %word %r240, %r239
	%r237 = inttoptr i1 %r238 to %oop
	%r242 = ptrtoint %oop %r237 to %word
	%r241 = icmp ne %word %r242, 0
	br i1 %r241, label %L58, label %L60
L60:
	%r243 = load %oop, %oop* %t1
	%r244 = load %oop, %oop* @"m_+end+"
	%r248 = ptrtoint %oop %r244 to %word
	%r247 = ptrtoint %oop %r243 to %word
	%r246 = icmp eq %word %r248, %r247
	%r245 = inttoptr i1 %r246 to %oop
	%r252 = ptrtoint %oop %r245 to %word
	%r251 = icmp eq %word %r252, 0
	%r250 = zext i1 %r251 to %word
	%r249 = inttoptr %word %r250 to %oop
	store %oop %r249, %oop* %t17
	%r253 = inttoptr %word 0 to %oop
	%r257 = ptrtoint %oop %r253 to %word
	%r256 = ptrtoint %oop %r249 to %word
	%r255 = icmp eq %word %r257, %r256
	%r254 = inttoptr i1 %r255 to %oop
	%r259 = ptrtoint %oop %r254 to %word
	%r258 = icmp ne %word %r259, 0
	br i1 %r258, label %L58, label %L61
L61:
	br label %L58
L58:
	%r260 = load %oop, %oop* %t17
	%r262 = ptrtoint %oop %r260 to %word
	%r261 = icmp ne %word %r262, 0
	br i1 %r261, label %L55, label %L57
L57:
	store %oop %r260, %oop* %t16
	br label %L54
L53:
	%r263 = load %oop, %oop* %t1
	%r264 = inttoptr %word 34 to %oop
	%r268 = ptrtoint %oop %r264 to %word
	%r267 = ptrtoint %oop %r263 to %word
	%r266 = icmp eq %word %r268, %r267
	%r265 = inttoptr i1 %r266 to %oop
	%r270 = ptrtoint %oop %r265 to %word
	%r269 = icmp ne %word %r270, 0
	br i1 %r269, label %L62, label %L63
L62:
	%r271 = load %oop, %oop* %t0
	%r272 = call %oop @"m_read/string-literal.code"(%oop %r271)
	ret %oop %r272
	store %oop %r272, %oop* %t17
	br label %L64
L63:
	%r274 = load %oop, %oop* @"m_+end+"
	%r275 = load %oop, %oop* %t1
	%r279 = ptrtoint %oop %r275 to %word
	%r278 = ptrtoint %oop %r274 to %word
	%r277 = icmp eq %word %r279, %r278
	%r276 = inttoptr i1 %r277 to %oop
	%r281 = ptrtoint %oop %r276 to %word
	%r280 = icmp ne %word %r281, 0
	br i1 %r280, label %L65, label %L66
L65:
	%r282 = load %oop, %oop* @"m_+end+"
	ret %oop %r282
	store %oop %r282, %oop* %t18
	br label %L67
L66:
	%r284 = call %oop @m_fatal-prologue.code()
	%r285 = inttoptr %word 1 to %oop
	%r286 = inttoptr %word 2 to %oop
	%r287 = getelementptr [22 x i8], [22 x i8]* @m_cstr966, %word 0, %word 0
	%r289 = inttoptr %word 21 to %oop
	%r290 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r285, %oop %r286, %oop %r287, %oop %r289)
	%r291 = inttoptr %word 1 to %oop
	%r292 = inttoptr %word 2 to %oop
	%r293 = getelementptr [2 x i8], [2 x i8]* @m_cstr967, %word 0, %word 0
	%r295 = inttoptr %word 1 to %oop
	%r296 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r291, %oop %r292, %oop %r293, %oop %r295)
	%r297 = call %oop @m_fatal-epilogue.code()
	store %oop %r297, %oop* %t18
	br label %L67
L67:
	%r298 = load %oop, %oop* %t18
	store %oop %r298, %oop* %t17
	br label %L64
L64:
	%r299 = load %oop, %oop* %t17
	store %oop %r299, %oop* %t16
	br label %L54
L54:
	%r300 = load %oop, %oop* %t16
	store %oop %r300, %oop* %t15
	br label %L51
L51:
	%r301 = load %oop, %oop* %t15
	store %oop %r301, %oop* %t14
	br label %L48
L48:
	%r302 = load %oop, %oop* %t14
	store %oop %r302, %oop* %t13
	br label %L45
L45:
	%r303 = load %oop, %oop* %t13
	store %oop %r303, %oop* %t12
	br label %L42
L42:
	%r304 = load %oop, %oop* %t12
	store %oop %r304, %oop* %t11
	br label %L39
L39:
	%r305 = load %oop, %oop* %t11
	store %oop %r305, %oop* %t10
	br label %L36
L36:
	%r306 = load %oop, %oop* %t10
	store %oop %r306, %oop* %t9
	br label %L33
L33:
	%r307 = load %oop, %oop* %t9
	store %oop %r307, %oop* %t8
	br label %L30
L30:
	%r308 = load %oop, %oop* %t8
	store %oop %r308, %oop* %t7
	br label %L24
L24:
	%r309 = load %oop, %oop* %t7
	store %oop %r309, %oop* %t6
	br label %L21
L21:
	%r310 = load %oop, %oop* %t6
	store %oop %r310, %oop* %t5
	br label %L18
L18:
	%r311 = load %oop, %oop* %t5
	store %oop %r311, %oop* %t4
	br label %L12
L12:
	%r312 = load %oop, %oop* %t4
	store %oop %r312, %oop* %t3
	br label %L9
L9:
	%r313 = load %oop, %oop* %t3
	store %oop %r313, %oop* %t2
	br label %L6
L6:
	%r314 = load %oop, %oop* %t2
	br label %L2
L2:
	%r315 = inttoptr %word 1 to %oop
	%r317 = ptrtoint %oop %r315 to %word
	%r316 = icmp ne %word %r317, 0
	br i1 %r316, label %L1, label %L3
L3:
	ret %oop %r315
}
@m_cstr968 = private unnamed_addr constant [12 x i8] c"read-nested\00"
@m_ostr969 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr968 to %oop) }
@m_read-nested = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_read-nested.code to %oop), %"<string>"* @m_ostr969 }
@m_cstr970 = private unnamed_addr constant [23 x i8] c"unexpected close paren\00"
@m_ostr971 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 45, %oop bitcast ([23 x i8]* @m_cstr970 to %oop) }
define %oop @m_read-toplevel.code(%oop %stream) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	store %oop %stream, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @m_$peek.code(%oop %r1)
	store %oop %r2, %oop* %t1
	%r3 = load %oop, %oop* %t1
	%r4 = inttoptr %word 40 to %oop
	%r8 = ptrtoint %oop %r4 to %word
	%r7 = ptrtoint %oop %r3 to %word
	%r6 = icmp eq %word %r8, %r7
	%r5 = inttoptr i1 %r6 to %oop
	%r10 = ptrtoint %oop %r5 to %word
	%r9 = icmp ne %word %r10, 0
	br i1 %r9, label %L1, label %L2
L1:
	%r11 = inttoptr %word 41 to %oop
	%r12 = load %oop, %oop* %t0
	%r13 = call %oop @"m_read/list.code"(%oop %r11, %oop %r12)
	ret %oop %r13
	store %oop %r13, %oop* %t2
	br label %L3
L2:
	%r15 = load %oop, %oop* %t1
	%r16 = inttoptr %word 91 to %oop
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = icmp eq %word %r20, %r19
	%r17 = inttoptr i1 %r18 to %oop
	%r22 = ptrtoint %oop %r17 to %word
	%r21 = icmp ne %word %r22, 0
	br i1 %r21, label %L4, label %L5
L4:
	%r23 = inttoptr %word 93 to %oop
	%r24 = load %oop, %oop* %t0
	%r25 = call %oop @"m_read/list.code"(%oop %r23, %oop %r24)
	ret %oop %r25
	store %oop %r25, %oop* %t3
	br label %L6
L5:
	%r27 = load %oop, %oop* %t1
	%r28 = inttoptr %word 123 to %oop
	%r32 = ptrtoint %oop %r28 to %word
	%r31 = ptrtoint %oop %r27 to %word
	%r30 = icmp eq %word %r32, %r31
	%r29 = inttoptr i1 %r30 to %oop
	%r34 = ptrtoint %oop %r29 to %word
	%r33 = icmp ne %word %r34, 0
	br i1 %r33, label %L7, label %L8
L7:
	%r35 = inttoptr %word 125 to %oop
	%r36 = load %oop, %oop* %t0
	%r37 = call %oop @"m_read/list.code"(%oop %r35, %oop %r36)
	ret %oop %r37
	store %oop %r37, %oop* %t4
	br label %L9
L8:
	%r39 = inttoptr %word 0 to %oop
	store %oop %r39, %oop* %t6
	%r40 = load %oop, %oop* %t1
	%r41 = inttoptr %word 41 to %oop
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = ptrtoint %oop %r40 to %word
	%r43 = icmp eq %word %r45, %r44
	%r42 = inttoptr i1 %r43 to %oop
	store %oop %r42, %oop* %t6
	%r46 = inttoptr %word 0 to %oop
	%r50 = ptrtoint %oop %r46 to %word
	%r49 = ptrtoint %oop %r42 to %word
	%r48 = icmp eq %word %r50, %r49
	%r47 = inttoptr i1 %r48 to %oop
	%r52 = ptrtoint %oop %r47 to %word
	%r51 = icmp ne %word %r52, 0
	br i1 %r51, label %L14, label %L13
L14:
	%r53 = load %oop, %oop* %t1
	%r54 = inttoptr %word 93 to %oop
	%r58 = ptrtoint %oop %r54 to %word
	%r57 = ptrtoint %oop %r53 to %word
	%r56 = icmp eq %word %r58, %r57
	%r55 = inttoptr i1 %r56 to %oop
	store %oop %r55, %oop* %t6
	%r59 = inttoptr %word 0 to %oop
	%r63 = ptrtoint %oop %r59 to %word
	%r62 = ptrtoint %oop %r55 to %word
	%r61 = icmp eq %word %r63, %r62
	%r60 = inttoptr i1 %r61 to %oop
	%r65 = ptrtoint %oop %r60 to %word
	%r64 = icmp ne %word %r65, 0
	br i1 %r64, label %L15, label %L13
L15:
	%r66 = load %oop, %oop* %t1
	%r67 = inttoptr %word 125 to %oop
	%r71 = ptrtoint %oop %r67 to %word
	%r70 = ptrtoint %oop %r66 to %word
	%r69 = icmp eq %word %r71, %r70
	%r68 = inttoptr i1 %r69 to %oop
	store %oop %r68, %oop* %t6
	%r72 = inttoptr %word 0 to %oop
	%r76 = ptrtoint %oop %r72 to %word
	%r75 = ptrtoint %oop %r68 to %word
	%r74 = icmp eq %word %r76, %r75
	%r73 = inttoptr i1 %r74 to %oop
	%r78 = ptrtoint %oop %r73 to %word
	%r77 = icmp ne %word %r78, 0
	br i1 %r77, label %L16, label %L13
L16:
	br label %L13
L13:
	%r79 = load %oop, %oop* %t6
	%r81 = ptrtoint %oop %r79 to %word
	%r80 = icmp ne %word %r81, 0
	br i1 %r80, label %L10, label %L11
L10:
	%r82 = call %oop @m_error-prologue.code()
	%r83 = getelementptr %"<string>", %"<string>"* @m_ostr971, i32 0, i32 1
	%r84 = bitcast %word* %r83 to %oop
	%r85 = call %oop @"m_%error.code"(%oop %r84)
	%r86 = call %oop @m_error-epilogue.code()
	store %oop %r86, %oop* %t5
	br label %L12
L11:
	%r87 = load %oop, %oop* %t0
	%r88 = call %oop @m_read-nested.code(%oop %r87)
	ret %oop %r88
	store %oop %r88, %oop* %t5
	br label %L12
L12:
	%r90 = load %oop, %oop* %t5
	store %oop %r90, %oop* %t4
	br label %L9
L9:
	%r91 = load %oop, %oop* %t4
	store %oop %r91, %oop* %t3
	br label %L6
L6:
	%r92 = load %oop, %oop* %t3
	store %oop %r92, %oop* %t2
	br label %L3
L3:
	%r93 = load %oop, %oop* %t2
	ret %oop %r93
}
@m_cstr972 = private unnamed_addr constant [14 x i8] c"read-toplevel\00"
@m_ostr973 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr972 to %oop) }
@m_read-toplevel = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_read-toplevel.code to %oop), %"<string>"* @m_ostr973 }
@m_cstr974 = private unnamed_addr constant [39 x i8] c"missing closing '%c' delimiter after .\00"
@m_cstr975 = private unnamed_addr constant [2 x i8] c"\0A\00"
@m_cstr976 = private unnamed_addr constant [50 x i8] c"missing closing '%c' delimiter while reading list\00"
@m_cstr977 = private unnamed_addr constant [2 x i8] c"\0A\00"
define %oop @"m_read/list.code"(%oop %delim, %oop %stream) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	store %oop %delim, %oop* %t0
	store %oop %stream, %oop* %t1
	%r1 = load %oop, %oop* %t1
	%r2 = call %oop @m_$next.code(%oop %r1)
	%r3 = inttoptr %word 0 to %oop
	%r4 = inttoptr %word 0 to %oop
	%r5 = call %oop @m_cons.code(%oop %r3, %oop %r4)
	store %oop %r5, %oop* %t2
	%r6 = load %oop, %oop* %t2
	store %oop %r6, %oop* %t3
	%r7 = inttoptr %word 0 to %oop
	store %oop %r7, %oop* %t4
	%r9 = getelementptr %oop, %oop* %t2, %word 0
	%r8 = bitcast %oop* %r9 to %oop
	%r10 = call %oop @"m_gc/push-root.code"(%oop %r8)
	%r12 = getelementptr %oop, %oop* %t4, %word 0
	%r11 = bitcast %oop* %r12 to %oop
	%r13 = call %oop @"m_gc/push-root.code"(%oop %r11)
	br label %L2
L1:
	%r14 = load %oop, %oop* %t4
	%r15 = inttoptr %word 0 to %oop
	%r16 = call %oop @m_cons.code(%oop %r14, %oop %r15)
	store %oop %r16, %oop* %t4
	%r17 = load %oop, %oop* %t4
	%r18 = inttoptr %word 1 to %oop
	%r19 = load %oop, %oop* %t3
	%r23 = bitcast %oop %r19 to [0 x %oop]*
	%r22 = ptrtoint %oop %r18 to %word
	%r21 = getelementptr [0 x %oop], [0 x %oop]* %r23, %word 0, %word %r22
	store %oop %r17, %oop* %r21
	%r20 = bitcast %oop %r17 to %oop
	store %oop %r20, %oop* %t3
	br label %L2
L2:
	%r24 = inttoptr %word 1 to %oop
	store %oop %r24, %oop* %t5
	%r25 = load %oop, %oop* %t1
	%r26 = call %oop @m_read-nested.code(%oop %r25)
	store %oop %r26, %oop* %t4
	%r27 = load %oop, %oop* @"m_+end+"
	%r31 = ptrtoint %oop %r27 to %word
	%r30 = ptrtoint %oop %r26 to %word
	%r29 = icmp eq %word %r31, %r30
	%r28 = inttoptr i1 %r29 to %oop
	%r35 = ptrtoint %oop %r28 to %word
	%r34 = icmp eq %word %r35, 0
	%r33 = zext i1 %r34 to %word
	%r32 = inttoptr %word %r33 to %oop
	store %oop %r32, %oop* %t5
	%r36 = inttoptr %word 0 to %oop
	%r40 = ptrtoint %oop %r36 to %word
	%r39 = ptrtoint %oop %r32 to %word
	%r38 = icmp eq %word %r40, %r39
	%r37 = inttoptr i1 %r38 to %oop
	%r42 = ptrtoint %oop %r37 to %word
	%r41 = icmp ne %word %r42, 0
	br i1 %r41, label %L4, label %L5
L5:
	%r43 = load %oop, %oop* %t4
	%r44 = inttoptr %word 572732501 to %oop
	%r48 = ptrtoint %oop %r44 to %word
	%r47 = ptrtoint %oop %r43 to %word
	%r46 = icmp eq %word %r48, %r47
	%r45 = inttoptr i1 %r46 to %oop
	%r52 = ptrtoint %oop %r45 to %word
	%r51 = icmp eq %word %r52, 0
	%r50 = zext i1 %r51 to %word
	%r49 = inttoptr %word %r50 to %oop
	store %oop %r49, %oop* %t5
	%r53 = inttoptr %word 0 to %oop
	%r57 = ptrtoint %oop %r53 to %word
	%r56 = ptrtoint %oop %r49 to %word
	%r55 = icmp eq %word %r57, %r56
	%r54 = inttoptr i1 %r55 to %oop
	%r59 = ptrtoint %oop %r54 to %word
	%r58 = icmp ne %word %r59, 0
	br i1 %r58, label %L4, label %L6
L6:
	%r60 = load %oop, %oop* %t4
	%r61 = load %oop, %oop* @"m_symbol/."
	%r65 = ptrtoint %oop %r61 to %word
	%r64 = ptrtoint %oop %r60 to %word
	%r63 = icmp eq %word %r65, %r64
	%r62 = inttoptr i1 %r63 to %oop
	%r69 = ptrtoint %oop %r62 to %word
	%r68 = icmp eq %word %r69, 0
	%r67 = zext i1 %r68 to %word
	%r66 = inttoptr %word %r67 to %oop
	store %oop %r66, %oop* %t5
	%r70 = inttoptr %word 0 to %oop
	%r74 = ptrtoint %oop %r70 to %word
	%r73 = ptrtoint %oop %r66 to %word
	%r72 = icmp eq %word %r74, %r73
	%r71 = inttoptr i1 %r72 to %oop
	%r76 = ptrtoint %oop %r71 to %word
	%r75 = icmp ne %word %r76, 0
	br i1 %r75, label %L4, label %L7
L7:
	br label %L4
L4:
	%r77 = load %oop, %oop* %t5
	%r79 = ptrtoint %oop %r77 to %word
	%r78 = icmp ne %word %r79, 0
	br i1 %r78, label %L1, label %L3
L3:
	%r80 = load %oop, %oop* %t4
	%r81 = load %oop, %oop* @"m_symbol/."
	%r85 = ptrtoint %oop %r81 to %word
	%r84 = ptrtoint %oop %r80 to %word
	%r83 = icmp eq %word %r85, %r84
	%r82 = inttoptr i1 %r83 to %oop
	%r87 = ptrtoint %oop %r82 to %word
	%r86 = icmp ne %word %r87, 0
	br i1 %r86, label %L8, label %L9
L8:
	%r88 = load %oop, %oop* %t1
	%r89 = call %oop @m_read-toplevel.code(%oop %r88)
	%r90 = inttoptr %word 1 to %oop
	%r91 = load %oop, %oop* %t3
	%r95 = bitcast %oop %r91 to [0 x %oop]*
	%r94 = ptrtoint %oop %r90 to %word
	%r93 = getelementptr [0 x %oop], [0 x %oop]* %r95, %word 0, %word %r94
	store %oop %r89, %oop* %r93
	%r92 = bitcast %oop %r89 to %oop
	%r96 = load %oop, %oop* %t1
	%r97 = call %oop @m_$next.code(%oop %r96)
	%r98 = load %oop, %oop* %t0
	%r102 = ptrtoint %oop %r98 to %word
	%r101 = ptrtoint %oop %r97 to %word
	%r100 = icmp eq %word %r102, %r101
	%r99 = inttoptr i1 %r100 to %oop
	%r104 = ptrtoint %oop %r99 to %word
	%r103 = icmp ne %word %r104, 0
	br i1 %r103, label %L11, label %L12
L11:
	%r105 = inttoptr %word 0 to %oop
	store %oop %r105, %oop* %t6
	br label %L13
L12:
	%r106 = call %oop @m_fatal-prologue.code()
	%r107 = inttoptr %word 1 to %oop
	%r108 = inttoptr %word 2 to %oop
	%r109 = getelementptr [39 x i8], [39 x i8]* @m_cstr974, %word 0, %word 0
	%r111 = inttoptr %word 38 to %oop
	%r112 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r107, %oop %r108, %oop %r109, %oop %r111)
	%r113 = inttoptr %word 1 to %oop
	%r114 = inttoptr %word 2 to %oop
	%r115 = getelementptr [2 x i8], [2 x i8]* @m_cstr975, %word 0, %word 0
	%r117 = inttoptr %word 1 to %oop
	%r118 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r113, %oop %r114, %oop %r115, %oop %r117)
	%r119 = call %oop @m_fatal-epilogue.code()
	store %oop %r119, %oop* %t6
	br label %L13
L13:
	%r120 = load %oop, %oop* %t6
	%r121 = inttoptr %word 1 to %oop
	%r122 = load %oop, %oop* %t2
	%r126 = bitcast %oop %r122 to [0 x %oop]*
	%r125 = ptrtoint %oop %r121 to %word
	%r124 = getelementptr [0 x %oop], [0 x %oop]* %r126, %word 0, %word %r125
	%r123 = load %oop, %oop* %r124
	store %oop %r123, %oop* %t5
	br label %L10
L9:
	%r127 = inttoptr %word 1 to %oop
	store %oop %r127, %oop* %t7
	%r128 = load %oop, %oop* %t4
	%r129 = inttoptr %word 572732501 to %oop
	%r133 = ptrtoint %oop %r129 to %word
	%r132 = ptrtoint %oop %r128 to %word
	%r131 = icmp eq %word %r133, %r132
	%r130 = inttoptr i1 %r131 to %oop
	store %oop %r130, %oop* %t7
	%r134 = inttoptr %word 0 to %oop
	%r138 = ptrtoint %oop %r134 to %word
	%r137 = ptrtoint %oop %r130 to %word
	%r136 = icmp eq %word %r138, %r137
	%r135 = inttoptr i1 %r136 to %oop
	%r140 = ptrtoint %oop %r135 to %word
	%r139 = icmp ne %word %r140, 0
	br i1 %r139, label %L17, label %L18
L18:
	%r141 = load %oop, %oop* %t1
	%r142 = call %oop @m_$next.code(%oop %r141)
	%r143 = load %oop, %oop* %t0
	%r147 = ptrtoint %oop %r143 to %word
	%r146 = ptrtoint %oop %r142 to %word
	%r145 = icmp eq %word %r147, %r146
	%r144 = inttoptr i1 %r145 to %oop
	store %oop %r144, %oop* %t7
	%r148 = inttoptr %word 0 to %oop
	%r152 = ptrtoint %oop %r148 to %word
	%r151 = ptrtoint %oop %r144 to %word
	%r150 = icmp eq %word %r152, %r151
	%r149 = inttoptr i1 %r150 to %oop
	%r154 = ptrtoint %oop %r149 to %word
	%r153 = icmp ne %word %r154, 0
	br i1 %r153, label %L17, label %L19
L19:
	br label %L17
L17:
	%r155 = load %oop, %oop* %t7
	%r157 = ptrtoint %oop %r155 to %word
	%r156 = icmp ne %word %r157, 0
	br i1 %r156, label %L14, label %L15
L14:
	%r158 = inttoptr %word 1 to %oop
	%r159 = load %oop, %oop* %t2
	%r163 = bitcast %oop %r159 to [0 x %oop]*
	%r162 = ptrtoint %oop %r158 to %word
	%r161 = getelementptr [0 x %oop], [0 x %oop]* %r163, %word 0, %word %r162
	%r160 = load %oop, %oop* %r161
	store %oop %r160, %oop* %t6
	br label %L16
L15:
	%r164 = call %oop @m_fatal-prologue.code()
	%r165 = inttoptr %word 1 to %oop
	%r166 = inttoptr %word 2 to %oop
	%r167 = getelementptr [50 x i8], [50 x i8]* @m_cstr976, %word 0, %word 0
	%r169 = inttoptr %word 49 to %oop
	%r170 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r165, %oop %r166, %oop %r167, %oop %r169)
	%r171 = inttoptr %word 1 to %oop
	%r172 = inttoptr %word 2 to %oop
	%r173 = getelementptr [2 x i8], [2 x i8]* @m_cstr977, %word 0, %word 0
	%r175 = inttoptr %word 1 to %oop
	%r176 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r171, %oop %r172, %oop %r173, %oop %r175)
	%r177 = call %oop @m_fatal-epilogue.code()
	store %oop %r177, %oop* %t6
	br label %L16
L16:
	%r178 = load %oop, %oop* %t6
	store %oop %r178, %oop* %t5
	br label %L10
L10:
	%r179 = load %oop, %oop* %t5
	store %oop %r179, %oop* %t5
	%r181 = getelementptr %oop, %oop* %t4, %word 0
	%r180 = bitcast %oop* %r181 to %oop
	%r182 = call %oop @"m_gc/pop-root.code"(%oop %r180)
	%r184 = getelementptr %oop, %oop* %t2, %word 0
	%r183 = bitcast %oop* %r184 to %oop
	%r185 = call %oop @"m_gc/pop-root.code"(%oop %r183)
	%r186 = load %oop, %oop* %t5
	ret %oop %r186
}
@m_cstr978 = private unnamed_addr constant [10 x i8] c"read/list\00"
@m_ostr979 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 19, %oop bitcast ([10 x i8]* @m_cstr978 to %oop) }
@"m_read/list" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_read/list.code" to %oop), %"<string>"* @m_ostr979 }
@m_cstr980 = private unnamed_addr constant [33 x i8] c"EOF while reading quoted literal\00"
@m_ostr981 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 65, %oop bitcast ([33 x i8]* @m_cstr980 to %oop) }
define %oop @"m_read/quote.code"(%oop %prefix, %oop %stream) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	store %oop %prefix, %oop* %t0
	store %oop %stream, %oop* %t1
	%r1 = load %oop, %oop* %t1
	%r2 = call %oop @m_read-toplevel.code(%oop %r1)
	store %oop %r2, %oop* %t2
	%r4 = getelementptr %oop, %oop* %t2, %word 0
	%r3 = bitcast %oop* %r4 to %oop
	%r5 = call %oop @"m_gc/push-root.code"(%oop %r3)
	%r6 = load %oop, %oop* %t2
	%r7 = load %oop, %oop* @"m_+end+"
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = ptrtoint %oop %r6 to %word
	%r9 = icmp eq %word %r11, %r10
	%r8 = inttoptr i1 %r9 to %oop
	%r13 = ptrtoint %oop %r8 to %word
	%r12 = icmp ne %word %r13, 0
	br i1 %r12, label %L1, label %L2
L1:
	%r14 = call %oop @m_error-prologue.code()
	%r15 = getelementptr %"<string>", %"<string>"* @m_ostr981, i32 0, i32 1
	%r16 = bitcast %word* %r15 to %oop
	%r17 = call %oop @"m_%error.code"(%oop %r16)
	%r18 = call %oop @m_error-epilogue.code()
	store %oop %r18, %oop* %t3
	br label %L3
L2:
	%r19 = inttoptr %word 0 to %oop
	store %oop %r19, %oop* %t3
	br label %L3
L3:
	%r20 = load %oop, %oop* %t3
	%r21 = load %oop, %oop* %t2
	%r22 = inttoptr %word 0 to %oop
	%r23 = call %oop @m_cons.code(%oop %r21, %oop %r22)
	store %oop %r23, %oop* %t2
	%r24 = load %oop, %oop* %t0
	%r25 = load %oop, %oop* %t2
	%r26 = call %oop @m_cons.code(%oop %r24, %oop %r25)
	store %oop %r26, %oop* %t2
	%r27 = load %oop, %oop* %t2
	store %oop %r27, %oop* %t3
	%r29 = getelementptr %oop, %oop* %t2, %word 0
	%r28 = bitcast %oop* %r29 to %oop
	%r30 = call %oop @"m_gc/pop-root.code"(%oop %r28)
	%r31 = load %oop, %oop* %t3
	ret %oop %r31
}
@m_cstr982 = private unnamed_addr constant [11 x i8] c"read/quote\00"
@m_ostr983 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr982 to %oop) }
@"m_read/quote" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_read/quote.code" to %oop), %"<string>"* @m_ostr983 }
@m_cstr984 = private unnamed_addr constant [5 x i8] c"read\00"
@m_ostr985 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr984 to %oop) }
@m_cstr986 = private unnamed_addr constant [5 x i8] c"read\00"
@m_ostr987 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr986 to %oop) }
define %oop @"m_read/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = load %oop, %oop* %t2
	%r4 = call %oop @"m_pair?.code"(%oop %r3)
	%r6 = ptrtoint %oop %r4 to %word
	%r5 = icmp ne %word %r6, 0
	br i1 %r5, label %L1, label %L2
L1:
	%r7 = inttoptr %word 0 to %oop
	%r8 = load %oop, %oop* %t2
	%r12 = bitcast %oop %r8 to [0 x %oop]*
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = getelementptr [0 x %oop], [0 x %oop]* %r12, %word 0, %word %r11
	%r9 = load %oop, %oop* %r10
	store %oop %r9, %oop* %t3
	%r13 = inttoptr %word 1 to %oop
	%r14 = load %oop, %oop* %t2
	%r18 = bitcast %oop %r14 to [0 x %oop]*
	%r17 = ptrtoint %oop %r13 to %word
	%r16 = getelementptr [0 x %oop], [0 x %oop]* %r18, %word 0, %word %r17
	%r15 = load %oop, %oop* %r16
	store %oop %r15, %oop* %t2
	store %oop %r15, %oop* %t4
	br label %L3
L2:
	%r19 = getelementptr %"<string>", %"<string>"* @m_ostr985, i32 0, i32 1
	%r20 = bitcast %word* %r19 to %oop
	%r21 = load %oop, %oop* %t0
	%r22 = call %oop @"m_%not-enough-arguments.code"(%oop %r20, %oop %r21)
	store %oop %r22, %oop* %t4
	br label %L3
L3:
	%r23 = load %oop, %oop* %t4
	%r24 = load %oop, %oop* %t2
	%r26 = ptrtoint %oop %r24 to %word
	%r25 = icmp ne %word %r26, 0
	br i1 %r25, label %L4, label %L5
L4:
	%r27 = getelementptr %"<string>", %"<string>"* @m_ostr987, i32 0, i32 1
	%r28 = bitcast %word* %r27 to %oop
	%r29 = load %oop, %oop* %t0
	%r30 = call %oop @"m_%too-many-arguments.code"(%oop %r28, %oop %r29)
	store %oop %r30, %oop* %t4
	br label %L6
L5:
	%r31 = inttoptr %word 0 to %oop
	store %oop %r31, %oop* %t4
	br label %L6
L6:
	%r32 = load %oop, %oop* %t4
	%r33 = load %oop, %oop* %t3
	%r34 = call %oop @m_read.code(%oop %r33)
	ret %oop %r34
}
@m_cstr988 = private unnamed_addr constant [20 x i8] c"read/evaluator-stub\00"
@m_ostr989 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 39, %oop bitcast ([20 x i8]* @m_cstr988 to %oop) }
@"m_read/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_read/evaluator-stub.code" to %oop), %"<string>"* @m_ostr989 }
define %oop @"m_do-dump/string.code"(%oop %stream, %oop %obj) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	%t8 = alloca %oop
	%t9 = alloca %oop
	%t10 = alloca %oop
	store %oop %stream, %oop* %t0
	store %oop %obj, %oop* %t1
	%r1 = load %oop, %oop* %t0
	%r2 = inttoptr %word 34 to %oop
	%r3 = call %oop @m_$put.code(%oop %r1, %oop %r2)
	%r4 = load %oop, %oop* %t1
	store %oop %r4, %oop* %t2
	%r5 = inttoptr %word 0 to %oop
	store %oop %r5, %oop* %t3
	%r6 = load %oop, %oop* %t2
	%r7 = call %oop @m_string-length.code(%oop %r6)
	store %oop %r7, %oop* %t4
	br label %L2
L1:
	%r8 = load %oop, %oop* %t2
	%r9 = load %oop, %oop* %t3
	%r10 = call %oop @m_string-at.code(%oop %r8, %oop %r9)
	store %oop %r10, %oop* %t5
	%r11 = inttoptr %word 1 to %oop
	store %oop %r11, %oop* %t7
	%r12 = load %oop, %oop* %t5
	%r13 = inttoptr %word 32 to %oop
	%r17 = ptrtoint %oop %r13 to %word
	%r16 = ptrtoint %oop %r12 to %word
	%r15 = icmp sle %word %r17, %r16
	%r14 = inttoptr i1 %r15 to %oop
	store %oop %r14, %oop* %t7
	%r18 = inttoptr %word 0 to %oop
	%r22 = ptrtoint %oop %r18 to %word
	%r21 = ptrtoint %oop %r14 to %word
	%r20 = icmp eq %word %r22, %r21
	%r19 = inttoptr i1 %r20 to %oop
	%r24 = ptrtoint %oop %r19 to %word
	%r23 = icmp ne %word %r24, 0
	br i1 %r23, label %L7, label %L8
L8:
	%r25 = inttoptr %word 126 to %oop
	%r26 = load %oop, %oop* %t5
	%r30 = ptrtoint %oop %r26 to %word
	%r29 = ptrtoint %oop %r25 to %word
	%r28 = icmp sle %word %r30, %r29
	%r27 = inttoptr i1 %r28 to %oop
	store %oop %r27, %oop* %t7
	%r31 = inttoptr %word 0 to %oop
	%r35 = ptrtoint %oop %r31 to %word
	%r34 = ptrtoint %oop %r27 to %word
	%r33 = icmp eq %word %r35, %r34
	%r32 = inttoptr i1 %r33 to %oop
	%r37 = ptrtoint %oop %r32 to %word
	%r36 = icmp ne %word %r37, 0
	br i1 %r36, label %L7, label %L9
L9:
	br label %L7
L7:
	%r38 = load %oop, %oop* %t7
	%r40 = ptrtoint %oop %r38 to %word
	%r39 = icmp ne %word %r40, 0
	br i1 %r39, label %L4, label %L5
L4:
	%r41 = load %oop, %oop* %t5
	store %oop %r41, %oop* %t7
	%r42 = inttoptr %word 0 to %oop
	store %oop %r42, %oop* %t9
	%r43 = inttoptr %word 34 to %oop
	%r44 = load %oop, %oop* %t7
	%r48 = ptrtoint %oop %r44 to %word
	%r47 = ptrtoint %oop %r43 to %word
	%r46 = icmp eq %word %r48, %r47
	%r45 = inttoptr i1 %r46 to %oop
	store %oop %r45, %oop* %t9
	%r49 = inttoptr %word 0 to %oop
	%r53 = ptrtoint %oop %r49 to %word
	%r52 = ptrtoint %oop %r45 to %word
	%r51 = icmp eq %word %r53, %r52
	%r50 = inttoptr i1 %r51 to %oop
	%r55 = ptrtoint %oop %r50 to %word
	%r54 = icmp ne %word %r55, 0
	br i1 %r54, label %L14, label %L13
L14:
	br label %L13
L13:
	%r56 = load %oop, %oop* %t9
	%r58 = ptrtoint %oop %r56 to %word
	%r57 = icmp ne %word %r58, 0
	br i1 %r57, label %L10, label %L11
L10:
	%r59 = load %oop, %oop* %t0
	%r60 = inttoptr %word 92 to %oop
	%r61 = call %oop @m_$put.code(%oop %r59, %oop %r60)
	%r62 = load %oop, %oop* %t0
	%r63 = inttoptr %word 34 to %oop
	%r64 = call %oop @m_$put.code(%oop %r62, %oop %r63)
	store %oop %r64, %oop* %t8
	br label %L12
L11:
	%r65 = inttoptr %word 0 to %oop
	store %oop %r65, %oop* %t10
	%r66 = inttoptr %word 92 to %oop
	%r67 = load %oop, %oop* %t7
	%r71 = ptrtoint %oop %r67 to %word
	%r70 = ptrtoint %oop %r66 to %word
	%r69 = icmp eq %word %r71, %r70
	%r68 = inttoptr i1 %r69 to %oop
	store %oop %r68, %oop* %t10
	%r72 = inttoptr %word 0 to %oop
	%r76 = ptrtoint %oop %r72 to %word
	%r75 = ptrtoint %oop %r68 to %word
	%r74 = icmp eq %word %r76, %r75
	%r73 = inttoptr i1 %r74 to %oop
	%r78 = ptrtoint %oop %r73 to %word
	%r77 = icmp ne %word %r78, 0
	br i1 %r77, label %L19, label %L18
L19:
	br label %L18
L18:
	%r79 = load %oop, %oop* %t10
	%r81 = ptrtoint %oop %r79 to %word
	%r80 = icmp ne %word %r81, 0
	br i1 %r80, label %L15, label %L16
L15:
	%r82 = load %oop, %oop* %t0
	%r83 = inttoptr %word 92 to %oop
	%r84 = call %oop @m_$put.code(%oop %r82, %oop %r83)
	%r85 = load %oop, %oop* %t0
	%r86 = inttoptr %word 92 to %oop
	%r87 = call %oop @m_$put.code(%oop %r85, %oop %r86)
	store %oop %r87, %oop* %t9
	br label %L17
L16:
	%r88 = load %oop, %oop* %t0
	%r89 = load %oop, %oop* %t5
	%r90 = call %oop @m_$put.code(%oop %r88, %oop %r89)
	store %oop %r90, %oop* %t9
	br label %L17
L17:
	%r91 = load %oop, %oop* %t9
	store %oop %r91, %oop* %t8
	br label %L12
L12:
	%r92 = load %oop, %oop* %t8
	store %oop %r92, %oop* %t6
	br label %L6
L5:
	%r93 = load %oop, %oop* %t0
	%r94 = inttoptr %word 92 to %oop
	%r95 = call %oop @m_$put.code(%oop %r93, %oop %r94)
	%r96 = load %oop, %oop* %t5
	%r97 = inttoptr %word 8 to %oop
	%r98 = call %oop @"m_long->string*.code"(%oop %r96, %oop %r97)
	store %oop %r98, %oop* %t7
	%r99 = load %oop, %oop* %t7
	%r100 = call %oop @m_string-length.code(%oop %r99)
	%r101 = inttoptr %word 3 to %oop
	%r105 = ptrtoint %oop %r101 to %word
	%r104 = ptrtoint %oop %r100 to %word
	%r103 = sub %word %r105, %r104
	%r102 = inttoptr %word %r103 to %oop
	store %oop %r102, %oop* %t8
	br label %L21
L20:
	%r106 = load %oop, %oop* %t0
	%r107 = inttoptr %word 48 to %oop
	%r108 = call %oop @m_$put.code(%oop %r106, %oop %r107)
	br label %L21
L21:
	%r109 = inttoptr %word 1 to %oop
	%r110 = load %oop, %oop* %t8
	%r114 = ptrtoint %oop %r110 to %word
	%r113 = ptrtoint %oop %r109 to %word
	%r112 = sub %word %r114, %r113
	%r111 = inttoptr %word %r112 to %oop
	store %oop %r111, %oop* %t8
	%r115 = inttoptr %word 0 to %oop
	%r119 = ptrtoint %oop %r115 to %word
	%r118 = ptrtoint %oop %r111 to %word
	%r117 = icmp sle %word %r119, %r118
	%r116 = inttoptr i1 %r117 to %oop
	%r121 = ptrtoint %oop %r116 to %word
	%r120 = icmp ne %word %r121, 0
	br i1 %r120, label %L20, label %L22
L22:
	%r122 = load %oop, %oop* %t0
	%r123 = load %oop, %oop* %t7
	%r124 = call %oop @m_$put-all.code(%oop %r122, %oop %r123)
	store %oop %r124, %oop* %t6
	br label %L6
L6:
	%r125 = load %oop, %oop* %t6
	%r126 = inttoptr %word 1 to %oop
	%r127 = load %oop, %oop* %t3
	%r131 = ptrtoint %oop %r127 to %word
	%r130 = ptrtoint %oop %r126 to %word
	%r129 = add %word %r131, %r130
	%r128 = inttoptr %word %r129 to %oop
	store %oop %r128, %oop* %t3
	br label %L2
L2:
	%r132 = load %oop, %oop* %t4
	%r133 = load %oop, %oop* %t3
	%r137 = ptrtoint %oop %r133 to %word
	%r136 = ptrtoint %oop %r132 to %word
	%r135 = icmp slt %word %r137, %r136
	%r134 = inttoptr i1 %r135 to %oop
	%r139 = ptrtoint %oop %r134 to %word
	%r138 = icmp ne %word %r139, 0
	br i1 %r138, label %L1, label %L3
L3:
	%r140 = load %oop, %oop* %t0
	%r141 = inttoptr %word 34 to %oop
	%r142 = call %oop @m_$put.code(%oop %r140, %oop %r141)
	ret %oop %r142
}
@m_cstr990 = private unnamed_addr constant [15 x i8] c"do-dump/string\00"
@m_ostr991 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr990 to %oop) }
@"m_do-dump/string" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_do-dump/string.code" to %oop), %"<string>"* @m_ostr991 }
@m_cstr992 = private unnamed_addr constant [13 x i8] c"cannot dump \00"
@m_ostr993 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 25, %oop bitcast ([13 x i8]* @m_cstr992 to %oop) }
define %oop @"m_error/cannot-dump-object.code"(%oop %obj) {
	%t0 = alloca %oop
	store %oop %obj, %oop* %t0
	%r1 = call %oop @m_error-prologue.code()
	%r2 = getelementptr %"<string>", %"<string>"* @m_ostr993, i32 0, i32 1
	%r3 = bitcast %word* %r2 to %oop
	%r4 = call %oop @"m_%error.code"(%oop %r3)
	%r5 = load %oop, %oop* %t0
	%r6 = call %oop @"m_%error.code"(%oop %r5)
	%r7 = call %oop @m_error-epilogue.code()
	ret %oop %r7
}
@m_cstr994 = private unnamed_addr constant [25 x i8] c"error/cannot-dump-object\00"
@m_ostr995 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 49, %oop bitcast ([25 x i8]* @m_cstr994 to %oop) }
@"m_error/cannot-dump-object" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @"m_error/cannot-dump-object.code" to %oop), %"<string>"* @m_ostr995 }
@m_cstr996 = private unnamed_addr constant [3 x i8] c"()\00"
@m_ostr997 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 5, %oop bitcast ([3 x i8]* @m_cstr996 to %oop) }
@m_cstr998 = private unnamed_addr constant [4 x i8] c" . \00"
@m_ostr999 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr998 to %oop) }
@m_cstr1000 = private unnamed_addr constant [7 x i8] c"Array(\00"
@m_ostr1001 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1000 to %oop) }
@m_cstr1002 = private unnamed_addr constant [6 x i8] c"Expr<\00"
@m_ostr1003 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr1002 to %oop) }
@m_cstr1004 = private unnamed_addr constant [6 x i8] c"Form<\00"
@m_ostr1005 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr1004 to %oop) }
@m_cstr1006 = private unnamed_addr constant [7 x i8] c"Fixed<\00"
@m_ostr1007 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1006 to %oop) }
@m_cstr1008 = private unnamed_addr constant [5 x i8] c"Env<\00"
@m_ostr1009 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr1008 to %oop) }
@m_cstr1010 = private unnamed_addr constant [4 x i8] c" Lv\00"
@m_ostr1011 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr1010 to %oop) }
@m_cstr1012 = private unnamed_addr constant [5 x i8] c",Off\00"
@m_ostr1013 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr1012 to %oop) }
@m_cstr1014 = private unnamed_addr constant [3 x i8] c",#\00"
@m_ostr1015 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 5, %oop bitcast ([3 x i8]* @m_cstr1014 to %oop) }
@m_cstr1016 = private unnamed_addr constant [7 x i8] c"Env<?>\00"
@m_ostr1017 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1016 to %oop) }
@m_cstr1018 = private unnamed_addr constant [10 x i8] c"Context<>\00"
@m_ostr1019 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 19, %oop bitcast ([10 x i8]* @m_cstr1018 to %oop) }
@m_cstr1020 = private unnamed_addr constant [8 x i8] c"Module<\00"
@m_ostr1021 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1020 to %oop) }
@m_cstr1022 = private unnamed_addr constant [2 x i8] c"?\00"
@m_ostr1023 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 3, %oop bitcast ([2 x i8]* @m_cstr1022 to %oop) }
@m_cstr1024 = private unnamed_addr constant [5 x i8] c"Type\00"
@m_ostr1025 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr1024 to %oop) }
@m_cstr1026 = private unnamed_addr constant [2 x i8] c"?\00"
@m_ostr1027 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 3, %oop bitcast ([2 x i8]* @m_cstr1026 to %oop) }
@m_cstr1028 = private unnamed_addr constant [7 x i8] c"Record\00"
@m_ostr1029 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1028 to %oop) }
@m_cstr1030 = private unnamed_addr constant [2 x i8] c"?\00"
@m_ostr1031 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 3, %oop bitcast ([2 x i8]* @m_cstr1030 to %oop) }
@m_cstr1032 = private unnamed_addr constant [9 x i8] c"[instof:\00"
@m_ostr1033 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr1032 to %oop) }
define %oop @m_do-print.code(%oop %stream, %oop %obj, %oop %"storing?") {
	%t2 = alloca %oop
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	%t8 = alloca %oop
	%t9 = alloca %oop
	%t10 = alloca %oop
	%t12 = alloca %oop
	%t11 = alloca %oop
	%t13 = alloca %oop
	%t14 = alloca %oop
	%t15 = alloca %oop
	%t18 = alloca %oop
	%t17 = alloca %oop
	%t16 = alloca %oop
	%t19 = alloca %oop
	%t20 = alloca %oop
	%t21 = alloca %oop
	store %oop %stream, %oop* %t0
	store %oop %obj, %oop* %t1
	store %oop %"storing?", %oop* %t2
	%r1 = inttoptr %word 0 to %oop
	%r2 = load %oop, %oop* %t1
	%r3 = call %oop @m_type-of.code(%oop %r2)
	store %oop %r3, %oop* %t3
	%r4 = inttoptr %word 6 to %oop
	%r5 = load %oop, %oop* %t3
	%r9 = ptrtoint %oop %r5 to %word
	%r8 = ptrtoint %oop %r4 to %word
	%r7 = icmp eq %word %r9, %r8
	%r6 = inttoptr i1 %r7 to %oop
	%r11 = ptrtoint %oop %r6 to %word
	%r10 = icmp ne %word %r11, 0
	br i1 %r10, label %L1, label %L2
L1:
	%r12 = load %oop, %oop* %t0
	%r13 = getelementptr %"<string>", %"<string>"* @m_ostr997, i32 0, i32 1
	%r14 = bitcast %word* %r13 to %oop
	%r15 = call %oop @m_$put-all.code(%oop %r12, %oop %r14)
	store %oop %r15, %oop* %t4
	br label %L3
L2:
	%r16 = inttoptr %word 7 to %oop
	%r17 = load %oop, %oop* %t3
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = icmp eq %word %r21, %r20
	%r18 = inttoptr i1 %r19 to %oop
	%r23 = ptrtoint %oop %r18 to %word
	%r22 = icmp ne %word %r23, 0
	br i1 %r22, label %L4, label %L5
L4:
	%r24 = load %oop, %oop* %t0
	%r25 = inttoptr %word 1 to %oop
	%r26 = load %oop, %oop* %t1
	%r30 = ptrtoint %oop %r26 to %word
	%r29 = ptrtoint %oop %r25 to %word
	%r28 = ashr %word %r30, %r29
	%r27 = inttoptr %word %r28 to %oop
	%r31 = call %oop @"m_long->string.code"(%oop %r27)
	%r32 = call %oop @m_$put-all.code(%oop %r24, %oop %r31)
	store %oop %r32, %oop* %t5
	br label %L6
L5:
	%r33 = inttoptr %word 11 to %oop
	%r34 = load %oop, %oop* %t3
	%r38 = ptrtoint %oop %r34 to %word
	%r37 = ptrtoint %oop %r33 to %word
	%r36 = icmp eq %word %r38, %r37
	%r35 = inttoptr i1 %r36 to %oop
	%r40 = ptrtoint %oop %r35 to %word
	%r39 = icmp ne %word %r40, 0
	br i1 %r39, label %L7, label %L8
L7:
	%r41 = load %oop, %oop* %t0
	%r42 = inttoptr %word 0 to %oop
	%r43 = load %oop, %oop* %t1
	%r47 = bitcast %oop %r43 to [0 x %oop]*
	%r46 = ptrtoint %oop %r42 to %word
	%r45 = getelementptr [0 x %oop], [0 x %oop]* %r47, %word 0, %word %r46
	%r44 = load %oop, %oop* %r45
	%r48 = call %oop @m_$put-all.code(%oop %r41, %oop %r44)
	store %oop %r48, %oop* %t6
	br label %L9
L8:
	%r49 = inttoptr %word 13 to %oop
	%r50 = load %oop, %oop* %t3
	%r54 = ptrtoint %oop %r50 to %word
	%r53 = ptrtoint %oop %r49 to %word
	%r52 = icmp eq %word %r54, %r53
	%r51 = inttoptr i1 %r52 to %oop
	%r56 = ptrtoint %oop %r51 to %word
	%r55 = icmp ne %word %r56, 0
	br i1 %r55, label %L10, label %L11
L10:
	%r57 = load %oop, %oop* %t2
	%r59 = ptrtoint %oop %r57 to %word
	%r58 = icmp ne %word %r59, 0
	br i1 %r58, label %L13, label %L14
L13:
	%r60 = load %oop, %oop* %t0
	%r61 = load %oop, %oop* %t1
	%r62 = call %oop @"m_do-dump/string.code"(%oop %r60, %oop %r61)
	store %oop %r62, %oop* %t8
	br label %L15
L14:
	%r63 = load %oop, %oop* %t0
	%r64 = load %oop, %oop* %t1
	%r65 = call %oop @m_$put-all.code(%oop %r63, %oop %r64)
	store %oop %r65, %oop* %t8
	br label %L15
L15:
	%r66 = load %oop, %oop* %t8
	store %oop %r66, %oop* %t7
	br label %L12
L11:
	%r67 = inttoptr %word 20 to %oop
	%r68 = load %oop, %oop* %t3
	%r72 = ptrtoint %oop %r68 to %word
	%r71 = ptrtoint %oop %r67 to %word
	%r70 = icmp eq %word %r72, %r71
	%r69 = inttoptr i1 %r70 to %oop
	%r74 = ptrtoint %oop %r69 to %word
	%r73 = icmp ne %word %r74, 0
	br i1 %r73, label %L16, label %L17
L16:
	%r75 = load %oop, %oop* %t0
	%r76 = inttoptr %word 40 to %oop
	%r77 = call %oop @m_$put.code(%oop %r75, %oop %r76)
	br label %L20
L19:
	%r78 = load %oop, %oop* %t0
	%r79 = inttoptr %word 0 to %oop
	%r80 = load %oop, %oop* %t1
	%r84 = bitcast %oop %r80 to [0 x %oop]*
	%r83 = ptrtoint %oop %r79 to %word
	%r82 = getelementptr [0 x %oop], [0 x %oop]* %r84, %word 0, %word %r83
	%r81 = load %oop, %oop* %r82
	%r85 = load %oop, %oop* %t2
	%r86 = call %oop @m_do-print.code(%oop %r78, %oop %r81, %oop %r85)
	%r87 = inttoptr %word 1 to %oop
	%r88 = load %oop, %oop* %t1
	%r92 = bitcast %oop %r88 to [0 x %oop]*
	%r91 = ptrtoint %oop %r87 to %word
	%r90 = getelementptr [0 x %oop], [0 x %oop]* %r92, %word 0, %word %r91
	%r89 = load %oop, %oop* %r90
	store %oop %r89, %oop* %t1
	%r93 = call %oop @"m_pair?.code"(%oop %r89)
	%r95 = ptrtoint %oop %r93 to %word
	%r94 = icmp ne %word %r95, 0
	br i1 %r94, label %L22, label %L23
L22:
	%r96 = load %oop, %oop* %t0
	%r97 = inttoptr %word 32 to %oop
	%r98 = call %oop @m_$put.code(%oop %r96, %oop %r97)
	store %oop %r98, %oop* %t9
	br label %L24
L23:
	%r99 = inttoptr %word 0 to %oop
	store %oop %r99, %oop* %t9
	br label %L24
L24:
	%r100 = load %oop, %oop* %t9
	br label %L20
L20:
	%r101 = load %oop, %oop* %t1
	%r102 = call %oop @"m_pair?.code"(%oop %r101)
	%r104 = ptrtoint %oop %r102 to %word
	%r103 = icmp ne %word %r104, 0
	br i1 %r103, label %L19, label %L21
L21:
	%r105 = load %oop, %oop* %t1
	%r107 = ptrtoint %oop %r105 to %word
	%r106 = icmp ne %word %r107, 0
	br i1 %r106, label %L25, label %L26
L25:
	%r108 = load %oop, %oop* %t0
	%r109 = getelementptr %"<string>", %"<string>"* @m_ostr999, i32 0, i32 1
	%r110 = bitcast %word* %r109 to %oop
	%r111 = call %oop @m_$put-all.code(%oop %r108, %oop %r110)
	%r112 = load %oop, %oop* %t0
	%r113 = load %oop, %oop* %t1
	%r114 = load %oop, %oop* %t2
	%r115 = call %oop @m_do-print.code(%oop %r112, %oop %r113, %oop %r114)
	store %oop %r115, %oop* %t9
	br label %L27
L26:
	%r116 = inttoptr %word 0 to %oop
	store %oop %r116, %oop* %t9
	br label %L27
L27:
	%r117 = load %oop, %oop* %t9
	%r118 = load %oop, %oop* %t0
	%r119 = inttoptr %word 41 to %oop
	%r120 = call %oop @m_$put.code(%oop %r118, %oop %r119)
	store %oop %r120, %oop* %t8
	br label %L18
L17:
	%r121 = inttoptr %word 12 to %oop
	%r122 = load %oop, %oop* %t3
	%r126 = ptrtoint %oop %r122 to %word
	%r125 = ptrtoint %oop %r121 to %word
	%r124 = icmp eq %word %r126, %r125
	%r123 = inttoptr i1 %r124 to %oop
	%r128 = ptrtoint %oop %r123 to %word
	%r127 = icmp ne %word %r128, 0
	br i1 %r127, label %L28, label %L29
L28:
	%r129 = load %oop, %oop* %t2
	%r131 = ptrtoint %oop %r129 to %word
	%r130 = icmp ne %word %r131, 0
	br i1 %r130, label %L31, label %L32
L31:
	%r132 = load %oop, %oop* %t1
	%r133 = call %oop @"m_error/cannot-dump-object.code"(%oop %r132)
	store %oop %r133, %oop* %t10
	br label %L33
L32:
	%r134 = inttoptr %word 0 to %oop
	store %oop %r134, %oop* %t10
	br label %L33
L33:
	%r135 = load %oop, %oop* %t10
	%r136 = load %oop, %oop* %t1
	%r137 = call %oop @m_array-length.code(%oop %r136)
	store %oop %r137, %oop* %t10
	%r138 = load %oop, %oop* %t0
	%r139 = getelementptr %"<string>", %"<string>"* @m_ostr1001, i32 0, i32 1
	%r140 = bitcast %word* %r139 to %oop
	%r141 = call %oop @m_$put-all.code(%oop %r138, %oop %r140)
	%r142 = inttoptr %word 0 to %oop
	store %oop %r142, %oop* %t11
	%r143 = load %oop, %oop* %t10
	store %oop %r143, %oop* %t12
	br label %L35
L34:
	%r144 = inttoptr %word 1 to %oop
	store %oop %r144, %oop* %t13
	%r145 = load %oop, %oop* %t11
	store %oop %r145, %oop* %t13
	%r146 = inttoptr %word 0 to %oop
	%r150 = ptrtoint %oop %r146 to %word
	%r149 = ptrtoint %oop %r145 to %word
	%r148 = icmp eq %word %r150, %r149
	%r147 = inttoptr i1 %r148 to %oop
	%r152 = ptrtoint %oop %r147 to %word
	%r151 = icmp ne %word %r152, 0
	br i1 %r151, label %L37, label %L38
L38:
	%r153 = load %oop, %oop* %t0
	%r154 = inttoptr %word 32 to %oop
	%r155 = call %oop @m_$put.code(%oop %r153, %oop %r154)
	store %oop %r155, %oop* %t13
	%r156 = inttoptr %word 0 to %oop
	%r160 = ptrtoint %oop %r156 to %word
	%r159 = ptrtoint %oop %r155 to %word
	%r158 = icmp eq %word %r160, %r159
	%r157 = inttoptr i1 %r158 to %oop
	%r162 = ptrtoint %oop %r157 to %word
	%r161 = icmp ne %word %r162, 0
	br i1 %r161, label %L37, label %L39
L39:
	br label %L37
L37:
	%r163 = load %oop, %oop* %t13
	%r164 = load %oop, %oop* %t0
	%r165 = load %oop, %oop* %t1
	%r166 = load %oop, %oop* %t11
	%r167 = call %oop @m_array-at.code(%oop %r165, %oop %r166)
	%r168 = load %oop, %oop* %t2
	%r169 = call %oop @m_do-print.code(%oop %r164, %oop %r167, %oop %r168)
	%r170 = inttoptr %word 1 to %oop
	%r171 = load %oop, %oop* %t11
	%r175 = ptrtoint %oop %r171 to %word
	%r174 = ptrtoint %oop %r170 to %word
	%r173 = add %word %r175, %r174
	%r172 = inttoptr %word %r173 to %oop
	store %oop %r172, %oop* %t11
	br label %L35
L35:
	%r176 = load %oop, %oop* %t12
	%r177 = load %oop, %oop* %t11
	%r181 = ptrtoint %oop %r177 to %word
	%r180 = ptrtoint %oop %r176 to %word
	%r179 = icmp eq %word %r181, %r180
	%r178 = inttoptr i1 %r179 to %oop
	%r185 = ptrtoint %oop %r178 to %word
	%r184 = icmp eq %word %r185, 0
	%r183 = zext i1 %r184 to %word
	%r182 = inttoptr %word %r183 to %oop
	%r187 = ptrtoint %oop %r182 to %word
	%r186 = icmp ne %word %r187, 0
	br i1 %r186, label %L34, label %L36
L36:
	%r188 = load %oop, %oop* %t0
	%r189 = inttoptr %word 41 to %oop
	%r190 = call %oop @m_$put.code(%oop %r188, %oop %r189)
	store %oop %r190, %oop* %t9
	br label %L30
L29:
	%r191 = inttoptr %word 14 to %oop
	%r192 = load %oop, %oop* %t3
	%r196 = ptrtoint %oop %r192 to %word
	%r195 = ptrtoint %oop %r191 to %word
	%r194 = icmp eq %word %r196, %r195
	%r193 = inttoptr i1 %r194 to %oop
	%r198 = ptrtoint %oop %r193 to %word
	%r197 = icmp ne %word %r198, 0
	br i1 %r197, label %L40, label %L41
L40:
	%r199 = load %oop, %oop* %t2
	%r201 = ptrtoint %oop %r199 to %word
	%r200 = icmp ne %word %r201, 0
	br i1 %r200, label %L43, label %L44
L43:
	%r202 = load %oop, %oop* %t1
	%r203 = call %oop @"m_error/cannot-dump-object.code"(%oop %r202)
	store %oop %r203, %oop* %t12
	br label %L45
L44:
	%r204 = inttoptr %word 0 to %oop
	store %oop %r204, %oop* %t12
	br label %L45
L45:
	%r205 = load %oop, %oop* %t12
	%r206 = load %oop, %oop* %t0
	%r207 = getelementptr %"<string>", %"<string>"* @m_ostr1003, i32 0, i32 1
	%r208 = bitcast %word* %r207 to %oop
	%r209 = call %oop @m_$put-all.code(%oop %r206, %oop %r208)
	%r210 = inttoptr %word 0 to %oop
	store %oop %r210, %oop* %t12
	%r211 = inttoptr %word 4 to %oop
	%r212 = load %oop, %oop* %t1
	%r216 = bitcast %oop %r212 to [0 x %oop]*
	%r215 = ptrtoint %oop %r211 to %word
	%r214 = getelementptr [0 x %oop], [0 x %oop]* %r216, %word 0, %word %r215
	%r213 = load %oop, %oop* %r214
	store %oop %r213, %oop* %t12
	%r217 = load %oop, %oop* %t12
	%r219 = ptrtoint %oop %r217 to %word
	%r218 = icmp ne %word %r219, 0
	br i1 %r218, label %L46, label %L47
L46:
	%r220 = load %oop, %oop* %t0
	%r221 = load %oop, %oop* %t12
	%r222 = load %oop, %oop* %t2
	%r223 = call %oop @m_do-print.code(%oop %r220, %oop %r221, %oop %r222)
	store %oop %r223, %oop* %t11
	br label %L48
L47:
	%r224 = load %oop, %oop* %t0
	%r225 = inttoptr %word 63 to %oop
	%r226 = call %oop @m_$put.code(%oop %r224, %oop %r225)
	store %oop %r226, %oop* %t11
	br label %L48
L48:
	%r227 = load %oop, %oop* %t11
	%r228 = load %oop, %oop* %t0
	%r229 = inttoptr %word 32 to %oop
	%r230 = call %oop @m_$put.code(%oop %r228, %oop %r229)
	%r231 = load %oop, %oop* %t0
	%r232 = inttoptr %word 0 to %oop
	%r233 = load %oop, %oop* %t1
	%r237 = bitcast %oop %r233 to [0 x %oop]*
	%r236 = ptrtoint %oop %r232 to %word
	%r235 = getelementptr [0 x %oop], [0 x %oop]* %r237, %word 0, %word %r236
	%r234 = load %oop, %oop* %r235
	%r238 = load %oop, %oop* %t2
	%r239 = call %oop @m_do-print.code(%oop %r231, %oop %r234, %oop %r238)
	%r240 = load %oop, %oop* %t0
	%r241 = inttoptr %word 62 to %oop
	%r242 = call %oop @m_$put.code(%oop %r240, %oop %r241)
	store %oop %r242, %oop* %t10
	br label %L42
L41:
	%r243 = inttoptr %word 15 to %oop
	%r244 = load %oop, %oop* %t3
	%r248 = ptrtoint %oop %r244 to %word
	%r247 = ptrtoint %oop %r243 to %word
	%r246 = icmp eq %word %r248, %r247
	%r245 = inttoptr i1 %r246 to %oop
	%r250 = ptrtoint %oop %r245 to %word
	%r249 = icmp ne %word %r250, 0
	br i1 %r249, label %L49, label %L50
L49:
	%r251 = load %oop, %oop* %t2
	%r253 = ptrtoint %oop %r251 to %word
	%r252 = icmp ne %word %r253, 0
	br i1 %r252, label %L52, label %L53
L52:
	%r254 = load %oop, %oop* %t1
	%r255 = call %oop @"m_error/cannot-dump-object.code"(%oop %r254)
	store %oop %r255, %oop* %t11
	br label %L54
L53:
	%r256 = inttoptr %word 0 to %oop
	store %oop %r256, %oop* %t11
	br label %L54
L54:
	%r257 = load %oop, %oop* %t11
	%r258 = load %oop, %oop* %t0
	%r259 = getelementptr %"<string>", %"<string>"* @m_ostr1005, i32 0, i32 1
	%r260 = bitcast %word* %r259 to %oop
	%r261 = call %oop @m_$put-all.code(%oop %r258, %oop %r260)
	%r262 = load %oop, %oop* %t0
	%r263 = inttoptr %word 0 to %oop
	%r264 = load %oop, %oop* %t1
	%r268 = bitcast %oop %r264 to [0 x %oop]*
	%r267 = ptrtoint %oop %r263 to %word
	%r266 = getelementptr [0 x %oop], [0 x %oop]* %r268, %word 0, %word %r267
	%r265 = load %oop, %oop* %r266
	%r269 = load %oop, %oop* %t2
	%r270 = call %oop @m_do-print.code(%oop %r262, %oop %r265, %oop %r269)
	%r271 = load %oop, %oop* %t0
	%r272 = inttoptr %word 44 to %oop
	%r273 = call %oop @m_$put.code(%oop %r271, %oop %r272)
	%r274 = load %oop, %oop* %t0
	%r275 = inttoptr %word 1 to %oop
	%r276 = load %oop, %oop* %t1
	%r280 = bitcast %oop %r276 to [0 x %oop]*
	%r279 = ptrtoint %oop %r275 to %word
	%r278 = getelementptr [0 x %oop], [0 x %oop]* %r280, %word 0, %word %r279
	%r277 = load %oop, %oop* %r278
	%r281 = load %oop, %oop* %t2
	%r282 = call %oop @m_do-print.code(%oop %r274, %oop %r277, %oop %r281)
	%r283 = load %oop, %oop* %t0
	%r284 = inttoptr %word 62 to %oop
	%r285 = call %oop @m_$put.code(%oop %r283, %oop %r284)
	store %oop %r285, %oop* %t12
	br label %L51
L50:
	%r286 = inttoptr %word 8 to %oop
	%r287 = load %oop, %oop* %t3
	%r291 = ptrtoint %oop %r287 to %word
	%r290 = ptrtoint %oop %r286 to %word
	%r289 = icmp eq %word %r291, %r290
	%r288 = inttoptr i1 %r289 to %oop
	%r293 = ptrtoint %oop %r288 to %word
	%r292 = icmp ne %word %r293, 0
	br i1 %r292, label %L55, label %L56
L55:
	%r294 = load %oop, %oop* %t2
	%r296 = ptrtoint %oop %r294 to %word
	%r295 = icmp ne %word %r296, 0
	br i1 %r295, label %L58, label %L59
L58:
	%r297 = load %oop, %oop* %t1
	%r298 = call %oop @"m_error/cannot-dump-object.code"(%oop %r297)
	store %oop %r298, %oop* %t13
	br label %L60
L59:
	%r299 = inttoptr %word 0 to %oop
	store %oop %r299, %oop* %t13
	br label %L60
L60:
	%r300 = load %oop, %oop* %t13
	%r301 = load %oop, %oop* %t0
	%r302 = getelementptr %"<string>", %"<string>"* @m_ostr1007, i32 0, i32 1
	%r303 = bitcast %word* %r302 to %oop
	%r304 = call %oop @m_$put-all.code(%oop %r301, %oop %r303)
	%r305 = load %oop, %oop* %t0
	%r306 = inttoptr %word 0 to %oop
	%r307 = load %oop, %oop* %t1
	%r311 = bitcast %oop %r307 to [0 x %oop]*
	%r310 = ptrtoint %oop %r306 to %word
	%r309 = getelementptr [0 x %oop], [0 x %oop]* %r311, %word 0, %word %r310
	%r308 = load %oop, %oop* %r309
	%r312 = load %oop, %oop* %t2
	%r313 = call %oop @m_do-print.code(%oop %r305, %oop %r308, %oop %r312)
	%r314 = load %oop, %oop* %t0
	%r315 = inttoptr %word 62 to %oop
	%r316 = call %oop @m_$put.code(%oop %r314, %oop %r315)
	store %oop %r316, %oop* %t11
	br label %L57
L56:
	%r317 = inttoptr %word 10 to %oop
	%r318 = load %oop, %oop* %t3
	%r322 = ptrtoint %oop %r318 to %word
	%r321 = ptrtoint %oop %r317 to %word
	%r320 = icmp eq %word %r322, %r321
	%r319 = inttoptr i1 %r320 to %oop
	%r324 = ptrtoint %oop %r319 to %word
	%r323 = icmp ne %word %r324, 0
	br i1 %r323, label %L61, label %L62
L61:
	%r325 = load %oop, %oop* %t2
	%r327 = ptrtoint %oop %r325 to %word
	%r326 = icmp ne %word %r327, 0
	br i1 %r326, label %L64, label %L65
L64:
	%r328 = load %oop, %oop* %t1
	%r329 = call %oop @"m_error/cannot-dump-object.code"(%oop %r328)
	store %oop %r329, %oop* %t14
	br label %L66
L65:
	%r330 = inttoptr %word 0 to %oop
	store %oop %r330, %oop* %t14
	br label %L66
L66:
	%r331 = load %oop, %oop* %t14
	%r332 = load %oop, %oop* %t0
	%r333 = inttoptr %word 46 to %oop
	%r334 = call %oop @m_$put.code(%oop %r332, %oop %r333)
	%r335 = load %oop, %oop* %t0
	%r336 = inttoptr %word 1 to %oop
	%r337 = load %oop, %oop* %t1
	%r341 = bitcast %oop %r337 to [0 x %oop]*
	%r340 = ptrtoint %oop %r336 to %word
	%r339 = getelementptr [0 x %oop], [0 x %oop]* %r341, %word 0, %word %r340
	%r338 = load %oop, %oop* %r339
	%r342 = call %oop @m_$put-all.code(%oop %r335, %oop %r338)
	store %oop %r342, %oop* %t13
	br label %L63
L62:
	%r343 = inttoptr %word 16 to %oop
	%r344 = load %oop, %oop* %t3
	%r348 = ptrtoint %oop %r344 to %word
	%r347 = ptrtoint %oop %r343 to %word
	%r346 = icmp eq %word %r348, %r347
	%r345 = inttoptr i1 %r346 to %oop
	%r350 = ptrtoint %oop %r345 to %word
	%r349 = icmp ne %word %r350, 0
	br i1 %r349, label %L67, label %L68
L67:
	%r351 = load %oop, %oop* %t2
	%r353 = ptrtoint %oop %r351 to %word
	%r352 = icmp ne %word %r353, 0
	br i1 %r352, label %L70, label %L71
L70:
	%r354 = load %oop, %oop* %t1
	%r355 = call %oop @"m_error/cannot-dump-object.code"(%oop %r354)
	store %oop %r355, %oop* %t15
	br label %L72
L71:
	%r356 = inttoptr %word 0 to %oop
	store %oop %r356, %oop* %t15
	br label %L72
L72:
	%r357 = load %oop, %oop* %t15
	%r358 = inttoptr %word 2 to %oop
	%r359 = load %oop, %oop* %t1
	%r363 = bitcast %oop %r359 to [0 x %oop]*
	%r362 = ptrtoint %oop %r358 to %word
	%r361 = getelementptr [0 x %oop], [0 x %oop]* %r363, %word 0, %word %r362
	%r360 = load %oop, %oop* %r361
	store %oop %r360, %oop* %t15
	%r364 = load %oop, %oop* %t0
	%r365 = inttoptr %word 0 to %oop
	%r366 = load %oop, %oop* %t1
	%r370 = bitcast %oop %r366 to [0 x %oop]*
	%r369 = ptrtoint %oop %r365 to %word
	%r368 = getelementptr [0 x %oop], [0 x %oop]* %r370, %word 0, %word %r369
	%r367 = load %oop, %oop* %r368
	%r371 = load %oop, %oop* %t2
	%r372 = call %oop @m_do-print.code(%oop %r364, %oop %r367, %oop %r371)
	%r373 = load %oop, %oop* %t15
	%r375 = ptrtoint %oop %r373 to %word
	%r374 = icmp ne %word %r375, 0
	br i1 %r374, label %L73, label %L74
L73:
	%r376 = load %oop, %oop* %t0
	%r377 = inttoptr %word 46 to %oop
	%r378 = call %oop @m_$put.code(%oop %r376, %oop %r377)
	%r379 = load %oop, %oop* %t0
	%r380 = inttoptr %word 1 to %oop
	%r381 = load %oop, %oop* %t15
	%r385 = bitcast %oop %r381 to [0 x %oop]*
	%r384 = ptrtoint %oop %r380 to %word
	%r383 = getelementptr [0 x %oop], [0 x %oop]* %r385, %word 0, %word %r384
	%r382 = load %oop, %oop* %r383
	%r386 = load %oop, %oop* %t2
	%r387 = call %oop @m_do-print.code(%oop %r379, %oop %r382, %oop %r386)
	%r388 = load %oop, %oop* %t0
	%r389 = inttoptr %word 43 to %oop
	%r390 = call %oop @m_$put.code(%oop %r388, %oop %r389)
	%r391 = load %oop, %oop* %t0
	%r392 = inttoptr %word 3 to %oop
	%r393 = load %oop, %oop* %t1
	%r397 = bitcast %oop %r393 to [0 x %oop]*
	%r396 = ptrtoint %oop %r392 to %word
	%r395 = getelementptr [0 x %oop], [0 x %oop]* %r397, %word 0, %word %r396
	%r394 = load %oop, %oop* %r395
	%r398 = load %oop, %oop* %t2
	%r399 = call %oop @m_do-print.code(%oop %r391, %oop %r394, %oop %r398)
	store %oop %r399, %oop* %t16
	br label %L75
L74:
	%r400 = inttoptr %word 0 to %oop
	store %oop %r400, %oop* %t16
	br label %L75
L75:
	%r401 = load %oop, %oop* %t16
	store %oop %r401, %oop* %t14
	br label %L69
L68:
	%r402 = inttoptr %word 17 to %oop
	%r403 = load %oop, %oop* %t3
	%r407 = ptrtoint %oop %r403 to %word
	%r406 = ptrtoint %oop %r402 to %word
	%r405 = icmp eq %word %r407, %r406
	%r404 = inttoptr i1 %r405 to %oop
	%r409 = ptrtoint %oop %r404 to %word
	%r408 = icmp ne %word %r409, 0
	br i1 %r408, label %L76, label %L77
L76:
	%r410 = load %oop, %oop* %t2
	%r412 = ptrtoint %oop %r410 to %word
	%r411 = icmp ne %word %r412, 0
	br i1 %r411, label %L79, label %L80
L79:
	%r413 = load %oop, %oop* %t1
	%r414 = call %oop @"m_error/cannot-dump-object.code"(%oop %r413)
	store %oop %r414, %oop* %t16
	br label %L81
L80:
	%r415 = inttoptr %word 0 to %oop
	store %oop %r415, %oop* %t16
	br label %L81
L81:
	%r416 = load %oop, %oop* %t16
	%r417 = inttoptr %word 1 to %oop
	%r418 = load %oop, %oop* %t1
	%r422 = bitcast %oop %r418 to [0 x %oop]*
	%r421 = ptrtoint %oop %r417 to %word
	%r420 = getelementptr [0 x %oop], [0 x %oop]* %r422, %word 0, %word %r421
	%r419 = load %oop, %oop* %r420
	store %oop %r419, %oop* %t16
	%r423 = inttoptr %word 3 to %oop
	%r424 = load %oop, %oop* %t1
	%r428 = bitcast %oop %r424 to [0 x %oop]*
	%r427 = ptrtoint %oop %r423 to %word
	%r426 = getelementptr [0 x %oop], [0 x %oop]* %r428, %word 0, %word %r427
	%r425 = load %oop, %oop* %r426
	store %oop %r425, %oop* %t17
	%r429 = inttoptr %word 2 to %oop
	%r430 = load %oop, %oop* %t1
	%r434 = bitcast %oop %r430 to [0 x %oop]*
	%r433 = ptrtoint %oop %r429 to %word
	%r432 = getelementptr [0 x %oop], [0 x %oop]* %r434, %word 0, %word %r433
	%r431 = load %oop, %oop* %r432
	store %oop %r431, %oop* %t18
	%r435 = inttoptr %word 1 to %oop
	store %oop %r435, %oop* %t20
	%r436 = load %oop, %oop* %t16
	store %oop %r436, %oop* %t20
	%r437 = inttoptr %word 0 to %oop
	%r441 = ptrtoint %oop %r437 to %word
	%r440 = ptrtoint %oop %r436 to %word
	%r439 = icmp eq %word %r441, %r440
	%r438 = inttoptr i1 %r439 to %oop
	%r443 = ptrtoint %oop %r438 to %word
	%r442 = icmp ne %word %r443, 0
	br i1 %r442, label %L85, label %L86
L86:
	%r444 = load %oop, %oop* %t17
	store %oop %r444, %oop* %t20
	%r445 = inttoptr %word 0 to %oop
	%r449 = ptrtoint %oop %r445 to %word
	%r448 = ptrtoint %oop %r444 to %word
	%r447 = icmp eq %word %r449, %r448
	%r446 = inttoptr i1 %r447 to %oop
	%r451 = ptrtoint %oop %r446 to %word
	%r450 = icmp ne %word %r451, 0
	br i1 %r450, label %L85, label %L87
L87:
	%r452 = load %oop, %oop* %t18
	store %oop %r452, %oop* %t20
	%r453 = inttoptr %word 0 to %oop
	%r457 = ptrtoint %oop %r453 to %word
	%r456 = ptrtoint %oop %r452 to %word
	%r455 = icmp eq %word %r457, %r456
	%r454 = inttoptr i1 %r455 to %oop
	%r459 = ptrtoint %oop %r454 to %word
	%r458 = icmp ne %word %r459, 0
	br i1 %r458, label %L85, label %L88
L88:
	br label %L85
L85:
	%r460 = load %oop, %oop* %t20
	%r462 = ptrtoint %oop %r460 to %word
	%r461 = icmp ne %word %r462, 0
	br i1 %r461, label %L82, label %L83
L82:
	%r463 = load %oop, %oop* %t0
	%r464 = getelementptr %"<string>", %"<string>"* @m_ostr1009, i32 0, i32 1
	%r465 = bitcast %word* %r464 to %oop
	%r466 = call %oop @m_$put-all.code(%oop %r463, %oop %r465)
	%r467 = inttoptr %word 0 to %oop
	store %oop %r467, %oop* %t20
	%r468 = inttoptr %word 5 to %oop
	%r469 = load %oop, %oop* %t1
	%r473 = bitcast %oop %r469 to [0 x %oop]*
	%r472 = ptrtoint %oop %r468 to %word
	%r471 = getelementptr [0 x %oop], [0 x %oop]* %r473, %word 0, %word %r472
	%r470 = load %oop, %oop* %r471
	store %oop %r470, %oop* %t20
	%r475 = ptrtoint %oop %r470 to %word
	%r474 = icmp ne %word %r475, 0
	br i1 %r474, label %L89, label %L90
L89:
	%r476 = load %oop, %oop* %t0
	%r477 = load %oop, %oop* %t20
	%r478 = load %oop, %oop* %t2
	%r479 = call %oop @m_do-print.code(%oop %r476, %oop %r477, %oop %r478)
	store %oop %r479, %oop* %t21
	br label %L91
L90:
	%r480 = inttoptr %word 0 to %oop
	store %oop %r480, %oop* %t21
	br label %L91
L91:
	%r481 = load %oop, %oop* %t21
	%r482 = load %oop, %oop* %t0
	%r483 = getelementptr %"<string>", %"<string>"* @m_ostr1011, i32 0, i32 1
	%r484 = bitcast %word* %r483 to %oop
	%r485 = call %oop @m_$put-all.code(%oop %r482, %oop %r484)
	%r486 = load %oop, %oop* %t0
	%r487 = load %oop, %oop* %t16
	%r488 = load %oop, %oop* %t2
	%r489 = call %oop @m_do-print.code(%oop %r486, %oop %r487, %oop %r488)
	%r490 = load %oop, %oop* %t0
	%r491 = getelementptr %"<string>", %"<string>"* @m_ostr1013, i32 0, i32 1
	%r492 = bitcast %word* %r491 to %oop
	%r493 = call %oop @m_$put-all.code(%oop %r490, %oop %r492)
	%r494 = load %oop, %oop* %t0
	%r495 = load %oop, %oop* %t18
	%r496 = load %oop, %oop* %t2
	%r497 = call %oop @m_do-print.code(%oop %r494, %oop %r495, %oop %r496)
	%r498 = load %oop, %oop* %t0
	%r499 = getelementptr %"<string>", %"<string>"* @m_ostr1015, i32 0, i32 1
	%r500 = bitcast %word* %r499 to %oop
	%r501 = call %oop @m_$put-all.code(%oop %r498, %oop %r500)
	%r502 = load %oop, %oop* %t0
	%r503 = inttoptr %word 1 to %oop
	%r504 = inttoptr %word 1 to %oop
	%r505 = load %oop, %oop* %t17
	%r506 = call %oop @m_array-length.code(%oop %r505)
	%r510 = ptrtoint %oop %r506 to %word
	%r509 = ptrtoint %oop %r504 to %word
	%r508 = shl %word %r510, %r509
	%r507 = inttoptr %word %r508 to %oop
	%r514 = ptrtoint %oop %r507 to %word
	%r513 = ptrtoint %oop %r503 to %word
	%r512 = or %word %r514, %r513
	%r511 = inttoptr %word %r512 to %oop
	%r515 = load %oop, %oop* %t2
	%r516 = call %oop @m_do-print.code(%oop %r502, %oop %r511, %oop %r515)
	store %oop %r516, %oop* %t19
	br label %L84
L83:
	%r517 = load %oop, %oop* %t0
	%r518 = getelementptr %"<string>", %"<string>"* @m_ostr1017, i32 0, i32 1
	%r519 = bitcast %word* %r518 to %oop
	%r520 = call %oop @m_$put-all.code(%oop %r517, %oop %r519)
	store %oop %r520, %oop* %t19
	br label %L84
L84:
	%r521 = load %oop, %oop* %t19
	store %oop %r521, %oop* %t15
	br label %L78
L77:
	%r522 = inttoptr %word 19 to %oop
	%r523 = load %oop, %oop* %t3
	%r527 = ptrtoint %oop %r523 to %word
	%r526 = ptrtoint %oop %r522 to %word
	%r525 = icmp eq %word %r527, %r526
	%r524 = inttoptr i1 %r525 to %oop
	%r529 = ptrtoint %oop %r524 to %word
	%r528 = icmp ne %word %r529, 0
	br i1 %r528, label %L92, label %L93
L92:
	%r530 = load %oop, %oop* %t2
	%r532 = ptrtoint %oop %r530 to %word
	%r531 = icmp ne %word %r532, 0
	br i1 %r531, label %L95, label %L96
L95:
	%r533 = load %oop, %oop* %t1
	%r534 = call %oop @"m_error/cannot-dump-object.code"(%oop %r533)
	store %oop %r534, %oop* %t17
	br label %L97
L96:
	%r535 = inttoptr %word 0 to %oop
	store %oop %r535, %oop* %t17
	br label %L97
L97:
	%r536 = load %oop, %oop* %t17
	%r537 = load %oop, %oop* %t0
	%r538 = getelementptr %"<string>", %"<string>"* @m_ostr1019, i32 0, i32 1
	%r539 = bitcast %word* %r538 to %oop
	%r540 = call %oop @m_$put-all.code(%oop %r537, %oop %r539)
	store %oop %r540, %oop* %t18
	br label %L94
L93:
	%r541 = inttoptr %word 18 to %oop
	%r542 = load %oop, %oop* %t3
	%r546 = ptrtoint %oop %r542 to %word
	%r545 = ptrtoint %oop %r541 to %word
	%r544 = icmp eq %word %r546, %r545
	%r543 = inttoptr i1 %r544 to %oop
	%r548 = ptrtoint %oop %r543 to %word
	%r547 = icmp ne %word %r548, 0
	br i1 %r547, label %L98, label %L99
L98:
	%r549 = load %oop, %oop* %t2
	%r551 = ptrtoint %oop %r549 to %word
	%r550 = icmp ne %word %r551, 0
	br i1 %r550, label %L101, label %L102
L101:
	%r552 = load %oop, %oop* %t1
	%r553 = call %oop @"m_error/cannot-dump-object.code"(%oop %r552)
	store %oop %r553, %oop* %t16
	br label %L103
L102:
	%r554 = inttoptr %word 0 to %oop
	store %oop %r554, %oop* %t16
	br label %L103
L103:
	%r555 = load %oop, %oop* %t16
	%r556 = load %oop, %oop* %t0
	%r557 = getelementptr %"<string>", %"<string>"* @m_ostr1021, i32 0, i32 1
	%r558 = bitcast %word* %r557 to %oop
	%r559 = call %oop @m_$put-all.code(%oop %r556, %oop %r558)
	%r560 = load %oop, %oop* %t0
	%r561 = inttoptr %word 0 to %oop
	store %oop %r561, %oop* %t16
	%r562 = inttoptr %word 1 to %oop
	%r563 = load %oop, %oop* %t1
	%r567 = bitcast %oop %r563 to [0 x %oop]*
	%r566 = ptrtoint %oop %r562 to %word
	%r565 = getelementptr [0 x %oop], [0 x %oop]* %r567, %word 0, %word %r566
	%r564 = load %oop, %oop* %r565
	store %oop %r564, %oop* %t16
	%r568 = inttoptr %word 0 to %oop
	%r572 = ptrtoint %oop %r568 to %word
	%r571 = ptrtoint %oop %r564 to %word
	%r570 = icmp eq %word %r572, %r571
	%r569 = inttoptr i1 %r570 to %oop
	%r574 = ptrtoint %oop %r569 to %word
	%r573 = icmp ne %word %r574, 0
	br i1 %r573, label %L105, label %L104
L105:
	%r575 = getelementptr %"<string>", %"<string>"* @m_ostr1023, i32 0, i32 1
	%r576 = bitcast %word* %r575 to %oop
	store %oop %r576, %oop* %t16
	%r577 = inttoptr %word 0 to %oop
	%r581 = ptrtoint %oop %r577 to %word
	%r580 = ptrtoint %oop %r576 to %word
	%r579 = icmp eq %word %r581, %r580
	%r578 = inttoptr i1 %r579 to %oop
	%r583 = ptrtoint %oop %r578 to %word
	%r582 = icmp ne %word %r583, 0
	br i1 %r582, label %L106, label %L104
L106:
	br label %L104
L104:
	%r584 = load %oop, %oop* %t16
	%r585 = inttoptr %word 0 to %oop
	%r586 = call %oop @m_do-print.code(%oop %r560, %oop %r584, %oop %r585)
	%r587 = load %oop, %oop* %t0
	%r588 = inttoptr %word 44 to %oop
	%r589 = call %oop @m_$put.code(%oop %r587, %oop %r588)
	%r590 = load %oop, %oop* %t0
	%r591 = load %oop, %oop* %t1
	%r592 = call %oop @m_module-env.code(%oop %r591)
	%r593 = load %oop, %oop* %t2
	%r594 = call %oop @m_do-print.code(%oop %r590, %oop %r592, %oop %r593)
	%r595 = load %oop, %oop* %t0
	%r596 = inttoptr %word 62 to %oop
	%r597 = call %oop @m_$put.code(%oop %r595, %oop %r596)
	store %oop %r597, %oop* %t17
	br label %L100
L99:
	%r598 = inttoptr %word 1 to %oop
	%r599 = load %oop, %oop* %t3
	%r603 = ptrtoint %oop %r599 to %word
	%r602 = ptrtoint %oop %r598 to %word
	%r601 = icmp eq %word %r603, %r602
	%r600 = inttoptr i1 %r601 to %oop
	%r605 = ptrtoint %oop %r600 to %word
	%r604 = icmp ne %word %r605, 0
	br i1 %r604, label %L107, label %L108
L107:
	%r606 = load %oop, %oop* %t2
	%r608 = ptrtoint %oop %r606 to %word
	%r607 = icmp ne %word %r608, 0
	br i1 %r607, label %L110, label %L111
L110:
	%r609 = load %oop, %oop* %t1
	%r610 = call %oop @"m_error/cannot-dump-object.code"(%oop %r609)
	store %oop %r610, %oop* %t19
	br label %L112
L111:
	%r611 = inttoptr %word 0 to %oop
	store %oop %r611, %oop* %t19
	br label %L112
L112:
	%r612 = load %oop, %oop* %t19
	%r613 = load %oop, %oop* %t0
	%r614 = getelementptr %"<string>", %"<string>"* @m_ostr1025, i32 0, i32 1
	%r615 = bitcast %word* %r614 to %oop
	%r616 = call %oop @m_$put-all.code(%oop %r613, %oop %r615)
	%r617 = load %oop, %oop* %t0
	%r618 = inttoptr %word 0 to %oop
	store %oop %r618, %oop* %t19
	%r619 = inttoptr %word 1 to %oop
	%r620 = load %oop, %oop* %t1
	%r624 = bitcast %oop %r620 to [0 x %oop]*
	%r623 = ptrtoint %oop %r619 to %word
	%r622 = getelementptr [0 x %oop], [0 x %oop]* %r624, %word 0, %word %r623
	%r621 = load %oop, %oop* %r622
	store %oop %r621, %oop* %t19
	%r625 = inttoptr %word 0 to %oop
	%r629 = ptrtoint %oop %r625 to %word
	%r628 = ptrtoint %oop %r621 to %word
	%r627 = icmp eq %word %r629, %r628
	%r626 = inttoptr i1 %r627 to %oop
	%r631 = ptrtoint %oop %r626 to %word
	%r630 = icmp ne %word %r631, 0
	br i1 %r630, label %L114, label %L113
L114:
	%r632 = getelementptr %"<string>", %"<string>"* @m_ostr1027, i32 0, i32 1
	%r633 = bitcast %word* %r632 to %oop
	store %oop %r633, %oop* %t19
	%r634 = inttoptr %word 0 to %oop
	%r638 = ptrtoint %oop %r634 to %word
	%r637 = ptrtoint %oop %r633 to %word
	%r636 = icmp eq %word %r638, %r637
	%r635 = inttoptr i1 %r636 to %oop
	%r640 = ptrtoint %oop %r635 to %word
	%r639 = icmp ne %word %r640, 0
	br i1 %r639, label %L115, label %L113
L115:
	br label %L113
L113:
	%r641 = load %oop, %oop* %t19
	%r642 = inttoptr %word 0 to %oop
	%r643 = call %oop @m_do-print.code(%oop %r617, %oop %r641, %oop %r642)
	store %oop %r643, %oop* %t16
	br label %L109
L108:
	%r644 = inttoptr %word 2 to %oop
	%r645 = load %oop, %oop* %t3
	%r649 = ptrtoint %oop %r645 to %word
	%r648 = ptrtoint %oop %r644 to %word
	%r647 = icmp eq %word %r649, %r648
	%r646 = inttoptr i1 %r647 to %oop
	%r651 = ptrtoint %oop %r646 to %word
	%r650 = icmp ne %word %r651, 0
	br i1 %r650, label %L116, label %L117
L116:
	%r652 = load %oop, %oop* %t2
	%r654 = ptrtoint %oop %r652 to %word
	%r653 = icmp ne %word %r654, 0
	br i1 %r653, label %L119, label %L120
L119:
	%r655 = load %oop, %oop* %t1
	%r656 = call %oop @"m_error/cannot-dump-object.code"(%oop %r655)
	store %oop %r656, %oop* %t20
	br label %L121
L120:
	%r657 = inttoptr %word 0 to %oop
	store %oop %r657, %oop* %t20
	br label %L121
L121:
	%r658 = load %oop, %oop* %t20
	%r659 = load %oop, %oop* %t0
	%r660 = getelementptr %"<string>", %"<string>"* @m_ostr1029, i32 0, i32 1
	%r661 = bitcast %word* %r660 to %oop
	%r662 = call %oop @m_$put-all.code(%oop %r659, %oop %r661)
	%r663 = load %oop, %oop* %t0
	%r664 = inttoptr %word 0 to %oop
	store %oop %r664, %oop* %t20
	%r665 = inttoptr %word 1 to %oop
	%r666 = load %oop, %oop* %t1
	%r670 = bitcast %oop %r666 to [0 x %oop]*
	%r669 = ptrtoint %oop %r665 to %word
	%r668 = getelementptr [0 x %oop], [0 x %oop]* %r670, %word 0, %word %r669
	%r667 = load %oop, %oop* %r668
	store %oop %r667, %oop* %t20
	%r671 = inttoptr %word 0 to %oop
	%r675 = ptrtoint %oop %r671 to %word
	%r674 = ptrtoint %oop %r667 to %word
	%r673 = icmp eq %word %r675, %r674
	%r672 = inttoptr i1 %r673 to %oop
	%r677 = ptrtoint %oop %r672 to %word
	%r676 = icmp ne %word %r677, 0
	br i1 %r676, label %L123, label %L122
L123:
	%r678 = getelementptr %"<string>", %"<string>"* @m_ostr1031, i32 0, i32 1
	%r679 = bitcast %word* %r678 to %oop
	store %oop %r679, %oop* %t20
	%r680 = inttoptr %word 0 to %oop
	%r684 = ptrtoint %oop %r680 to %word
	%r683 = ptrtoint %oop %r679 to %word
	%r682 = icmp eq %word %r684, %r683
	%r681 = inttoptr i1 %r682 to %oop
	%r686 = ptrtoint %oop %r681 to %word
	%r685 = icmp ne %word %r686, 0
	br i1 %r685, label %L124, label %L122
L124:
	br label %L122
L122:
	%r687 = load %oop, %oop* %t20
	%r688 = inttoptr %word 0 to %oop
	%r689 = call %oop @m_do-print.code(%oop %r663, %oop %r687, %oop %r688)
	store %oop %r689, %oop* %t19
	br label %L118
L117:
	%r690 = load %oop, %oop* %t2
	%r692 = ptrtoint %oop %r690 to %word
	%r691 = icmp ne %word %r692, 0
	br i1 %r691, label %L125, label %L126
L125:
	%r693 = load %oop, %oop* %t1
	%r694 = call %oop @"m_error/cannot-dump-object.code"(%oop %r693)
	store %oop %r694, %oop* %t20
	br label %L127
L126:
	%r695 = inttoptr %word 0 to %oop
	store %oop %r695, %oop* %t20
	br label %L127
L127:
	%r696 = load %oop, %oop* %t20
	%r697 = load %oop, %oop* %t0
	%r698 = getelementptr %"<string>", %"<string>"* @m_ostr1033, i32 0, i32 1
	%r699 = bitcast %word* %r698 to %oop
	%r700 = call %oop @m_$put-all.code(%oop %r697, %oop %r699)
	%r701 = load %oop, %oop* %t0
	%r702 = inttoptr %word 1 to %oop
	%r703 = inttoptr %word 1 to %oop
	%r704 = load %oop, %oop* %t3
	%r708 = ptrtoint %oop %r704 to %word
	%r707 = ptrtoint %oop %r703 to %word
	%r706 = shl %word %r708, %r707
	%r705 = inttoptr %word %r706 to %oop
	%r712 = ptrtoint %oop %r705 to %word
	%r711 = ptrtoint %oop %r702 to %word
	%r710 = or %word %r712, %r711
	%r709 = inttoptr %word %r710 to %oop
	%r713 = load %oop, %oop* %t2
	%r714 = call %oop @m_do-print.code(%oop %r701, %oop %r709, %oop %r713)
	%r715 = load %oop, %oop* %t0
	%r716 = inttoptr %word 93 to %oop
	%r717 = call %oop @m_$put.code(%oop %r715, %oop %r716)
	store %oop %r717, %oop* %t19
	br label %L118
L118:
	%r718 = load %oop, %oop* %t19
	store %oop %r718, %oop* %t16
	br label %L109
L109:
	%r719 = load %oop, %oop* %t16
	store %oop %r719, %oop* %t17
	br label %L100
L100:
	%r720 = load %oop, %oop* %t17
	store %oop %r720, %oop* %t18
	br label %L94
L94:
	%r721 = load %oop, %oop* %t18
	store %oop %r721, %oop* %t15
	br label %L78
L78:
	%r722 = load %oop, %oop* %t15
	store %oop %r722, %oop* %t14
	br label %L69
L69:
	%r723 = load %oop, %oop* %t14
	store %oop %r723, %oop* %t13
	br label %L63
L63:
	%r724 = load %oop, %oop* %t13
	store %oop %r724, %oop* %t11
	br label %L57
L57:
	%r725 = load %oop, %oop* %t11
	store %oop %r725, %oop* %t12
	br label %L51
L51:
	%r726 = load %oop, %oop* %t12
	store %oop %r726, %oop* %t10
	br label %L42
L42:
	%r727 = load %oop, %oop* %t10
	store %oop %r727, %oop* %t9
	br label %L30
L30:
	%r728 = load %oop, %oop* %t9
	store %oop %r728, %oop* %t8
	br label %L18
L18:
	%r729 = load %oop, %oop* %t8
	store %oop %r729, %oop* %t7
	br label %L12
L12:
	%r730 = load %oop, %oop* %t7
	store %oop %r730, %oop* %t6
	br label %L9
L9:
	%r731 = load %oop, %oop* %t6
	store %oop %r731, %oop* %t5
	br label %L6
L6:
	%r732 = load %oop, %oop* %t5
	store %oop %r732, %oop* %t4
	br label %L3
L3:
	%r733 = load %oop, %oop* %t4
	%r734 = load %oop, %oop* %t1
	ret %oop %r734
}
@m_cstr1034 = private unnamed_addr constant [9 x i8] c"do-print\00"
@m_ostr1035 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr1034 to %oop) }
@m_do-print = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop, %oop)* @m_do-print.code to %oop), %"<string>"* @m_ostr1035 }
define %oop @m_dump.code(%oop %obj) {
	%t0 = alloca %oop
	store %oop %obj, %oop* %t0
	%r1 = load %oop, %oop* @"m_*maru-module*"
	%r2 = load %oop, %oop* @"m_symbol/*standard-output*"
	%r3 = call %oop @m_global-variable-value.code(%oop %r1, %oop %r2)
	%r4 = load %oop, %oop* %t0
	%r5 = inttoptr %word 1 to %oop
	%r6 = call %oop @m_do-print.code(%oop %r3, %oop %r4, %oop %r5)
	ret %oop %r6
}
@m_cstr1036 = private unnamed_addr constant [5 x i8] c"dump\00"
@m_ostr1037 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr1036 to %oop) }
@m_dump = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_dump.code to %oop), %"<string>"* @m_ostr1037 }
define %oop @m_dumpln.code(%oop %obj) {
	%t0 = alloca %oop
	store %oop %obj, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @m_dump.code(%oop %r1)
	%r3 = load %oop, %oop* @"m_*maru-module*"
	%r4 = load %oop, %oop* @"m_symbol/*standard-output*"
	%r5 = call %oop @m_global-variable-value.code(%oop %r3, %oop %r4)
	%r6 = inttoptr %word 10 to %oop
	%r7 = call %oop @m_$put.code(%oop %r5, %oop %r6)
	ret %oop %r7
}
@m_cstr1038 = private unnamed_addr constant [7 x i8] c"dumpln\00"
@m_ostr1039 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1038 to %oop) }
@m_dumpln = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_dumpln.code to %oop), %"<string>"* @m_ostr1039 }
define %oop @"m_dump/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	br label %L2
L1:
	%r2 = load %oop, %oop* %t2
	%r3 = call %oop @m_car.code(%oop %r2)
	store %oop %r3, %oop* %t3
	%r4 = load %oop, %oop* %t3
	%r5 = call %oop @m_dump.code(%oop %r4)
	%r6 = load %oop, %oop* %t2
	%r7 = call %oop @m_cdr.code(%oop %r6)
	store %oop %r7, %oop* %t2
	br label %L2
L2:
	%r8 = load %oop, %oop* %t2
	%r10 = ptrtoint %oop %r8 to %word
	%r9 = icmp ne %word %r10, 0
	br i1 %r9, label %L1, label %L3
L3:
	%r11 = load %oop, %oop* %t0
	%r12 = call %oop @m_first.code(%oop %r11)
	ret %oop %r12
}
@m_cstr1040 = private unnamed_addr constant [20 x i8] c"dump/evaluator-stub\00"
@m_ostr1041 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 39, %oop bitcast ([20 x i8]* @m_cstr1040 to %oop) }
@"m_dump/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_dump/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1041 }
define %oop @"m_print/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	br label %L2
L1:
	%r2 = load %oop, %oop* %t2
	%r3 = call %oop @m_car.code(%oop %r2)
	store %oop %r3, %oop* %t3
	%r4 = load %oop, %oop* %t3
	%r5 = call %oop @m_print.code(%oop %r4)
	%r6 = load %oop, %oop* %t2
	%r7 = call %oop @m_cdr.code(%oop %r6)
	store %oop %r7, %oop* %t2
	br label %L2
L2:
	%r8 = load %oop, %oop* %t2
	%r10 = ptrtoint %oop %r8 to %word
	%r9 = icmp ne %word %r10, 0
	br i1 %r9, label %L1, label %L3
L3:
	%r11 = load %oop, %oop* %t0
	%r12 = call %oop @m_first.code(%oop %r11)
	ret %oop %r12
}
@m_cstr1042 = private unnamed_addr constant [21 x i8] c"print/evaluator-stub\00"
@m_ostr1043 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 41, %oop bitcast ([21 x i8]* @m_cstr1042 to %oop) }
@"m_print/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_print/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1043 }
define %oop @"m_dump-all/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = load %oop, %oop* %t2
	%r3 = call %oop @m_car.code(%oop %r2)
	store %oop %r3, %oop* %t3
	%r4 = load %oop, %oop* %t2
	%r5 = call %oop @m_cdr.code(%oop %r4)
	store %oop %r5, %oop* %t0
	%r6 = load %oop, %oop* %t3
	store %oop %r6, %oop* %t2
	%r7 = load %oop, %oop* %t0
	store %oop %r7, %oop* %t3
	br label %L2
L1:
	%r8 = load %oop, %oop* %t3
	%r9 = call %oop @m_car.code(%oop %r8)
	store %oop %r9, %oop* %t4
	%r10 = load %oop, %oop* %t2
	%r11 = load %oop, %oop* %t4
	%r12 = inttoptr %word 1 to %oop
	%r13 = call %oop @m_do-print.code(%oop %r10, %oop %r11, %oop %r12)
	%r14 = load %oop, %oop* %t3
	%r15 = call %oop @m_cdr.code(%oop %r14)
	store %oop %r15, %oop* %t3
	br label %L2
L2:
	%r16 = load %oop, %oop* %t3
	%r18 = ptrtoint %oop %r16 to %word
	%r17 = icmp ne %word %r18, 0
	br i1 %r17, label %L1, label %L3
L3:
	ret %oop %r16
}
@m_cstr1044 = private unnamed_addr constant [24 x i8] c"dump-all/evaluator-stub\00"
@m_ostr1045 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 47, %oop bitcast ([24 x i8]* @m_cstr1044 to %oop) }
@"m_dump-all/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_dump-all/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1045 }
define %oop @"m_print-all/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = load %oop, %oop* %t2
	%r3 = call %oop @m_car.code(%oop %r2)
	store %oop %r3, %oop* %t3
	%r4 = load %oop, %oop* %t2
	%r5 = call %oop @m_cdr.code(%oop %r4)
	store %oop %r5, %oop* %t0
	%r6 = load %oop, %oop* %t3
	store %oop %r6, %oop* %t2
	%r7 = load %oop, %oop* %t0
	store %oop %r7, %oop* %t3
	br label %L2
L1:
	%r8 = load %oop, %oop* %t3
	%r9 = call %oop @m_car.code(%oop %r8)
	store %oop %r9, %oop* %t4
	%r10 = load %oop, %oop* %t2
	%r11 = load %oop, %oop* %t4
	%r12 = inttoptr %word 0 to %oop
	%r13 = call %oop @m_do-print.code(%oop %r10, %oop %r11, %oop %r12)
	%r14 = load %oop, %oop* %t3
	%r15 = call %oop @m_cdr.code(%oop %r14)
	store %oop %r15, %oop* %t3
	br label %L2
L2:
	%r16 = load %oop, %oop* %t3
	%r18 = ptrtoint %oop %r16 to %word
	%r17 = icmp ne %word %r18, 0
	br i1 %r17, label %L1, label %L3
L3:
	ret %oop %r16
}
@m_cstr1046 = private unnamed_addr constant [25 x i8] c"print-all/evaluator-stub\00"
@m_ostr1047 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 49, %oop bitcast ([25 x i8]* @m_cstr1046 to %oop) }
@"m_print-all/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_print-all/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1047 }
define %oop @"m_%new-call-frame.code"(%oop %callee-designator, %oop %callee, %oop %args) {
	%t2 = alloca %oop
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	store %oop %callee-designator, %oop* %t0
	store %oop %callee, %oop* %t1
	store %oop %args, %oop* %t2
	%r1 = inttoptr %word 0 to %oop
	%r2 = inttoptr %word 0 to %oop
	%r3 = load %oop, %oop* @"m_*call-stack*"
	%r4 = load %oop, %oop* @"m_*call-stack-index*"
	%r5 = call %oop @m_array-at.code(%oop %r3, %oop %r4)
	store %oop %r5, %oop* %t3
	%r6 = load %oop, %oop* %t3
	%r8 = ptrtoint %oop %r6 to %word
	%r7 = icmp ne %word %r8, 0
	br i1 %r7, label %L1, label %L2
L1:
	%r9 = inttoptr %word 0 to %oop
	store %oop %r9, %oop* %t4
	br label %L3
L2:
	%r10 = inttoptr %word 25 to %oop
	%r11 = inttoptr %word 3 to %oop
	%r12 = call %oop @m_allocate.code(%oop %r10, %oop %r11)
	store %oop %r12, %oop* %t5
	%r14 = getelementptr %oop, %oop* %t5, %word 0
	%r13 = bitcast %oop* %r14 to %oop
	%r15 = call %oop @"m_gc/push-root.code"(%oop %r13)
	%r16 = load %oop, %oop* @"m_*call-stack*"
	%r17 = load %oop, %oop* @"m_*call-stack-index*"
	%r18 = load %oop, %oop* %t5
	%r19 = call %oop @m_set-array-at.code(%oop %r16, %oop %r17, %oop %r18)
	%r20 = load %oop, %oop* %t5
	store %oop %r20, %oop* %t3
	store %oop %r20, %oop* %t6
	%r22 = getelementptr %oop, %oop* %t5, %word 0
	%r21 = bitcast %oop* %r22 to %oop
	%r23 = call %oop @"m_gc/pop-root.code"(%oop %r21)
	%r24 = load %oop, %oop* %t6
	store %oop %r24, %oop* %t4
	br label %L3
L3:
	%r25 = load %oop, %oop* %t4
	%r26 = load %oop, %oop* %t0
	%r27 = inttoptr %word 0 to %oop
	%r28 = load %oop, %oop* %t3
	%r32 = bitcast %oop %r28 to [0 x %oop]*
	%r31 = ptrtoint %oop %r27 to %word
	%r30 = getelementptr [0 x %oop], [0 x %oop]* %r32, %word 0, %word %r31
	store %oop %r26, %oop* %r30
	%r29 = bitcast %oop %r26 to %oop
	%r33 = load %oop, %oop* %t1
	%r34 = inttoptr %word 1 to %oop
	%r35 = load %oop, %oop* %t3
	%r39 = bitcast %oop %r35 to [0 x %oop]*
	%r38 = ptrtoint %oop %r34 to %word
	%r37 = getelementptr [0 x %oop], [0 x %oop]* %r39, %word 0, %word %r38
	store %oop %r33, %oop* %r37
	%r36 = bitcast %oop %r33 to %oop
	%r40 = load %oop, %oop* %t2
	%r41 = inttoptr %word 2 to %oop
	%r42 = load %oop, %oop* %t3
	%r46 = bitcast %oop %r42 to [0 x %oop]*
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = getelementptr [0 x %oop], [0 x %oop]* %r46, %word 0, %word %r45
	store %oop %r40, %oop* %r44
	%r43 = bitcast %oop %r40 to %oop
	%r47 = load %oop, %oop* %t3
	ret %oop %r47
}
@m_cstr1048 = private unnamed_addr constant [16 x i8] c"%new-call-frame\00"
@m_ostr1049 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 31, %oop bitcast ([16 x i8]* @m_cstr1048 to %oop) }
@"m_%new-call-frame" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop, %oop)* @"m_%new-call-frame.code" to %oop), %"<string>"* @m_ostr1049 }
define %oop @m_current-call-frame.code() {
	%t0 = alloca %oop
	%r1 = load %oop, %oop* @"m_*call-stack-index*"
	%r2 = inttoptr %word 0 to %oop
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = ptrtoint %oop %r1 to %word
	%r4 = icmp slt %word %r6, %r5
	%r3 = inttoptr i1 %r4 to %oop
	%r8 = ptrtoint %oop %r3 to %word
	%r7 = icmp ne %word %r8, 0
	br i1 %r7, label %L1, label %L2
L1:
	%r9 = load %oop, %oop* @"m_*call-stack*"
	%r10 = inttoptr %word 1 to %oop
	%r11 = load %oop, %oop* @"m_*call-stack-index*"
	%r15 = ptrtoint %oop %r11 to %word
	%r14 = ptrtoint %oop %r10 to %word
	%r13 = sub %word %r15, %r14
	%r12 = inttoptr %word %r13 to %oop
	%r16 = call %oop @m_array-at.code(%oop %r9, %oop %r12)
	store %oop %r16, %oop* %t0
	br label %L3
L2:
	%r17 = inttoptr %word 0 to %oop
	store %oop %r17, %oop* %t0
	br label %L3
L3:
	%r18 = load %oop, %oop* %t0
	ret %oop %r18
}
@m_cstr1050 = private unnamed_addr constant [19 x i8] c"current-call-frame\00"
@m_ostr1051 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 37, %oop bitcast ([19 x i8]* @m_cstr1050 to %oop) }
@m_current-call-frame = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop ()* @m_current-call-frame.code to %oop), %"<string>"* @m_ostr1051 }
@m_cstr1052 = private unnamed_addr constant [23 x i8] c"too few arguments for \00"
@m_ostr1053 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 45, %oop bitcast ([23 x i8]* @m_cstr1052 to %oop) }
@m_cstr1054 = private unnamed_addr constant [3 x i8] c": \00"
@m_ostr1055 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 5, %oop bitcast ([3 x i8]* @m_cstr1054 to %oop) }
@m_cstr1056 = private unnamed_addr constant [24 x i8] c"too many arguments for \00"
@m_ostr1057 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 47, %oop bitcast ([24 x i8]* @m_cstr1056 to %oop) }
@m_cstr1058 = private unnamed_addr constant [3 x i8] c": \00"
@m_ostr1059 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 5, %oop bitcast ([3 x i8]* @m_cstr1058 to %oop) }
define %oop @"m_apply/expr.code"(%oop %fun, %oop %arguments, %oop %parent-ctx) {
	%t2 = alloca %oop
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t5 = alloca %oop
	%t7 = alloca %oop
	%t6 = alloca %oop
	%t8 = alloca %oop
	store %oop %fun, %oop* %t0
	store %oop %arguments, %oop* %t1
	store %oop %parent-ctx, %oop* %t2
	%r1 = load %oop, %oop* @"m_*verbosity*"
	%r2 = inttoptr %word 3 to %oop
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = ptrtoint %oop %r1 to %word
	%r4 = icmp sle %word %r6, %r5
	%r3 = inttoptr i1 %r4 to %oop
	%r8 = ptrtoint %oop %r3 to %word
	%r7 = icmp ne %word %r8, 0
	br i1 %r7, label %L1, label %L2
L1:
	%r9 = inttoptr %word 0 to %oop
	store %oop %r9, %oop* %t3
	br label %L3
L2:
	%r10 = inttoptr %word 0 to %oop
	store %oop %r10, %oop* %t3
	br label %L3
L3:
	%r11 = load %oop, %oop* %t3
	%r12 = inttoptr %word 2 to %oop
	%r13 = load %oop, %oop* %t0
	%r17 = bitcast %oop %r13 to [0 x %oop]*
	%r16 = ptrtoint %oop %r12 to %word
	%r15 = getelementptr [0 x %oop], [0 x %oop]* %r17, %word 0, %word %r16
	%r14 = load %oop, %oop* %r15
	store %oop %r14, %oop* %t3
	%r18 = inttoptr %word 0 to %oop
	%r19 = load %oop, %oop* %t0
	%r23 = bitcast %oop %r19 to [0 x %oop]*
	%r22 = ptrtoint %oop %r18 to %word
	%r21 = getelementptr [0 x %oop], [0 x %oop]* %r23, %word 0, %word %r22
	%r20 = load %oop, %oop* %r21
	store %oop %r20, %oop* %t4
	%r24 = inttoptr %word 3 to %oop
	%r25 = load %oop, %oop* %t0
	%r29 = bitcast %oop %r25 to [0 x %oop]*
	%r28 = ptrtoint %oop %r24 to %word
	%r27 = getelementptr [0 x %oop], [0 x %oop]* %r29, %word 0, %word %r28
	%r26 = load %oop, %oop* %r27
	%r30 = load %oop, %oop* %t2
	%r31 = load %oop, %oop* %t3
	%r32 = call %oop @m_context.code(%oop %r26, %oop %r30, %oop %r31)
	store %oop %r32, %oop* %t5
	%r34 = getelementptr %oop, %oop* %t5, %word 0
	%r33 = bitcast %oop* %r34 to %oop
	%r35 = call %oop @"m_gc/push-root.code"(%oop %r33)
	%r36 = inttoptr %word 2 to %oop
	%r37 = load %oop, %oop* %t5
	%r41 = bitcast %oop %r37 to [0 x %oop]*
	%r40 = ptrtoint %oop %r36 to %word
	%r39 = getelementptr [0 x %oop], [0 x %oop]* %r41, %word 0, %word %r40
	%r38 = load %oop, %oop* %r39
	store %oop %r38, %oop* %t6
	%r42 = load %oop, %oop* %t1
	store %oop %r42, %oop* %t7
	br label %L5
L4:
	%r43 = inttoptr %word 0 to %oop
	store %oop %r43, %oop* %t8
	%r44 = load %oop, %oop* %t7
	%r45 = call %oop @"m_pair?.code"(%oop %r44)
	store %oop %r45, %oop* %t8
	%r46 = inttoptr %word 0 to %oop
	%r50 = ptrtoint %oop %r46 to %word
	%r49 = ptrtoint %oop %r45 to %word
	%r48 = icmp eq %word %r50, %r49
	%r47 = inttoptr i1 %r48 to %oop
	%r52 = ptrtoint %oop %r47 to %word
	%r51 = icmp ne %word %r52, 0
	br i1 %r51, label %L8, label %L7
L8:
	%r53 = call %oop @m_error-prologue.code()
	%r54 = getelementptr %"<string>", %"<string>"* @m_ostr1053, i32 0, i32 1
	%r55 = bitcast %word* %r54 to %oop
	%r56 = call %oop @"m_%error.code"(%oop %r55)
	%r57 = load %oop, %oop* %t0
	%r58 = call %oop @"m_%error.code"(%oop %r57)
	%r59 = getelementptr %"<string>", %"<string>"* @m_ostr1055, i32 0, i32 1
	%r60 = bitcast %word* %r59 to %oop
	%r61 = call %oop @"m_%error.code"(%oop %r60)
	%r62 = load %oop, %oop* %t1
	%r63 = call %oop @"m_%error.code"(%oop %r62)
	%r64 = call %oop @m_error-epilogue.code()
	store %oop %r64, %oop* %t8
	%r65 = inttoptr %word 0 to %oop
	%r69 = ptrtoint %oop %r65 to %word
	%r68 = ptrtoint %oop %r64 to %word
	%r67 = icmp eq %word %r69, %r68
	%r66 = inttoptr i1 %r67 to %oop
	%r71 = ptrtoint %oop %r66 to %word
	%r70 = icmp ne %word %r71, 0
	br i1 %r70, label %L9, label %L7
L9:
	br label %L7
L7:
	%r72 = load %oop, %oop* %t8
	%r73 = load %oop, %oop* %t6
	%r74 = inttoptr %word 1 to %oop
	%r75 = inttoptr %word 3 to %oop
	%r76 = inttoptr %word 0 to %oop
	%r77 = load %oop, %oop* %t4
	%r81 = bitcast %oop %r77 to [0 x %oop]*
	%r80 = ptrtoint %oop %r76 to %word
	%r79 = getelementptr [0 x %oop], [0 x %oop]* %r81, %word 0, %word %r80
	%r78 = load %oop, %oop* %r79
	%r85 = bitcast %oop %r78 to [0 x %oop]*
	%r84 = ptrtoint %oop %r75 to %word
	%r83 = getelementptr [0 x %oop], [0 x %oop]* %r85, %word 0, %word %r84
	%r82 = load %oop, %oop* %r83
	%r89 = ptrtoint %oop %r82 to %word
	%r88 = ptrtoint %oop %r74 to %word
	%r87 = ashr %word %r89, %r88
	%r86 = inttoptr %word %r87 to %oop
	%r90 = inttoptr %word 0 to %oop
	%r91 = load %oop, %oop* %t7
	%r95 = bitcast %oop %r91 to [0 x %oop]*
	%r94 = ptrtoint %oop %r90 to %word
	%r93 = getelementptr [0 x %oop], [0 x %oop]* %r95, %word 0, %word %r94
	%r92 = load %oop, %oop* %r93
	%r96 = call %oop @m_set-array-at.code(%oop %r73, %oop %r86, %oop %r92)
	%r97 = inttoptr %word 1 to %oop
	%r98 = load %oop, %oop* %t4
	%r102 = bitcast %oop %r98 to [0 x %oop]*
	%r101 = ptrtoint %oop %r97 to %word
	%r100 = getelementptr [0 x %oop], [0 x %oop]* %r102, %word 0, %word %r101
	%r99 = load %oop, %oop* %r100
	store %oop %r99, %oop* %t4
	%r103 = inttoptr %word 1 to %oop
	%r104 = load %oop, %oop* %t7
	%r108 = bitcast %oop %r104 to [0 x %oop]*
	%r107 = ptrtoint %oop %r103 to %word
	%r106 = getelementptr [0 x %oop], [0 x %oop]* %r108, %word 0, %word %r107
	%r105 = load %oop, %oop* %r106
	store %oop %r105, %oop* %t7
	br label %L5
L5:
	%r109 = load %oop, %oop* %t4
	%r110 = call %oop @"m_pair?.code"(%oop %r109)
	%r112 = ptrtoint %oop %r110 to %word
	%r111 = icmp ne %word %r112, 0
	br i1 %r111, label %L4, label %L6
L6:
	%r113 = load %oop, %oop* %t4
	%r114 = call %oop @m_type-of.code(%oop %r113)
	%r115 = inttoptr %word 16 to %oop
	%r119 = ptrtoint %oop %r115 to %word
	%r118 = ptrtoint %oop %r114 to %word
	%r117 = icmp eq %word %r119, %r118
	%r116 = inttoptr i1 %r117 to %oop
	%r121 = ptrtoint %oop %r116 to %word
	%r120 = icmp ne %word %r121, 0
	br i1 %r120, label %L10, label %L11
L10:
	%r122 = load %oop, %oop* %t6
	%r123 = inttoptr %word 1 to %oop
	%r124 = inttoptr %word 3 to %oop
	%r125 = load %oop, %oop* %t4
	%r129 = bitcast %oop %r125 to [0 x %oop]*
	%r128 = ptrtoint %oop %r124 to %word
	%r127 = getelementptr [0 x %oop], [0 x %oop]* %r129, %word 0, %word %r128
	%r126 = load %oop, %oop* %r127
	%r133 = ptrtoint %oop %r126 to %word
	%r132 = ptrtoint %oop %r123 to %word
	%r131 = ashr %word %r133, %r132
	%r130 = inttoptr %word %r131 to %oop
	%r134 = load %oop, %oop* %t7
	%r135 = call %oop @m_set-array-at.code(%oop %r122, %oop %r130, %oop %r134)
	%r136 = inttoptr %word 0 to %oop
	store %oop %r136, %oop* %t7
	store %oop %r136, %oop* %t8
	br label %L12
L11:
	%r137 = inttoptr %word 0 to %oop
	store %oop %r137, %oop* %t8
	br label %L12
L12:
	%r138 = load %oop, %oop* %t8
	%r139 = load %oop, %oop* %t7
	%r141 = ptrtoint %oop %r139 to %word
	%r140 = icmp ne %word %r141, 0
	br i1 %r140, label %L13, label %L14
L13:
	%r142 = call %oop @m_error-prologue.code()
	%r143 = getelementptr %"<string>", %"<string>"* @m_ostr1057, i32 0, i32 1
	%r144 = bitcast %word* %r143 to %oop
	%r145 = call %oop @"m_%error.code"(%oop %r144)
	%r146 = load %oop, %oop* %t0
	%r147 = call %oop @"m_%error.code"(%oop %r146)
	%r148 = getelementptr %"<string>", %"<string>"* @m_ostr1059, i32 0, i32 1
	%r149 = bitcast %word* %r148 to %oop
	%r150 = call %oop @"m_%error.code"(%oop %r149)
	%r151 = load %oop, %oop* %t1
	%r152 = call %oop @"m_%error.code"(%oop %r151)
	%r153 = call %oop @m_error-epilogue.code()
	store %oop %r153, %oop* %t8
	br label %L15
L14:
	%r154 = inttoptr %word 0 to %oop
	store %oop %r154, %oop* %t8
	br label %L15
L15:
	%r155 = load %oop, %oop* %t8
	%r156 = inttoptr %word 0 to %oop
	store %oop %r156, %oop* %t7
	%r158 = getelementptr %oop, %oop* %t7, %word 0
	%r157 = bitcast %oop* %r158 to %oop
	%r159 = call %oop @"m_gc/push-root.code"(%oop %r157)
	%r160 = inttoptr %word 1 to %oop
	%r161 = load %oop, %oop* %t0
	%r165 = bitcast %oop %r161 to [0 x %oop]*
	%r164 = ptrtoint %oop %r160 to %word
	%r163 = getelementptr [0 x %oop], [0 x %oop]* %r165, %word 0, %word %r164
	%r162 = load %oop, %oop* %r163
	store %oop %r162, %oop* %t6
	br label %L17
L16:
	%r166 = load %oop, %oop* %t6
	%r167 = call %oop @m_car.code(%oop %r166)
	store %oop %r167, %oop* %t8
	%r168 = load %oop, %oop* %t8
	%r169 = load %oop, %oop* %t5
	%r170 = call %oop @m_eval.code(%oop %r168, %oop %r169)
	store %oop %r170, %oop* %t7
	%r171 = load %oop, %oop* %t6
	%r172 = call %oop @m_cdr.code(%oop %r171)
	store %oop %r172, %oop* %t6
	br label %L17
L17:
	%r173 = load %oop, %oop* %t6
	%r175 = ptrtoint %oop %r173 to %word
	%r174 = icmp ne %word %r175, 0
	br i1 %r174, label %L16, label %L18
L18:
	%r176 = inttoptr %word 4 to %oop
	%r177 = load %oop, %oop* %t3
	%r181 = bitcast %oop %r177 to [0 x %oop]*
	%r180 = ptrtoint %oop %r176 to %word
	%r179 = getelementptr [0 x %oop], [0 x %oop]* %r181, %word 0, %word %r180
	%r178 = load %oop, %oop* %r179
	%r183 = ptrtoint %oop %r178 to %word
	%r182 = icmp ne %word %r183, 0
	br i1 %r182, label %L19, label %L20
L19:
	%r184 = inttoptr %word 0 to %oop
	%r185 = inttoptr %word 3 to %oop
	%r186 = load %oop, %oop* %t5
	%r190 = bitcast %oop %r186 to [0 x %oop]*
	%r189 = ptrtoint %oop %r185 to %word
	%r188 = getelementptr [0 x %oop], [0 x %oop]* %r190, %word 0, %word %r189
	store %oop %r184, %oop* %r188
	%r187 = bitcast %oop %r184 to %oop
	store %oop %r187, %oop* %t6
	br label %L21
L20:
	%r191 = inttoptr %word 0 to %oop
	store %oop %r191, %oop* %t6
	br label %L21
L21:
	%r192 = load %oop, %oop* %t6
	%r193 = load %oop, %oop* %t7
	store %oop %r193, %oop* %t6
	%r195 = getelementptr %oop, %oop* %t7, %word 0
	%r194 = bitcast %oop* %r195 to %oop
	%r196 = call %oop @"m_gc/pop-root.code"(%oop %r194)
	%r197 = load %oop, %oop* %t6
	store %oop %r197, %oop* %t7
	%r199 = getelementptr %oop, %oop* %t5, %word 0
	%r198 = bitcast %oop* %r199 to %oop
	%r200 = call %oop @"m_gc/pop-root.code"(%oop %r198)
	%r201 = load %oop, %oop* %t7
	ret %oop %r201
}
@m_cstr1060 = private unnamed_addr constant [11 x i8] c"apply/expr\00"
@m_ostr1061 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr1060 to %oop) }
@"m_apply/expr" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop, %oop)* @"m_apply/expr.code" to %oop), %"<string>"* @m_ostr1061 }
@m_cstr1062 = private unnamed_addr constant [53 x i8] c"infinite recursion guard triggered at call depth %ld\00"
@m_cstr1063 = private unnamed_addr constant [2 x i8] c"\0A\00"
@m_cstr1064 = private unnamed_addr constant [15 x i8] c"cannot apply: \00"
@m_ostr1065 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr1064 to %oop) }
@m_cstr1066 = private unnamed_addr constant [19 x i8] c", current module: \00"
@m_ostr1067 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 37, %oop bitcast ([19 x i8]* @m_cstr1066 to %oop) }
@m_cstr1068 = private unnamed_addr constant [21 x i8] c", *applicators* is: \00"
@m_ostr1069 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 41, %oop bitcast ([21 x i8]* @m_cstr1068 to %oop) }
define %oop @m_apply.code(%oop %fun, %oop %arguments, %oop %ctx) {
	%t2 = alloca %oop
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	%t8 = alloca %oop
	%t9 = alloca %oop
	%t10 = alloca %oop
	store %oop %fun, %oop* %t0
	store %oop %arguments, %oop* %t1
	store %oop %ctx, %oop* %t2
	%r1 = inttoptr %word 0 to %oop
	%r2 = load %oop, %oop* @"m_symbol/apply"
	%r3 = load %oop, %oop* %t0
	%r4 = load %oop, %oop* %t1
	%r5 = call %oop @"m_%new-call-frame.code"(%oop %r2, %oop %r3, %oop %r4)
	store %oop %r5, %oop* %t3
	%r6 = inttoptr %word 10000 to %oop
	%r7 = inttoptr %word 1 to %oop
	%r8 = load %oop, %oop* @"m_*call-stack-index*"
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = add %word %r12, %r11
	%r9 = inttoptr %word %r10 to %oop
	store %oop %r9, %oop* @"m_*call-stack-index*"
	%r16 = ptrtoint %oop %r9 to %word
	%r15 = ptrtoint %oop %r6 to %word
	%r14 = icmp sgt %word %r16, %r15
	%r13 = inttoptr i1 %r14 to %oop
	%r18 = ptrtoint %oop %r13 to %word
	%r17 = icmp ne %word %r18, 0
	br i1 %r17, label %L1, label %L2
L1:
	%r19 = call %oop @m_fatal-prologue.code()
	%r20 = inttoptr %word 1 to %oop
	%r21 = inttoptr %word 2 to %oop
	%r22 = getelementptr [53 x i8], [53 x i8]* @m_cstr1062, %word 0, %word 0
	%r24 = inttoptr %word 52 to %oop
	%r25 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r20, %oop %r21, %oop %r22, %oop %r24)
	%r26 = inttoptr %word 1 to %oop
	%r27 = inttoptr %word 2 to %oop
	%r28 = getelementptr [2 x i8], [2 x i8]* @m_cstr1063, %word 0, %word 0
	%r30 = inttoptr %word 1 to %oop
	%r31 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r26, %oop %r27, %oop %r28, %oop %r30)
	%r32 = call %oop @m_fatal-epilogue.code()
	store %oop %r32, %oop* %t4
	br label %L3
L2:
	%r33 = inttoptr %word 0 to %oop
	store %oop %r33, %oop* %t4
	br label %L3
L3:
	%r34 = load %oop, %oop* %t4
	%r35 = load %oop, %oop* %t0
	%r36 = call %oop @m_type-of.code(%oop %r35)
	store %oop %r36, %oop* %t4
	%r37 = inttoptr %word 14 to %oop
	%r38 = load %oop, %oop* %t4
	%r42 = ptrtoint %oop %r38 to %word
	%r41 = ptrtoint %oop %r37 to %word
	%r40 = icmp eq %word %r42, %r41
	%r39 = inttoptr i1 %r40 to %oop
	%r44 = ptrtoint %oop %r39 to %word
	%r43 = icmp ne %word %r44, 0
	br i1 %r43, label %L4, label %L5
L4:
	%r45 = load %oop, %oop* %t0
	%r46 = load %oop, %oop* %t1
	%r47 = load %oop, %oop* %t2
	%r48 = call %oop @"m_apply/expr.code"(%oop %r45, %oop %r46, %oop %r47)
	store %oop %r48, %oop* %t5
	br label %L6
L5:
	%r49 = inttoptr %word 10 to %oop
	%r50 = load %oop, %oop* %t4
	%r54 = ptrtoint %oop %r50 to %word
	%r53 = ptrtoint %oop %r49 to %word
	%r52 = icmp eq %word %r54, %r53
	%r51 = inttoptr i1 %r52 to %oop
	%r56 = ptrtoint %oop %r51 to %word
	%r55 = icmp ne %word %r56, 0
	br i1 %r55, label %L7, label %L8
L7:
	%r57 = inttoptr %word 0 to %oop
	%r58 = inttoptr %word 0 to %oop
	%r59 = load %oop, %oop* %t0
	%r63 = bitcast %oop %r59 to [0 x %oop]*
	%r62 = ptrtoint %oop %r58 to %word
	%r61 = getelementptr [0 x %oop], [0 x %oop]* %r63, %word 0, %word %r62
	%r60 = load %oop, %oop* %r61
	%r67 = bitcast %oop %r60 to [0 x %oop]*
	%r66 = ptrtoint %oop %r57 to %word
	%r65 = getelementptr [0 x %oop], [0 x %oop]* %r67, %word 0, %word %r66
	%r64 = load %oop, %oop* %r65
	store %oop %r64, %oop* %t7
	%r68 = load %oop, %oop* %t1
	%r69 = load %oop, %oop* %t2
	%r70 = load %oop, %oop* %t7
	%r71 = bitcast %oop %r70 to %"<target-function>"*
	%r72 = getelementptr %"<target-function>", %"<target-function>"* %r71, i32 0, i32 1
	%r73 = load %oop, %oop* %r72
	%r75 = bitcast %oop %r73 to %oop (%oop, %oop)*
	%r74 = call %oop %r75(%oop %r68, %oop %r69)
	store %oop %r74, %oop* %t8
	%r76 = inttoptr %word 0 to %oop
	%r77 = load %oop, %oop* %t8
	store %oop %r77, %oop* %t6
	br label %L9
L8:
	%r78 = inttoptr %word 0 to %oop
	store %oop %r78, %oop* %t7
	%r79 = inttoptr %word 1 to %oop
	store %oop %r79, %oop* %t8
	%r80 = load %oop, %oop* @"m_*applicators-var*"
	store %oop %r80, %oop* %t8
	%r81 = inttoptr %word 0 to %oop
	%r85 = ptrtoint %oop %r81 to %word
	%r84 = ptrtoint %oop %r80 to %word
	%r83 = icmp eq %word %r85, %r84
	%r82 = inttoptr i1 %r83 to %oop
	%r87 = ptrtoint %oop %r82 to %word
	%r86 = icmp ne %word %r87, 0
	br i1 %r86, label %L10, label %L11
L11:
	%r88 = load %oop, %oop* @"m_*applicators-var*"
	%r89 = inttoptr %word 12 to %oop
	%r90 = call %oop @m_maybe-object-in-variable.code(%oop %r88, %oop %r89)
	store %oop %r90, %oop* %t7
	store %oop %r90, %oop* %t8
	%r91 = inttoptr %word 0 to %oop
	%r95 = ptrtoint %oop %r91 to %word
	%r94 = ptrtoint %oop %r90 to %word
	%r93 = icmp eq %word %r95, %r94
	%r92 = inttoptr i1 %r93 to %oop
	%r97 = ptrtoint %oop %r92 to %word
	%r96 = icmp ne %word %r97, 0
	br i1 %r96, label %L10, label %L12
L12:
	%r98 = load %oop, %oop* %t7
	%r99 = load %oop, %oop* %t4
	%r100 = call %oop @m_array-at.code(%oop %r98, %oop %r99)
	store %oop %r100, %oop* %t8
	%r101 = inttoptr %word 0 to %oop
	%r105 = ptrtoint %oop %r101 to %word
	%r104 = ptrtoint %oop %r100 to %word
	%r103 = icmp eq %word %r105, %r104
	%r102 = inttoptr i1 %r103 to %oop
	%r107 = ptrtoint %oop %r102 to %word
	%r106 = icmp ne %word %r107, 0
	br i1 %r106, label %L10, label %L13
L13:
	br label %L10
L10:
	%r108 = load %oop, %oop* %t8
	store %oop %r108, %oop* %t7
	%r109 = load %oop, %oop* %t7
	%r111 = ptrtoint %oop %r109 to %word
	%r110 = icmp ne %word %r111, 0
	br i1 %r110, label %L14, label %L15
L14:
	%r112 = load %oop, %oop* %t0
	%r113 = load %oop, %oop* %t1
	%r114 = call %oop @m_cons.code(%oop %r112, %oop %r113)
	store %oop %r114, %oop* %t9
	%r116 = getelementptr %oop, %oop* %t9, %word 0
	%r115 = bitcast %oop* %r116 to %oop
	%r117 = call %oop @"m_gc/push-root.code"(%oop %r115)
	%r118 = load %oop, %oop* %t7
	%r119 = load %oop, %oop* %t9
	%r120 = load %oop, %oop* %t2
	%r121 = call %oop @m_apply.code(%oop %r118, %oop %r119, %oop %r120)
	store %oop %r121, %oop* %t10
	%r123 = getelementptr %oop, %oop* %t9, %word 0
	%r122 = bitcast %oop* %r123 to %oop
	%r124 = call %oop @"m_gc/pop-root.code"(%oop %r122)
	%r125 = load %oop, %oop* %t10
	store %oop %r125, %oop* %t8
	br label %L16
L15:
	%r126 = call %oop @m_error-prologue.code()
	%r127 = getelementptr %"<string>", %"<string>"* @m_ostr1065, i32 0, i32 1
	%r128 = bitcast %word* %r127 to %oop
	%r129 = call %oop @"m_%error.code"(%oop %r128)
	%r130 = load %oop, %oop* %t0
	%r131 = call %oop @"m_%error.code"(%oop %r130)
	%r132 = getelementptr %"<string>", %"<string>"* @m_ostr1067, i32 0, i32 1
	%r133 = bitcast %word* %r132 to %oop
	%r134 = call %oop @"m_%error.code"(%oop %r133)
	%r135 = load %oop, %oop* @"m_*module*"
	%r136 = call %oop @"m_%error.code"(%oop %r135)
	%r137 = getelementptr %"<string>", %"<string>"* @m_ostr1069, i32 0, i32 1
	%r138 = bitcast %word* %r137 to %oop
	%r139 = call %oop @"m_%error.code"(%oop %r138)
	%r140 = inttoptr %word 1 to %oop
	store %oop %r140, %oop* %t9
	%r141 = load %oop, %oop* @"m_*applicators-var*"
	store %oop %r141, %oop* %t9
	%r142 = inttoptr %word 0 to %oop
	%r146 = ptrtoint %oop %r142 to %word
	%r145 = ptrtoint %oop %r141 to %word
	%r144 = icmp eq %word %r146, %r145
	%r143 = inttoptr i1 %r144 to %oop
	%r148 = ptrtoint %oop %r143 to %word
	%r147 = icmp ne %word %r148, 0
	br i1 %r147, label %L17, label %L18
L18:
	%r149 = inttoptr %word 1 to %oop
	%r150 = load %oop, %oop* @"m_*applicators-var*"
	%r154 = bitcast %oop %r150 to [0 x %oop]*
	%r153 = ptrtoint %oop %r149 to %word
	%r152 = getelementptr [0 x %oop], [0 x %oop]* %r154, %word 0, %word %r153
	%r151 = load %oop, %oop* %r152
	store %oop %r151, %oop* %t9
	%r155 = inttoptr %word 0 to %oop
	%r159 = ptrtoint %oop %r155 to %word
	%r158 = ptrtoint %oop %r151 to %word
	%r157 = icmp eq %word %r159, %r158
	%r156 = inttoptr i1 %r157 to %oop
	%r161 = ptrtoint %oop %r156 to %word
	%r160 = icmp ne %word %r161, 0
	br i1 %r160, label %L17, label %L19
L19:
	br label %L17
L17:
	%r162 = load %oop, %oop* %t9
	%r163 = call %oop @"m_%error.code"(%oop %r162)
	%r164 = call %oop @m_error-epilogue.code()
	store %oop %r164, %oop* %t8
	br label %L16
L16:
	%r165 = load %oop, %oop* %t8
	store %oop %r165, %oop* %t6
	br label %L9
L9:
	%r166 = load %oop, %oop* %t6
	store %oop %r166, %oop* %t5
	br label %L6
L6:
	%r167 = load %oop, %oop* %t5
	store %oop %r167, %oop* %t3
	%r168 = inttoptr %word 1 to %oop
	%r169 = load %oop, %oop* @"m_*call-stack-index*"
	%r173 = ptrtoint %oop %r169 to %word
	%r172 = ptrtoint %oop %r168 to %word
	%r171 = sub %word %r173, %r172
	%r170 = inttoptr %word %r171 to %oop
	store %oop %r170, %oop* @"m_*call-stack-index*"
	%r174 = load %oop, %oop* @"m_*call-stack-index*"
	%r175 = inttoptr %word 0 to %oop
	%r179 = ptrtoint %oop %r175 to %word
	%r178 = ptrtoint %oop %r174 to %word
	%r177 = icmp sle %word %r179, %r178
	%r176 = inttoptr i1 %r177 to %oop
	%r181 = ptrtoint %oop %r176 to %word
	%r180 = icmp ne %word %r181, 0
	br i1 %r180, label %L20, label %L21
L20:
	%r182 = load %oop, %oop* @"m_*call-stack*"
	%r183 = load %oop, %oop* @"m_*call-stack-index*"
	%r184 = call %oop @m_array-at.code(%oop %r182, %oop %r183)
	store %oop %r184, %oop* %t5
	%r185 = inttoptr %word 0 to %oop
	%r186 = inttoptr %word 0 to %oop
	%r187 = load %oop, %oop* %t5
	%r191 = bitcast %oop %r187 to [0 x %oop]*
	%r190 = ptrtoint %oop %r186 to %word
	%r189 = getelementptr [0 x %oop], [0 x %oop]* %r191, %word 0, %word %r190
	store %oop %r185, %oop* %r189
	%r188 = bitcast %oop %r185 to %oop
	%r192 = inttoptr %word 0 to %oop
	%r193 = inttoptr %word 1 to %oop
	%r194 = load %oop, %oop* %t5
	%r198 = bitcast %oop %r194 to [0 x %oop]*
	%r197 = ptrtoint %oop %r193 to %word
	%r196 = getelementptr [0 x %oop], [0 x %oop]* %r198, %word 0, %word %r197
	store %oop %r192, %oop* %r196
	%r195 = bitcast %oop %r192 to %oop
	%r199 = inttoptr %word 0 to %oop
	%r200 = inttoptr %word 2 to %oop
	%r201 = load %oop, %oop* %t5
	%r205 = bitcast %oop %r201 to [0 x %oop]*
	%r204 = ptrtoint %oop %r200 to %word
	%r203 = getelementptr [0 x %oop], [0 x %oop]* %r205, %word 0, %word %r204
	store %oop %r199, %oop* %r203
	%r202 = bitcast %oop %r199 to %oop
	store %oop %r202, %oop* %t4
	br label %L22
L21:
	%r206 = inttoptr %word 0 to %oop
	store %oop %r206, %oop* %t4
	br label %L22
L22:
	%r207 = load %oop, %oop* %t4
	%r208 = load %oop, %oop* %t3
	ret %oop %r208
}
@m_cstr1070 = private unnamed_addr constant [6 x i8] c"apply\00"
@m_ostr1071 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr1070 to %oop) }
@m_apply = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop, %oop)* @m_apply.code to %oop), %"<string>"* @m_ostr1071 }
@m_cstr1072 = private unnamed_addr constant [6 x i8] c"apply\00"
@m_ostr1073 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr1072 to %oop) }
@m_cstr1074 = private unnamed_addr constant [6 x i8] c"apply\00"
@m_ostr1075 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr1074 to %oop) }
@m_cstr1076 = private unnamed_addr constant [6 x i8] c"apply\00"
@m_ostr1077 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr1076 to %oop) }
define %oop @"m_apply/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t5 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = load %oop, %oop* %t2
	%r5 = call %oop @"m_pair?.code"(%oop %r4)
	%r7 = ptrtoint %oop %r5 to %word
	%r6 = icmp ne %word %r7, 0
	br i1 %r6, label %L1, label %L2
L1:
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t2
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	%r10 = load %oop, %oop* %r11
	store %oop %r10, %oop* %t3
	%r14 = inttoptr %word 1 to %oop
	%r15 = load %oop, %oop* %t2
	%r19 = bitcast %oop %r15 to [0 x %oop]*
	%r18 = ptrtoint %oop %r14 to %word
	%r17 = getelementptr [0 x %oop], [0 x %oop]* %r19, %word 0, %word %r18
	%r16 = load %oop, %oop* %r17
	store %oop %r16, %oop* %t2
	store %oop %r16, %oop* %t5
	br label %L3
L2:
	%r20 = getelementptr %"<string>", %"<string>"* @m_ostr1073, i32 0, i32 1
	%r21 = bitcast %word* %r20 to %oop
	%r22 = load %oop, %oop* %t0
	%r23 = call %oop @"m_%not-enough-arguments.code"(%oop %r21, %oop %r22)
	store %oop %r23, %oop* %t5
	br label %L3
L3:
	%r24 = load %oop, %oop* %t5
	%r25 = load %oop, %oop* %t2
	%r26 = call %oop @"m_pair?.code"(%oop %r25)
	%r28 = ptrtoint %oop %r26 to %word
	%r27 = icmp ne %word %r28, 0
	br i1 %r27, label %L4, label %L5
L4:
	%r29 = inttoptr %word 0 to %oop
	%r30 = load %oop, %oop* %t2
	%r34 = bitcast %oop %r30 to [0 x %oop]*
	%r33 = ptrtoint %oop %r29 to %word
	%r32 = getelementptr [0 x %oop], [0 x %oop]* %r34, %word 0, %word %r33
	%r31 = load %oop, %oop* %r32
	store %oop %r31, %oop* %t4
	%r35 = inttoptr %word 1 to %oop
	%r36 = load %oop, %oop* %t2
	%r40 = bitcast %oop %r36 to [0 x %oop]*
	%r39 = ptrtoint %oop %r35 to %word
	%r38 = getelementptr [0 x %oop], [0 x %oop]* %r40, %word 0, %word %r39
	%r37 = load %oop, %oop* %r38
	store %oop %r37, %oop* %t2
	store %oop %r37, %oop* %t5
	br label %L6
L5:
	%r41 = getelementptr %"<string>", %"<string>"* @m_ostr1075, i32 0, i32 1
	%r42 = bitcast %word* %r41 to %oop
	%r43 = load %oop, %oop* %t0
	%r44 = call %oop @"m_%not-enough-arguments.code"(%oop %r42, %oop %r43)
	store %oop %r44, %oop* %t5
	br label %L6
L6:
	%r45 = load %oop, %oop* %t5
	%r46 = load %oop, %oop* %t2
	%r48 = ptrtoint %oop %r46 to %word
	%r47 = icmp ne %word %r48, 0
	br i1 %r47, label %L7, label %L8
L7:
	%r49 = getelementptr %"<string>", %"<string>"* @m_ostr1077, i32 0, i32 1
	%r50 = bitcast %word* %r49 to %oop
	%r51 = load %oop, %oop* %t0
	%r52 = call %oop @"m_%too-many-arguments.code"(%oop %r50, %oop %r51)
	store %oop %r52, %oop* %t5
	br label %L9
L8:
	%r53 = inttoptr %word 0 to %oop
	store %oop %r53, %oop* %t5
	br label %L9
L9:
	%r54 = load %oop, %oop* %t5
	%r55 = load %oop, %oop* %t3
	%r56 = load %oop, %oop* %t4
	%r57 = load %oop, %oop* %t1
	%r58 = call %oop @m_apply.code(%oop %r55, %oop %r56, %oop %r57)
	ret %oop %r58
}
@m_cstr1078 = private unnamed_addr constant [21 x i8] c"apply/evaluator-stub\00"
@m_ostr1079 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 41, %oop bitcast ([21 x i8]* @m_cstr1078 to %oop) }
@"m_apply/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_apply/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1079 }
define %oop @"m_maybe-form-in-env/function.code"(%oop %env, %oop %name) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	store %oop %env, %oop* %t0
	store %oop %name, %oop* %t1
	%r1 = inttoptr %word 0 to %oop
	store %oop %r1, %oop* %t2
	%r2 = load %oop, %oop* %t0
	%r3 = load %oop, %oop* %t1
	%r4 = inttoptr %word 15 to %oop
	%r5 = call %oop @m_maybe-object-in-env.code(%oop %r2, %oop %r3, %oop %r4)
	store %oop %r5, %oop* %t2
	%r7 = ptrtoint %oop %r5 to %word
	%r6 = icmp ne %word %r7, 0
	br i1 %r6, label %L1, label %L2
L1:
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t2
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	%r10 = load %oop, %oop* %r11
	store %oop %r10, %oop* %t3
	br label %L3
L2:
	%r14 = inttoptr %word 0 to %oop
	store %oop %r14, %oop* %t3
	br label %L3
L3:
	%r15 = load %oop, %oop* %t3
	ret %oop %r15
}
@m_cstr1080 = private unnamed_addr constant [27 x i8] c"maybe-form-in-env/function\00"
@m_ostr1081 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 53, %oop bitcast ([27 x i8]* @m_cstr1080 to %oop) }
@"m_maybe-form-in-env/function" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_maybe-form-in-env/function.code" to %oop), %"<string>"* @m_ostr1081 }
define %oop @"m_maybe-form-in-env/symbol.code"(%oop %env, %oop %name) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	store %oop %env, %oop* %t0
	store %oop %name, %oop* %t1
	%r1 = inttoptr %word 0 to %oop
	store %oop %r1, %oop* %t2
	%r2 = load %oop, %oop* %t0
	%r3 = load %oop, %oop* %t1
	%r4 = inttoptr %word 15 to %oop
	%r5 = call %oop @m_maybe-object-in-env.code(%oop %r2, %oop %r3, %oop %r4)
	store %oop %r5, %oop* %t2
	%r7 = ptrtoint %oop %r5 to %word
	%r6 = icmp ne %word %r7, 0
	br i1 %r6, label %L1, label %L2
L1:
	%r8 = inttoptr %word 1 to %oop
	%r9 = load %oop, %oop* %t2
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	%r10 = load %oop, %oop* %r11
	store %oop %r10, %oop* %t3
	br label %L3
L2:
	%r14 = inttoptr %word 0 to %oop
	store %oop %r14, %oop* %t3
	br label %L3
L3:
	%r15 = load %oop, %oop* %t3
	ret %oop %r15
}
@m_cstr1082 = private unnamed_addr constant [25 x i8] c"maybe-form-in-env/symbol\00"
@m_ostr1083 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 49, %oop bitcast ([25 x i8]* @m_cstr1082 to %oop) }
@"m_maybe-form-in-env/symbol" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_maybe-form-in-env/symbol.code" to %oop), %"<string>"* @m_ostr1083 }
define %oop @m_expand-all.code(%oop %list, %oop %env, %oop %"one-step?") {
	%t2 = alloca %oop
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	store %oop %list, %oop* %t0
	store %oop %env, %oop* %t1
	store %oop %"one-step?", %oop* %t2
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @"m_pair?.code"(%oop %r1)
	%r4 = ptrtoint %oop %r2 to %word
	%r3 = icmp ne %word %r4, 0
	br i1 %r3, label %L1, label %L2
L1:
	%r5 = inttoptr %word 0 to %oop
	%r6 = load %oop, %oop* %t0
	%r10 = bitcast %oop %r6 to [0 x %oop]*
	%r9 = ptrtoint %oop %r5 to %word
	%r8 = getelementptr [0 x %oop], [0 x %oop]* %r10, %word 0, %word %r9
	%r7 = load %oop, %oop* %r8
	%r11 = load %oop, %oop* %t1
	%r12 = load %oop, %oop* %t2
	%r13 = call %oop @m_expand.code(%oop %r7, %oop %r11, %oop %r12)
	store %oop %r13, %oop* %t4
	%r15 = getelementptr %oop, %oop* %t4, %word 0
	%r14 = bitcast %oop* %r15 to %oop
	%r16 = call %oop @"m_gc/push-root.code"(%oop %r14)
	%r17 = inttoptr %word 1 to %oop
	%r18 = load %oop, %oop* %t0
	%r22 = bitcast %oop %r18 to [0 x %oop]*
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = getelementptr [0 x %oop], [0 x %oop]* %r22, %word 0, %word %r21
	%r19 = load %oop, %oop* %r20
	%r23 = load %oop, %oop* %t1
	%r24 = load %oop, %oop* %t2
	%r25 = call %oop @m_expand-all.code(%oop %r19, %oop %r23, %oop %r24)
	store %oop %r25, %oop* %t5
	%r27 = getelementptr %oop, %oop* %t5, %word 0
	%r26 = bitcast %oop* %r27 to %oop
	%r28 = call %oop @"m_gc/push-root.code"(%oop %r26)
	%r29 = load %oop, %oop* %t4
	%r30 = load %oop, %oop* %t5
	%r31 = call %oop @m_cons.code(%oop %r29, %oop %r30)
	store %oop %r31, %oop* %t6
	%r33 = getelementptr %oop, %oop* %t5, %word 0
	%r32 = bitcast %oop* %r33 to %oop
	%r34 = call %oop @"m_gc/pop-root.code"(%oop %r32)
	%r35 = load %oop, %oop* %t6
	store %oop %r35, %oop* %t5
	%r37 = getelementptr %oop, %oop* %t4, %word 0
	%r36 = bitcast %oop* %r37 to %oop
	%r38 = call %oop @"m_gc/pop-root.code"(%oop %r36)
	%r39 = load %oop, %oop* %t5
	store %oop %r39, %oop* %t3
	br label %L3
L2:
	%r40 = load %oop, %oop* %t0
	%r41 = load %oop, %oop* %t1
	%r42 = load %oop, %oop* %t2
	%r43 = call %oop @m_expand.code(%oop %r40, %oop %r41, %oop %r42)
	store %oop %r43, %oop* %t3
	br label %L3
L3:
	%r44 = load %oop, %oop* %t3
	ret %oop %r44
}
@m_cstr1084 = private unnamed_addr constant [11 x i8] c"expand-all\00"
@m_ostr1085 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr1084 to %oop) }
@m_expand-all = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop, %oop)* @m_expand-all.code to %oop), %"<string>"* @m_ostr1085 }
@m_cstr1086 = private unnamed_addr constant [5 x i8] c"set-\00"
@m_ostr1087 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr1086 to %oop) }
define %oop @m_setter-name-for.code(%oop %fn-name, %oop %env) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	store %oop %fn-name, %oop* %t0
	store %oop %env, %oop* %t1
	%r1 = getelementptr %"<string>", %"<string>"* @m_ostr1087, i32 0, i32 1
	%r2 = bitcast %word* %r1 to %oop
	store %oop %r2, %oop* %t2
	%r3 = inttoptr %word 0 to %oop
	%r4 = load %oop, %oop* %t0
	%r8 = bitcast %oop %r4 to [0 x %oop]*
	%r7 = ptrtoint %oop %r3 to %word
	%r6 = getelementptr [0 x %oop], [0 x %oop]* %r8, %word 0, %word %r7
	%r5 = load %oop, %oop* %r6
	store %oop %r5, %oop* %t3
	%r9 = load %oop, %oop* %t2
	%r10 = call %oop @m_string-length.code(%oop %r9)
	%r11 = load %oop, %oop* %t3
	%r12 = call %oop @m_string-length.code(%oop %r11)
	%r16 = ptrtoint %oop %r12 to %word
	%r15 = ptrtoint %oop %r10 to %word
	%r14 = add %word %r16, %r15
	%r13 = inttoptr %word %r14 to %oop
	%r17 = call %oop @m_string.code(%oop %r13)
	store %oop %r17, %oop* %t4
	%r19 = getelementptr %oop, %oop* %t4, %word 0
	%r18 = bitcast %oop* %r19 to %oop
	%r20 = call %oop @"m_gc/push-root.code"(%oop %r18)
	%r21 = load %oop, %oop* %t4
	%r22 = load %oop, %oop* %t2
	%r23 = call %oop @m_string-append-all.code(%oop %r21, %oop %r22)
	%r24 = load %oop, %oop* %t4
	%r25 = load %oop, %oop* %t3
	%r26 = call %oop @m_string-append-all.code(%oop %r24, %oop %r25)
	%r27 = load %oop, %oop* %t4
	%r28 = call %oop @"m_string->symbol.code"(%oop %r27)
	store %oop %r28, %oop* %t5
	%r30 = getelementptr %oop, %oop* %t5, %word 0
	%r29 = bitcast %oop* %r30 to %oop
	%r31 = call %oop @"m_gc/push-root.code"(%oop %r29)
	%r32 = load %oop, %oop* %t1
	%r33 = load %oop, %oop* %t5
	%r34 = inttoptr %word 0 to %oop
	%r35 = call %oop @m_maybe-object-in-env.code(%oop %r32, %oop %r33, %oop %r34)
	%r37 = ptrtoint %oop %r35 to %word
	%r36 = icmp ne %word %r37, 0
	br i1 %r36, label %L1, label %L2
L1:
	%r38 = load %oop, %oop* %t5
	store %oop %r38, %oop* %t6
	br label %L3
L2:
	%r39 = inttoptr %word 0 to %oop
	store %oop %r39, %oop* %t6
	br label %L3
L3:
	%r40 = load %oop, %oop* %t6
	store %oop %r40, %oop* %t6
	%r42 = getelementptr %oop, %oop* %t5, %word 0
	%r41 = bitcast %oop* %r42 to %oop
	%r43 = call %oop @"m_gc/pop-root.code"(%oop %r41)
	%r44 = load %oop, %oop* %t6
	store %oop %r44, %oop* %t5
	%r46 = getelementptr %oop, %oop* %t4, %word 0
	%r45 = bitcast %oop* %r46 to %oop
	%r47 = call %oop @"m_gc/pop-root.code"(%oop %r45)
	%r48 = load %oop, %oop* %t5
	ret %oop %r48
}
@m_cstr1088 = private unnamed_addr constant [16 x i8] c"setter-name-for\00"
@m_ostr1089 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 31, %oop bitcast ([16 x i8]* @m_cstr1088 to %oop) }
@m_setter-name-for = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @m_setter-name-for.code to %oop), %"<string>"* @m_ostr1089 }
define %oop @m_maybe-fn-name-from-expr.code(%oop %expr) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	store %oop %expr, %oop* %t0
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @"m_pair?.code"(%oop %r1)
	%r4 = ptrtoint %oop %r2 to %word
	%r3 = icmp ne %word %r4, 0
	br i1 %r3, label %L1, label %L2
L1:
	%r5 = inttoptr %word 0 to %oop
	%r6 = load %oop, %oop* %t0
	%r10 = bitcast %oop %r6 to [0 x %oop]*
	%r9 = ptrtoint %oop %r5 to %word
	%r8 = getelementptr [0 x %oop], [0 x %oop]* %r10, %word 0, %word %r9
	%r7 = load %oop, %oop* %r8
	store %oop %r7, %oop* %t2
	%r11 = load %oop, %oop* %t2
	%r12 = call %oop @"m_symbol?.code"(%oop %r11)
	%r14 = ptrtoint %oop %r12 to %word
	%r13 = icmp ne %word %r14, 0
	br i1 %r13, label %L4, label %L5
L4:
	%r15 = load %oop, %oop* %t2
	store %oop %r15, %oop* %t3
	br label %L6
L5:
	%r16 = inttoptr %word 0 to %oop
	store %oop %r16, %oop* %t3
	br label %L6
L6:
	%r17 = load %oop, %oop* %t3
	store %oop %r17, %oop* %t1
	br label %L3
L2:
	%r18 = inttoptr %word 0 to %oop
	store %oop %r18, %oop* %t1
	br label %L3
L3:
	%r19 = load %oop, %oop* %t1
	ret %oop %r19
}
@m_cstr1090 = private unnamed_addr constant [24 x i8] c"maybe-fn-name-from-expr\00"
@m_ostr1091 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 47, %oop bitcast ([24 x i8]* @m_cstr1090 to %oop) }
@m_maybe-fn-name-from-expr = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_maybe-fn-name-from-expr.code to %oop), %"<string>"* @m_ostr1091 }
define %oop @m_attempt-set-convert.code(%oop %place, %oop %value, %oop %env, %oop %"one-step?") {
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	%t8 = alloca %oop
	%t9 = alloca %oop
	%t10 = alloca %oop
	store %oop %place, %oop* %t0
	store %oop %value, %oop* %t1
	store %oop %env, %oop* %t2
	store %oop %"one-step?", %oop* %t3
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @m_maybe-fn-name-from-expr.code(%oop %r1)
	store %oop %r2, %oop* %t4
	%r3 = load %oop, %oop* %t4
	%r5 = ptrtoint %oop %r3 to %word
	%r4 = icmp ne %word %r5, 0
	br i1 %r4, label %L1, label %L2
L1:
	%r6 = inttoptr %word 0 to %oop
	store %oop %r6, %oop* %t6
	%r7 = load %oop, %oop* %t4
	%r8 = load %oop, %oop* %t2
	%r9 = call %oop @m_setter-name-for.code(%oop %r7, %oop %r8)
	store %oop %r9, %oop* %t6
	%r11 = ptrtoint %oop %r9 to %word
	%r10 = icmp ne %word %r11, 0
	br i1 %r10, label %L4, label %L5
L4:
	%r12 = inttoptr %word 1 to %oop
	%r13 = load %oop, %oop* %t0
	%r17 = bitcast %oop %r13 to [0 x %oop]*
	%r16 = ptrtoint %oop %r12 to %word
	%r15 = getelementptr [0 x %oop], [0 x %oop]* %r17, %word 0, %word %r16
	%r14 = load %oop, %oop* %r15
	store %oop %r14, %oop* %t8
	%r19 = getelementptr %oop, %oop* %t8, %word 0
	%r18 = bitcast %oop* %r19 to %oop
	%r20 = call %oop @"m_gc/push-root.code"(%oop %r18)
	%r21 = load %oop, %oop* %t1
	%r22 = inttoptr %word 0 to %oop
	%r23 = call %oop @m_cons.code(%oop %r21, %oop %r22)
	store %oop %r23, %oop* %t9
	%r25 = getelementptr %oop, %oop* %t9, %word 0
	%r24 = bitcast %oop* %r25 to %oop
	%r26 = call %oop @"m_gc/push-root.code"(%oop %r24)
	%r27 = load %oop, %oop* %t8
	%r28 = load %oop, %oop* %t2
	%r29 = load %oop, %oop* %t3
	%r30 = call %oop @m_expand-all.code(%oop %r27, %oop %r28, %oop %r29)
	store %oop %r30, %oop* %t8
	%r31 = load %oop, %oop* %t8
	%r32 = load %oop, %oop* %t9
	%r33 = call %oop @m_concat-list.code(%oop %r31, %oop %r32)
	store %oop %r33, %oop* %t8
	%r34 = load %oop, %oop* %t6
	%r35 = load %oop, %oop* %t8
	%r36 = call %oop @m_cons.code(%oop %r34, %oop %r35)
	store %oop %r36, %oop* %t10
	%r38 = getelementptr %oop, %oop* %t9, %word 0
	%r37 = bitcast %oop* %r38 to %oop
	%r39 = call %oop @"m_gc/pop-root.code"(%oop %r37)
	%r40 = load %oop, %oop* %t10
	store %oop %r40, %oop* %t9
	%r42 = getelementptr %oop, %oop* %t8, %word 0
	%r41 = bitcast %oop* %r42 to %oop
	%r43 = call %oop @"m_gc/pop-root.code"(%oop %r41)
	%r44 = load %oop, %oop* %t9
	store %oop %r44, %oop* %t7
	br label %L6
L5:
	%r45 = inttoptr %word 0 to %oop
	store %oop %r45, %oop* %t7
	br label %L6
L6:
	%r46 = load %oop, %oop* %t7
	store %oop %r46, %oop* %t5
	br label %L3
L2:
	%r47 = inttoptr %word 0 to %oop
	store %oop %r47, %oop* %t5
	br label %L3
L3:
	%r48 = load %oop, %oop* %t5
	ret %oop %r48
}
@m_cstr1092 = private unnamed_addr constant [20 x i8] c"attempt-set-convert\00"
@m_ostr1093 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 39, %oop bitcast ([20 x i8]* @m_cstr1092 to %oop) }
@m_attempt-set-convert = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop, %oop, %oop)* @m_attempt-set-convert.code to %oop), %"<string>"* @m_ostr1093 }
@m_cstr1094 = private unnamed_addr constant [19 x i8] c"illegal set form: \00"
@m_ostr1095 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 37, %oop bitcast ([19 x i8]* @m_cstr1094 to %oop) }
@m_cstr1096 = private unnamed_addr constant [22 x i8] c"illegal define form: \00"
@m_ostr1097 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 43, %oop bitcast ([22 x i8]* @m_cstr1096 to %oop) }
define %oop @"m_expand/pair.code"(%oop %exp, %oop %env, %oop %"one-step?", %oop %-call-frame-) {
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	%t9 = alloca %oop
	%t8 = alloca %oop
	%t11 = alloca %oop
	%t12 = alloca %oop
	%t10 = alloca %oop
	%t13 = alloca %oop
	%t14 = alloca %oop
	%t15 = alloca %oop
	%t16 = alloca %oop
	%t17 = alloca %oop
	%t18 = alloca %oop
	store %oop %exp, %oop* %t0
	store %oop %env, %oop* %t1
	store %oop %"one-step?", %oop* %t2
	store %oop %-call-frame-, %oop* %t3
	%r1 = inttoptr %word 0 to %oop
	%r2 = load %oop, %oop* %t0
	%r6 = bitcast %oop %r2 to [0 x %oop]*
	%r5 = ptrtoint %oop %r1 to %word
	%r4 = getelementptr [0 x %oop], [0 x %oop]* %r6, %word 0, %word %r5
	%r3 = load %oop, %oop* %r4
	%r7 = load %oop, %oop* %t1
	%r8 = load %oop, %oop* %t2
	%r9 = call %oop @m_expand.code(%oop %r3, %oop %r7, %oop %r8)
	store %oop %r9, %oop* %t4
	%r11 = getelementptr %oop, %oop* %t4, %word 0
	%r10 = bitcast %oop* %r11 to %oop
	%r12 = call %oop @"m_gc/push-root.code"(%oop %r10)
	%r13 = inttoptr %word 0 to %oop
	%r14 = inttoptr %word 0 to %oop
	%r15 = load %oop, %oop* %t0
	%r19 = bitcast %oop %r15 to [0 x %oop]*
	%r18 = ptrtoint %oop %r14 to %word
	%r17 = getelementptr [0 x %oop], [0 x %oop]* %r19, %word 0, %word %r18
	%r16 = load %oop, %oop* %r17
	%r20 = load %oop, %oop* %t4
	%r24 = ptrtoint %oop %r20 to %word
	%r23 = ptrtoint %oop %r16 to %word
	%r22 = icmp eq %word %r24, %r23
	%r21 = inttoptr i1 %r22 to %oop
	%r26 = ptrtoint %oop %r21 to %word
	%r25 = icmp ne %word %r26, 0
	br i1 %r25, label %L1, label %L2
L1:
	%r27 = inttoptr %word 0 to %oop
	store %oop %r27, %oop* %t5
	br label %L3
L2:
	%r28 = load %oop, %oop* %t4
	%r29 = inttoptr %word 1 to %oop
	%r30 = load %oop, %oop* %t3
	%r34 = bitcast %oop %r30 to [0 x %oop]*
	%r33 = ptrtoint %oop %r29 to %word
	%r32 = getelementptr [0 x %oop], [0 x %oop]* %r34, %word 0, %word %r33
	store %oop %r28, %oop* %r32
	%r31 = bitcast %oop %r28 to %oop
	store %oop %r31, %oop* %t5
	br label %L3
L3:
	%r35 = load %oop, %oop* %t5
	%r36 = load %oop, %oop* %t0
	%r37 = inttoptr %word 2 to %oop
	%r38 = load %oop, %oop* %t3
	%r42 = bitcast %oop %r38 to [0 x %oop]*
	%r41 = ptrtoint %oop %r37 to %word
	%r40 = getelementptr [0 x %oop], [0 x %oop]* %r42, %word 0, %word %r41
	store %oop %r36, %oop* %r40
	%r39 = bitcast %oop %r36 to %oop
	%r43 = inttoptr %word 0 to %oop
	store %oop %r43, %oop* %t5
	%r44 = load %oop, %oop* @"m_symbol/let"
	%r45 = load %oop, %oop* %t4
	%r49 = ptrtoint %oop %r45 to %word
	%r48 = ptrtoint %oop %r44 to %word
	%r47 = icmp eq %word %r49, %r48
	%r46 = inttoptr i1 %r47 to %oop
	%r51 = ptrtoint %oop %r46 to %word
	%r50 = icmp ne %word %r51, 0
	br i1 %r50, label %L4, label %L5
L4:
	%r52 = inttoptr %word 0 to %oop
	store %oop %r52, %oop* %t7
	%r54 = getelementptr %oop, %oop* %t7, %word 0
	%r53 = bitcast %oop* %r54 to %oop
	%r55 = call %oop @"m_gc/push-root.code"(%oop %r53)
	%r56 = load %oop, %oop* %t0
	%r57 = call %oop @m_cadr.code(%oop %r56)
	store %oop %r57, %oop* %t8
	%r58 = inttoptr %word 0 to %oop
	store %oop %r58, %oop* %t9
	%r59 = load %oop, %oop* %t8
	store %oop %r59, %oop* %t10
	br label %L8
L7:
	%r60 = load %oop, %oop* %t10
	%r61 = call %oop @m_car.code(%oop %r60)
	store %oop %r61, %oop* %t11
	%r62 = inttoptr %word 0 to %oop
	store %oop %r62, %oop* %t12
	%r63 = inttoptr %word 0 to %oop
	store %oop %r63, %oop* %t13
	%r65 = getelementptr %oop, %oop* %t13, %word 0
	%r64 = bitcast %oop* %r65 to %oop
	%r66 = call %oop @"m_gc/push-root.code"(%oop %r64)
	%r67 = load %oop, %oop* %t11
	%r68 = call %oop @"m_pair?.code"(%oop %r67)
	%r70 = ptrtoint %oop %r68 to %word
	%r69 = icmp ne %word %r70, 0
	br i1 %r69, label %L10, label %L11
L10:
	%r71 = inttoptr %word 0 to %oop
	%r72 = load %oop, %oop* %t11
	%r76 = bitcast %oop %r72 to [0 x %oop]*
	%r75 = ptrtoint %oop %r71 to %word
	%r74 = getelementptr [0 x %oop], [0 x %oop]* %r76, %word 0, %word %r75
	%r73 = load %oop, %oop* %r74
	store %oop %r73, %oop* %t12
	%r77 = inttoptr %word 1 to %oop
	%r78 = load %oop, %oop* %t11
	%r82 = bitcast %oop %r78 to [0 x %oop]*
	%r81 = ptrtoint %oop %r77 to %word
	%r80 = getelementptr [0 x %oop], [0 x %oop]* %r82, %word 0, %word %r81
	%r79 = load %oop, %oop* %r80
	%r83 = load %oop, %oop* %t1
	%r84 = load %oop, %oop* %t2
	%r85 = call %oop @m_expand-all.code(%oop %r79, %oop %r83, %oop %r84)
	store %oop %r85, %oop* %t13
	store %oop %r85, %oop* %t14
	br label %L12
L11:
	%r86 = load %oop, %oop* %t11
	store %oop %r86, %oop* %t12
	%r87 = inttoptr %word 0 to %oop
	%r88 = inttoptr %word 0 to %oop
	%r89 = call %oop @m_cons.code(%oop %r87, %oop %r88)
	store %oop %r89, %oop* %t13
	store %oop %r89, %oop* %t14
	br label %L12
L12:
	%r90 = load %oop, %oop* %t14
	%r91 = load %oop, %oop* %t12
	%r92 = load %oop, %oop* %t13
	%r93 = call %oop @m_cons.code(%oop %r91, %oop %r92)
	store %oop %r93, %oop* %t14
	%r95 = getelementptr %oop, %oop* %t14, %word 0
	%r94 = bitcast %oop* %r95 to %oop
	%r96 = call %oop @"m_gc/push-root.code"(%oop %r94)
	%r97 = load %oop, %oop* %t7
	%r99 = ptrtoint %oop %r97 to %word
	%r98 = icmp ne %word %r99, 0
	br i1 %r98, label %L13, label %L14
L13:
	%r100 = load %oop, %oop* %t14
	%r101 = inttoptr %word 0 to %oop
	%r102 = call %oop @m_cons.code(%oop %r100, %oop %r101)
	%r103 = inttoptr %word 1 to %oop
	%r104 = load %oop, %oop* %t9
	%r108 = bitcast %oop %r104 to [0 x %oop]*
	%r107 = ptrtoint %oop %r103 to %word
	%r106 = getelementptr [0 x %oop], [0 x %oop]* %r108, %word 0, %word %r107
	store %oop %r102, %oop* %r106
	%r105 = bitcast %oop %r102 to %oop
	store %oop %r105, %oop* %t15
	br label %L15
L14:
	%r109 = load %oop, %oop* %t14
	%r110 = inttoptr %word 0 to %oop
	%r111 = call %oop @m_cons.code(%oop %r109, %oop %r110)
	store %oop %r111, %oop* %t7
	store %oop %r111, %oop* %t15
	br label %L15
L15:
	%r112 = load %oop, %oop* %t15
	store %oop %r112, %oop* %t9
	store %oop %r112, %oop* %t15
	%r114 = getelementptr %oop, %oop* %t14, %word 0
	%r113 = bitcast %oop* %r114 to %oop
	%r115 = call %oop @"m_gc/pop-root.code"(%oop %r113)
	%r116 = load %oop, %oop* %t15
	store %oop %r116, %oop* %t14
	%r118 = getelementptr %oop, %oop* %t13, %word 0
	%r117 = bitcast %oop* %r118 to %oop
	%r119 = call %oop @"m_gc/pop-root.code"(%oop %r117)
	%r120 = load %oop, %oop* %t14
	%r121 = load %oop, %oop* %t10
	%r122 = call %oop @m_cdr.code(%oop %r121)
	store %oop %r122, %oop* %t10
	br label %L8
L8:
	%r123 = load %oop, %oop* %t10
	%r125 = ptrtoint %oop %r123 to %word
	%r124 = icmp ne %word %r125, 0
	br i1 %r124, label %L7, label %L9
L9:
	%r126 = load %oop, %oop* %t0
	%r127 = call %oop @m_cddr.code(%oop %r126)
	%r128 = load %oop, %oop* %t1
	%r129 = load %oop, %oop* %t2
	%r130 = call %oop @m_expand-all.code(%oop %r127, %oop %r128, %oop %r129)
	store %oop %r130, %oop* %t9
	%r132 = getelementptr %oop, %oop* %t9, %word 0
	%r131 = bitcast %oop* %r132 to %oop
	%r133 = call %oop @"m_gc/push-root.code"(%oop %r131)
	%r134 = load %oop, %oop* %t7
	%r135 = load %oop, %oop* %t9
	%r136 = call %oop @m_cons.code(%oop %r134, %oop %r135)
	store %oop %r136, %oop* %t9
	%r137 = load %oop, %oop* @"m_symbol/let"
	%r138 = load %oop, %oop* %t9
	%r139 = call %oop @m_cons.code(%oop %r137, %oop %r138)
	store %oop %r139, %oop* %t9
	%r140 = load %oop, %oop* %t9
	store %oop %r140, %oop* %t8
	%r142 = getelementptr %oop, %oop* %t9, %word 0
	%r141 = bitcast %oop* %r142 to %oop
	%r143 = call %oop @"m_gc/pop-root.code"(%oop %r141)
	%r144 = load %oop, %oop* %t8
	store %oop %r144, %oop* %t9
	%r146 = getelementptr %oop, %oop* %t7, %word 0
	%r145 = bitcast %oop* %r146 to %oop
	%r147 = call %oop @"m_gc/pop-root.code"(%oop %r145)
	%r148 = load %oop, %oop* %t9
	store %oop %r148, %oop* %t6
	br label %L6
L5:
	%r149 = load %oop, %oop* @"m_symbol/quote"
	%r150 = load %oop, %oop* %t4
	%r154 = ptrtoint %oop %r150 to %word
	%r153 = ptrtoint %oop %r149 to %word
	%r152 = icmp eq %word %r154, %r153
	%r151 = inttoptr i1 %r152 to %oop
	%r156 = ptrtoint %oop %r151 to %word
	%r155 = icmp ne %word %r156, 0
	br i1 %r155, label %L16, label %L17
L16:
	%r157 = load %oop, %oop* @"m_symbol/quote"
	%r158 = inttoptr %word 1 to %oop
	%r159 = load %oop, %oop* %t0
	%r163 = bitcast %oop %r159 to [0 x %oop]*
	%r162 = ptrtoint %oop %r158 to %word
	%r161 = getelementptr [0 x %oop], [0 x %oop]* %r163, %word 0, %word %r162
	%r160 = load %oop, %oop* %r161
	%r164 = call %oop @m_cons.code(%oop %r157, %oop %r160)
	store %oop %r164, %oop* %t7
	br label %L18
L17:
	%r165 = load %oop, %oop* @"m_symbol/set"
	%r166 = load %oop, %oop* %t4
	%r170 = ptrtoint %oop %r166 to %word
	%r169 = ptrtoint %oop %r165 to %word
	%r168 = icmp eq %word %r170, %r169
	%r167 = inttoptr i1 %r168 to %oop
	%r172 = ptrtoint %oop %r167 to %word
	%r171 = icmp ne %word %r172, 0
	br i1 %r171, label %L19, label %L20
L19:
	%r173 = inttoptr %word 0 to %oop
	store %oop %r173, %oop* %t8
	%r174 = inttoptr %word 1 to %oop
	store %oop %r174, %oop* %t10
	%r175 = load %oop, %oop* %t0
	%r176 = call %oop @m_cddr.code(%oop %r175)
	store %oop %r176, %oop* %t10
	%r177 = inttoptr %word 0 to %oop
	%r181 = ptrtoint %oop %r177 to %word
	%r180 = ptrtoint %oop %r176 to %word
	%r179 = icmp eq %word %r181, %r180
	%r178 = inttoptr i1 %r179 to %oop
	%r183 = ptrtoint %oop %r178 to %word
	%r182 = icmp ne %word %r183, 0
	br i1 %r182, label %L23, label %L24
L24:
	%r184 = load %oop, %oop* %t0
	%r185 = call %oop @m_cdddr.code(%oop %r184)
	%r189 = ptrtoint %oop %r185 to %word
	%r188 = icmp eq %word %r189, 0
	%r187 = zext i1 %r188 to %word
	%r186 = inttoptr %word %r187 to %oop
	store %oop %r186, %oop* %t10
	%r190 = inttoptr %word 0 to %oop
	%r194 = ptrtoint %oop %r190 to %word
	%r193 = ptrtoint %oop %r186 to %word
	%r192 = icmp eq %word %r194, %r193
	%r191 = inttoptr i1 %r192 to %oop
	%r196 = ptrtoint %oop %r191 to %word
	%r195 = icmp ne %word %r196, 0
	br i1 %r195, label %L23, label %L25
L25:
	br label %L23
L23:
	%r197 = load %oop, %oop* %t10
	store %oop %r197, %oop* %t8
	%r198 = inttoptr %word 0 to %oop
	%r202 = ptrtoint %oop %r198 to %word
	%r201 = ptrtoint %oop %r197 to %word
	%r200 = icmp eq %word %r202, %r201
	%r199 = inttoptr i1 %r200 to %oop
	%r204 = ptrtoint %oop %r199 to %word
	%r203 = icmp ne %word %r204, 0
	br i1 %r203, label %L26, label %L22
L26:
	%r205 = call %oop @m_error-prologue.code()
	%r206 = getelementptr %"<string>", %"<string>"* @m_ostr1095, i32 0, i32 1
	%r207 = bitcast %word* %r206 to %oop
	%r208 = call %oop @"m_%error.code"(%oop %r207)
	%r209 = load %oop, %oop* %t0
	%r210 = call %oop @"m_%error.code"(%oop %r209)
	%r211 = call %oop @m_error-epilogue.code()
	store %oop %r211, %oop* %t8
	%r212 = inttoptr %word 0 to %oop
	%r216 = ptrtoint %oop %r212 to %word
	%r215 = ptrtoint %oop %r211 to %word
	%r214 = icmp eq %word %r216, %r215
	%r213 = inttoptr i1 %r214 to %oop
	%r218 = ptrtoint %oop %r213 to %word
	%r217 = icmp ne %word %r218, 0
	br i1 %r217, label %L27, label %L22
L27:
	br label %L22
L22:
	%r219 = load %oop, %oop* %t8
	%r220 = inttoptr %word 0 to %oop
	%r221 = load %oop, %oop* %t0
	%r222 = call %oop @m_second.code(%oop %r221)
	store %oop %r222, %oop* %t8
	%r223 = load %oop, %oop* %t0
	%r224 = call %oop @m_third.code(%oop %r223)
	%r225 = load %oop, %oop* %t1
	%r226 = load %oop, %oop* %t2
	%r227 = call %oop @m_expand.code(%oop %r224, %oop %r225, %oop %r226)
	store %oop %r227, %oop* %t10
	%r229 = getelementptr %oop, %oop* %t10, %word 0
	%r228 = bitcast %oop* %r229 to %oop
	%r230 = call %oop @"m_gc/push-root.code"(%oop %r228)
	%r231 = load %oop, %oop* %t8
	%r232 = load %oop, %oop* %t10
	%r233 = load %oop, %oop* %t1
	%r234 = load %oop, %oop* %t2
	%r235 = call %oop @m_attempt-set-convert.code(%oop %r231, %oop %r232, %oop %r233, %oop %r234)
	store %oop %r235, %oop* %t11
	%r237 = getelementptr %oop, %oop* %t11, %word 0
	%r236 = bitcast %oop* %r237 to %oop
	%r238 = call %oop @"m_gc/push-root.code"(%oop %r236)
	%r239 = load %oop, %oop* %t11
	%r241 = ptrtoint %oop %r239 to %word
	%r240 = icmp ne %word %r241, 0
	br i1 %r240, label %L28, label %L29
L28:
	%r242 = load %oop, %oop* %t2
	%r244 = ptrtoint %oop %r242 to %word
	%r243 = icmp ne %word %r244, 0
	br i1 %r243, label %L31, label %L32
L31:
	%r245 = load %oop, %oop* %t11
	store %oop %r245, %oop* %t13
	br label %L33
L32:
	%r246 = load %oop, %oop* %t11
	%r247 = load %oop, %oop* %t1
	%r248 = load %oop, %oop* %t2
	%r249 = call %oop @m_expand.code(%oop %r246, %oop %r247, %oop %r248)
	store %oop %r249, %oop* %t13
	br label %L33
L33:
	%r250 = load %oop, %oop* %t13
	store %oop %r250, %oop* %t12
	br label %L30
L29:
	%r251 = load %oop, %oop* %t8
	%r252 = load %oop, %oop* %t1
	%r253 = inttoptr %word 1 to %oop
	%r254 = call %oop @m_expand.code(%oop %r251, %oop %r252, %oop %r253)
	store %oop %r254, %oop* %t13
	%r256 = getelementptr %oop, %oop* %t13, %word 0
	%r255 = bitcast %oop* %r256 to %oop
	%r257 = call %oop @"m_gc/push-root.code"(%oop %r255)
	%r258 = load %oop, %oop* %t13
	%r259 = load %oop, %oop* %t10
	%r260 = load %oop, %oop* %t1
	%r261 = load %oop, %oop* %t2
	%r262 = call %oop @m_attempt-set-convert.code(%oop %r258, %oop %r259, %oop %r260, %oop %r261)
	store %oop %r262, %oop* %t11
	%r264 = ptrtoint %oop %r262 to %word
	%r263 = icmp ne %word %r264, 0
	br i1 %r263, label %L34, label %L35
L34:
	%r265 = load %oop, %oop* %t2
	%r267 = ptrtoint %oop %r265 to %word
	%r266 = icmp ne %word %r267, 0
	br i1 %r266, label %L37, label %L38
L37:
	%r268 = load %oop, %oop* %t11
	store %oop %r268, %oop* %t15
	br label %L39
L38:
	%r269 = load %oop, %oop* %t11
	%r270 = load %oop, %oop* %t1
	%r271 = load %oop, %oop* %t2
	%r272 = call %oop @m_expand.code(%oop %r269, %oop %r270, %oop %r271)
	store %oop %r272, %oop* %t15
	br label %L39
L39:
	%r273 = load %oop, %oop* %t15
	store %oop %r273, %oop* %t14
	br label %L36
L35:
	%r274 = load %oop, %oop* %t13
	%r275 = call %oop @m_maybe-fn-name-from-expr.code(%oop %r274)
	store %oop %r275, %oop* %t15
	%r276 = load %oop, %oop* @"m_symbol/set"
	%r277 = load %oop, %oop* %t13
	%r278 = load %oop, %oop* %t10
	%r279 = call %oop @m_list3.code(%oop %r276, %oop %r277, %oop %r278)
	store %oop %r279, %oop* %t11
	%r280 = inttoptr %word 1 to %oop
	store %oop %r280, %oop* %t17
	%r281 = load %oop, %oop* %t2
	%r285 = ptrtoint %oop %r281 to %word
	%r284 = icmp eq %word %r285, 0
	%r283 = zext i1 %r284 to %word
	%r282 = inttoptr %word %r283 to %oop
	store %oop %r282, %oop* %t17
	%r286 = inttoptr %word 0 to %oop
	%r290 = ptrtoint %oop %r286 to %word
	%r289 = ptrtoint %oop %r282 to %word
	%r288 = icmp eq %word %r290, %r289
	%r287 = inttoptr i1 %r288 to %oop
	%r292 = ptrtoint %oop %r287 to %word
	%r291 = icmp ne %word %r292, 0
	br i1 %r291, label %L43, label %L44
L44:
	%r293 = load %oop, %oop* %t15
	store %oop %r293, %oop* %t17
	%r294 = inttoptr %word 0 to %oop
	%r298 = ptrtoint %oop %r294 to %word
	%r297 = ptrtoint %oop %r293 to %word
	%r296 = icmp eq %word %r298, %r297
	%r295 = inttoptr i1 %r296 to %oop
	%r300 = ptrtoint %oop %r295 to %word
	%r299 = icmp ne %word %r300, 0
	br i1 %r299, label %L43, label %L45
L45:
	%r301 = inttoptr %word 0 to %oop
	store %oop %r301, %oop* %t18
	%r302 = load %oop, %oop* %t1
	%r303 = load %oop, %oop* %t15
	%r304 = inttoptr %word 15 to %oop
	%r305 = call %oop @m_maybe-object-in-env.code(%oop %r302, %oop %r303, %oop %r304)
	store %oop %r305, %oop* %t18
	%r306 = inttoptr %word 0 to %oop
	%r310 = ptrtoint %oop %r306 to %word
	%r309 = ptrtoint %oop %r305 to %word
	%r308 = icmp eq %word %r310, %r309
	%r307 = inttoptr i1 %r308 to %oop
	%r312 = ptrtoint %oop %r307 to %word
	%r311 = icmp ne %word %r312, 0
	br i1 %r311, label %L47, label %L46
L47:
	%r313 = load %oop, %oop* %t15
	%r314 = load %oop, %oop* %t1
	%r315 = call %oop @m_setter-name-for.code(%oop %r313, %oop %r314)
	store %oop %r315, %oop* %t18
	%r316 = inttoptr %word 0 to %oop
	%r320 = ptrtoint %oop %r316 to %word
	%r319 = ptrtoint %oop %r315 to %word
	%r318 = icmp eq %word %r320, %r319
	%r317 = inttoptr i1 %r318 to %oop
	%r322 = ptrtoint %oop %r317 to %word
	%r321 = icmp ne %word %r322, 0
	br i1 %r321, label %L48, label %L46
L48:
	br label %L46
L46:
	%r323 = load %oop, %oop* %t18
	store %oop %r323, %oop* %t17
	%r324 = inttoptr %word 0 to %oop
	%r328 = ptrtoint %oop %r324 to %word
	%r327 = ptrtoint %oop %r323 to %word
	%r326 = icmp eq %word %r328, %r327
	%r325 = inttoptr i1 %r326 to %oop
	%r330 = ptrtoint %oop %r325 to %word
	%r329 = icmp ne %word %r330, 0
	br i1 %r329, label %L43, label %L49
L49:
	br label %L43
L43:
	%r331 = load %oop, %oop* %t17
	%r333 = ptrtoint %oop %r331 to %word
	%r332 = icmp ne %word %r333, 0
	br i1 %r332, label %L40, label %L41
L40:
	%r334 = load %oop, %oop* %t11
	%r335 = load %oop, %oop* %t1
	%r336 = load %oop, %oop* %t2
	%r337 = call %oop @m_expand.code(%oop %r334, %oop %r335, %oop %r336)
	store %oop %r337, %oop* %t16
	br label %L42
L41:
	%r338 = load %oop, %oop* %t11
	store %oop %r338, %oop* %t16
	br label %L42
L42:
	%r339 = load %oop, %oop* %t16
	store %oop %r339, %oop* %t14
	br label %L36
L36:
	%r340 = load %oop, %oop* %t14
	store %oop %r340, %oop* %t14
	%r342 = getelementptr %oop, %oop* %t13, %word 0
	%r341 = bitcast %oop* %r342 to %oop
	%r343 = call %oop @"m_gc/pop-root.code"(%oop %r341)
	%r344 = load %oop, %oop* %t14
	store %oop %r344, %oop* %t12
	br label %L30
L30:
	%r345 = load %oop, %oop* %t12
	store %oop %r345, %oop* %t12
	%r347 = getelementptr %oop, %oop* %t11, %word 0
	%r346 = bitcast %oop* %r347 to %oop
	%r348 = call %oop @"m_gc/pop-root.code"(%oop %r346)
	%r349 = load %oop, %oop* %t12
	store %oop %r349, %oop* %t11
	%r351 = getelementptr %oop, %oop* %t10, %word 0
	%r350 = bitcast %oop* %r351 to %oop
	%r352 = call %oop @"m_gc/pop-root.code"(%oop %r350)
	%r353 = load %oop, %oop* %t11
	store %oop %r353, %oop* %t9
	br label %L21
L20:
	%r354 = load %oop, %oop* @"m_symbol/define"
	%r355 = load %oop, %oop* %t4
	%r359 = ptrtoint %oop %r355 to %word
	%r358 = ptrtoint %oop %r354 to %word
	%r357 = icmp eq %word %r359, %r358
	%r356 = inttoptr i1 %r357 to %oop
	%r361 = ptrtoint %oop %r356 to %word
	%r360 = icmp ne %word %r361, 0
	br i1 %r360, label %L50, label %L51
L50:
	%r362 = inttoptr %word 0 to %oop
	store %oop %r362, %oop* %t10
	%r363 = load %oop, %oop* %t0
	%r364 = call %oop @m_cdddr.code(%oop %r363)
	%r368 = ptrtoint %oop %r364 to %word
	%r367 = icmp eq %word %r368, 0
	%r366 = zext i1 %r367 to %word
	%r365 = inttoptr %word %r366 to %oop
	store %oop %r365, %oop* %t10
	%r369 = inttoptr %word 0 to %oop
	%r373 = ptrtoint %oop %r369 to %word
	%r372 = ptrtoint %oop %r365 to %word
	%r371 = icmp eq %word %r373, %r372
	%r370 = inttoptr i1 %r371 to %oop
	%r375 = ptrtoint %oop %r370 to %word
	%r374 = icmp ne %word %r375, 0
	br i1 %r374, label %L54, label %L53
L54:
	%r376 = call %oop @m_error-prologue.code()
	%r377 = getelementptr %"<string>", %"<string>"* @m_ostr1097, i32 0, i32 1
	%r378 = bitcast %word* %r377 to %oop
	%r379 = call %oop @"m_%error.code"(%oop %r378)
	%r380 = load %oop, %oop* %t0
	%r381 = call %oop @"m_%error.code"(%oop %r380)
	%r382 = call %oop @m_error-epilogue.code()
	store %oop %r382, %oop* %t10
	%r383 = inttoptr %word 0 to %oop
	%r387 = ptrtoint %oop %r383 to %word
	%r386 = ptrtoint %oop %r382 to %word
	%r385 = icmp eq %word %r387, %r386
	%r384 = inttoptr i1 %r385 to %oop
	%r389 = ptrtoint %oop %r384 to %word
	%r388 = icmp ne %word %r389, 0
	br i1 %r388, label %L55, label %L53
L55:
	br label %L53
L53:
	%r390 = load %oop, %oop* %t10
	%r391 = load %oop, %oop* %t0
	%r392 = call %oop @m_second.code(%oop %r391)
	store %oop %r392, %oop* %t10
	%r393 = load %oop, %oop* %t0
	%r394 = call %oop @m_third.code(%oop %r393)
	store %oop %r394, %oop* %t11
	%r395 = load %oop, %oop* %t11
	%r396 = load %oop, %oop* %t1
	%r397 = load %oop, %oop* %t2
	%r398 = call %oop @m_expand.code(%oop %r395, %oop %r396, %oop %r397)
	store %oop %r398, %oop* %t12
	%r400 = getelementptr %oop, %oop* %t12, %word 0
	%r399 = bitcast %oop* %r400 to %oop
	%r401 = call %oop @"m_gc/push-root.code"(%oop %r399)
	%r402 = load %oop, %oop* @"m_symbol/define"
	%r403 = load %oop, %oop* %t10
	%r404 = load %oop, %oop* %t12
	%r405 = call %oop @m_list3.code(%oop %r402, %oop %r403, %oop %r404)
	store %oop %r405, %oop* %t13
	%r407 = getelementptr %oop, %oop* %t12, %word 0
	%r406 = bitcast %oop* %r407 to %oop
	%r408 = call %oop @"m_gc/pop-root.code"(%oop %r406)
	%r409 = load %oop, %oop* %t13
	store %oop %r409, %oop* %t8
	br label %L52
L51:
	%r410 = load %oop, %oop* @"m_symbol/lambda"
	%r411 = load %oop, %oop* %t4
	%r415 = ptrtoint %oop %r411 to %word
	%r414 = ptrtoint %oop %r410 to %word
	%r413 = icmp eq %word %r415, %r414
	%r412 = inttoptr i1 %r413 to %oop
	%r417 = ptrtoint %oop %r412 to %word
	%r416 = icmp ne %word %r417, 0
	br i1 %r416, label %L56, label %L57
L56:
	%r418 = load %oop, %oop* %t0
	%r419 = call %oop @m_cadr.code(%oop %r418)
	store %oop %r419, %oop* %t10
	%r420 = load %oop, %oop* %t0
	%r421 = call %oop @m_cddr.code(%oop %r420)
	store %oop %r421, %oop* %t12
	%r422 = load %oop, %oop* %t12
	%r423 = load %oop, %oop* %t1
	%r424 = load %oop, %oop* %t2
	%r425 = call %oop @m_expand-all.code(%oop %r422, %oop %r423, %oop %r424)
	store %oop %r425, %oop* %t13
	%r427 = getelementptr %oop, %oop* %t13, %word 0
	%r426 = bitcast %oop* %r427 to %oop
	%r428 = call %oop @"m_gc/push-root.code"(%oop %r426)
	%r429 = load %oop, %oop* %t10
	%r430 = load %oop, %oop* %t13
	%r431 = call %oop @m_cons.code(%oop %r429, %oop %r430)
	store %oop %r431, %oop* %t13
	%r432 = load %oop, %oop* @"m_symbol/lambda"
	%r433 = load %oop, %oop* %t13
	%r434 = call %oop @m_cons.code(%oop %r432, %oop %r433)
	store %oop %r434, %oop* %t14
	%r436 = getelementptr %oop, %oop* %t13, %word 0
	%r435 = bitcast %oop* %r436 to %oop
	%r437 = call %oop @"m_gc/pop-root.code"(%oop %r435)
	%r438 = load %oop, %oop* %t14
	store %oop %r438, %oop* %t11
	br label %L58
L57:
	%r439 = load %oop, %oop* %t1
	%r440 = load %oop, %oop* %t4
	%r441 = call %oop @"m_maybe-form-in-env/function.code"(%oop %r439, %oop %r440)
	store %oop %r441, %oop* %t5
	%r443 = ptrtoint %oop %r441 to %word
	%r442 = icmp ne %word %r443, 0
	br i1 %r442, label %L59, label %L60
L59:
	%r444 = load %oop, %oop* %t1
	%r445 = inttoptr %word 1 to %oop
	%r446 = load %oop, %oop* %t0
	%r450 = bitcast %oop %r446 to [0 x %oop]*
	%r449 = ptrtoint %oop %r445 to %word
	%r448 = getelementptr [0 x %oop], [0 x %oop]* %r450, %word 0, %word %r449
	%r447 = load %oop, %oop* %r448
	%r451 = call %oop @m_cons.code(%oop %r444, %oop %r447)
	store %oop %r451, %oop* %t10
	%r453 = getelementptr %oop, %oop* %t10, %word 0
	%r452 = bitcast %oop* %r453 to %oop
	%r454 = call %oop @"m_gc/push-root.code"(%oop %r452)
	%r455 = load %oop, %oop* %t5
	%r456 = load %oop, %oop* %t10
	%r457 = inttoptr %word 0 to %oop
	%r458 = call %oop @m_apply.code(%oop %r455, %oop %r456, %oop %r457)
	store %oop %r458, %oop* %t13
	%r460 = getelementptr %oop, %oop* %t13, %word 0
	%r459 = bitcast %oop* %r460 to %oop
	%r461 = call %oop @"m_gc/push-root.code"(%oop %r459)
	%r462 = inttoptr %word 0 to %oop
	%r463 = load %oop, %oop* %t2
	%r465 = ptrtoint %oop %r463 to %word
	%r464 = icmp ne %word %r465, 0
	br i1 %r464, label %L62, label %L63
L62:
	%r466 = load %oop, %oop* %t13
	store %oop %r466, %oop* %t14
	br label %L64
L63:
	%r467 = load %oop, %oop* %t13
	%r468 = load %oop, %oop* %t1
	%r469 = load %oop, %oop* %t2
	%r470 = call %oop @m_expand.code(%oop %r467, %oop %r468, %oop %r469)
	store %oop %r470, %oop* %t14
	br label %L64
L64:
	%r471 = load %oop, %oop* %t14
	store %oop %r471, %oop* %t14
	%r473 = getelementptr %oop, %oop* %t13, %word 0
	%r472 = bitcast %oop* %r473 to %oop
	%r474 = call %oop @"m_gc/pop-root.code"(%oop %r472)
	%r475 = load %oop, %oop* %t14
	store %oop %r475, %oop* %t13
	%r477 = getelementptr %oop, %oop* %t10, %word 0
	%r476 = bitcast %oop* %r477 to %oop
	%r478 = call %oop @"m_gc/pop-root.code"(%oop %r476)
	%r479 = load %oop, %oop* %t13
	store %oop %r479, %oop* %t12
	br label %L61
L60:
	%r480 = inttoptr %word 1 to %oop
	%r481 = load %oop, %oop* %t0
	%r485 = bitcast %oop %r481 to [0 x %oop]*
	%r484 = ptrtoint %oop %r480 to %word
	%r483 = getelementptr [0 x %oop], [0 x %oop]* %r485, %word 0, %word %r484
	%r482 = load %oop, %oop* %r483
	%r486 = load %oop, %oop* %t1
	%r487 = load %oop, %oop* %t2
	%r488 = call %oop @m_expand-all.code(%oop %r482, %oop %r486, %oop %r487)
	store %oop %r488, %oop* %t10
	%r490 = getelementptr %oop, %oop* %t10, %word 0
	%r489 = bitcast %oop* %r490 to %oop
	%r491 = call %oop @"m_gc/push-root.code"(%oop %r489)
	%r492 = load %oop, %oop* %t4
	%r493 = load %oop, %oop* %t10
	%r494 = call %oop @m_cons.code(%oop %r492, %oop %r493)
	store %oop %r494, %oop* %t13
	%r496 = getelementptr %oop, %oop* %t10, %word 0
	%r495 = bitcast %oop* %r496 to %oop
	%r497 = call %oop @"m_gc/pop-root.code"(%oop %r495)
	%r498 = load %oop, %oop* %t13
	store %oop %r498, %oop* %t12
	br label %L61
L61:
	%r499 = load %oop, %oop* %t12
	store %oop %r499, %oop* %t11
	br label %L58
L58:
	%r500 = load %oop, %oop* %t11
	store %oop %r500, %oop* %t8
	br label %L52
L52:
	%r501 = load %oop, %oop* %t8
	store %oop %r501, %oop* %t9
	br label %L21
L21:
	%r502 = load %oop, %oop* %t9
	store %oop %r502, %oop* %t7
	br label %L18
L18:
	%r503 = load %oop, %oop* %t7
	store %oop %r503, %oop* %t6
	br label %L6
L6:
	%r504 = load %oop, %oop* %t6
	store %oop %r504, %oop* %t5
	%r506 = getelementptr %oop, %oop* %t4, %word 0
	%r505 = bitcast %oop* %r506 to %oop
	%r507 = call %oop @"m_gc/pop-root.code"(%oop %r505)
	%r508 = load %oop, %oop* %t5
	ret %oop %r508
}
@m_cstr1098 = private unnamed_addr constant [12 x i8] c"expand/pair\00"
@m_ostr1099 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr1098 to %oop) }
@"m_expand/pair" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop, %oop, %oop)* @"m_expand/pair.code" to %oop), %"<string>"* @m_ostr1099 }
define %oop @"m_expand/symbol.code"(%oop %exp, %oop %env, %oop %"one-step?") {
	%t2 = alloca %oop
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	store %oop %exp, %oop* %t0
	store %oop %env, %oop* %t1
	store %oop %"one-step?", %oop* %t2
	%r1 = inttoptr %word 0 to %oop
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = load %oop, %oop* %t1
	%r4 = load %oop, %oop* %t0
	%r5 = call %oop @"m_maybe-form-in-env/symbol.code"(%oop %r3, %oop %r4)
	store %oop %r5, %oop* %t3
	%r6 = load %oop, %oop* %t3
	%r8 = ptrtoint %oop %r6 to %word
	%r7 = icmp ne %word %r8, 0
	br i1 %r7, label %L1, label %L2
L1:
	%r9 = load %oop, %oop* %t1
	%r10 = load %oop, %oop* %t0
	%r11 = call %oop @m_list2.code(%oop %r9, %oop %r10)
	store %oop %r11, %oop* %t5
	%r13 = getelementptr %oop, %oop* %t5, %word 0
	%r12 = bitcast %oop* %r13 to %oop
	%r14 = call %oop @"m_gc/push-root.code"(%oop %r12)
	%r15 = load %oop, %oop* %t3
	%r16 = load %oop, %oop* %t5
	%r17 = inttoptr %word 0 to %oop
	%r18 = call %oop @m_apply.code(%oop %r15, %oop %r16, %oop %r17)
	store %oop %r18, %oop* %t6
	%r20 = getelementptr %oop, %oop* %t6, %word 0
	%r19 = bitcast %oop* %r20 to %oop
	%r21 = call %oop @"m_gc/push-root.code"(%oop %r19)
	%r22 = inttoptr %word 0 to %oop
	%r23 = load %oop, %oop* %t2
	%r25 = ptrtoint %oop %r23 to %word
	%r24 = icmp ne %word %r25, 0
	br i1 %r24, label %L4, label %L5
L4:
	%r26 = load %oop, %oop* %t6
	store %oop %r26, %oop* %t7
	br label %L6
L5:
	%r27 = load %oop, %oop* %t6
	%r28 = load %oop, %oop* %t1
	%r29 = load %oop, %oop* %t2
	%r30 = call %oop @m_expand.code(%oop %r27, %oop %r28, %oop %r29)
	store %oop %r30, %oop* %t7
	br label %L6
L6:
	%r31 = load %oop, %oop* %t7
	store %oop %r31, %oop* %t7
	%r33 = getelementptr %oop, %oop* %t6, %word 0
	%r32 = bitcast %oop* %r33 to %oop
	%r34 = call %oop @"m_gc/pop-root.code"(%oop %r32)
	%r35 = load %oop, %oop* %t7
	store %oop %r35, %oop* %t6
	%r37 = getelementptr %oop, %oop* %t5, %word 0
	%r36 = bitcast %oop* %r37 to %oop
	%r38 = call %oop @"m_gc/pop-root.code"(%oop %r36)
	%r39 = load %oop, %oop* %t6
	store %oop %r39, %oop* %t4
	br label %L3
L2:
	%r40 = load %oop, %oop* %t0
	store %oop %r40, %oop* %t4
	br label %L3
L3:
	%r41 = load %oop, %oop* %t4
	ret %oop %r41
}
@m_cstr1100 = private unnamed_addr constant [14 x i8] c"expand/symbol\00"
@m_ostr1101 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr1100 to %oop) }
@"m_expand/symbol" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop, %oop)* @"m_expand/symbol.code" to %oop), %"<string>"* @m_ostr1101 }
@m_cstr1102 = private unnamed_addr constant [7 x i8] c"expand\00"
@m_ostr1103 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1102 to %oop) }
@m_cstr1104 = private unnamed_addr constant [7 x i8] c"expand\00"
@m_ostr1105 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1104 to %oop) }
@m_cstr1106 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1107 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1106 to %oop) }
@m_cstr1108 = private unnamed_addr constant [4 x i8] c"env\00"
@m_ostr1109 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr1108 to %oop) }
@m_cstr1110 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1111 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1110 to %oop) }
@m_cstr1112 = private unnamed_addr constant [6 x i8] c"<env>\00"
@m_ostr1113 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr1112 to %oop) }
@m_cstr1114 = private unnamed_addr constant [7 x i8] c"expand\00"
@m_ostr1115 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1114 to %oop) }
@m_cstr1116 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1117 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1116 to %oop) }
@m_cstr1118 = private unnamed_addr constant [10 x i8] c"one-step?\00"
@m_ostr1119 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 19, %oop bitcast ([10 x i8]* @m_cstr1118 to %oop) }
@m_cstr1120 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1121 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1120 to %oop) }
@m_cstr1122 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr1123 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1122 to %oop) }
@m_cstr1124 = private unnamed_addr constant [7 x i8] c"expand\00"
@m_ostr1125 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1124 to %oop) }
define %oop @"m_expand/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t5 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = inttoptr %word 0 to %oop
	store %oop %r4, %oop* %t5
	%r5 = load %oop, %oop* %t2
	%r6 = call %oop @"m_pair?.code"(%oop %r5)
	%r8 = ptrtoint %oop %r6 to %word
	%r7 = icmp ne %word %r8, 0
	br i1 %r7, label %L1, label %L2
L1:
	%r9 = inttoptr %word 0 to %oop
	%r10 = load %oop, %oop* %t2
	%r14 = bitcast %oop %r10 to [0 x %oop]*
	%r13 = ptrtoint %oop %r9 to %word
	%r12 = getelementptr [0 x %oop], [0 x %oop]* %r14, %word 0, %word %r13
	%r11 = load %oop, %oop* %r12
	store %oop %r11, %oop* %t3
	%r15 = inttoptr %word 1 to %oop
	%r16 = load %oop, %oop* %t2
	%r20 = bitcast %oop %r16 to [0 x %oop]*
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = getelementptr [0 x %oop], [0 x %oop]* %r20, %word 0, %word %r19
	%r17 = load %oop, %oop* %r18
	store %oop %r17, %oop* %t2
	store %oop %r17, %oop* %t6
	br label %L3
L2:
	%r21 = getelementptr %"<string>", %"<string>"* @m_ostr1103, i32 0, i32 1
	%r22 = bitcast %word* %r21 to %oop
	%r23 = load %oop, %oop* %t0
	%r24 = call %oop @"m_%not-enough-arguments.code"(%oop %r22, %oop %r23)
	store %oop %r24, %oop* %t6
	br label %L3
L3:
	%r25 = load %oop, %oop* %t6
	%r26 = load %oop, %oop* %t2
	%r27 = call %oop @"m_pair?.code"(%oop %r26)
	%r29 = ptrtoint %oop %r27 to %word
	%r28 = icmp ne %word %r29, 0
	br i1 %r28, label %L4, label %L5
L4:
	%r30 = inttoptr %word 0 to %oop
	%r31 = load %oop, %oop* %t2
	%r35 = bitcast %oop %r31 to [0 x %oop]*
	%r34 = ptrtoint %oop %r30 to %word
	%r33 = getelementptr [0 x %oop], [0 x %oop]* %r35, %word 0, %word %r34
	%r32 = load %oop, %oop* %r33
	store %oop %r32, %oop* %t4
	%r36 = inttoptr %word 0 to %oop
	store %oop %r36, %oop* %t7
	%r37 = load %oop, %oop* %t4
	%r38 = call %oop @m_type-of.code(%oop %r37)
	%r39 = inttoptr %word 17 to %oop
	%r43 = ptrtoint %oop %r39 to %word
	%r42 = ptrtoint %oop %r38 to %word
	%r41 = icmp eq %word %r43, %r42
	%r40 = inttoptr i1 %r41 to %oop
	store %oop %r40, %oop* %t7
	%r44 = inttoptr %word 0 to %oop
	%r48 = ptrtoint %oop %r44 to %word
	%r47 = ptrtoint %oop %r40 to %word
	%r46 = icmp eq %word %r48, %r47
	%r45 = inttoptr i1 %r46 to %oop
	%r50 = ptrtoint %oop %r45 to %word
	%r49 = icmp ne %word %r50, 0
	br i1 %r49, label %L8, label %L7
L8:
	%r51 = call %oop @m_error-prologue.code()
	%r52 = getelementptr %"<string>", %"<string>"* @m_ostr1105, i32 0, i32 1
	%r53 = bitcast %word* %r52 to %oop
	%r54 = call %oop @"m_%error.code"(%oop %r53)
	%r55 = getelementptr %"<string>", %"<string>"* @m_ostr1107, i32 0, i32 1
	%r56 = bitcast %word* %r55 to %oop
	%r57 = call %oop @"m_%error.code"(%oop %r56)
	%r58 = getelementptr %"<string>", %"<string>"* @m_ostr1109, i32 0, i32 1
	%r59 = bitcast %word* %r58 to %oop
	%r60 = call %oop @"m_%error.code"(%oop %r59)
	%r61 = getelementptr %"<string>", %"<string>"* @m_ostr1111, i32 0, i32 1
	%r62 = bitcast %word* %r61 to %oop
	%r63 = call %oop @"m_%error.code"(%oop %r62)
	%r64 = getelementptr %"<string>", %"<string>"* @m_ostr1113, i32 0, i32 1
	%r65 = bitcast %word* %r64 to %oop
	%r66 = call %oop @"m_%error.code"(%oop %r65)
	%r67 = call %oop @m_error-epilogue.code()
	store %oop %r67, %oop* %t7
	%r68 = inttoptr %word 0 to %oop
	%r72 = ptrtoint %oop %r68 to %word
	%r71 = ptrtoint %oop %r67 to %word
	%r70 = icmp eq %word %r72, %r71
	%r69 = inttoptr i1 %r70 to %oop
	%r74 = ptrtoint %oop %r69 to %word
	%r73 = icmp ne %word %r74, 0
	br i1 %r73, label %L9, label %L7
L9:
	br label %L7
L7:
	%r75 = load %oop, %oop* %t7
	%r76 = inttoptr %word 1 to %oop
	%r77 = load %oop, %oop* %t2
	%r81 = bitcast %oop %r77 to [0 x %oop]*
	%r80 = ptrtoint %oop %r76 to %word
	%r79 = getelementptr [0 x %oop], [0 x %oop]* %r81, %word 0, %word %r80
	%r78 = load %oop, %oop* %r79
	store %oop %r78, %oop* %t2
	store %oop %r78, %oop* %t6
	br label %L6
L5:
	%r82 = inttoptr %word 1 to %oop
	%r83 = load %oop, %oop* %t1
	%r87 = bitcast %oop %r83 to [0 x %oop]*
	%r86 = ptrtoint %oop %r82 to %word
	%r85 = getelementptr [0 x %oop], [0 x %oop]* %r87, %word 0, %word %r86
	%r84 = load %oop, %oop* %r85
	store %oop %r84, %oop* %t4
	store %oop %r84, %oop* %t6
	br label %L6
L6:
	%r88 = load %oop, %oop* %t6
	%r89 = load %oop, %oop* %t2
	%r90 = call %oop @"m_pair?.code"(%oop %r89)
	%r92 = ptrtoint %oop %r90 to %word
	%r91 = icmp ne %word %r92, 0
	br i1 %r91, label %L10, label %L11
L10:
	%r93 = inttoptr %word 0 to %oop
	%r94 = load %oop, %oop* %t2
	%r98 = bitcast %oop %r94 to [0 x %oop]*
	%r97 = ptrtoint %oop %r93 to %word
	%r96 = getelementptr [0 x %oop], [0 x %oop]* %r98, %word 0, %word %r97
	%r95 = load %oop, %oop* %r96
	store %oop %r95, %oop* %t5
	%r99 = inttoptr %word 0 to %oop
	store %oop %r99, %oop* %t7
	%r100 = load %oop, %oop* %t5
	%r101 = call %oop @"m_long?.code"(%oop %r100)
	store %oop %r101, %oop* %t7
	%r102 = inttoptr %word 0 to %oop
	%r106 = ptrtoint %oop %r102 to %word
	%r105 = ptrtoint %oop %r101 to %word
	%r104 = icmp eq %word %r106, %r105
	%r103 = inttoptr i1 %r104 to %oop
	%r108 = ptrtoint %oop %r103 to %word
	%r107 = icmp ne %word %r108, 0
	br i1 %r107, label %L14, label %L13
L14:
	%r109 = call %oop @m_error-prologue.code()
	%r110 = getelementptr %"<string>", %"<string>"* @m_ostr1115, i32 0, i32 1
	%r111 = bitcast %word* %r110 to %oop
	%r112 = call %oop @"m_%error.code"(%oop %r111)
	%r113 = getelementptr %"<string>", %"<string>"* @m_ostr1117, i32 0, i32 1
	%r114 = bitcast %word* %r113 to %oop
	%r115 = call %oop @"m_%error.code"(%oop %r114)
	%r116 = getelementptr %"<string>", %"<string>"* @m_ostr1119, i32 0, i32 1
	%r117 = bitcast %word* %r116 to %oop
	%r118 = call %oop @"m_%error.code"(%oop %r117)
	%r119 = getelementptr %"<string>", %"<string>"* @m_ostr1121, i32 0, i32 1
	%r120 = bitcast %word* %r119 to %oop
	%r121 = call %oop @"m_%error.code"(%oop %r120)
	%r122 = getelementptr %"<string>", %"<string>"* @m_ostr1123, i32 0, i32 1
	%r123 = bitcast %word* %r122 to %oop
	%r124 = call %oop @"m_%error.code"(%oop %r123)
	%r125 = call %oop @m_error-epilogue.code()
	store %oop %r125, %oop* %t7
	%r126 = inttoptr %word 0 to %oop
	%r130 = ptrtoint %oop %r126 to %word
	%r129 = ptrtoint %oop %r125 to %word
	%r128 = icmp eq %word %r130, %r129
	%r127 = inttoptr i1 %r128 to %oop
	%r132 = ptrtoint %oop %r127 to %word
	%r131 = icmp ne %word %r132, 0
	br i1 %r131, label %L15, label %L13
L15:
	br label %L13
L13:
	%r133 = load %oop, %oop* %t7
	%r134 = inttoptr %word 1 to %oop
	%r135 = load %oop, %oop* %t5
	%r139 = ptrtoint %oop %r135 to %word
	%r138 = ptrtoint %oop %r134 to %word
	%r137 = ashr %word %r139, %r138
	%r136 = inttoptr %word %r137 to %oop
	store %oop %r136, %oop* %t5
	%r140 = inttoptr %word 1 to %oop
	%r141 = load %oop, %oop* %t2
	%r145 = bitcast %oop %r141 to [0 x %oop]*
	%r144 = ptrtoint %oop %r140 to %word
	%r143 = getelementptr [0 x %oop], [0 x %oop]* %r145, %word 0, %word %r144
	%r142 = load %oop, %oop* %r143
	store %oop %r142, %oop* %t2
	store %oop %r142, %oop* %t6
	br label %L12
L11:
	%r146 = inttoptr %word 0 to %oop
	store %oop %r146, %oop* %t5
	store %oop %r146, %oop* %t6
	br label %L12
L12:
	%r147 = load %oop, %oop* %t6
	%r148 = load %oop, %oop* %t2
	%r150 = ptrtoint %oop %r148 to %word
	%r149 = icmp ne %word %r150, 0
	br i1 %r149, label %L16, label %L17
L16:
	%r151 = getelementptr %"<string>", %"<string>"* @m_ostr1125, i32 0, i32 1
	%r152 = bitcast %word* %r151 to %oop
	%r153 = load %oop, %oop* %t0
	%r154 = call %oop @"m_%too-many-arguments.code"(%oop %r152, %oop %r153)
	store %oop %r154, %oop* %t6
	br label %L18
L17:
	%r155 = inttoptr %word 0 to %oop
	store %oop %r155, %oop* %t6
	br label %L18
L18:
	%r156 = load %oop, %oop* %t6
	%r157 = load %oop, %oop* %t3
	%r158 = load %oop, %oop* %t4
	%r159 = load %oop, %oop* %t5
	%r160 = call %oop @m_expand.code(%oop %r157, %oop %r158, %oop %r159)
	ret %oop %r160
}
@m_cstr1126 = private unnamed_addr constant [22 x i8] c"expand/evaluator-stub\00"
@m_ostr1127 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 43, %oop bitcast ([22 x i8]* @m_cstr1126 to %oop) }
@"m_expand/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_expand/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1127 }
define %oop @m_encode-all.code(%oop %list, %oop %env) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	store %oop %list, %oop* %t0
	store %oop %env, %oop* %t1
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @"m_pair?.code"(%oop %r1)
	%r4 = ptrtoint %oop %r2 to %word
	%r3 = icmp ne %word %r4, 0
	br i1 %r3, label %L1, label %L2
L1:
	%r5 = inttoptr %word 0 to %oop
	%r6 = load %oop, %oop* %t0
	%r10 = bitcast %oop %r6 to [0 x %oop]*
	%r9 = ptrtoint %oop %r5 to %word
	%r8 = getelementptr [0 x %oop], [0 x %oop]* %r10, %word 0, %word %r9
	%r7 = load %oop, %oop* %r8
	%r11 = load %oop, %oop* %t1
	%r12 = call %oop @m_encode.code(%oop %r7, %oop %r11)
	store %oop %r12, %oop* %t3
	%r14 = getelementptr %oop, %oop* %t3, %word 0
	%r13 = bitcast %oop* %r14 to %oop
	%r15 = call %oop @"m_gc/push-root.code"(%oop %r13)
	%r16 = inttoptr %word 1 to %oop
	%r17 = load %oop, %oop* %t0
	%r21 = bitcast %oop %r17 to [0 x %oop]*
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = getelementptr [0 x %oop], [0 x %oop]* %r21, %word 0, %word %r20
	%r18 = load %oop, %oop* %r19
	%r22 = load %oop, %oop* %t1
	%r23 = call %oop @m_encode-all.code(%oop %r18, %oop %r22)
	store %oop %r23, %oop* %t4
	%r25 = getelementptr %oop, %oop* %t4, %word 0
	%r24 = bitcast %oop* %r25 to %oop
	%r26 = call %oop @"m_gc/push-root.code"(%oop %r24)
	%r27 = load %oop, %oop* %t3
	%r28 = load %oop, %oop* %t4
	%r29 = call %oop @m_cons.code(%oop %r27, %oop %r28)
	store %oop %r29, %oop* %t5
	%r31 = getelementptr %oop, %oop* %t4, %word 0
	%r30 = bitcast %oop* %r31 to %oop
	%r32 = call %oop @"m_gc/pop-root.code"(%oop %r30)
	%r33 = load %oop, %oop* %t5
	store %oop %r33, %oop* %t4
	%r35 = getelementptr %oop, %oop* %t3, %word 0
	%r34 = bitcast %oop* %r35 to %oop
	%r36 = call %oop @"m_gc/pop-root.code"(%oop %r34)
	%r37 = load %oop, %oop* %t4
	store %oop %r37, %oop* %t2
	br label %L3
L2:
	%r38 = load %oop, %oop* %t0
	%r39 = load %oop, %oop* %t1
	%r40 = call %oop @m_encode.code(%oop %r38, %oop %r39)
	store %oop %r40, %oop* %t2
	br label %L3
L3:
	%r41 = load %oop, %oop* %t2
	ret %oop %r41
}
@m_cstr1128 = private unnamed_addr constant [11 x i8] c"encode-all\00"
@m_ostr1129 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr1128 to %oop) }
@m_encode-all = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @m_encode-all.code to %oop), %"<string>"* @m_ostr1129 }
@m_cstr1130 = private unnamed_addr constant [26 x i8] c"set: undefined variable: \00"
@m_ostr1131 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 51, %oop bitcast ([26 x i8]* @m_cstr1130 to %oop) }
@m_cstr1132 = private unnamed_addr constant [35 x i8] c"encode: malformed SET expression: \00"
@m_ostr1133 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 69, %oop bitcast ([35 x i8]* @m_cstr1132 to %oop) }
@m_cstr1134 = private unnamed_addr constant [49 x i8] c"encode/pair encountered an unexpected set form: \00"
@m_ostr1135 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 97, %oop bitcast ([49 x i8]* @m_cstr1134 to %oop) }
define %oop @"m_encode/pair.code"(%oop %exp, %oop %env) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	%t8 = alloca %oop
	%t9 = alloca %oop
	%t10 = alloca %oop
	%t11 = alloca %oop
	%t12 = alloca %oop
	%t13 = alloca %oop
	%t14 = alloca %oop
	%t15 = alloca %oop
	store %oop %exp, %oop* %t0
	store %oop %env, %oop* %t1
	%r1 = inttoptr %word 0 to %oop
	%r2 = load %oop, %oop* %t0
	%r6 = bitcast %oop %r2 to [0 x %oop]*
	%r5 = ptrtoint %oop %r1 to %word
	%r4 = getelementptr [0 x %oop], [0 x %oop]* %r6, %word 0, %word %r5
	%r3 = load %oop, %oop* %r4
	%r7 = load %oop, %oop* %t1
	%r8 = call %oop @m_encode.code(%oop %r3, %oop %r7)
	store %oop %r8, %oop* %t2
	%r10 = getelementptr %oop, %oop* %t2, %word 0
	%r9 = bitcast %oop* %r10 to %oop
	%r11 = call %oop @"m_gc/push-root.code"(%oop %r9)
	%r12 = inttoptr %word 1 to %oop
	%r13 = load %oop, %oop* %t0
	%r17 = bitcast %oop %r13 to [0 x %oop]*
	%r16 = ptrtoint %oop %r12 to %word
	%r15 = getelementptr [0 x %oop], [0 x %oop]* %r17, %word 0, %word %r16
	%r14 = load %oop, %oop* %r15
	store %oop %r14, %oop* %t3
	%r19 = getelementptr %oop, %oop* %t3, %word 0
	%r18 = bitcast %oop* %r19 to %oop
	%r20 = call %oop @"m_gc/push-root.code"(%oop %r18)
	%r21 = inttoptr %word 0 to %oop
	%r22 = load %oop, %oop* @"m_fixed-primitive-function/let"
	%r23 = load %oop, %oop* %t2
	%r27 = ptrtoint %oop %r23 to %word
	%r26 = ptrtoint %oop %r22 to %word
	%r25 = icmp eq %word %r27, %r26
	%r24 = inttoptr i1 %r25 to %oop
	%r29 = ptrtoint %oop %r24 to %word
	%r28 = icmp ne %word %r29, 0
	br i1 %r28, label %L1, label %L2
L1:
	%r30 = load %oop, %oop* %t3
	%r31 = call %oop @m_first.code(%oop %r30)
	%r32 = call %oop @m_type-of.code(%oop %r31)
	%r33 = inttoptr %word 17 to %oop
	%r37 = ptrtoint %oop %r33 to %word
	%r36 = ptrtoint %oop %r32 to %word
	%r35 = icmp eq %word %r37, %r36
	%r34 = inttoptr i1 %r35 to %oop
	%r39 = ptrtoint %oop %r34 to %word
	%r38 = icmp ne %word %r39, 0
	br i1 %r38, label %L4, label %L5
L4:
	%r40 = inttoptr %word 0 to %oop
	store %oop %r40, %oop* %t5
	br label %L6
L5:
	%r41 = inttoptr %word 0 to %oop
	store %oop %r41, %oop* %t6
	%r43 = getelementptr %oop, %oop* %t6, %word 0
	%r42 = bitcast %oop* %r43 to %oop
	%r44 = call %oop @"m_gc/push-root.code"(%oop %r42)
	%r45 = load %oop, %oop* %t1
	%r46 = inttoptr %word 0 to %oop
	%r47 = inttoptr %word 1 to %oop
	%r48 = inttoptr %word 2 to %oop
	%r49 = load %oop, %oop* %t1
	%r53 = bitcast %oop %r49 to [0 x %oop]*
	%r52 = ptrtoint %oop %r48 to %word
	%r51 = getelementptr [0 x %oop], [0 x %oop]* %r53, %word 0, %word %r52
	%r50 = load %oop, %oop* %r51
	%r57 = ptrtoint %oop %r50 to %word
	%r56 = ptrtoint %oop %r47 to %word
	%r55 = ashr %word %r57, %r56
	%r54 = inttoptr %word %r55 to %oop
	%r58 = call %oop @m_environment.code(%oop %r45, %oop %r46, %oop %r54)
	store %oop %r58, %oop* %t7
	%r60 = getelementptr %oop, %oop* %t7, %word 0
	%r59 = bitcast %oop* %r60 to %oop
	%r61 = call %oop @"m_gc/push-root.code"(%oop %r59)
	%r62 = inttoptr %word 0 to %oop
	store %oop %r62, %oop* %t8
	%r63 = load %oop, %oop* %t3
	%r64 = call %oop @m_first.code(%oop %r63)
	store %oop %r64, %oop* %t9
	br label %L8
L7:
	%r65 = load %oop, %oop* %t9
	%r66 = call %oop @m_car.code(%oop %r65)
	store %oop %r66, %oop* %t10
	%r67 = inttoptr %word 0 to %oop
	%r68 = load %oop, %oop* %t10
	%r69 = call %oop @m_first.code(%oop %r68)
	store %oop %r69, %oop* %t11
	%r70 = load %oop, %oop* %t7
	%r71 = load %oop, %oop* %t11
	%r72 = inttoptr %word 0 to %oop
	%r73 = call %oop @m_environment-define.code(%oop %r70, %oop %r71, %oop %r72)
	store %oop %r73, %oop* %t12
	%r74 = load %oop, %oop* %t6
	%r76 = ptrtoint %oop %r74 to %word
	%r75 = icmp ne %word %r76, 0
	br i1 %r75, label %L10, label %L11
L10:
	%r77 = load %oop, %oop* %t12
	%r78 = inttoptr %word 0 to %oop
	%r79 = call %oop @m_cons.code(%oop %r77, %oop %r78)
	%r80 = inttoptr %word 1 to %oop
	%r81 = load %oop, %oop* %t8
	%r85 = bitcast %oop %r81 to [0 x %oop]*
	%r84 = ptrtoint %oop %r80 to %word
	%r83 = getelementptr [0 x %oop], [0 x %oop]* %r85, %word 0, %word %r84
	store %oop %r79, %oop* %r83
	%r82 = bitcast %oop %r79 to %oop
	store %oop %r82, %oop* %t13
	br label %L12
L11:
	%r86 = load %oop, %oop* %t12
	%r87 = inttoptr %word 0 to %oop
	%r88 = call %oop @m_cons.code(%oop %r86, %oop %r87)
	store %oop %r88, %oop* %t6
	store %oop %r88, %oop* %t13
	br label %L12
L12:
	%r89 = load %oop, %oop* %t13
	store %oop %r89, %oop* %t8
	%r90 = load %oop, %oop* %t9
	%r91 = call %oop @m_cdr.code(%oop %r90)
	store %oop %r91, %oop* %t9
	br label %L8
L8:
	%r92 = load %oop, %oop* %t9
	%r94 = ptrtoint %oop %r92 to %word
	%r93 = icmp ne %word %r94, 0
	br i1 %r93, label %L7, label %L9
L9:
	%r95 = inttoptr %word 2 to %oop
	%r96 = load %oop, %oop* %t7
	%r100 = bitcast %oop %r96 to [0 x %oop]*
	%r99 = ptrtoint %oop %r95 to %word
	%r98 = getelementptr [0 x %oop], [0 x %oop]* %r100, %word 0, %word %r99
	%r97 = load %oop, %oop* %r98
	%r101 = inttoptr %word 2 to %oop
	%r102 = load %oop, %oop* %t1
	%r106 = bitcast %oop %r102 to [0 x %oop]*
	%r105 = ptrtoint %oop %r101 to %word
	%r104 = getelementptr [0 x %oop], [0 x %oop]* %r106, %word 0, %word %r105
	store %oop %r97, %oop* %r104
	%r103 = bitcast %oop %r97 to %oop
	%r107 = inttoptr %word 0 to %oop
	store %oop %r107, %oop* %t8
	%r109 = getelementptr %oop, %oop* %t8, %word 0
	%r108 = bitcast %oop* %r109 to %oop
	%r110 = call %oop @"m_gc/push-root.code"(%oop %r108)
	%r111 = inttoptr %word 0 to %oop
	store %oop %r111, %oop* %t9
	%r113 = getelementptr %oop, %oop* %t9, %word 0
	%r112 = bitcast %oop* %r113 to %oop
	%r114 = call %oop @"m_gc/push-root.code"(%oop %r112)
	%r115 = inttoptr %word 0 to %oop
	store %oop %r115, %oop* %t10
	%r116 = load %oop, %oop* %t3
	%r117 = call %oop @m_first.code(%oop %r116)
	store %oop %r117, %oop* %t11
	br label %L14
L13:
	%r118 = load %oop, %oop* %t11
	%r119 = call %oop @m_car.code(%oop %r118)
	store %oop %r119, %oop* %t12
	%r120 = inttoptr %word 1 to %oop
	%r121 = load %oop, %oop* %t12
	%r125 = bitcast %oop %r121 to [0 x %oop]*
	%r124 = ptrtoint %oop %r120 to %word
	%r123 = getelementptr [0 x %oop], [0 x %oop]* %r125, %word 0, %word %r124
	%r122 = load %oop, %oop* %r123
	%r126 = load %oop, %oop* %t1
	%r127 = call %oop @m_encode-all.code(%oop %r122, %oop %r126)
	store %oop %r127, %oop* %t13
	%r129 = getelementptr %oop, %oop* %t13, %word 0
	%r128 = bitcast %oop* %r129 to %oop
	%r130 = call %oop @"m_gc/push-root.code"(%oop %r128)
	%r131 = load %oop, %oop* %t6
	store %oop %r131, %oop* %t14
	%r132 = load %oop, %oop* %t14
	%r133 = call %oop @m_car.code(%oop %r132)
	store %oop %r133, %oop* %t15
	%r134 = load %oop, %oop* %t14
	%r135 = call %oop @m_cdr.code(%oop %r134)
	store %oop %r135, %oop* %t6
	%r136 = load %oop, %oop* %t15
	%r137 = load %oop, %oop* %t13
	%r138 = call %oop @m_cons.code(%oop %r136, %oop %r137)
	store %oop %r138, %oop* %t14
	%r140 = getelementptr %oop, %oop* %t14, %word 0
	%r139 = bitcast %oop* %r140 to %oop
	%r141 = call %oop @"m_gc/push-root.code"(%oop %r139)
	%r142 = load %oop, %oop* %t9
	%r144 = ptrtoint %oop %r142 to %word
	%r143 = icmp ne %word %r144, 0
	br i1 %r143, label %L16, label %L17
L16:
	%r145 = load %oop, %oop* %t14
	%r146 = inttoptr %word 0 to %oop
	%r147 = call %oop @m_cons.code(%oop %r145, %oop %r146)
	%r148 = inttoptr %word 1 to %oop
	%r149 = load %oop, %oop* %t10
	%r153 = bitcast %oop %r149 to [0 x %oop]*
	%r152 = ptrtoint %oop %r148 to %word
	%r151 = getelementptr [0 x %oop], [0 x %oop]* %r153, %word 0, %word %r152
	store %oop %r147, %oop* %r151
	%r150 = bitcast %oop %r147 to %oop
	store %oop %r150, %oop* %t15
	br label %L18
L17:
	%r154 = load %oop, %oop* %t14
	%r155 = inttoptr %word 0 to %oop
	%r156 = call %oop @m_cons.code(%oop %r154, %oop %r155)
	store %oop %r156, %oop* %t9
	store %oop %r156, %oop* %t15
	br label %L18
L18:
	%r157 = load %oop, %oop* %t15
	store %oop %r157, %oop* %t10
	store %oop %r157, %oop* %t15
	%r159 = getelementptr %oop, %oop* %t14, %word 0
	%r158 = bitcast %oop* %r159 to %oop
	%r160 = call %oop @"m_gc/pop-root.code"(%oop %r158)
	%r161 = load %oop, %oop* %t15
	store %oop %r161, %oop* %t14
	%r163 = getelementptr %oop, %oop* %t13, %word 0
	%r162 = bitcast %oop* %r163 to %oop
	%r164 = call %oop @"m_gc/pop-root.code"(%oop %r162)
	%r165 = load %oop, %oop* %t14
	%r166 = load %oop, %oop* %t11
	%r167 = call %oop @m_cdr.code(%oop %r166)
	store %oop %r167, %oop* %t11
	br label %L14
L14:
	%r168 = load %oop, %oop* %t11
	%r170 = ptrtoint %oop %r168 to %word
	%r169 = icmp ne %word %r170, 0
	br i1 %r169, label %L13, label %L15
L15:
	%r171 = load %oop, %oop* %t3
	%r172 = call %oop @m_cdr.code(%oop %r171)
	%r173 = load %oop, %oop* %t7
	%r174 = call %oop @m_encode-all.code(%oop %r172, %oop %r173)
	store %oop %r174, %oop* %t3
	%r175 = load %oop, %oop* %t9
	%r176 = load %oop, %oop* %t3
	%r177 = call %oop @m_cons.code(%oop %r175, %oop %r176)
	store %oop %r177, %oop* %t3
	%r178 = load %oop, %oop* %t7
	%r179 = load %oop, %oop* %t3
	%r180 = call %oop @m_cons.code(%oop %r178, %oop %r179)
	store %oop %r180, %oop* %t3
	store %oop %r180, %oop* %t10
	%r182 = getelementptr %oop, %oop* %t9, %word 0
	%r181 = bitcast %oop* %r182 to %oop
	%r183 = call %oop @"m_gc/pop-root.code"(%oop %r181)
	%r184 = load %oop, %oop* %t10
	store %oop %r184, %oop* %t9
	%r186 = getelementptr %oop, %oop* %t8, %word 0
	%r185 = bitcast %oop* %r186 to %oop
	%r187 = call %oop @"m_gc/pop-root.code"(%oop %r185)
	%r188 = load %oop, %oop* %t9
	store %oop %r188, %oop* %t8
	%r190 = getelementptr %oop, %oop* %t7, %word 0
	%r189 = bitcast %oop* %r190 to %oop
	%r191 = call %oop @"m_gc/pop-root.code"(%oop %r189)
	%r192 = load %oop, %oop* %t8
	store %oop %r192, %oop* %t7
	%r194 = getelementptr %oop, %oop* %t6, %word 0
	%r193 = bitcast %oop* %r194 to %oop
	%r195 = call %oop @"m_gc/pop-root.code"(%oop %r193)
	%r196 = load %oop, %oop* %t7
	store %oop %r196, %oop* %t5
	br label %L6
L6:
	%r197 = load %oop, %oop* %t5
	store %oop %r197, %oop* %t4
	br label %L3
L2:
	%r198 = load %oop, %oop* @"m_fixed-primitive-function/lambda"
	%r199 = load %oop, %oop* %t2
	%r203 = ptrtoint %oop %r199 to %word
	%r202 = ptrtoint %oop %r198 to %word
	%r201 = icmp eq %word %r203, %r202
	%r200 = inttoptr i1 %r201 to %oop
	%r205 = ptrtoint %oop %r200 to %word
	%r204 = icmp ne %word %r205, 0
	br i1 %r204, label %L19, label %L20
L19:
	%r206 = load %oop, %oop* %t3
	%r207 = call %oop @m_first.code(%oop %r206)
	store %oop %r207, %oop* %t6
	%r208 = load %oop, %oop* %t6
	%r209 = call %oop @m_type-of.code(%oop %r208)
	%r210 = inttoptr %word 17 to %oop
	%r214 = ptrtoint %oop %r210 to %word
	%r213 = ptrtoint %oop %r209 to %word
	%r212 = icmp eq %word %r214, %r213
	%r211 = inttoptr i1 %r212 to %oop
	%r216 = ptrtoint %oop %r211 to %word
	%r215 = icmp ne %word %r216, 0
	br i1 %r215, label %L22, label %L23
L22:
	%r217 = inttoptr %word 0 to %oop
	store %oop %r217, %oop* %t7
	br label %L24
L23:
	%r218 = load %oop, %oop* %t1
	%r219 = inttoptr %word 1 to %oop
	%r220 = inttoptr %word 0 to %oop
	%r221 = call %oop @m_environment.code(%oop %r218, %oop %r219, %oop %r220)
	store %oop %r221, %oop* %t8
	%r223 = getelementptr %oop, %oop* %t8, %word 0
	%r222 = bitcast %oop* %r223 to %oop
	%r224 = call %oop @"m_gc/push-root.code"(%oop %r222)
	br label %L26
L25:
	%r225 = load %oop, %oop* %t8
	%r226 = inttoptr %word 0 to %oop
	%r227 = load %oop, %oop* %t6
	%r231 = bitcast %oop %r227 to [0 x %oop]*
	%r230 = ptrtoint %oop %r226 to %word
	%r229 = getelementptr [0 x %oop], [0 x %oop]* %r231, %word 0, %word %r230
	%r228 = load %oop, %oop* %r229
	%r232 = inttoptr %word 0 to %oop
	%r233 = call %oop @m_environment-define.code(%oop %r225, %oop %r228, %oop %r232)
	%r234 = inttoptr %word 1 to %oop
	%r235 = load %oop, %oop* %t6
	%r239 = bitcast %oop %r235 to [0 x %oop]*
	%r238 = ptrtoint %oop %r234 to %word
	%r237 = getelementptr [0 x %oop], [0 x %oop]* %r239, %word 0, %word %r238
	%r236 = load %oop, %oop* %r237
	store %oop %r236, %oop* %t6
	br label %L26
L26:
	%r240 = load %oop, %oop* %t6
	%r241 = call %oop @"m_pair?.code"(%oop %r240)
	%r243 = ptrtoint %oop %r241 to %word
	%r242 = icmp ne %word %r243, 0
	br i1 %r242, label %L25, label %L27
L27:
	%r244 = load %oop, %oop* %t6
	%r246 = ptrtoint %oop %r244 to %word
	%r245 = icmp ne %word %r246, 0
	br i1 %r245, label %L28, label %L29
L28:
	%r247 = load %oop, %oop* %t8
	%r248 = load %oop, %oop* %t6
	%r249 = inttoptr %word 0 to %oop
	%r250 = call %oop @m_environment-define.code(%oop %r247, %oop %r248, %oop %r249)
	store %oop %r250, %oop* %t9
	br label %L30
L29:
	%r251 = inttoptr %word 0 to %oop
	store %oop %r251, %oop* %t9
	br label %L30
L30:
	%r252 = load %oop, %oop* %t9
	%r253 = load %oop, %oop* %t3
	%r254 = load %oop, %oop* %t8
	%r255 = call %oop @m_encode-all.code(%oop %r253, %oop %r254)
	store %oop %r255, %oop* %t3
	%r256 = load %oop, %oop* %t8
	%r257 = load %oop, %oop* %t3
	%r258 = call %oop @m_cons.code(%oop %r256, %oop %r257)
	store %oop %r258, %oop* %t3
	store %oop %r258, %oop* %t9
	%r260 = getelementptr %oop, %oop* %t8, %word 0
	%r259 = bitcast %oop* %r260 to %oop
	%r261 = call %oop @"m_gc/pop-root.code"(%oop %r259)
	%r262 = load %oop, %oop* %t9
	store %oop %r262, %oop* %t7
	br label %L24
L24:
	%r263 = load %oop, %oop* %t7
	store %oop %r263, %oop* %t5
	br label %L21
L20:
	%r264 = load %oop, %oop* @"m_fixed-primitive-function/define"
	%r265 = load %oop, %oop* %t2
	%r269 = ptrtoint %oop %r265 to %word
	%r268 = ptrtoint %oop %r264 to %word
	%r267 = icmp eq %word %r269, %r268
	%r266 = inttoptr i1 %r267 to %oop
	%r271 = ptrtoint %oop %r266 to %word
	%r270 = icmp ne %word %r271, 0
	br i1 %r270, label %L31, label %L32
L31:
	%r272 = load %oop, %oop* %t3
	%r273 = call %oop @m_first.code(%oop %r272)
	%r274 = call %oop @m_type-of.code(%oop %r273)
	%r275 = inttoptr %word 16 to %oop
	%r279 = ptrtoint %oop %r275 to %word
	%r278 = ptrtoint %oop %r274 to %word
	%r277 = icmp eq %word %r279, %r278
	%r276 = inttoptr i1 %r277 to %oop
	%r281 = ptrtoint %oop %r276 to %word
	%r280 = icmp ne %word %r281, 0
	br i1 %r280, label %L34, label %L35
L34:
	%r282 = inttoptr %word 0 to %oop
	store %oop %r282, %oop* %t7
	br label %L36
L35:
	%r283 = load %oop, %oop* @"m_*module*"
	%r284 = call %oop @m_module-env.code(%oop %r283)
	%r285 = load %oop, %oop* %t3
	%r286 = call %oop @m_first.code(%oop %r285)
	%r287 = inttoptr %word 0 to %oop
	%r288 = call %oop @m_environment-define.code(%oop %r284, %oop %r286, %oop %r287)
	store %oop %r288, %oop* %t8
	%r289 = load %oop, %oop* %t3
	%r290 = call %oop @m_cdr.code(%oop %r289)
	%r291 = load %oop, %oop* %t1
	%r292 = call %oop @m_encode-all.code(%oop %r290, %oop %r291)
	store %oop %r292, %oop* %t3
	%r293 = load %oop, %oop* %t8
	%r294 = load %oop, %oop* %t3
	%r295 = call %oop @m_cons.code(%oop %r293, %oop %r294)
	store %oop %r295, %oop* %t3
	store %oop %r295, %oop* %t7
	br label %L36
L36:
	%r296 = load %oop, %oop* %t7
	store %oop %r296, %oop* %t6
	br label %L33
L32:
	%r297 = load %oop, %oop* @"m_fixed-primitive-function/set"
	%r298 = load %oop, %oop* %t2
	%r302 = ptrtoint %oop %r298 to %word
	%r301 = ptrtoint %oop %r297 to %word
	%r300 = icmp eq %word %r302, %r301
	%r299 = inttoptr i1 %r300 to %oop
	%r304 = ptrtoint %oop %r299 to %word
	%r303 = icmp ne %word %r304, 0
	br i1 %r303, label %L37, label %L38
L37:
	%r305 = load %oop, %oop* %t3
	%r306 = call %oop @m_first.code(%oop %r305)
	store %oop %r306, %oop* %t8
	%r307 = load %oop, %oop* %t8
	%r308 = call %oop @m_type-of.code(%oop %r307)
	%r309 = inttoptr %word 11 to %oop
	%r313 = ptrtoint %oop %r309 to %word
	%r312 = ptrtoint %oop %r308 to %word
	%r311 = icmp eq %word %r313, %r312
	%r310 = inttoptr i1 %r311 to %oop
	%r315 = ptrtoint %oop %r310 to %word
	%r314 = icmp ne %word %r315, 0
	br i1 %r314, label %L40, label %L41
L40:
	%r316 = inttoptr %word 0 to %oop
	store %oop %r316, %oop* %t10
	%r317 = load %oop, %oop* %t3
	%r318 = call %oop @m_first.code(%oop %r317)
	%r319 = load %oop, %oop* %t1
	%r320 = call %oop @"m_defined?.code"(%oop %r318, %oop %r319)
	store %oop %r320, %oop* %t10
	%r321 = inttoptr %word 0 to %oop
	%r325 = ptrtoint %oop %r321 to %word
	%r324 = ptrtoint %oop %r320 to %word
	%r323 = icmp eq %word %r325, %r324
	%r322 = inttoptr i1 %r323 to %oop
	%r327 = ptrtoint %oop %r322 to %word
	%r326 = icmp ne %word %r327, 0
	br i1 %r326, label %L44, label %L43
L44:
	%r328 = call %oop @m_error-prologue.code()
	%r329 = getelementptr %"<string>", %"<string>"* @m_ostr1131, i32 0, i32 1
	%r330 = bitcast %word* %r329 to %oop
	%r331 = call %oop @"m_%error.code"(%oop %r330)
	%r332 = load %oop, %oop* %t3
	%r333 = call %oop @m_first.code(%oop %r332)
	%r334 = call %oop @"m_%error.code"(%oop %r333)
	%r335 = call %oop @m_error-epilogue.code()
	store %oop %r335, %oop* %t10
	%r336 = inttoptr %word 0 to %oop
	%r340 = ptrtoint %oop %r336 to %word
	%r339 = ptrtoint %oop %r335 to %word
	%r338 = icmp eq %word %r340, %r339
	%r337 = inttoptr i1 %r338 to %oop
	%r342 = ptrtoint %oop %r337 to %word
	%r341 = icmp ne %word %r342, 0
	br i1 %r341, label %L45, label %L43
L45:
	br label %L43
L43:
	%r343 = load %oop, %oop* %t10
	store %oop %r343, %oop* %t10
	%r344 = inttoptr %word 0 to %oop
	store %oop %r344, %oop* %t11
	%r345 = inttoptr %word 1 to %oop
	store %oop %r345, %oop* %t12
	%r346 = load %oop, %oop* %t3
	%r347 = call %oop @m_car.code(%oop %r346)
	store %oop %r347, %oop* %t12
	%r348 = inttoptr %word 0 to %oop
	%r352 = ptrtoint %oop %r348 to %word
	%r351 = ptrtoint %oop %r347 to %word
	%r350 = icmp eq %word %r352, %r351
	%r349 = inttoptr i1 %r350 to %oop
	%r354 = ptrtoint %oop %r349 to %word
	%r353 = icmp ne %word %r354, 0
	br i1 %r353, label %L47, label %L48
L48:
	%r355 = load %oop, %oop* %t3
	%r356 = call %oop @m_cddr.code(%oop %r355)
	%r360 = ptrtoint %oop %r356 to %word
	%r359 = icmp eq %word %r360, 0
	%r358 = zext i1 %r359 to %word
	%r357 = inttoptr %word %r358 to %oop
	store %oop %r357, %oop* %t12
	%r361 = inttoptr %word 0 to %oop
	%r365 = ptrtoint %oop %r361 to %word
	%r364 = ptrtoint %oop %r357 to %word
	%r363 = icmp eq %word %r365, %r364
	%r362 = inttoptr i1 %r363 to %oop
	%r367 = ptrtoint %oop %r362 to %word
	%r366 = icmp ne %word %r367, 0
	br i1 %r366, label %L47, label %L49
L49:
	br label %L47
L47:
	%r368 = load %oop, %oop* %t12
	store %oop %r368, %oop* %t11
	%r369 = inttoptr %word 0 to %oop
	%r373 = ptrtoint %oop %r369 to %word
	%r372 = ptrtoint %oop %r368 to %word
	%r371 = icmp eq %word %r373, %r372
	%r370 = inttoptr i1 %r371 to %oop
	%r375 = ptrtoint %oop %r370 to %word
	%r374 = icmp ne %word %r375, 0
	br i1 %r374, label %L50, label %L46
L50:
	%r376 = call %oop @m_error-prologue.code()
	%r377 = getelementptr %"<string>", %"<string>"* @m_ostr1133, i32 0, i32 1
	%r378 = bitcast %word* %r377 to %oop
	%r379 = call %oop @"m_%error.code"(%oop %r378)
	%r380 = load %oop, %oop* %t0
	%r381 = call %oop @"m_%error.code"(%oop %r380)
	%r382 = call %oop @m_error-epilogue.code()
	store %oop %r382, %oop* %t11
	%r383 = inttoptr %word 0 to %oop
	%r387 = ptrtoint %oop %r383 to %word
	%r386 = ptrtoint %oop %r382 to %word
	%r385 = icmp eq %word %r387, %r386
	%r384 = inttoptr i1 %r385 to %oop
	%r389 = ptrtoint %oop %r384 to %word
	%r388 = icmp ne %word %r389, 0
	br i1 %r388, label %L51, label %L46
L51:
	br label %L46
L46:
	%r390 = load %oop, %oop* %t11
	%r391 = load %oop, %oop* %t3
	%r392 = call %oop @m_cdr.code(%oop %r391)
	%r393 = load %oop, %oop* %t1
	%r394 = call %oop @m_encode-all.code(%oop %r392, %oop %r393)
	store %oop %r394, %oop* %t3
	%r395 = load %oop, %oop* %t10
	%r396 = load %oop, %oop* %t3
	%r397 = call %oop @m_cons.code(%oop %r395, %oop %r396)
	store %oop %r397, %oop* %t3
	store %oop %r397, %oop* %t9
	br label %L42
L41:
	%r398 = load %oop, %oop* %t8
	%r399 = call %oop @m_type-of.code(%oop %r398)
	%r400 = inttoptr %word 16 to %oop
	%r404 = ptrtoint %oop %r400 to %word
	%r403 = ptrtoint %oop %r399 to %word
	%r402 = icmp eq %word %r404, %r403
	%r401 = inttoptr i1 %r402 to %oop
	%r406 = ptrtoint %oop %r401 to %word
	%r405 = icmp ne %word %r406, 0
	br i1 %r405, label %L52, label %L53
L52:
	store %oop %r401, %oop* %t10
	br label %L54
L53:
	%r407 = call %oop @m_error-prologue.code()
	%r408 = getelementptr %"<string>", %"<string>"* @m_ostr1135, i32 0, i32 1
	%r409 = bitcast %word* %r408 to %oop
	%r410 = call %oop @"m_%error.code"(%oop %r409)
	%r411 = load %oop, %oop* %t0
	%r412 = call %oop @"m_%error.code"(%oop %r411)
	%r413 = call %oop @m_error-epilogue.code()
	store %oop %r413, %oop* %t10
	br label %L54
L54:
	%r414 = load %oop, %oop* %t10
	store %oop %r414, %oop* %t9
	br label %L42
L42:
	%r415 = load %oop, %oop* %t9
	store %oop %r415, %oop* %t7
	br label %L39
L38:
	%r416 = load %oop, %oop* @"m_fixed-primitive-function/quote"
	%r417 = load %oop, %oop* %t2
	%r421 = ptrtoint %oop %r417 to %word
	%r420 = ptrtoint %oop %r416 to %word
	%r419 = icmp eq %word %r421, %r420
	%r418 = inttoptr i1 %r419 to %oop
	%r423 = ptrtoint %oop %r418 to %word
	%r422 = icmp ne %word %r423, 0
	br i1 %r422, label %L55, label %L56
L55:
	%r424 = inttoptr %word 0 to %oop
	store %oop %r424, %oop* %t8
	br label %L57
L56:
	%r425 = load %oop, %oop* %t3
	%r426 = load %oop, %oop* %t1
	%r427 = call %oop @m_encode-all.code(%oop %r425, %oop %r426)
	store %oop %r427, %oop* %t3
	store %oop %r427, %oop* %t8
	br label %L57
L57:
	%r428 = load %oop, %oop* %t8
	store %oop %r428, %oop* %t7
	br label %L39
L39:
	%r429 = load %oop, %oop* %t7
	store %oop %r429, %oop* %t6
	br label %L33
L33:
	%r430 = load %oop, %oop* %t6
	store %oop %r430, %oop* %t5
	br label %L21
L21:
	%r431 = load %oop, %oop* %t5
	store %oop %r431, %oop* %t4
	br label %L3
L3:
	%r432 = load %oop, %oop* %t4
	%r433 = load %oop, %oop* %t2
	%r434 = load %oop, %oop* %t3
	%r435 = call %oop @m_cons.code(%oop %r433, %oop %r434)
	store %oop %r435, %oop* %t4
	%r437 = getelementptr %oop, %oop* %t3, %word 0
	%r436 = bitcast %oop* %r437 to %oop
	%r438 = call %oop @"m_gc/pop-root.code"(%oop %r436)
	%r439 = load %oop, %oop* %t4
	store %oop %r439, %oop* %t3
	%r441 = getelementptr %oop, %oop* %t2, %word 0
	%r440 = bitcast %oop* %r441 to %oop
	%r442 = call %oop @"m_gc/pop-root.code"(%oop %r440)
	%r443 = load %oop, %oop* %t3
	ret %oop %r443
}
@m_cstr1136 = private unnamed_addr constant [12 x i8] c"encode/pair\00"
@m_ostr1137 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr1136 to %oop) }
@"m_encode/pair" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_encode/pair.code" to %oop), %"<string>"* @m_ostr1137 }
@m_cstr1138 = private unnamed_addr constant [27 x i8] c"encode/symbol: failed for \00"
@m_ostr1139 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 53, %oop bitcast ([27 x i8]* @m_cstr1138 to %oop) }
@m_cstr1140 = private unnamed_addr constant [18 x i8] c", current module \00"
@m_ostr1141 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1140 to %oop) }
@m_cstr1142 = private unnamed_addr constant [7 x i8] c", env \00"
@m_ostr1143 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1142 to %oop) }
@m_cstr1144 = private unnamed_addr constant [24 x i8] c"kernel assertion failed\00"
@m_ostr1145 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 47, %oop bitcast ([24 x i8]* @m_cstr1144 to %oop) }
define %oop @"m_encode/symbol.code"(%oop %sym, %oop %env) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	store %oop %sym, %oop* %t0
	store %oop %env, %oop* %t1
	%r1 = inttoptr %word 0 to %oop
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t2
	%r3 = load %oop, %oop* %t0
	%r4 = load %oop, %oop* %t1
	%r5 = call %oop @"m_defined?.code"(%oop %r3, %oop %r4)
	store %oop %r5, %oop* %t2
	%r6 = inttoptr %word 0 to %oop
	%r10 = ptrtoint %oop %r6 to %word
	%r9 = ptrtoint %oop %r5 to %word
	%r8 = icmp eq %word %r10, %r9
	%r7 = inttoptr i1 %r8 to %oop
	%r12 = ptrtoint %oop %r7 to %word
	%r11 = icmp ne %word %r12, 0
	br i1 %r11, label %L2, label %L1
L2:
	%r13 = call %oop @m_error-prologue.code()
	%r14 = getelementptr %"<string>", %"<string>"* @m_ostr1139, i32 0, i32 1
	%r15 = bitcast %word* %r14 to %oop
	%r16 = call %oop @"m_%error.code"(%oop %r15)
	%r17 = load %oop, %oop* %t0
	%r18 = call %oop @"m_%error.code"(%oop %r17)
	%r19 = getelementptr %"<string>", %"<string>"* @m_ostr1141, i32 0, i32 1
	%r20 = bitcast %word* %r19 to %oop
	%r21 = call %oop @"m_%error.code"(%oop %r20)
	%r22 = load %oop, %oop* @"m_*module*"
	%r23 = call %oop @"m_%error.code"(%oop %r22)
	%r24 = getelementptr %"<string>", %"<string>"* @m_ostr1143, i32 0, i32 1
	%r25 = bitcast %word* %r24 to %oop
	%r26 = call %oop @"m_%error.code"(%oop %r25)
	%r27 = load %oop, %oop* %t1
	%r28 = call %oop @"m_%error.code"(%oop %r27)
	%r29 = call %oop @m_error-epilogue.code()
	store %oop %r29, %oop* %t2
	%r30 = inttoptr %word 0 to %oop
	%r34 = ptrtoint %oop %r30 to %word
	%r33 = ptrtoint %oop %r29 to %word
	%r32 = icmp eq %word %r34, %r33
	%r31 = inttoptr i1 %r32 to %oop
	%r36 = ptrtoint %oop %r31 to %word
	%r35 = icmp ne %word %r36, 0
	br i1 %r35, label %L3, label %L1
L3:
	br label %L1
L1:
	%r37 = load %oop, %oop* %t2
	store %oop %r37, %oop* %t2
	%r38 = load %oop, %oop* %t2
	%r39 = call %oop @"m_global-variable?.code"(%oop %r38)
	%r41 = ptrtoint %oop %r39 to %word
	%r40 = icmp ne %word %r41, 0
	br i1 %r40, label %L4, label %L5
L4:
	%r42 = inttoptr %word 1 to %oop
	%r43 = load %oop, %oop* %t2
	%r47 = bitcast %oop %r43 to [0 x %oop]*
	%r46 = ptrtoint %oop %r42 to %word
	%r45 = getelementptr [0 x %oop], [0 x %oop]* %r47, %word 0, %word %r46
	%r44 = load %oop, %oop* %r45
	store %oop %r44, %oop* %t4
	%r48 = inttoptr %word 0 to %oop
	store %oop %r48, %oop* %t6
	%r49 = load %oop, %oop* %t4
	%r50 = call %oop @m_type-of.code(%oop %r49)
	%r51 = inttoptr %word 15 to %oop
	%r55 = ptrtoint %oop %r51 to %word
	%r54 = ptrtoint %oop %r50 to %word
	%r53 = icmp eq %word %r55, %r54
	%r52 = inttoptr i1 %r53 to %oop
	store %oop %r52, %oop* %t6
	%r56 = inttoptr %word 0 to %oop
	%r60 = ptrtoint %oop %r56 to %word
	%r59 = ptrtoint %oop %r52 to %word
	%r58 = icmp eq %word %r60, %r59
	%r57 = inttoptr i1 %r58 to %oop
	%r62 = ptrtoint %oop %r57 to %word
	%r61 = icmp ne %word %r62, 0
	br i1 %r61, label %L11, label %L10
L11:
	%r63 = load %oop, %oop* %t4
	%r64 = call %oop @m_type-of.code(%oop %r63)
	%r65 = inttoptr %word 8 to %oop
	%r69 = ptrtoint %oop %r65 to %word
	%r68 = ptrtoint %oop %r64 to %word
	%r67 = icmp eq %word %r69, %r68
	%r66 = inttoptr i1 %r67 to %oop
	store %oop %r66, %oop* %t6
	%r70 = inttoptr %word 0 to %oop
	%r74 = ptrtoint %oop %r70 to %word
	%r73 = ptrtoint %oop %r66 to %word
	%r72 = icmp eq %word %r74, %r73
	%r71 = inttoptr i1 %r72 to %oop
	%r76 = ptrtoint %oop %r71 to %word
	%r75 = icmp ne %word %r76, 0
	br i1 %r75, label %L12, label %L10
L12:
	br label %L10
L10:
	%r77 = load %oop, %oop* %t6
	%r79 = ptrtoint %oop %r77 to %word
	%r78 = icmp ne %word %r79, 0
	br i1 %r78, label %L7, label %L8
L7:
	%r80 = load %oop, %oop* %t4
	ret %oop %r80
	store %oop %r80, %oop* %t5
	br label %L9
L8:
	%r82 = inttoptr %word 0 to %oop
	store %oop %r82, %oop* %t5
	br label %L9
L9:
	%r83 = load %oop, %oop* %t5
	store %oop %r83, %oop* %t3
	br label %L6
L5:
	%r84 = inttoptr %word 2 to %oop
	%r85 = load %oop, %oop* %t2
	%r89 = bitcast %oop %r85 to [0 x %oop]*
	%r88 = ptrtoint %oop %r84 to %word
	%r87 = getelementptr [0 x %oop], [0 x %oop]* %r89, %word 0, %word %r88
	%r86 = load %oop, %oop* %r87
	store %oop %r86, %oop* %t4
	%r90 = inttoptr %word 1 to %oop
	%r91 = inttoptr %word 1 to %oop
	%r92 = load %oop, %oop* %t4
	%r96 = bitcast %oop %r92 to [0 x %oop]*
	%r95 = ptrtoint %oop %r91 to %word
	%r94 = getelementptr [0 x %oop], [0 x %oop]* %r96, %word 0, %word %r95
	%r93 = load %oop, %oop* %r94
	%r100 = ptrtoint %oop %r93 to %word
	%r99 = ptrtoint %oop %r90 to %word
	%r98 = ashr %word %r100, %r99
	%r97 = inttoptr %word %r98 to %oop
	store %oop %r97, %oop* %t5
	%r101 = inttoptr %word 1 to %oop
	%r102 = inttoptr %word 1 to %oop
	%r103 = load %oop, %oop* %t1
	%r107 = bitcast %oop %r103 to [0 x %oop]*
	%r106 = ptrtoint %oop %r102 to %word
	%r105 = getelementptr [0 x %oop], [0 x %oop]* %r107, %word 0, %word %r106
	%r104 = load %oop, %oop* %r105
	%r111 = ptrtoint %oop %r104 to %word
	%r110 = ptrtoint %oop %r101 to %word
	%r109 = ashr %word %r111, %r110
	%r108 = inttoptr %word %r109 to %oop
	store %oop %r108, %oop* %t6
	%r112 = inttoptr %word 0 to %oop
	store %oop %r112, %oop* %t7
	%r113 = load %oop, %oop* %t6
	%r114 = load %oop, %oop* %t5
	%r118 = ptrtoint %oop %r114 to %word
	%r117 = ptrtoint %oop %r113 to %word
	%r116 = icmp sle %word %r118, %r117
	%r115 = inttoptr i1 %r116 to %oop
	store %oop %r115, %oop* %t7
	%r119 = inttoptr %word 0 to %oop
	%r123 = ptrtoint %oop %r119 to %word
	%r122 = ptrtoint %oop %r115 to %word
	%r121 = icmp eq %word %r123, %r122
	%r120 = inttoptr i1 %r121 to %oop
	%r125 = ptrtoint %oop %r120 to %word
	%r124 = icmp ne %word %r125, 0
	br i1 %r124, label %L14, label %L13
L14:
	%r126 = call %oop @m_error-prologue.code()
	%r127 = getelementptr %"<string>", %"<string>"* @m_ostr1145, i32 0, i32 1
	%r128 = bitcast %word* %r127 to %oop
	%r129 = call %oop @"m_%error.code"(%oop %r128)
	%r130 = call %oop @m_error-epilogue.code()
	store %oop %r130, %oop* %t7
	%r131 = inttoptr %word 0 to %oop
	%r135 = ptrtoint %oop %r131 to %word
	%r134 = ptrtoint %oop %r130 to %word
	%r133 = icmp eq %word %r135, %r134
	%r132 = inttoptr i1 %r133 to %oop
	%r137 = ptrtoint %oop %r132 to %word
	%r136 = icmp ne %word %r137, 0
	br i1 %r136, label %L15, label %L13
L15:
	br label %L13
L13:
	%r138 = load %oop, %oop* %t7
	%r139 = load %oop, %oop* %t6
	%r140 = load %oop, %oop* %t5
	%r144 = ptrtoint %oop %r140 to %word
	%r143 = ptrtoint %oop %r139 to %word
	%r142 = icmp slt %word %r144, %r143
	%r141 = inttoptr i1 %r142 to %oop
	%r146 = ptrtoint %oop %r141 to %word
	%r145 = icmp ne %word %r146, 0
	br i1 %r145, label %L16, label %L17
L16:
	%r147 = load %oop, %oop* @"m_symbol/true"
	%r148 = inttoptr %word 4 to %oop
	%r149 = load %oop, %oop* %t4
	%r153 = bitcast %oop %r149 to [0 x %oop]*
	%r152 = ptrtoint %oop %r148 to %word
	%r151 = getelementptr [0 x %oop], [0 x %oop]* %r153, %word 0, %word %r152
	store %oop %r147, %oop* %r151
	%r150 = bitcast %oop %r147 to %oop
	store %oop %r150, %oop* %t7
	br label %L18
L17:
	%r154 = inttoptr %word 0 to %oop
	store %oop %r154, %oop* %t7
	br label %L18
L18:
	%r155 = load %oop, %oop* %t7
	store %oop %r155, %oop* %t3
	br label %L6
L6:
	%r156 = load %oop, %oop* %t3
	%r157 = load %oop, %oop* %t2
	ret %oop %r157
}
@m_cstr1146 = private unnamed_addr constant [14 x i8] c"encode/symbol\00"
@m_ostr1147 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr1146 to %oop) }
@"m_encode/symbol" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_encode/symbol.code" to %oop), %"<string>"* @m_ostr1147 }
@m_cstr1148 = private unnamed_addr constant [7 x i8] c"encode\00"
@m_ostr1149 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1148 to %oop) }
@m_cstr1150 = private unnamed_addr constant [7 x i8] c"encode\00"
@m_ostr1151 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1150 to %oop) }
@m_cstr1152 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1153 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1152 to %oop) }
@m_cstr1154 = private unnamed_addr constant [4 x i8] c"env\00"
@m_ostr1155 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr1154 to %oop) }
@m_cstr1156 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1157 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1156 to %oop) }
@m_cstr1158 = private unnamed_addr constant [6 x i8] c"<env>\00"
@m_ostr1159 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr1158 to %oop) }
@m_cstr1160 = private unnamed_addr constant [7 x i8] c"encode\00"
@m_ostr1161 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1160 to %oop) }
define %oop @"m_encode/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = load %oop, %oop* %t2
	%r5 = call %oop @"m_pair?.code"(%oop %r4)
	%r7 = ptrtoint %oop %r5 to %word
	%r6 = icmp ne %word %r7, 0
	br i1 %r6, label %L1, label %L2
L1:
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t2
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	%r10 = load %oop, %oop* %r11
	store %oop %r10, %oop* %t3
	%r14 = inttoptr %word 1 to %oop
	%r15 = load %oop, %oop* %t2
	%r19 = bitcast %oop %r15 to [0 x %oop]*
	%r18 = ptrtoint %oop %r14 to %word
	%r17 = getelementptr [0 x %oop], [0 x %oop]* %r19, %word 0, %word %r18
	%r16 = load %oop, %oop* %r17
	store %oop %r16, %oop* %t2
	store %oop %r16, %oop* %t5
	br label %L3
L2:
	%r20 = getelementptr %"<string>", %"<string>"* @m_ostr1149, i32 0, i32 1
	%r21 = bitcast %word* %r20 to %oop
	%r22 = load %oop, %oop* %t0
	%r23 = call %oop @"m_%not-enough-arguments.code"(%oop %r21, %oop %r22)
	store %oop %r23, %oop* %t5
	br label %L3
L3:
	%r24 = load %oop, %oop* %t5
	%r25 = load %oop, %oop* %t2
	%r26 = call %oop @"m_pair?.code"(%oop %r25)
	%r28 = ptrtoint %oop %r26 to %word
	%r27 = icmp ne %word %r28, 0
	br i1 %r27, label %L4, label %L5
L4:
	%r29 = inttoptr %word 0 to %oop
	%r30 = load %oop, %oop* %t2
	%r34 = bitcast %oop %r30 to [0 x %oop]*
	%r33 = ptrtoint %oop %r29 to %word
	%r32 = getelementptr [0 x %oop], [0 x %oop]* %r34, %word 0, %word %r33
	%r31 = load %oop, %oop* %r32
	store %oop %r31, %oop* %t4
	%r35 = inttoptr %word 0 to %oop
	store %oop %r35, %oop* %t6
	%r36 = load %oop, %oop* %t4
	%r37 = call %oop @m_type-of.code(%oop %r36)
	%r38 = inttoptr %word 17 to %oop
	%r42 = ptrtoint %oop %r38 to %word
	%r41 = ptrtoint %oop %r37 to %word
	%r40 = icmp eq %word %r42, %r41
	%r39 = inttoptr i1 %r40 to %oop
	store %oop %r39, %oop* %t6
	%r43 = inttoptr %word 0 to %oop
	%r47 = ptrtoint %oop %r43 to %word
	%r46 = ptrtoint %oop %r39 to %word
	%r45 = icmp eq %word %r47, %r46
	%r44 = inttoptr i1 %r45 to %oop
	%r49 = ptrtoint %oop %r44 to %word
	%r48 = icmp ne %word %r49, 0
	br i1 %r48, label %L8, label %L7
L8:
	%r50 = call %oop @m_error-prologue.code()
	%r51 = getelementptr %"<string>", %"<string>"* @m_ostr1151, i32 0, i32 1
	%r52 = bitcast %word* %r51 to %oop
	%r53 = call %oop @"m_%error.code"(%oop %r52)
	%r54 = getelementptr %"<string>", %"<string>"* @m_ostr1153, i32 0, i32 1
	%r55 = bitcast %word* %r54 to %oop
	%r56 = call %oop @"m_%error.code"(%oop %r55)
	%r57 = getelementptr %"<string>", %"<string>"* @m_ostr1155, i32 0, i32 1
	%r58 = bitcast %word* %r57 to %oop
	%r59 = call %oop @"m_%error.code"(%oop %r58)
	%r60 = getelementptr %"<string>", %"<string>"* @m_ostr1157, i32 0, i32 1
	%r61 = bitcast %word* %r60 to %oop
	%r62 = call %oop @"m_%error.code"(%oop %r61)
	%r63 = getelementptr %"<string>", %"<string>"* @m_ostr1159, i32 0, i32 1
	%r64 = bitcast %word* %r63 to %oop
	%r65 = call %oop @"m_%error.code"(%oop %r64)
	%r66 = call %oop @m_error-epilogue.code()
	store %oop %r66, %oop* %t6
	%r67 = inttoptr %word 0 to %oop
	%r71 = ptrtoint %oop %r67 to %word
	%r70 = ptrtoint %oop %r66 to %word
	%r69 = icmp eq %word %r71, %r70
	%r68 = inttoptr i1 %r69 to %oop
	%r73 = ptrtoint %oop %r68 to %word
	%r72 = icmp ne %word %r73, 0
	br i1 %r72, label %L9, label %L7
L9:
	br label %L7
L7:
	%r74 = load %oop, %oop* %t6
	%r75 = inttoptr %word 1 to %oop
	%r76 = load %oop, %oop* %t2
	%r80 = bitcast %oop %r76 to [0 x %oop]*
	%r79 = ptrtoint %oop %r75 to %word
	%r78 = getelementptr [0 x %oop], [0 x %oop]* %r80, %word 0, %word %r79
	%r77 = load %oop, %oop* %r78
	store %oop %r77, %oop* %t2
	store %oop %r77, %oop* %t5
	br label %L6
L5:
	%r81 = inttoptr %word 1 to %oop
	%r82 = load %oop, %oop* %t1
	%r86 = bitcast %oop %r82 to [0 x %oop]*
	%r85 = ptrtoint %oop %r81 to %word
	%r84 = getelementptr [0 x %oop], [0 x %oop]* %r86, %word 0, %word %r85
	%r83 = load %oop, %oop* %r84
	store %oop %r83, %oop* %t4
	store %oop %r83, %oop* %t5
	br label %L6
L6:
	%r87 = load %oop, %oop* %t5
	%r88 = load %oop, %oop* %t2
	%r90 = ptrtoint %oop %r88 to %word
	%r89 = icmp ne %word %r90, 0
	br i1 %r89, label %L10, label %L11
L10:
	%r91 = getelementptr %"<string>", %"<string>"* @m_ostr1161, i32 0, i32 1
	%r92 = bitcast %word* %r91 to %oop
	%r93 = load %oop, %oop* %t0
	%r94 = call %oop @"m_%too-many-arguments.code"(%oop %r92, %oop %r93)
	store %oop %r94, %oop* %t5
	br label %L12
L11:
	%r95 = inttoptr %word 0 to %oop
	store %oop %r95, %oop* %t5
	br label %L12
L12:
	%r96 = load %oop, %oop* %t5
	%r97 = load %oop, %oop* %t3
	%r98 = load %oop, %oop* %t4
	%r99 = call %oop @m_encode.code(%oop %r97, %oop %r98)
	ret %oop %r99
}
@m_cstr1162 = private unnamed_addr constant [22 x i8] c"encode/evaluator-stub\00"
@m_ostr1163 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 43, %oop bitcast ([22 x i8]* @m_cstr1162 to %oop) }
@"m_encode/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_encode/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1163 }
define %oop @m_eval-all.code(%oop %obj, %oop %ctx) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	store %oop %obj, %oop* %t0
	store %oop %ctx, %oop* %t1
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @"m_pair?.code"(%oop %r1)
	%r4 = ptrtoint %oop %r2 to %word
	%r3 = icmp ne %word %r4, 0
	br i1 %r3, label %L1, label %L2
L1:
	%r5 = inttoptr %word 0 to %oop
	%r6 = load %oop, %oop* %t0
	%r10 = bitcast %oop %r6 to [0 x %oop]*
	%r9 = ptrtoint %oop %r5 to %word
	%r8 = getelementptr [0 x %oop], [0 x %oop]* %r10, %word 0, %word %r9
	%r7 = load %oop, %oop* %r8
	%r11 = load %oop, %oop* %t1
	%r12 = call %oop @m_eval.code(%oop %r7, %oop %r11)
	store %oop %r12, %oop* %t3
	%r14 = getelementptr %oop, %oop* %t3, %word 0
	%r13 = bitcast %oop* %r14 to %oop
	%r15 = call %oop @"m_gc/push-root.code"(%oop %r13)
	%r16 = inttoptr %word 1 to %oop
	%r17 = load %oop, %oop* %t0
	%r21 = bitcast %oop %r17 to [0 x %oop]*
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = getelementptr [0 x %oop], [0 x %oop]* %r21, %word 0, %word %r20
	%r18 = load %oop, %oop* %r19
	%r22 = load %oop, %oop* %t1
	%r23 = call %oop @m_eval-all.code(%oop %r18, %oop %r22)
	store %oop %r23, %oop* %t4
	%r25 = getelementptr %oop, %oop* %t4, %word 0
	%r24 = bitcast %oop* %r25 to %oop
	%r26 = call %oop @"m_gc/push-root.code"(%oop %r24)
	%r27 = load %oop, %oop* %t3
	%r28 = load %oop, %oop* %t4
	%r29 = call %oop @m_cons.code(%oop %r27, %oop %r28)
	store %oop %r29, %oop* %t5
	%r31 = getelementptr %oop, %oop* %t4, %word 0
	%r30 = bitcast %oop* %r31 to %oop
	%r32 = call %oop @"m_gc/pop-root.code"(%oop %r30)
	%r33 = load %oop, %oop* %t5
	store %oop %r33, %oop* %t4
	%r35 = getelementptr %oop, %oop* %t3, %word 0
	%r34 = bitcast %oop* %r35 to %oop
	%r36 = call %oop @"m_gc/pop-root.code"(%oop %r34)
	%r37 = load %oop, %oop* %t4
	store %oop %r37, %oop* %t2
	br label %L3
L2:
	%r38 = load %oop, %oop* %t0
	store %oop %r38, %oop* %t2
	br label %L3
L3:
	%r39 = load %oop, %oop* %t2
	ret %oop %r39
}
@m_cstr1164 = private unnamed_addr constant [9 x i8] c"eval-all\00"
@m_ostr1165 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr1164 to %oop) }
@m_eval-all = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @m_eval-all.code to %oop), %"<string>"* @m_ostr1165 }
@m_cstr1166 = private unnamed_addr constant [53 x i8] c"infinite recursion guard triggered at call depth %ld\00"
@m_cstr1167 = private unnamed_addr constant [2 x i8] c"\0A\00"
define %oop @"m_eval/with-call-frame.code"(%oop %type, %oop %exp, %oop %ctx) {
	%t2 = alloca %oop
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	%t8 = alloca %oop
	store %oop %type, %oop* %t0
	store %oop %exp, %oop* %t1
	store %oop %ctx, %oop* %t2
	%r1 = inttoptr %word 0 to %oop
	%r2 = inttoptr %word 0 to %oop
	%r3 = inttoptr %word 0 to %oop
	%r4 = call %oop @"m_%new-call-frame.code"(%oop %r1, %oop %r2, %oop %r3)
	store %oop %r4, %oop* %t3
	%r5 = inttoptr %word 10000 to %oop
	%r6 = inttoptr %word 1 to %oop
	%r7 = load %oop, %oop* @"m_*call-stack-index*"
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = ptrtoint %oop %r6 to %word
	%r9 = add %word %r11, %r10
	%r8 = inttoptr %word %r9 to %oop
	store %oop %r8, %oop* @"m_*call-stack-index*"
	%r15 = ptrtoint %oop %r8 to %word
	%r14 = ptrtoint %oop %r5 to %word
	%r13 = icmp sgt %word %r15, %r14
	%r12 = inttoptr i1 %r13 to %oop
	%r17 = ptrtoint %oop %r12 to %word
	%r16 = icmp ne %word %r17, 0
	br i1 %r16, label %L1, label %L2
L1:
	%r18 = call %oop @m_fatal-prologue.code()
	%r19 = inttoptr %word 1 to %oop
	%r20 = inttoptr %word 2 to %oop
	%r21 = getelementptr [53 x i8], [53 x i8]* @m_cstr1166, %word 0, %word 0
	%r23 = inttoptr %word 52 to %oop
	%r24 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r19, %oop %r20, %oop %r21, %oop %r23)
	%r25 = inttoptr %word 1 to %oop
	%r26 = inttoptr %word 2 to %oop
	%r27 = getelementptr [2 x i8], [2 x i8]* @m_cstr1167, %word 0, %word 0
	%r29 = inttoptr %word 1 to %oop
	%r30 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r25, %oop %r26, %oop %r27, %oop %r29)
	%r31 = call %oop @m_fatal-epilogue.code()
	store %oop %r31, %oop* %t4
	br label %L3
L2:
	%r32 = inttoptr %word 0 to %oop
	store %oop %r32, %oop* %t4
	br label %L3
L3:
	%r33 = load %oop, %oop* %t4
	%r34 = inttoptr %word 20 to %oop
	%r35 = load %oop, %oop* %t0
	%r39 = ptrtoint %oop %r35 to %word
	%r38 = ptrtoint %oop %r34 to %word
	%r37 = icmp eq %word %r39, %r38
	%r36 = inttoptr i1 %r37 to %oop
	%r41 = ptrtoint %oop %r36 to %word
	%r40 = icmp ne %word %r41, 0
	br i1 %r40, label %L4, label %L5
L4:
	%r42 = inttoptr %word 0 to %oop
	%r43 = load %oop, %oop* %t1
	%r47 = bitcast %oop %r43 to [0 x %oop]*
	%r46 = ptrtoint %oop %r42 to %word
	%r45 = getelementptr [0 x %oop], [0 x %oop]* %r47, %word 0, %word %r46
	%r44 = load %oop, %oop* %r45
	%r48 = inttoptr %word 0 to %oop
	%r49 = load %oop, %oop* %t3
	%r53 = bitcast %oop %r49 to [0 x %oop]*
	%r52 = ptrtoint %oop %r48 to %word
	%r51 = getelementptr [0 x %oop], [0 x %oop]* %r53, %word 0, %word %r52
	store %oop %r44, %oop* %r51
	%r50 = bitcast %oop %r44 to %oop
	%r54 = inttoptr %word 1 to %oop
	%r55 = load %oop, %oop* %t1
	%r59 = bitcast %oop %r55 to [0 x %oop]*
	%r58 = ptrtoint %oop %r54 to %word
	%r57 = getelementptr [0 x %oop], [0 x %oop]* %r59, %word 0, %word %r58
	%r56 = load %oop, %oop* %r57
	%r60 = inttoptr %word 2 to %oop
	%r61 = load %oop, %oop* %t3
	%r65 = bitcast %oop %r61 to [0 x %oop]*
	%r64 = ptrtoint %oop %r60 to %word
	%r63 = getelementptr [0 x %oop], [0 x %oop]* %r65, %word 0, %word %r64
	store %oop %r56, %oop* %r63
	%r62 = bitcast %oop %r56 to %oop
	%r66 = inttoptr %word 0 to %oop
	%r67 = load %oop, %oop* %t1
	%r71 = bitcast %oop %r67 to [0 x %oop]*
	%r70 = ptrtoint %oop %r66 to %word
	%r69 = getelementptr [0 x %oop], [0 x %oop]* %r71, %word 0, %word %r70
	%r68 = load %oop, %oop* %r69
	%r72 = load %oop, %oop* %t2
	%r73 = call %oop @m_eval.code(%oop %r68, %oop %r72)
	store %oop %r73, %oop* %t5
	%r75 = getelementptr %oop, %oop* %t5, %word 0
	%r74 = bitcast %oop* %r75 to %oop
	%r76 = call %oop @"m_gc/push-root.code"(%oop %r74)
	%r77 = inttoptr %word 0 to %oop
	%r78 = load %oop, %oop* %t5
	%r79 = inttoptr %word 1 to %oop
	%r80 = load %oop, %oop* %t3
	%r84 = bitcast %oop %r80 to [0 x %oop]*
	%r83 = ptrtoint %oop %r79 to %word
	%r82 = getelementptr [0 x %oop], [0 x %oop]* %r84, %word 0, %word %r83
	store %oop %r78, %oop* %r82
	%r81 = bitcast %oop %r78 to %oop
	%r85 = load %oop, %oop* %t5
	%r86 = call %oop @m_type-of.code(%oop %r85)
	%r87 = inttoptr %word 8 to %oop
	%r91 = ptrtoint %oop %r87 to %word
	%r90 = ptrtoint %oop %r86 to %word
	%r89 = icmp eq %word %r91, %r90
	%r88 = inttoptr i1 %r89 to %oop
	%r93 = ptrtoint %oop %r88 to %word
	%r92 = icmp ne %word %r93, 0
	br i1 %r92, label %L7, label %L8
L7:
	%r94 = inttoptr %word 0 to %oop
	%r95 = load %oop, %oop* %t5
	%r99 = bitcast %oop %r95 to [0 x %oop]*
	%r98 = ptrtoint %oop %r94 to %word
	%r97 = getelementptr [0 x %oop], [0 x %oop]* %r99, %word 0, %word %r98
	%r96 = load %oop, %oop* %r97
	%r100 = inttoptr %word 1 to %oop
	%r101 = load %oop, %oop* %t1
	%r105 = bitcast %oop %r101 to [0 x %oop]*
	%r104 = ptrtoint %oop %r100 to %word
	%r103 = getelementptr [0 x %oop], [0 x %oop]* %r105, %word 0, %word %r104
	%r102 = load %oop, %oop* %r103
	%r106 = load %oop, %oop* %t2
	%r107 = call %oop @m_apply.code(%oop %r96, %oop %r102, %oop %r106)
	store %oop %r107, %oop* %t6
	br label %L9
L8:
	%r108 = inttoptr %word 1 to %oop
	%r109 = load %oop, %oop* %t1
	%r113 = bitcast %oop %r109 to [0 x %oop]*
	%r112 = ptrtoint %oop %r108 to %word
	%r111 = getelementptr [0 x %oop], [0 x %oop]* %r113, %word 0, %word %r112
	%r110 = load %oop, %oop* %r111
	%r114 = load %oop, %oop* %t2
	%r115 = call %oop @m_eval-all.code(%oop %r110, %oop %r114)
	store %oop %r115, %oop* %t7
	%r117 = getelementptr %oop, %oop* %t7, %word 0
	%r116 = bitcast %oop* %r117 to %oop
	%r118 = call %oop @"m_gc/push-root.code"(%oop %r116)
	%r119 = load %oop, %oop* %t7
	%r120 = inttoptr %word 2 to %oop
	%r121 = load %oop, %oop* %t3
	%r125 = bitcast %oop %r121 to [0 x %oop]*
	%r124 = ptrtoint %oop %r120 to %word
	%r123 = getelementptr [0 x %oop], [0 x %oop]* %r125, %word 0, %word %r124
	store %oop %r119, %oop* %r123
	%r122 = bitcast %oop %r119 to %oop
	%r126 = load %oop, %oop* %t5
	%r127 = load %oop, %oop* %t7
	%r128 = load %oop, %oop* %t2
	%r129 = call %oop @m_apply.code(%oop %r126, %oop %r127, %oop %r128)
	store %oop %r129, %oop* %t8
	%r131 = getelementptr %oop, %oop* %t7, %word 0
	%r130 = bitcast %oop* %r131 to %oop
	%r132 = call %oop @"m_gc/pop-root.code"(%oop %r130)
	%r133 = load %oop, %oop* %t8
	store %oop %r133, %oop* %t6
	br label %L9
L9:
	%r134 = load %oop, %oop* %t6
	store %oop %r134, %oop* %t6
	%r136 = getelementptr %oop, %oop* %t5, %word 0
	%r135 = bitcast %oop* %r136 to %oop
	%r137 = call %oop @"m_gc/pop-root.code"(%oop %r135)
	%r138 = load %oop, %oop* %t6
	store %oop %r138, %oop* %t4
	br label %L6
L5:
	%r139 = load %oop, %oop* %t1
	%r140 = inttoptr %word 0 to %oop
	%r141 = load %oop, %oop* %t3
	%r145 = bitcast %oop %r141 to [0 x %oop]*
	%r144 = ptrtoint %oop %r140 to %word
	%r143 = getelementptr [0 x %oop], [0 x %oop]* %r145, %word 0, %word %r144
	store %oop %r139, %oop* %r143
	%r142 = bitcast %oop %r139 to %oop
	%r146 = inttoptr %word 0 to %oop
	store %oop %r146, %oop* %t5
	%r147 = inttoptr %word 1 to %oop
	store %oop %r147, %oop* %t6
	%r148 = load %oop, %oop* @"m_*evaluators-var*"
	store %oop %r148, %oop* %t6
	%r149 = inttoptr %word 0 to %oop
	%r153 = ptrtoint %oop %r149 to %word
	%r152 = ptrtoint %oop %r148 to %word
	%r151 = icmp eq %word %r153, %r152
	%r150 = inttoptr i1 %r151 to %oop
	%r155 = ptrtoint %oop %r150 to %word
	%r154 = icmp ne %word %r155, 0
	br i1 %r154, label %L10, label %L11
L11:
	%r156 = load %oop, %oop* @"m_*evaluators-var*"
	%r157 = inttoptr %word 12 to %oop
	%r158 = call %oop @m_maybe-object-in-variable.code(%oop %r156, %oop %r157)
	store %oop %r158, %oop* %t5
	store %oop %r158, %oop* %t6
	%r159 = inttoptr %word 0 to %oop
	%r163 = ptrtoint %oop %r159 to %word
	%r162 = ptrtoint %oop %r158 to %word
	%r161 = icmp eq %word %r163, %r162
	%r160 = inttoptr i1 %r161 to %oop
	%r165 = ptrtoint %oop %r160 to %word
	%r164 = icmp ne %word %r165, 0
	br i1 %r164, label %L10, label %L12
L12:
	%r166 = load %oop, %oop* %t5
	%r167 = load %oop, %oop* %t0
	%r168 = call %oop @m_array-at.code(%oop %r166, %oop %r167)
	store %oop %r168, %oop* %t6
	%r169 = inttoptr %word 0 to %oop
	%r173 = ptrtoint %oop %r169 to %word
	%r172 = ptrtoint %oop %r168 to %word
	%r171 = icmp eq %word %r173, %r172
	%r170 = inttoptr i1 %r171 to %oop
	%r175 = ptrtoint %oop %r170 to %word
	%r174 = icmp ne %word %r175, 0
	br i1 %r174, label %L10, label %L13
L13:
	br label %L10
L10:
	%r176 = load %oop, %oop* %t6
	store %oop %r176, %oop* %t5
	%r177 = load %oop, %oop* %t5
	%r179 = ptrtoint %oop %r177 to %word
	%r178 = icmp ne %word %r179, 0
	br i1 %r178, label %L14, label %L15
L14:
	%r180 = load %oop, %oop* %t1
	%r181 = inttoptr %word 0 to %oop
	%r182 = call %oop @m_cons.code(%oop %r180, %oop %r181)
	store %oop %r182, %oop* %t7
	%r184 = getelementptr %oop, %oop* %t7, %word 0
	%r183 = bitcast %oop* %r184 to %oop
	%r185 = call %oop @"m_gc/push-root.code"(%oop %r183)
	%r186 = load %oop, %oop* %t5
	%r187 = inttoptr %word 1 to %oop
	%r188 = load %oop, %oop* %t3
	%r192 = bitcast %oop %r188 to [0 x %oop]*
	%r191 = ptrtoint %oop %r187 to %word
	%r190 = getelementptr [0 x %oop], [0 x %oop]* %r192, %word 0, %word %r191
	store %oop %r186, %oop* %r190
	%r189 = bitcast %oop %r186 to %oop
	%r193 = load %oop, %oop* %t7
	%r194 = inttoptr %word 2 to %oop
	%r195 = load %oop, %oop* %t3
	%r199 = bitcast %oop %r195 to [0 x %oop]*
	%r198 = ptrtoint %oop %r194 to %word
	%r197 = getelementptr [0 x %oop], [0 x %oop]* %r199, %word 0, %word %r198
	store %oop %r193, %oop* %r197
	%r196 = bitcast %oop %r193 to %oop
	%r200 = load %oop, %oop* %t5
	%r201 = load %oop, %oop* %t7
	%r202 = load %oop, %oop* %t2
	%r203 = call %oop @m_apply.code(%oop %r200, %oop %r201, %oop %r202)
	store %oop %r203, %oop* %t8
	%r205 = getelementptr %oop, %oop* %t7, %word 0
	%r204 = bitcast %oop* %r205 to %oop
	%r206 = call %oop @"m_gc/pop-root.code"(%oop %r204)
	%r207 = load %oop, %oop* %t8
	store %oop %r207, %oop* %t6
	br label %L16
L15:
	%r208 = load %oop, %oop* %t1
	store %oop %r208, %oop* %t6
	br label %L16
L16:
	%r209 = load %oop, %oop* %t6
	store %oop %r209, %oop* %t4
	br label %L6
L6:
	%r210 = load %oop, %oop* %t4
	store %oop %r210, %oop* %t3
	%r211 = inttoptr %word 1 to %oop
	%r212 = load %oop, %oop* @"m_*call-stack-index*"
	%r216 = ptrtoint %oop %r212 to %word
	%r215 = ptrtoint %oop %r211 to %word
	%r214 = sub %word %r216, %r215
	%r213 = inttoptr %word %r214 to %oop
	store %oop %r213, %oop* @"m_*call-stack-index*"
	%r217 = load %oop, %oop* @"m_*call-stack-index*"
	%r218 = inttoptr %word 0 to %oop
	%r222 = ptrtoint %oop %r218 to %word
	%r221 = ptrtoint %oop %r217 to %word
	%r220 = icmp sle %word %r222, %r221
	%r219 = inttoptr i1 %r220 to %oop
	%r224 = ptrtoint %oop %r219 to %word
	%r223 = icmp ne %word %r224, 0
	br i1 %r223, label %L17, label %L18
L17:
	%r225 = load %oop, %oop* @"m_*call-stack*"
	%r226 = load %oop, %oop* @"m_*call-stack-index*"
	%r227 = call %oop @m_array-at.code(%oop %r225, %oop %r226)
	store %oop %r227, %oop* %t5
	%r228 = inttoptr %word 0 to %oop
	%r229 = inttoptr %word 0 to %oop
	%r230 = load %oop, %oop* %t5
	%r234 = bitcast %oop %r230 to [0 x %oop]*
	%r233 = ptrtoint %oop %r229 to %word
	%r232 = getelementptr [0 x %oop], [0 x %oop]* %r234, %word 0, %word %r233
	store %oop %r228, %oop* %r232
	%r231 = bitcast %oop %r228 to %oop
	%r235 = inttoptr %word 0 to %oop
	%r236 = inttoptr %word 1 to %oop
	%r237 = load %oop, %oop* %t5
	%r241 = bitcast %oop %r237 to [0 x %oop]*
	%r240 = ptrtoint %oop %r236 to %word
	%r239 = getelementptr [0 x %oop], [0 x %oop]* %r241, %word 0, %word %r240
	store %oop %r235, %oop* %r239
	%r238 = bitcast %oop %r235 to %oop
	%r242 = inttoptr %word 0 to %oop
	%r243 = inttoptr %word 2 to %oop
	%r244 = load %oop, %oop* %t5
	%r248 = bitcast %oop %r244 to [0 x %oop]*
	%r247 = ptrtoint %oop %r243 to %word
	%r246 = getelementptr [0 x %oop], [0 x %oop]* %r248, %word 0, %word %r247
	store %oop %r242, %oop* %r246
	%r245 = bitcast %oop %r242 to %oop
	store %oop %r245, %oop* %t4
	br label %L19
L18:
	%r249 = inttoptr %word 0 to %oop
	store %oop %r249, %oop* %t4
	br label %L19
L19:
	%r250 = load %oop, %oop* %t4
	%r251 = load %oop, %oop* %t3
	ret %oop %r251
}
@m_cstr1168 = private unnamed_addr constant [21 x i8] c"eval/with-call-frame\00"
@m_ostr1169 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 41, %oop bitcast ([21 x i8]* @m_cstr1168 to %oop) }
@"m_eval/with-call-frame" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop, %oop)* @"m_eval/with-call-frame.code" to %oop), %"<string>"* @m_ostr1169 }
define %oop @m_expand-encode-eval.code(%oop %form, %oop %env) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	store %oop %form, %oop* %t0
	store %oop %env, %oop* %t1
	%r1 = inttoptr %word 0 to %oop
	%r2 = load %oop, %oop* %t0
	store %oop %r2, %oop* %t2
	%r4 = getelementptr %oop, %oop* %t2, %word 0
	%r3 = bitcast %oop* %r4 to %oop
	%r5 = call %oop @"m_gc/push-root.code"(%oop %r3)
	%r6 = inttoptr %word 0 to %oop
	%r7 = load %oop, %oop* %t1
	%r8 = call %oop @m_base-context.code(%oop %r6, %oop %r7)
	store %oop %r8, %oop* %t3
	%r10 = getelementptr %oop, %oop* %t3, %word 0
	%r9 = bitcast %oop* %r10 to %oop
	%r11 = call %oop @"m_gc/push-root.code"(%oop %r9)
	%r12 = load %oop, %oop* @"m_*verbosity*"
	%r13 = inttoptr %word 2 to %oop
	%r17 = ptrtoint %oop %r13 to %word
	%r16 = ptrtoint %oop %r12 to %word
	%r15 = icmp sle %word %r17, %r16
	%r14 = inttoptr i1 %r15 to %oop
	%r19 = ptrtoint %oop %r14 to %word
	%r18 = icmp ne %word %r19, 0
	br i1 %r18, label %L1, label %L2
L1:
	%r20 = inttoptr %word 0 to %oop
	store %oop %r20, %oop* %t4
	br label %L3
L2:
	%r21 = inttoptr %word 0 to %oop
	store %oop %r21, %oop* %t4
	br label %L3
L3:
	%r22 = load %oop, %oop* %t4
	%r23 = load %oop, %oop* %t2
	%r24 = load %oop, %oop* %t1
	%r25 = inttoptr %word 0 to %oop
	%r26 = call %oop @m_expand.code(%oop %r23, %oop %r24, %oop %r25)
	store %oop %r26, %oop* %t2
	%r27 = load %oop, %oop* @"m_*verbosity*"
	%r28 = inttoptr %word 2 to %oop
	%r32 = ptrtoint %oop %r28 to %word
	%r31 = ptrtoint %oop %r27 to %word
	%r30 = icmp sle %word %r32, %r31
	%r29 = inttoptr i1 %r30 to %oop
	%r34 = ptrtoint %oop %r29 to %word
	%r33 = icmp ne %word %r34, 0
	br i1 %r33, label %L4, label %L5
L4:
	%r35 = inttoptr %word 0 to %oop
	store %oop %r35, %oop* %t4
	br label %L6
L5:
	%r36 = inttoptr %word 0 to %oop
	store %oop %r36, %oop* %t4
	br label %L6
L6:
	%r37 = load %oop, %oop* %t4
	%r38 = load %oop, %oop* %t2
	%r39 = load %oop, %oop* %t1
	%r40 = call %oop @m_encode.code(%oop %r38, %oop %r39)
	store %oop %r40, %oop* %t2
	%r41 = load %oop, %oop* @"m_*verbosity*"
	%r42 = inttoptr %word 2 to %oop
	%r46 = ptrtoint %oop %r42 to %word
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = icmp sle %word %r46, %r45
	%r43 = inttoptr i1 %r44 to %oop
	%r48 = ptrtoint %oop %r43 to %word
	%r47 = icmp ne %word %r48, 0
	br i1 %r47, label %L7, label %L8
L7:
	%r49 = inttoptr %word 0 to %oop
	store %oop %r49, %oop* %t4
	br label %L9
L8:
	%r50 = inttoptr %word 0 to %oop
	store %oop %r50, %oop* %t4
	br label %L9
L9:
	%r51 = load %oop, %oop* %t4
	%r52 = load %oop, %oop* %t2
	%r53 = load %oop, %oop* %t3
	%r54 = call %oop @m_eval.code(%oop %r52, %oop %r53)
	store %oop %r54, %oop* %t2
	%r55 = load %oop, %oop* @"m_*verbosity*"
	%r56 = inttoptr %word 2 to %oop
	%r60 = ptrtoint %oop %r56 to %word
	%r59 = ptrtoint %oop %r55 to %word
	%r58 = icmp sle %word %r60, %r59
	%r57 = inttoptr i1 %r58 to %oop
	%r62 = ptrtoint %oop %r57 to %word
	%r61 = icmp ne %word %r62, 0
	br i1 %r61, label %L10, label %L11
L10:
	%r63 = inttoptr %word 0 to %oop
	store %oop %r63, %oop* %t4
	br label %L12
L11:
	%r64 = inttoptr %word 0 to %oop
	store %oop %r64, %oop* %t4
	br label %L12
L12:
	%r65 = load %oop, %oop* %t4
	%r66 = inttoptr %word 0 to %oop
	%r67 = load %oop, %oop* %t2
	store %oop %r67, %oop* %t4
	%r69 = getelementptr %oop, %oop* %t3, %word 0
	%r68 = bitcast %oop* %r69 to %oop
	%r70 = call %oop @"m_gc/pop-root.code"(%oop %r68)
	%r71 = load %oop, %oop* %t4
	store %oop %r71, %oop* %t3
	%r73 = getelementptr %oop, %oop* %t2, %word 0
	%r72 = bitcast %oop* %r73 to %oop
	%r74 = call %oop @"m_gc/pop-root.code"(%oop %r72)
	%r75 = load %oop, %oop* %t3
	ret %oop %r75
}
@m_cstr1170 = private unnamed_addr constant [19 x i8] c"expand-encode-eval\00"
@m_ostr1171 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 37, %oop bitcast ([19 x i8]* @m_cstr1170 to %oop) }
@m_expand-encode-eval = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @m_expand-encode-eval.code to %oop), %"<string>"* @m_ostr1171 }
define %oop @m_expand-encode-eval-stream.code(%oop %stream) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	store %oop %stream, %oop* %t0
	%r1 = inttoptr %word 0 to %oop
	store %oop %r1, %oop* %t1
	%r3 = getelementptr %oop, %oop* %t1, %word 0
	%r2 = bitcast %oop* %r3 to %oop
	%r4 = call %oop @"m_gc/push-root.code"(%oop %r2)
	%r5 = inttoptr %word 0 to %oop
	store %oop %r5, %oop* %t2
	%r7 = getelementptr %oop, %oop* %t2, %word 0
	%r6 = bitcast %oop* %r7 to %oop
	%r8 = call %oop @"m_gc/push-root.code"(%oop %r6)
	%r9 = inttoptr %word 0 to %oop
	store %oop %r9, %oop* %t3
	%r11 = getelementptr %oop, %oop* %t3, %word 0
	%r10 = bitcast %oop* %r11 to %oop
	%r12 = call %oop @"m_gc/push-root.code"(%oop %r10)
	br label %L2
L1:
	%r13 = load %oop, %oop* @"m_*module*"
	%r14 = call %oop @m_module-env.code(%oop %r13)
	%r15 = inttoptr %word 1 to %oop
	%r16 = inttoptr %word 0 to %oop
	%r17 = call %oop @m_environment.code(%oop %r14, %oop %r15, %oop %r16)
	store %oop %r17, %oop* %t3
	%r18 = load %oop, %oop* %t1
	%r19 = load %oop, %oop* %t3
	%r20 = call %oop @m_expand-encode-eval.code(%oop %r18, %oop %r19)
	store %oop %r20, %oop* %t2
	br label %L2
L2:
	%r21 = load %oop, %oop* %t0
	%r22 = call %oop @m_read.code(%oop %r21)
	store %oop %r22, %oop* %t1
	%r23 = load %oop, %oop* @"m_+end+"
	%r27 = ptrtoint %oop %r23 to %word
	%r26 = ptrtoint %oop %r22 to %word
	%r25 = icmp eq %word %r27, %r26
	%r24 = inttoptr i1 %r25 to %oop
	%r31 = ptrtoint %oop %r24 to %word
	%r30 = icmp eq %word %r31, 0
	%r29 = zext i1 %r30 to %word
	%r28 = inttoptr %word %r29 to %oop
	%r33 = ptrtoint %oop %r28 to %word
	%r32 = icmp ne %word %r33, 0
	br i1 %r32, label %L1, label %L3
L3:
	%r34 = load %oop, %oop* %t2
	store %oop %r34, %oop* %t4
	%r36 = getelementptr %oop, %oop* %t3, %word 0
	%r35 = bitcast %oop* %r36 to %oop
	%r37 = call %oop @"m_gc/pop-root.code"(%oop %r35)
	%r38 = load %oop, %oop* %t4
	store %oop %r38, %oop* %t3
	%r40 = getelementptr %oop, %oop* %t2, %word 0
	%r39 = bitcast %oop* %r40 to %oop
	%r41 = call %oop @"m_gc/pop-root.code"(%oop %r39)
	%r42 = load %oop, %oop* %t3
	store %oop %r42, %oop* %t2
	%r44 = getelementptr %oop, %oop* %t1, %word 0
	%r43 = bitcast %oop* %r44 to %oop
	%r45 = call %oop @"m_gc/pop-root.code"(%oop %r43)
	%r46 = load %oop, %oop* %t2
	ret %oop %r46
}
@m_cstr1172 = private unnamed_addr constant [26 x i8] c"expand-encode-eval-stream\00"
@m_ostr1173 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 51, %oop bitcast ([26 x i8]* @m_cstr1172 to %oop) }
@m_expand-encode-eval-stream = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_expand-encode-eval-stream.code to %oop), %"<string>"* @m_ostr1173 }
define %oop @m_code1174(%oop %env, %oop %name) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	store %oop %env, %oop* %t0
	store %oop %name, %oop* %t1
	%r1 = inttoptr %word 0 to %oop
	%r2 = call %oop @m_array.code(%oop %r1)
	store %oop %r2, %oop* %t2
	%r4 = getelementptr %oop, %oop* %t2, %word 0
	%r3 = bitcast %oop* %r4 to %oop
	%r5 = call %oop @"m_gc/push-root.code"(%oop %r3)
	%r6 = load %oop, %oop* %t2
	%r7 = inttoptr %word 1 to %oop
	%r8 = inttoptr %word 0 to %oop
	store %oop %r8, %oop* %t3
	%r9 = load %oop, %oop* %t1
	%r10 = load %oop, %oop* %t0
	%r11 = call %oop @"m_defined?.code"(%oop %r9, %oop %r10)
	store %oop %r11, %oop* %t3
	%r12 = inttoptr %word 0 to %oop
	%r16 = ptrtoint %oop %r12 to %word
	%r15 = ptrtoint %oop %r11 to %word
	%r14 = icmp eq %word %r16, %r15
	%r13 = inttoptr i1 %r14 to %oop
	%r18 = ptrtoint %oop %r13 to %word
	%r17 = icmp ne %word %r18, 0
	br i1 %r17, label %L2, label %L1
L2:
	%r19 = load %oop, %oop* %t0
	%r20 = load %oop, %oop* %t1
	%r21 = call %oop @m_new-variable.code(%oop %r19, %oop %r20)
	store %oop %r21, %oop* %t3
	%r22 = inttoptr %word 0 to %oop
	%r26 = ptrtoint %oop %r22 to %word
	%r25 = ptrtoint %oop %r21 to %word
	%r24 = icmp eq %word %r26, %r25
	%r23 = inttoptr i1 %r24 to %oop
	%r28 = ptrtoint %oop %r23 to %word
	%r27 = icmp ne %word %r28, 0
	br i1 %r27, label %L3, label %L1
L3:
	br label %L1
L1:
	%r29 = load %oop, %oop* %t3
	%r33 = bitcast %oop %r29 to [0 x %oop]*
	%r32 = ptrtoint %oop %r7 to %word
	%r31 = getelementptr [0 x %oop], [0 x %oop]* %r33, %word 0, %word %r32
	store %oop %r6, %oop* %r31
	%r30 = bitcast %oop %r6 to %oop
	store %oop %r30, %oop* %t3
	%r35 = getelementptr %oop, %oop* %t2, %word 0
	%r34 = bitcast %oop* %r35 to %oop
	%r36 = call %oop @"m_gc/pop-root.code"(%oop %r34)
	%r37 = load %oop, %oop* %t3
	ret %oop %r37
}
@m_oclosure1175 = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @m_code1174 to %oop), %"<string>"* null }
define %oop @m_module.code(%oop %module-name) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	store %oop %module-name, %oop* %t0
	%r1 = inttoptr %word 0 to %oop
	%r2 = inttoptr %word 18 to %oop
	%r3 = inttoptr %word 2 to %oop
	%r4 = call %oop @m_allocate.code(%oop %r2, %oop %r3)
	store %oop %r4, %oop* %t1
	%r6 = getelementptr %oop, %oop* %t1, %word 0
	%r5 = bitcast %oop* %r6 to %oop
	%r7 = call %oop @"m_gc/push-root.code"(%oop %r5)
	%r8 = inttoptr %word 0 to %oop
	%r9 = inttoptr %word 0 to %oop
	%r10 = inttoptr %word 0 to %oop
	%r11 = call %oop @m_environment.code(%oop %r8, %oop %r9, %oop %r10)
	store %oop %r11, %oop* %t2
	%r13 = getelementptr %oop, %oop* %t2, %word 0
	%r12 = bitcast %oop* %r13 to %oop
	%r14 = call %oop @"m_gc/push-root.code"(%oop %r12)
	%r15 = inttoptr %word 0 to %oop
	store %oop %r15, %oop* %t3
	%r17 = getelementptr %oop, %oop* %t3, %word 0
	%r16 = bitcast %oop* %r17 to %oop
	%r18 = call %oop @"m_gc/push-root.code"(%oop %r16)
	%r19 = load %oop, %oop* %t0
	%r20 = inttoptr %word 1 to %oop
	%r21 = load %oop, %oop* %t1
	%r25 = bitcast %oop %r21 to [0 x %oop]*
	%r24 = ptrtoint %oop %r20 to %word
	%r23 = getelementptr [0 x %oop], [0 x %oop]* %r25, %word 0, %word %r24
	store %oop %r19, %oop* %r23
	%r22 = bitcast %oop %r19 to %oop
	%r26 = load %oop, %oop* %t0
	%r27 = inttoptr %word 5 to %oop
	%r28 = load %oop, %oop* %t2
	%r32 = bitcast %oop %r28 to [0 x %oop]*
	%r31 = ptrtoint %oop %r27 to %word
	%r30 = getelementptr [0 x %oop], [0 x %oop]* %r32, %word 0, %word %r31
	store %oop %r26, %oop* %r30
	%r29 = bitcast %oop %r26 to %oop
	%r33 = load %oop, %oop* %t2
	%r34 = inttoptr %word 0 to %oop
	%r35 = load %oop, %oop* %t1
	%r39 = bitcast %oop %r35 to [0 x %oop]*
	%r38 = ptrtoint %oop %r34 to %word
	%r37 = getelementptr [0 x %oop], [0 x %oop]* %r39, %word 0, %word %r38
	store %oop %r33, %oop* %r37
	%r36 = bitcast %oop %r33 to %oop
	%r40 = load %oop, %oop* @"m_*maru-module*"
	%r42 = ptrtoint %oop %r40 to %word
	%r41 = icmp ne %word %r42, 0
	br i1 %r41, label %L1, label %L2
L1:
	%r43 = load %oop, %oop* @"m_*maru-module*"
	%r44 = load %oop, %oop* %t1
	%r45 = inttoptr %word 0 to %oop
	%r46 = call %oop @m_copy-module-bindings.code(%oop %r43, %oop %r44, %oop %r45)
	store %oop %r46, %oop* %t4
	br label %L3
L2:
	%r47 = inttoptr %word 0 to %oop
	store %oop %r47, %oop* %t4
	br label %L3
L3:
	%r48 = load %oop, %oop* %t4
	%r49 = bitcast %"<target-function>"* @m_oclosure1175 to %oop
	store %oop %r49, %oop* %t4
	%r50 = load %oop, %oop* %t2
	%r51 = load %oop, %oop* @"m_symbol/*expanders*"
	%r52 = load %oop, %oop* %t4
	%r53 = bitcast %oop %r52 to %"<target-function>"*
	%r54 = getelementptr %"<target-function>", %"<target-function>"* %r53, i32 0, i32 1
	%r55 = load %oop, %oop* %r54
	%r57 = bitcast %oop %r55 to %oop (%oop, %oop)*
	%r56 = call %oop %r57(%oop %r50, %oop %r51)
	%r58 = load %oop, %oop* %t2
	%r59 = load %oop, %oop* @"m_symbol/*encoders*"
	%r60 = load %oop, %oop* %t4
	%r61 = bitcast %oop %r60 to %"<target-function>"*
	%r62 = getelementptr %"<target-function>", %"<target-function>"* %r61, i32 0, i32 1
	%r63 = load %oop, %oop* %r62
	%r65 = bitcast %oop %r63 to %oop (%oop, %oop)*
	%r64 = call %oop %r65(%oop %r58, %oop %r59)
	%r66 = load %oop, %oop* %t2
	%r67 = load %oop, %oop* @"m_symbol/*evaluators*"
	%r68 = load %oop, %oop* %t4
	%r69 = bitcast %oop %r68 to %"<target-function>"*
	%r70 = getelementptr %"<target-function>", %"<target-function>"* %r69, i32 0, i32 1
	%r71 = load %oop, %oop* %r70
	%r73 = bitcast %oop %r71 to %oop (%oop, %oop)*
	%r72 = call %oop %r73(%oop %r66, %oop %r67)
	%r74 = load %oop, %oop* %t2
	%r75 = load %oop, %oop* @"m_symbol/*applicators*"
	%r76 = load %oop, %oop* %t4
	%r77 = bitcast %oop %r76 to %"<target-function>"*
	%r78 = getelementptr %"<target-function>", %"<target-function>"* %r77, i32 0, i32 1
	%r79 = load %oop, %oop* %r78
	%r81 = bitcast %oop %r79 to %oop (%oop, %oop)*
	%r80 = call %oop %r81(%oop %r74, %oop %r75)
	%r82 = inttoptr %word 0 to %oop
	%r83 = load %oop, %oop* %t1
	store %oop %r83, %oop* %t4
	%r85 = getelementptr %oop, %oop* %t3, %word 0
	%r84 = bitcast %oop* %r85 to %oop
	%r86 = call %oop @"m_gc/pop-root.code"(%oop %r84)
	%r87 = load %oop, %oop* %t4
	store %oop %r87, %oop* %t3
	%r89 = getelementptr %oop, %oop* %t2, %word 0
	%r88 = bitcast %oop* %r89 to %oop
	%r90 = call %oop @"m_gc/pop-root.code"(%oop %r88)
	%r91 = load %oop, %oop* %t3
	store %oop %r91, %oop* %t2
	%r93 = getelementptr %oop, %oop* %t1, %word 0
	%r92 = bitcast %oop* %r93 to %oop
	%r94 = call %oop @"m_gc/pop-root.code"(%oop %r92)
	%r95 = load %oop, %oop* %t2
	ret %oop %r95
}
@m_cstr1176 = private unnamed_addr constant [7 x i8] c"module\00"
@m_ostr1177 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1176 to %oop) }
@m_module = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_module.code to %oop), %"<string>"* @m_ostr1177 }
@m_cstr1178 = private unnamed_addr constant [7 x i8] c"module\00"
@m_ostr1179 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1178 to %oop) }
@m_cstr1180 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1181 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1180 to %oop) }
@m_cstr1182 = private unnamed_addr constant [12 x i8] c"module-name\00"
@m_ostr1183 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr1182 to %oop) }
@m_cstr1184 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1185 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1184 to %oop) }
@m_cstr1186 = private unnamed_addr constant [9 x i8] c"<string>\00"
@m_ostr1187 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr1186 to %oop) }
@m_cstr1188 = private unnamed_addr constant [7 x i8] c"module\00"
@m_ostr1189 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1188 to %oop) }
@m_cstr1190 = private unnamed_addr constant [7 x i8] c"module\00"
@m_ostr1191 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1190 to %oop) }
define %oop @"m_module/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = load %oop, %oop* %t2
	%r4 = call %oop @"m_pair?.code"(%oop %r3)
	%r6 = ptrtoint %oop %r4 to %word
	%r5 = icmp ne %word %r6, 0
	br i1 %r5, label %L1, label %L2
L1:
	%r7 = inttoptr %word 0 to %oop
	%r8 = load %oop, %oop* %t2
	%r12 = bitcast %oop %r8 to [0 x %oop]*
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = getelementptr [0 x %oop], [0 x %oop]* %r12, %word 0, %word %r11
	%r9 = load %oop, %oop* %r10
	store %oop %r9, %oop* %t3
	%r13 = inttoptr %word 0 to %oop
	store %oop %r13, %oop* %t5
	%r14 = load %oop, %oop* %t3
	%r15 = call %oop @"m_string?.code"(%oop %r14)
	store %oop %r15, %oop* %t5
	%r16 = inttoptr %word 0 to %oop
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = icmp eq %word %r20, %r19
	%r17 = inttoptr i1 %r18 to %oop
	%r22 = ptrtoint %oop %r17 to %word
	%r21 = icmp ne %word %r22, 0
	br i1 %r21, label %L5, label %L4
L5:
	%r23 = call %oop @m_error-prologue.code()
	%r24 = getelementptr %"<string>", %"<string>"* @m_ostr1179, i32 0, i32 1
	%r25 = bitcast %word* %r24 to %oop
	%r26 = call %oop @"m_%error.code"(%oop %r25)
	%r27 = getelementptr %"<string>", %"<string>"* @m_ostr1181, i32 0, i32 1
	%r28 = bitcast %word* %r27 to %oop
	%r29 = call %oop @"m_%error.code"(%oop %r28)
	%r30 = getelementptr %"<string>", %"<string>"* @m_ostr1183, i32 0, i32 1
	%r31 = bitcast %word* %r30 to %oop
	%r32 = call %oop @"m_%error.code"(%oop %r31)
	%r33 = getelementptr %"<string>", %"<string>"* @m_ostr1185, i32 0, i32 1
	%r34 = bitcast %word* %r33 to %oop
	%r35 = call %oop @"m_%error.code"(%oop %r34)
	%r36 = getelementptr %"<string>", %"<string>"* @m_ostr1187, i32 0, i32 1
	%r37 = bitcast %word* %r36 to %oop
	%r38 = call %oop @"m_%error.code"(%oop %r37)
	%r39 = call %oop @m_error-epilogue.code()
	store %oop %r39, %oop* %t5
	%r40 = inttoptr %word 0 to %oop
	%r44 = ptrtoint %oop %r40 to %word
	%r43 = ptrtoint %oop %r39 to %word
	%r42 = icmp eq %word %r44, %r43
	%r41 = inttoptr i1 %r42 to %oop
	%r46 = ptrtoint %oop %r41 to %word
	%r45 = icmp ne %word %r46, 0
	br i1 %r45, label %L6, label %L4
L6:
	br label %L4
L4:
	%r47 = load %oop, %oop* %t5
	%r48 = inttoptr %word 1 to %oop
	%r49 = load %oop, %oop* %t2
	%r53 = bitcast %oop %r49 to [0 x %oop]*
	%r52 = ptrtoint %oop %r48 to %word
	%r51 = getelementptr [0 x %oop], [0 x %oop]* %r53, %word 0, %word %r52
	%r50 = load %oop, %oop* %r51
	store %oop %r50, %oop* %t2
	store %oop %r50, %oop* %t4
	br label %L3
L2:
	%r54 = getelementptr %"<string>", %"<string>"* @m_ostr1189, i32 0, i32 1
	%r55 = bitcast %word* %r54 to %oop
	%r56 = load %oop, %oop* %t0
	%r57 = call %oop @"m_%not-enough-arguments.code"(%oop %r55, %oop %r56)
	store %oop %r57, %oop* %t4
	br label %L3
L3:
	%r58 = load %oop, %oop* %t4
	%r59 = load %oop, %oop* %t2
	%r61 = ptrtoint %oop %r59 to %word
	%r60 = icmp ne %word %r61, 0
	br i1 %r60, label %L7, label %L8
L7:
	%r62 = getelementptr %"<string>", %"<string>"* @m_ostr1191, i32 0, i32 1
	%r63 = bitcast %word* %r62 to %oop
	%r64 = load %oop, %oop* %t0
	%r65 = call %oop @"m_%too-many-arguments.code"(%oop %r63, %oop %r64)
	store %oop %r65, %oop* %t4
	br label %L9
L8:
	%r66 = inttoptr %word 0 to %oop
	store %oop %r66, %oop* %t4
	br label %L9
L9:
	%r67 = load %oop, %oop* %t4
	%r68 = load %oop, %oop* %t3
	%r69 = call %oop @m_module.code(%oop %r68)
	ret %oop %r69
}
@m_cstr1192 = private unnamed_addr constant [22 x i8] c"module/evaluator-stub\00"
@m_ostr1193 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 43, %oop bitcast ([22 x i8]* @m_cstr1192 to %oop) }
@"m_module/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_module/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1193 }
@m_cstr1194 = private unnamed_addr constant [32 x i8] c"changing working directory to: \00"
@m_ostr1195 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 63, %oop bitcast ([32 x i8]* @m_cstr1194 to %oop) }
@m_cstr1196 = private unnamed_addr constant [2 x i8] c"\0A\00"
@m_ostr1197 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 3, %oop bitcast ([2 x i8]* @m_cstr1196 to %oop) }
@m_cstr1198 = private unnamed_addr constant [47 x i8] c"set-working-directory: linux/chdir failed for \00"
@m_ostr1199 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 93, %oop bitcast ([47 x i8]* @m_cstr1198 to %oop) }
define %oop @m_set-working-directory.code(%oop %path) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	store %oop %path, %oop* %t0
	%r1 = load %oop, %oop* @"m_*verbosity*"
	%r2 = inttoptr %word 1 to %oop
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = ptrtoint %oop %r1 to %word
	%r4 = icmp sle %word %r6, %r5
	%r3 = inttoptr i1 %r4 to %oop
	%r8 = ptrtoint %oop %r3 to %word
	%r7 = icmp ne %word %r8, 0
	br i1 %r7, label %L1, label %L2
L1:
	%r9 = load %oop, %oop* @"m_*maru-module*"
	%r10 = load %oop, %oop* @"m_symbol/*debug-output*"
	%r11 = call %oop @m_global-variable-value.code(%oop %r9, %oop %r10)
	%r12 = getelementptr %"<string>", %"<string>"* @m_ostr1195, i32 0, i32 1
	%r13 = bitcast %word* %r12 to %oop
	%r14 = inttoptr %word 0 to %oop
	%r15 = call %oop @m_do-print.code(%oop %r11, %oop %r13, %oop %r14)
	%r16 = load %oop, %oop* @"m_*maru-module*"
	%r17 = load %oop, %oop* @"m_symbol/*debug-output*"
	%r18 = call %oop @m_global-variable-value.code(%oop %r16, %oop %r17)
	%r19 = load %oop, %oop* %t0
	%r20 = inttoptr %word 0 to %oop
	%r21 = call %oop @m_do-print.code(%oop %r18, %oop %r19, %oop %r20)
	%r22 = load %oop, %oop* @"m_*maru-module*"
	%r23 = load %oop, %oop* @"m_symbol/*debug-output*"
	%r24 = call %oop @m_global-variable-value.code(%oop %r22, %oop %r23)
	%r25 = getelementptr %"<string>", %"<string>"* @m_ostr1197, i32 0, i32 1
	%r26 = bitcast %word* %r25 to %oop
	%r27 = inttoptr %word 0 to %oop
	%r28 = call %oop @m_do-print.code(%oop %r24, %oop %r26, %oop %r27)
	store %oop %r28, %oop* %t1
	br label %L3
L2:
	%r29 = inttoptr %word 0 to %oop
	store %oop %r29, %oop* %t1
	br label %L3
L3:
	%r30 = load %oop, %oop* %t1
	%r31 = inttoptr %word 80 to %oop
	%r32 = load %oop, %oop* %t0
	%r33 = call %oop @"m_%string->C-string.code"(%oop %r32)
	%r34 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	syscall", 
	"=A,r,r,~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r31, %oop %r33)
	%r35 = inttoptr %word 0 to %oop
	%r39 = ptrtoint %oop %r35 to %word
	%r38 = ptrtoint %oop %r34 to %word
	%r37 = icmp eq %word %r39, %r38
	%r36 = inttoptr i1 %r37 to %oop
	%r41 = ptrtoint %oop %r36 to %word
	%r40 = icmp ne %word %r41, 0
	br i1 %r40, label %L4, label %L5
L4:
	%r42 = inttoptr %word 0 to %oop
	store %oop %r42, %oop* %t1
	br label %L6
L5:
	%r43 = call %oop @m_error-prologue.code()
	%r44 = getelementptr %"<string>", %"<string>"* @m_ostr1199, i32 0, i32 1
	%r45 = bitcast %word* %r44 to %oop
	%r46 = call %oop @"m_%error.code"(%oop %r45)
	%r47 = load %oop, %oop* %t0
	%r48 = call %oop @"m_%error.code"(%oop %r47)
	%r49 = call %oop @m_error-epilogue.code()
	store %oop %r49, %oop* %t1
	br label %L6
L6:
	%r50 = load %oop, %oop* %t1
	ret %oop %r50
}
@m_cstr1200 = private unnamed_addr constant [22 x i8] c"set-working-directory\00"
@m_ostr1201 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 43, %oop bitcast ([22 x i8]* @m_cstr1200 to %oop) }
@m_set-working-directory = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_set-working-directory.code to %oop), %"<string>"* @m_ostr1201 }
@m_cstr1202 = private unnamed_addr constant [22 x i8] c"set-working-directory\00"
@m_ostr1203 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 43, %oop bitcast ([22 x i8]* @m_cstr1202 to %oop) }
@m_cstr1204 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1205 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1204 to %oop) }
@m_cstr1206 = private unnamed_addr constant [5 x i8] c"path\00"
@m_ostr1207 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr1206 to %oop) }
@m_cstr1208 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1209 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1208 to %oop) }
@m_cstr1210 = private unnamed_addr constant [9 x i8] c"<string>\00"
@m_ostr1211 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr1210 to %oop) }
@m_cstr1212 = private unnamed_addr constant [22 x i8] c"set-working-directory\00"
@m_ostr1213 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 43, %oop bitcast ([22 x i8]* @m_cstr1212 to %oop) }
@m_cstr1214 = private unnamed_addr constant [22 x i8] c"set-working-directory\00"
@m_ostr1215 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 43, %oop bitcast ([22 x i8]* @m_cstr1214 to %oop) }
define %oop @"m_set-working-directory/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = load %oop, %oop* %t2
	%r4 = call %oop @"m_pair?.code"(%oop %r3)
	%r6 = ptrtoint %oop %r4 to %word
	%r5 = icmp ne %word %r6, 0
	br i1 %r5, label %L1, label %L2
L1:
	%r7 = inttoptr %word 0 to %oop
	%r8 = load %oop, %oop* %t2
	%r12 = bitcast %oop %r8 to [0 x %oop]*
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = getelementptr [0 x %oop], [0 x %oop]* %r12, %word 0, %word %r11
	%r9 = load %oop, %oop* %r10
	store %oop %r9, %oop* %t3
	%r13 = inttoptr %word 0 to %oop
	store %oop %r13, %oop* %t5
	%r14 = load %oop, %oop* %t3
	%r15 = call %oop @"m_string?.code"(%oop %r14)
	store %oop %r15, %oop* %t5
	%r16 = inttoptr %word 0 to %oop
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = icmp eq %word %r20, %r19
	%r17 = inttoptr i1 %r18 to %oop
	%r22 = ptrtoint %oop %r17 to %word
	%r21 = icmp ne %word %r22, 0
	br i1 %r21, label %L5, label %L4
L5:
	%r23 = call %oop @m_error-prologue.code()
	%r24 = getelementptr %"<string>", %"<string>"* @m_ostr1203, i32 0, i32 1
	%r25 = bitcast %word* %r24 to %oop
	%r26 = call %oop @"m_%error.code"(%oop %r25)
	%r27 = getelementptr %"<string>", %"<string>"* @m_ostr1205, i32 0, i32 1
	%r28 = bitcast %word* %r27 to %oop
	%r29 = call %oop @"m_%error.code"(%oop %r28)
	%r30 = getelementptr %"<string>", %"<string>"* @m_ostr1207, i32 0, i32 1
	%r31 = bitcast %word* %r30 to %oop
	%r32 = call %oop @"m_%error.code"(%oop %r31)
	%r33 = getelementptr %"<string>", %"<string>"* @m_ostr1209, i32 0, i32 1
	%r34 = bitcast %word* %r33 to %oop
	%r35 = call %oop @"m_%error.code"(%oop %r34)
	%r36 = getelementptr %"<string>", %"<string>"* @m_ostr1211, i32 0, i32 1
	%r37 = bitcast %word* %r36 to %oop
	%r38 = call %oop @"m_%error.code"(%oop %r37)
	%r39 = call %oop @m_error-epilogue.code()
	store %oop %r39, %oop* %t5
	%r40 = inttoptr %word 0 to %oop
	%r44 = ptrtoint %oop %r40 to %word
	%r43 = ptrtoint %oop %r39 to %word
	%r42 = icmp eq %word %r44, %r43
	%r41 = inttoptr i1 %r42 to %oop
	%r46 = ptrtoint %oop %r41 to %word
	%r45 = icmp ne %word %r46, 0
	br i1 %r45, label %L6, label %L4
L6:
	br label %L4
L4:
	%r47 = load %oop, %oop* %t5
	%r48 = inttoptr %word 1 to %oop
	%r49 = load %oop, %oop* %t2
	%r53 = bitcast %oop %r49 to [0 x %oop]*
	%r52 = ptrtoint %oop %r48 to %word
	%r51 = getelementptr [0 x %oop], [0 x %oop]* %r53, %word 0, %word %r52
	%r50 = load %oop, %oop* %r51
	store %oop %r50, %oop* %t2
	store %oop %r50, %oop* %t4
	br label %L3
L2:
	%r54 = getelementptr %"<string>", %"<string>"* @m_ostr1213, i32 0, i32 1
	%r55 = bitcast %word* %r54 to %oop
	%r56 = load %oop, %oop* %t0
	%r57 = call %oop @"m_%not-enough-arguments.code"(%oop %r55, %oop %r56)
	store %oop %r57, %oop* %t4
	br label %L3
L3:
	%r58 = load %oop, %oop* %t4
	%r59 = load %oop, %oop* %t2
	%r61 = ptrtoint %oop %r59 to %word
	%r60 = icmp ne %word %r61, 0
	br i1 %r60, label %L7, label %L8
L7:
	%r62 = getelementptr %"<string>", %"<string>"* @m_ostr1215, i32 0, i32 1
	%r63 = bitcast %word* %r62 to %oop
	%r64 = load %oop, %oop* %t0
	%r65 = call %oop @"m_%too-many-arguments.code"(%oop %r63, %oop %r64)
	store %oop %r65, %oop* %t4
	br label %L9
L8:
	%r66 = inttoptr %word 0 to %oop
	store %oop %r66, %oop* %t4
	br label %L9
L9:
	%r67 = load %oop, %oop* %t4
	%r68 = load %oop, %oop* %t3
	%r69 = call %oop @m_set-working-directory.code(%oop %r68)
	ret %oop %r69
}
@m_cstr1216 = private unnamed_addr constant [37 x i8] c"set-working-directory/evaluator-stub\00"
@m_ostr1217 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 73, %oop bitcast ([37 x i8]* @m_cstr1216 to %oop) }
@"m_set-working-directory/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_set-working-directory/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1217 }
@m_cstr1218 = private unnamed_addr constant [2 x i8] c"r\00"
@m_ostr1219 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 3, %oop bitcast ([2 x i8]* @m_cstr1218 to %oop) }
@m_cstr1220 = private unnamed_addr constant [3 x i8] c"rw\00"
@m_ostr1221 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 5, %oop bitcast ([3 x i8]* @m_cstr1220 to %oop) }
@m_cstr1222 = private unnamed_addr constant [28 x i8] c"file-open: unexpected mode \00"
@m_ostr1223 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 55, %oop bitcast ([28 x i8]* @m_cstr1222 to %oop) }
@m_cstr1224 = private unnamed_addr constant [16 x i8] c" while opening \00"
@m_ostr1225 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 31, %oop bitcast ([16 x i8]* @m_cstr1224 to %oop) }
define %oop @m_file-open.code(%oop %path, %oop %mode) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	store %oop %path, %oop* %t0
	store %oop %mode, %oop* %t1
	%r1 = inttoptr %word 2 to %oop
	%r2 = load %oop, %oop* %t0
	%r3 = call %oop @"m_%string->C-string.code"(%oop %r2)
	%r4 = inttoptr %word 0 to %oop
	store %oop %r4, %oop* %t3
	%r5 = load %oop, %oop* %t1
	%r9 = ptrtoint %oop %r5 to %word
	%r8 = icmp eq %word %r9, 0
	%r7 = zext i1 %r8 to %word
	%r6 = inttoptr %word %r7 to %oop
	store %oop %r6, %oop* %t3
	%r10 = inttoptr %word 0 to %oop
	%r14 = ptrtoint %oop %r10 to %word
	%r13 = ptrtoint %oop %r6 to %word
	%r12 = icmp eq %word %r14, %r13
	%r11 = inttoptr i1 %r12 to %oop
	%r16 = ptrtoint %oop %r11 to %word
	%r15 = icmp ne %word %r16, 0
	br i1 %r15, label %L5, label %L4
L5:
	%r17 = load %oop, %oop* %t1
	%r18 = getelementptr %"<string>", %"<string>"* @m_ostr1219, i32 0, i32 1
	%r19 = bitcast %word* %r18 to %oop
	%r20 = call %oop @"m_string=.code"(%oop %r17, %oop %r19)
	store %oop %r20, %oop* %t3
	%r21 = inttoptr %word 0 to %oop
	%r25 = ptrtoint %oop %r21 to %word
	%r24 = ptrtoint %oop %r20 to %word
	%r23 = icmp eq %word %r25, %r24
	%r22 = inttoptr i1 %r23 to %oop
	%r27 = ptrtoint %oop %r22 to %word
	%r26 = icmp ne %word %r27, 0
	br i1 %r26, label %L6, label %L4
L6:
	br label %L4
L4:
	%r28 = load %oop, %oop* %t3
	%r30 = ptrtoint %oop %r28 to %word
	%r29 = icmp ne %word %r30, 0
	br i1 %r29, label %L1, label %L2
L1:
	%r31 = inttoptr %word 64 to %oop
	%r32 = inttoptr %word 0 to %oop
	%r36 = ptrtoint %oop %r32 to %word
	%r35 = ptrtoint %oop %r31 to %word
	%r34 = or %word %r36, %r35
	%r33 = inttoptr %word %r34 to %oop
	store %oop %r33, %oop* %t2
	br label %L3
L2:
	%r37 = load %oop, %oop* %t1
	%r38 = getelementptr %"<string>", %"<string>"* @m_ostr1221, i32 0, i32 1
	%r39 = bitcast %word* %r38 to %oop
	%r40 = call %oop @"m_string=.code"(%oop %r37, %oop %r39)
	%r42 = ptrtoint %oop %r40 to %word
	%r41 = icmp ne %word %r42, 0
	br i1 %r41, label %L7, label %L8
L7:
	%r43 = inttoptr %word 2 to %oop
	store %oop %r43, %oop* %t3
	br label %L9
L8:
	%r44 = call %oop @m_error-prologue.code()
	%r45 = getelementptr %"<string>", %"<string>"* @m_ostr1223, i32 0, i32 1
	%r46 = bitcast %word* %r45 to %oop
	%r47 = call %oop @"m_%error.code"(%oop %r46)
	%r48 = load %oop, %oop* %t1
	%r49 = call %oop @"m_%error.code"(%oop %r48)
	%r50 = getelementptr %"<string>", %"<string>"* @m_ostr1225, i32 0, i32 1
	%r51 = bitcast %word* %r50 to %oop
	%r52 = call %oop @"m_%error.code"(%oop %r51)
	%r53 = load %oop, %oop* %t0
	%r54 = call %oop @"m_%error.code"(%oop %r53)
	%r55 = call %oop @m_error-epilogue.code()
	store %oop %r55, %oop* %t3
	br label %L9
L9:
	%r56 = load %oop, %oop* %t3
	store %oop %r56, %oop* %t2
	br label %L3
L3:
	%r57 = load %oop, %oop* %t2
	%r58 = inttoptr %word 420 to %oop
	%r59 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r1, %oop %r3, %oop %r57, %oop %r58)
	store %oop %r59, %oop* %t2
	%r60 = load %oop, %oop* %t2
	%r61 = inttoptr %word 0 to %oop
	%r65 = ptrtoint %oop %r61 to %word
	%r64 = ptrtoint %oop %r60 to %word
	%r63 = icmp sle %word %r65, %r64
	%r62 = inttoptr i1 %r63 to %oop
	%r67 = ptrtoint %oop %r62 to %word
	%r66 = icmp ne %word %r67, 0
	br i1 %r66, label %L10, label %L11
L10:
	%r68 = inttoptr %word 9 to %oop
	%r69 = load %oop, %oop* %t2
	%r70 = call %oop @"m_%allocate-boxed.code"(%oop %r68, %oop %r69)
	store %oop %r70, %oop* %t3
	br label %L12
L11:
	%r71 = inttoptr %word 0 to %oop
	store %oop %r71, %oop* %t3
	br label %L12
L12:
	%r72 = load %oop, %oop* %t3
	ret %oop %r72
}
@m_cstr1226 = private unnamed_addr constant [10 x i8] c"file-open\00"
@m_ostr1227 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 19, %oop bitcast ([10 x i8]* @m_cstr1226 to %oop) }
@m_file-open = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @m_file-open.code to %oop), %"<string>"* @m_ostr1227 }
@m_cstr1228 = private unnamed_addr constant [10 x i8] c"file-open\00"
@m_ostr1229 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 19, %oop bitcast ([10 x i8]* @m_cstr1228 to %oop) }
@m_cstr1230 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1231 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1230 to %oop) }
@m_cstr1232 = private unnamed_addr constant [5 x i8] c"path\00"
@m_ostr1233 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr1232 to %oop) }
@m_cstr1234 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1235 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1234 to %oop) }
@m_cstr1236 = private unnamed_addr constant [9 x i8] c"<string>\00"
@m_ostr1237 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr1236 to %oop) }
@m_cstr1238 = private unnamed_addr constant [10 x i8] c"file-open\00"
@m_ostr1239 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 19, %oop bitcast ([10 x i8]* @m_cstr1238 to %oop) }
@m_cstr1240 = private unnamed_addr constant [10 x i8] c"file-open\00"
@m_ostr1241 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 19, %oop bitcast ([10 x i8]* @m_cstr1240 to %oop) }
@m_cstr1242 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1243 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1242 to %oop) }
@m_cstr1244 = private unnamed_addr constant [5 x i8] c"mode\00"
@m_ostr1245 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr1244 to %oop) }
@m_cstr1246 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1247 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1246 to %oop) }
@m_cstr1248 = private unnamed_addr constant [9 x i8] c"<string>\00"
@m_ostr1249 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr1248 to %oop) }
@m_cstr1250 = private unnamed_addr constant [10 x i8] c"file-open\00"
@m_ostr1251 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 19, %oop bitcast ([10 x i8]* @m_cstr1250 to %oop) }
@m_cstr1252 = private unnamed_addr constant [10 x i8] c"file-open\00"
@m_ostr1253 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 19, %oop bitcast ([10 x i8]* @m_cstr1252 to %oop) }
define %oop @"m_file-open/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = load %oop, %oop* %t2
	%r5 = call %oop @"m_pair?.code"(%oop %r4)
	%r7 = ptrtoint %oop %r5 to %word
	%r6 = icmp ne %word %r7, 0
	br i1 %r6, label %L1, label %L2
L1:
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t2
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	%r10 = load %oop, %oop* %r11
	store %oop %r10, %oop* %t3
	%r14 = inttoptr %word 0 to %oop
	store %oop %r14, %oop* %t6
	%r15 = load %oop, %oop* %t3
	%r16 = call %oop @"m_string?.code"(%oop %r15)
	store %oop %r16, %oop* %t6
	%r17 = inttoptr %word 0 to %oop
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = icmp eq %word %r21, %r20
	%r18 = inttoptr i1 %r19 to %oop
	%r23 = ptrtoint %oop %r18 to %word
	%r22 = icmp ne %word %r23, 0
	br i1 %r22, label %L5, label %L4
L5:
	%r24 = call %oop @m_error-prologue.code()
	%r25 = getelementptr %"<string>", %"<string>"* @m_ostr1229, i32 0, i32 1
	%r26 = bitcast %word* %r25 to %oop
	%r27 = call %oop @"m_%error.code"(%oop %r26)
	%r28 = getelementptr %"<string>", %"<string>"* @m_ostr1231, i32 0, i32 1
	%r29 = bitcast %word* %r28 to %oop
	%r30 = call %oop @"m_%error.code"(%oop %r29)
	%r31 = getelementptr %"<string>", %"<string>"* @m_ostr1233, i32 0, i32 1
	%r32 = bitcast %word* %r31 to %oop
	%r33 = call %oop @"m_%error.code"(%oop %r32)
	%r34 = getelementptr %"<string>", %"<string>"* @m_ostr1235, i32 0, i32 1
	%r35 = bitcast %word* %r34 to %oop
	%r36 = call %oop @"m_%error.code"(%oop %r35)
	%r37 = getelementptr %"<string>", %"<string>"* @m_ostr1237, i32 0, i32 1
	%r38 = bitcast %word* %r37 to %oop
	%r39 = call %oop @"m_%error.code"(%oop %r38)
	%r40 = call %oop @m_error-epilogue.code()
	store %oop %r40, %oop* %t6
	%r41 = inttoptr %word 0 to %oop
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = ptrtoint %oop %r40 to %word
	%r43 = icmp eq %word %r45, %r44
	%r42 = inttoptr i1 %r43 to %oop
	%r47 = ptrtoint %oop %r42 to %word
	%r46 = icmp ne %word %r47, 0
	br i1 %r46, label %L6, label %L4
L6:
	br label %L4
L4:
	%r48 = load %oop, %oop* %t6
	%r49 = inttoptr %word 1 to %oop
	%r50 = load %oop, %oop* %t2
	%r54 = bitcast %oop %r50 to [0 x %oop]*
	%r53 = ptrtoint %oop %r49 to %word
	%r52 = getelementptr [0 x %oop], [0 x %oop]* %r54, %word 0, %word %r53
	%r51 = load %oop, %oop* %r52
	store %oop %r51, %oop* %t2
	store %oop %r51, %oop* %t5
	br label %L3
L2:
	%r55 = getelementptr %"<string>", %"<string>"* @m_ostr1239, i32 0, i32 1
	%r56 = bitcast %word* %r55 to %oop
	%r57 = load %oop, %oop* %t0
	%r58 = call %oop @"m_%not-enough-arguments.code"(%oop %r56, %oop %r57)
	store %oop %r58, %oop* %t5
	br label %L3
L3:
	%r59 = load %oop, %oop* %t5
	%r60 = load %oop, %oop* %t2
	%r61 = call %oop @"m_pair?.code"(%oop %r60)
	%r63 = ptrtoint %oop %r61 to %word
	%r62 = icmp ne %word %r63, 0
	br i1 %r62, label %L7, label %L8
L7:
	%r64 = inttoptr %word 0 to %oop
	%r65 = load %oop, %oop* %t2
	%r69 = bitcast %oop %r65 to [0 x %oop]*
	%r68 = ptrtoint %oop %r64 to %word
	%r67 = getelementptr [0 x %oop], [0 x %oop]* %r69, %word 0, %word %r68
	%r66 = load %oop, %oop* %r67
	store %oop %r66, %oop* %t4
	%r70 = inttoptr %word 0 to %oop
	store %oop %r70, %oop* %t6
	%r71 = load %oop, %oop* %t4
	%r72 = call %oop @"m_string?.code"(%oop %r71)
	store %oop %r72, %oop* %t6
	%r73 = inttoptr %word 0 to %oop
	%r77 = ptrtoint %oop %r73 to %word
	%r76 = ptrtoint %oop %r72 to %word
	%r75 = icmp eq %word %r77, %r76
	%r74 = inttoptr i1 %r75 to %oop
	%r79 = ptrtoint %oop %r74 to %word
	%r78 = icmp ne %word %r79, 0
	br i1 %r78, label %L11, label %L10
L11:
	%r80 = call %oop @m_error-prologue.code()
	%r81 = getelementptr %"<string>", %"<string>"* @m_ostr1241, i32 0, i32 1
	%r82 = bitcast %word* %r81 to %oop
	%r83 = call %oop @"m_%error.code"(%oop %r82)
	%r84 = getelementptr %"<string>", %"<string>"* @m_ostr1243, i32 0, i32 1
	%r85 = bitcast %word* %r84 to %oop
	%r86 = call %oop @"m_%error.code"(%oop %r85)
	%r87 = getelementptr %"<string>", %"<string>"* @m_ostr1245, i32 0, i32 1
	%r88 = bitcast %word* %r87 to %oop
	%r89 = call %oop @"m_%error.code"(%oop %r88)
	%r90 = getelementptr %"<string>", %"<string>"* @m_ostr1247, i32 0, i32 1
	%r91 = bitcast %word* %r90 to %oop
	%r92 = call %oop @"m_%error.code"(%oop %r91)
	%r93 = getelementptr %"<string>", %"<string>"* @m_ostr1249, i32 0, i32 1
	%r94 = bitcast %word* %r93 to %oop
	%r95 = call %oop @"m_%error.code"(%oop %r94)
	%r96 = call %oop @m_error-epilogue.code()
	store %oop %r96, %oop* %t6
	%r97 = inttoptr %word 0 to %oop
	%r101 = ptrtoint %oop %r97 to %word
	%r100 = ptrtoint %oop %r96 to %word
	%r99 = icmp eq %word %r101, %r100
	%r98 = inttoptr i1 %r99 to %oop
	%r103 = ptrtoint %oop %r98 to %word
	%r102 = icmp ne %word %r103, 0
	br i1 %r102, label %L12, label %L10
L12:
	br label %L10
L10:
	%r104 = load %oop, %oop* %t6
	%r105 = inttoptr %word 1 to %oop
	%r106 = load %oop, %oop* %t2
	%r110 = bitcast %oop %r106 to [0 x %oop]*
	%r109 = ptrtoint %oop %r105 to %word
	%r108 = getelementptr [0 x %oop], [0 x %oop]* %r110, %word 0, %word %r109
	%r107 = load %oop, %oop* %r108
	store %oop %r107, %oop* %t2
	store %oop %r107, %oop* %t5
	br label %L9
L8:
	%r111 = getelementptr %"<string>", %"<string>"* @m_ostr1251, i32 0, i32 1
	%r112 = bitcast %word* %r111 to %oop
	%r113 = load %oop, %oop* %t0
	%r114 = call %oop @"m_%not-enough-arguments.code"(%oop %r112, %oop %r113)
	store %oop %r114, %oop* %t5
	br label %L9
L9:
	%r115 = load %oop, %oop* %t5
	%r116 = load %oop, %oop* %t2
	%r118 = ptrtoint %oop %r116 to %word
	%r117 = icmp ne %word %r118, 0
	br i1 %r117, label %L13, label %L14
L13:
	%r119 = getelementptr %"<string>", %"<string>"* @m_ostr1253, i32 0, i32 1
	%r120 = bitcast %word* %r119 to %oop
	%r121 = load %oop, %oop* %t0
	%r122 = call %oop @"m_%too-many-arguments.code"(%oop %r120, %oop %r121)
	store %oop %r122, %oop* %t5
	br label %L15
L14:
	%r123 = inttoptr %word 0 to %oop
	store %oop %r123, %oop* %t5
	br label %L15
L15:
	%r124 = load %oop, %oop* %t5
	%r125 = load %oop, %oop* %t3
	%r126 = load %oop, %oop* %t4
	%r127 = call %oop @m_file-open.code(%oop %r125, %oop %r126)
	ret %oop %r127
}
@m_cstr1254 = private unnamed_addr constant [25 x i8] c"file-open/evaluator-stub\00"
@m_ostr1255 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 49, %oop bitcast ([25 x i8]* @m_cstr1254 to %oop) }
@"m_file-open/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_file-open/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1255 }
@m_cstr1256 = private unnamed_addr constant [46 x i8] c"file-close: close syscall returned with error\00"
@m_ostr1257 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 91, %oop bitcast ([46 x i8]* @m_cstr1256 to %oop) }
define %oop @m_file-close.code(%oop %fd) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	store %oop %fd, %oop* %t0
	%r1 = inttoptr %word 3 to %oop
	%r2 = inttoptr %word 0 to %oop
	%r3 = load %oop, %oop* %t0
	%r7 = bitcast %oop %r3 to [0 x %oop]*
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = getelementptr [0 x %oop], [0 x %oop]* %r7, %word 0, %word %r6
	%r4 = load %oop, %oop* %r5
	%r8 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	syscall", 
	"=A,r,r,~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r1, %oop %r4)
	%r9 = inttoptr %word 0 to %oop
	%r13 = ptrtoint %oop %r9 to %word
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = icmp eq %word %r13, %r12
	%r10 = inttoptr i1 %r11 to %oop
	%r15 = ptrtoint %oop %r10 to %word
	%r14 = icmp ne %word %r15, 0
	br i1 %r14, label %L1, label %L2
L1:
	%r16 = inttoptr %word 0 to %oop
	store %oop %r16, %oop* %t1
	br label %L3
L2:
	%r17 = call %oop @m_error-prologue.code()
	%r18 = getelementptr %"<string>", %"<string>"* @m_ostr1257, i32 0, i32 1
	%r19 = bitcast %word* %r18 to %oop
	%r20 = call %oop @"m_%error.code"(%oop %r19)
	%r21 = call %oop @m_error-epilogue.code()
	store %oop %r21, %oop* %t1
	br label %L3
L3:
	%r22 = load %oop, %oop* %t1
	ret %oop %r22
}
@m_cstr1258 = private unnamed_addr constant [11 x i8] c"file-close\00"
@m_ostr1259 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr1258 to %oop) }
@m_file-close = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_file-close.code to %oop), %"<string>"* @m_ostr1259 }
@m_cstr1260 = private unnamed_addr constant [11 x i8] c"file-close\00"
@m_ostr1261 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr1260 to %oop) }
@m_cstr1262 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1263 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1262 to %oop) }
@m_cstr1264 = private unnamed_addr constant [3 x i8] c"fd\00"
@m_ostr1265 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 5, %oop bitcast ([3 x i8]* @m_cstr1264 to %oop) }
@m_cstr1266 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1267 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1266 to %oop) }
@m_cstr1268 = private unnamed_addr constant [17 x i8] c"<target-pointer>\00"
@m_ostr1269 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 33, %oop bitcast ([17 x i8]* @m_cstr1268 to %oop) }
@m_cstr1270 = private unnamed_addr constant [11 x i8] c"file-close\00"
@m_ostr1271 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr1270 to %oop) }
@m_cstr1272 = private unnamed_addr constant [11 x i8] c"file-close\00"
@m_ostr1273 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr1272 to %oop) }
define %oop @"m_file-close/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = load %oop, %oop* %t2
	%r4 = call %oop @"m_pair?.code"(%oop %r3)
	%r6 = ptrtoint %oop %r4 to %word
	%r5 = icmp ne %word %r6, 0
	br i1 %r5, label %L1, label %L2
L1:
	%r7 = inttoptr %word 0 to %oop
	%r8 = load %oop, %oop* %t2
	%r12 = bitcast %oop %r8 to [0 x %oop]*
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = getelementptr [0 x %oop], [0 x %oop]* %r12, %word 0, %word %r11
	%r9 = load %oop, %oop* %r10
	store %oop %r9, %oop* %t3
	%r13 = inttoptr %word 0 to %oop
	store %oop %r13, %oop* %t5
	%r14 = load %oop, %oop* %t3
	%r15 = call %oop @m_type-of.code(%oop %r14)
	%r16 = inttoptr %word 9 to %oop
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = icmp eq %word %r20, %r19
	%r17 = inttoptr i1 %r18 to %oop
	store %oop %r17, %oop* %t5
	%r21 = inttoptr %word 0 to %oop
	%r25 = ptrtoint %oop %r21 to %word
	%r24 = ptrtoint %oop %r17 to %word
	%r23 = icmp eq %word %r25, %r24
	%r22 = inttoptr i1 %r23 to %oop
	%r27 = ptrtoint %oop %r22 to %word
	%r26 = icmp ne %word %r27, 0
	br i1 %r26, label %L5, label %L4
L5:
	%r28 = call %oop @m_error-prologue.code()
	%r29 = getelementptr %"<string>", %"<string>"* @m_ostr1261, i32 0, i32 1
	%r30 = bitcast %word* %r29 to %oop
	%r31 = call %oop @"m_%error.code"(%oop %r30)
	%r32 = getelementptr %"<string>", %"<string>"* @m_ostr1263, i32 0, i32 1
	%r33 = bitcast %word* %r32 to %oop
	%r34 = call %oop @"m_%error.code"(%oop %r33)
	%r35 = getelementptr %"<string>", %"<string>"* @m_ostr1265, i32 0, i32 1
	%r36 = bitcast %word* %r35 to %oop
	%r37 = call %oop @"m_%error.code"(%oop %r36)
	%r38 = getelementptr %"<string>", %"<string>"* @m_ostr1267, i32 0, i32 1
	%r39 = bitcast %word* %r38 to %oop
	%r40 = call %oop @"m_%error.code"(%oop %r39)
	%r41 = getelementptr %"<string>", %"<string>"* @m_ostr1269, i32 0, i32 1
	%r42 = bitcast %word* %r41 to %oop
	%r43 = call %oop @"m_%error.code"(%oop %r42)
	%r44 = call %oop @m_error-epilogue.code()
	store %oop %r44, %oop* %t5
	%r45 = inttoptr %word 0 to %oop
	%r49 = ptrtoint %oop %r45 to %word
	%r48 = ptrtoint %oop %r44 to %word
	%r47 = icmp eq %word %r49, %r48
	%r46 = inttoptr i1 %r47 to %oop
	%r51 = ptrtoint %oop %r46 to %word
	%r50 = icmp ne %word %r51, 0
	br i1 %r50, label %L6, label %L4
L6:
	br label %L4
L4:
	%r52 = load %oop, %oop* %t5
	%r53 = inttoptr %word 1 to %oop
	%r54 = load %oop, %oop* %t2
	%r58 = bitcast %oop %r54 to [0 x %oop]*
	%r57 = ptrtoint %oop %r53 to %word
	%r56 = getelementptr [0 x %oop], [0 x %oop]* %r58, %word 0, %word %r57
	%r55 = load %oop, %oop* %r56
	store %oop %r55, %oop* %t2
	store %oop %r55, %oop* %t4
	br label %L3
L2:
	%r59 = getelementptr %"<string>", %"<string>"* @m_ostr1271, i32 0, i32 1
	%r60 = bitcast %word* %r59 to %oop
	%r61 = load %oop, %oop* %t0
	%r62 = call %oop @"m_%not-enough-arguments.code"(%oop %r60, %oop %r61)
	store %oop %r62, %oop* %t4
	br label %L3
L3:
	%r63 = load %oop, %oop* %t4
	%r64 = load %oop, %oop* %t2
	%r66 = ptrtoint %oop %r64 to %word
	%r65 = icmp ne %word %r66, 0
	br i1 %r65, label %L7, label %L8
L7:
	%r67 = getelementptr %"<string>", %"<string>"* @m_ostr1273, i32 0, i32 1
	%r68 = bitcast %word* %r67 to %oop
	%r69 = load %oop, %oop* %t0
	%r70 = call %oop @"m_%too-many-arguments.code"(%oop %r68, %oop %r69)
	store %oop %r70, %oop* %t4
	br label %L9
L8:
	%r71 = inttoptr %word 0 to %oop
	store %oop %r71, %oop* %t4
	br label %L9
L9:
	%r72 = load %oop, %oop* %t4
	%r73 = load %oop, %oop* %t3
	%r74 = call %oop @m_file-close.code(%oop %r73)
	ret %oop %r74
}
@m_cstr1274 = private unnamed_addr constant [26 x i8] c"file-close/evaluator-stub\00"
@m_ostr1275 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 51, %oop bitcast ([26 x i8]* @m_cstr1274 to %oop) }
@"m_file-close/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_file-close/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1275 }
define %oop @m_file-read-character.code(%oop %fd) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	%t2 = alloca %oop
	store %oop %fd, %oop* %t0
	%r1 = inttoptr %word 0 to %oop
	store %oop %r1, %oop* %t1
	%r2 = inttoptr %word 0 to %oop
	%r3 = load %oop, %oop* %t0
	%r5 = getelementptr %oop, %oop* %t1, %word 0
	%r4 = bitcast %oop* %r5 to %oop
	%r6 = inttoptr %word 1 to %oop
	%r7 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r2, %oop %r3, %oop %r4, %oop %r6)
	%r8 = inttoptr %word 1 to %oop
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = icmp eq %word %r12, %r11
	%r9 = inttoptr i1 %r10 to %oop
	%r14 = ptrtoint %oop %r9 to %word
	%r13 = icmp ne %word %r14, 0
	br i1 %r13, label %L1, label %L2
L1:
	%r15 = inttoptr %word 1 to %oop
	%r16 = inttoptr %word 1 to %oop
	%r17 = load %oop, %oop* %t1
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = shl %word %r21, %r20
	%r18 = inttoptr %word %r19 to %oop
	%r25 = ptrtoint %oop %r18 to %word
	%r24 = ptrtoint %oop %r15 to %word
	%r23 = or %word %r25, %r24
	%r22 = inttoptr %word %r23 to %oop
	store %oop %r22, %oop* %t2
	br label %L3
L2:
	%r26 = inttoptr %word 0 to %oop
	store %oop %r26, %oop* %t2
	br label %L3
L3:
	%r27 = load %oop, %oop* %t2
	ret %oop %r27
}
@m_cstr1276 = private unnamed_addr constant [20 x i8] c"file-read-character\00"
@m_ostr1277 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 39, %oop bitcast ([20 x i8]* @m_cstr1276 to %oop) }
@m_file-read-character = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_file-read-character.code to %oop), %"<string>"* @m_ostr1277 }
@m_cstr1278 = private unnamed_addr constant [20 x i8] c"file-read-character\00"
@m_ostr1279 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 39, %oop bitcast ([20 x i8]* @m_cstr1278 to %oop) }
@m_cstr1280 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1281 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1280 to %oop) }
@m_cstr1282 = private unnamed_addr constant [3 x i8] c"fd\00"
@m_ostr1283 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 5, %oop bitcast ([3 x i8]* @m_cstr1282 to %oop) }
@m_cstr1284 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1285 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1284 to %oop) }
@m_cstr1286 = private unnamed_addr constant [17 x i8] c"<target-pointer>\00"
@m_ostr1287 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 33, %oop bitcast ([17 x i8]* @m_cstr1286 to %oop) }
@m_cstr1288 = private unnamed_addr constant [20 x i8] c"file-read-character\00"
@m_ostr1289 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 39, %oop bitcast ([20 x i8]* @m_cstr1288 to %oop) }
@m_cstr1290 = private unnamed_addr constant [20 x i8] c"file-read-character\00"
@m_ostr1291 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 39, %oop bitcast ([20 x i8]* @m_cstr1290 to %oop) }
define %oop @"m_file-read-character/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = load %oop, %oop* %t2
	%r4 = call %oop @"m_pair?.code"(%oop %r3)
	%r6 = ptrtoint %oop %r4 to %word
	%r5 = icmp ne %word %r6, 0
	br i1 %r5, label %L1, label %L2
L1:
	%r7 = inttoptr %word 0 to %oop
	%r8 = load %oop, %oop* %t2
	%r12 = bitcast %oop %r8 to [0 x %oop]*
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = getelementptr [0 x %oop], [0 x %oop]* %r12, %word 0, %word %r11
	%r9 = load %oop, %oop* %r10
	store %oop %r9, %oop* %t3
	%r13 = inttoptr %word 0 to %oop
	store %oop %r13, %oop* %t5
	%r14 = load %oop, %oop* %t3
	%r15 = call %oop @m_type-of.code(%oop %r14)
	%r16 = inttoptr %word 9 to %oop
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = icmp eq %word %r20, %r19
	%r17 = inttoptr i1 %r18 to %oop
	store %oop %r17, %oop* %t5
	%r21 = inttoptr %word 0 to %oop
	%r25 = ptrtoint %oop %r21 to %word
	%r24 = ptrtoint %oop %r17 to %word
	%r23 = icmp eq %word %r25, %r24
	%r22 = inttoptr i1 %r23 to %oop
	%r27 = ptrtoint %oop %r22 to %word
	%r26 = icmp ne %word %r27, 0
	br i1 %r26, label %L5, label %L4
L5:
	%r28 = call %oop @m_error-prologue.code()
	%r29 = getelementptr %"<string>", %"<string>"* @m_ostr1279, i32 0, i32 1
	%r30 = bitcast %word* %r29 to %oop
	%r31 = call %oop @"m_%error.code"(%oop %r30)
	%r32 = getelementptr %"<string>", %"<string>"* @m_ostr1281, i32 0, i32 1
	%r33 = bitcast %word* %r32 to %oop
	%r34 = call %oop @"m_%error.code"(%oop %r33)
	%r35 = getelementptr %"<string>", %"<string>"* @m_ostr1283, i32 0, i32 1
	%r36 = bitcast %word* %r35 to %oop
	%r37 = call %oop @"m_%error.code"(%oop %r36)
	%r38 = getelementptr %"<string>", %"<string>"* @m_ostr1285, i32 0, i32 1
	%r39 = bitcast %word* %r38 to %oop
	%r40 = call %oop @"m_%error.code"(%oop %r39)
	%r41 = getelementptr %"<string>", %"<string>"* @m_ostr1287, i32 0, i32 1
	%r42 = bitcast %word* %r41 to %oop
	%r43 = call %oop @"m_%error.code"(%oop %r42)
	%r44 = call %oop @m_error-epilogue.code()
	store %oop %r44, %oop* %t5
	%r45 = inttoptr %word 0 to %oop
	%r49 = ptrtoint %oop %r45 to %word
	%r48 = ptrtoint %oop %r44 to %word
	%r47 = icmp eq %word %r49, %r48
	%r46 = inttoptr i1 %r47 to %oop
	%r51 = ptrtoint %oop %r46 to %word
	%r50 = icmp ne %word %r51, 0
	br i1 %r50, label %L6, label %L4
L6:
	br label %L4
L4:
	%r52 = load %oop, %oop* %t5
	%r53 = inttoptr %word 0 to %oop
	%r54 = load %oop, %oop* %t3
	%r58 = bitcast %oop %r54 to [0 x %oop]*
	%r57 = ptrtoint %oop %r53 to %word
	%r56 = getelementptr [0 x %oop], [0 x %oop]* %r58, %word 0, %word %r57
	%r55 = load %oop, %oop* %r56
	store %oop %r55, %oop* %t3
	%r59 = inttoptr %word 1 to %oop
	%r60 = load %oop, %oop* %t2
	%r64 = bitcast %oop %r60 to [0 x %oop]*
	%r63 = ptrtoint %oop %r59 to %word
	%r62 = getelementptr [0 x %oop], [0 x %oop]* %r64, %word 0, %word %r63
	%r61 = load %oop, %oop* %r62
	store %oop %r61, %oop* %t2
	store %oop %r61, %oop* %t4
	br label %L3
L2:
	%r65 = getelementptr %"<string>", %"<string>"* @m_ostr1289, i32 0, i32 1
	%r66 = bitcast %word* %r65 to %oop
	%r67 = load %oop, %oop* %t0
	%r68 = call %oop @"m_%not-enough-arguments.code"(%oop %r66, %oop %r67)
	store %oop %r68, %oop* %t4
	br label %L3
L3:
	%r69 = load %oop, %oop* %t4
	%r70 = load %oop, %oop* %t2
	%r72 = ptrtoint %oop %r70 to %word
	%r71 = icmp ne %word %r72, 0
	br i1 %r71, label %L7, label %L8
L7:
	%r73 = getelementptr %"<string>", %"<string>"* @m_ostr1291, i32 0, i32 1
	%r74 = bitcast %word* %r73 to %oop
	%r75 = load %oop, %oop* %t0
	%r76 = call %oop @"m_%too-many-arguments.code"(%oop %r74, %oop %r75)
	store %oop %r76, %oop* %t4
	br label %L9
L8:
	%r77 = inttoptr %word 0 to %oop
	store %oop %r77, %oop* %t4
	br label %L9
L9:
	%r78 = load %oop, %oop* %t4
	%r79 = load %oop, %oop* %t3
	%r80 = call %oop @m_file-read-character.code(%oop %r79)
	ret %oop %r80
}
@m_cstr1292 = private unnamed_addr constant [35 x i8] c"file-read-character/evaluator-stub\00"
@m_ostr1293 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 69, %oop bitcast ([35 x i8]* @m_cstr1292 to %oop) }
@"m_file-read-character/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_file-read-character/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1293 }
@m_cstr1294 = private unnamed_addr constant [51 x i8] c"file-write-character: libc/fputc returned an error\00"
@m_ostr1295 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 101, %oop bitcast ([51 x i8]* @m_cstr1294 to %oop) }
define %oop @m_file-write-character.code(%oop %char, %oop %fd) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	store %oop %char, %oop* %t0
	store %oop %fd, %oop* %t1
	%r1 = inttoptr %word 1 to %oop
	%r2 = load %oop, %oop* %t1
	%r4 = getelementptr %oop, %oop* %t0, %word 0
	%r3 = bitcast %oop* %r4 to %oop
	%r5 = inttoptr %word 1 to %oop
	%r6 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r1, %oop %r2, %oop %r3, %oop %r5)
	%r7 = inttoptr %word 1 to %oop
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = ptrtoint %oop %r6 to %word
	%r9 = icmp eq %word %r11, %r10
	%r8 = inttoptr i1 %r9 to %oop
	%r13 = ptrtoint %oop %r8 to %word
	%r12 = icmp ne %word %r13, 0
	br i1 %r12, label %L1, label %L2
L1:
	%r14 = inttoptr %word 0 to %oop
	store %oop %r14, %oop* %t2
	br label %L3
L2:
	%r15 = call %oop @m_error-prologue.code()
	%r16 = getelementptr %"<string>", %"<string>"* @m_ostr1295, i32 0, i32 1
	%r17 = bitcast %word* %r16 to %oop
	%r18 = call %oop @"m_%error.code"(%oop %r17)
	%r19 = call %oop @m_error-epilogue.code()
	store %oop %r19, %oop* %t2
	br label %L3
L3:
	%r20 = load %oop, %oop* %t2
	ret %oop %r20
}
@m_cstr1296 = private unnamed_addr constant [21 x i8] c"file-write-character\00"
@m_ostr1297 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 41, %oop bitcast ([21 x i8]* @m_cstr1296 to %oop) }
@m_file-write-character = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @m_file-write-character.code to %oop), %"<string>"* @m_ostr1297 }
@m_cstr1298 = private unnamed_addr constant [21 x i8] c"file-write-character\00"
@m_ostr1299 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 41, %oop bitcast ([21 x i8]* @m_cstr1298 to %oop) }
@m_cstr1300 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1301 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1300 to %oop) }
@m_cstr1302 = private unnamed_addr constant [5 x i8] c"char\00"
@m_ostr1303 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr1302 to %oop) }
@m_cstr1304 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1305 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1304 to %oop) }
@m_cstr1306 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr1307 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1306 to %oop) }
@m_cstr1308 = private unnamed_addr constant [21 x i8] c"file-write-character\00"
@m_ostr1309 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 41, %oop bitcast ([21 x i8]* @m_cstr1308 to %oop) }
@m_cstr1310 = private unnamed_addr constant [21 x i8] c"file-write-character\00"
@m_ostr1311 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 41, %oop bitcast ([21 x i8]* @m_cstr1310 to %oop) }
@m_cstr1312 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1313 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1312 to %oop) }
@m_cstr1314 = private unnamed_addr constant [3 x i8] c"fd\00"
@m_ostr1315 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 5, %oop bitcast ([3 x i8]* @m_cstr1314 to %oop) }
@m_cstr1316 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1317 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1316 to %oop) }
@m_cstr1318 = private unnamed_addr constant [17 x i8] c"<target-pointer>\00"
@m_ostr1319 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 33, %oop bitcast ([17 x i8]* @m_cstr1318 to %oop) }
@m_cstr1320 = private unnamed_addr constant [21 x i8] c"file-write-character\00"
@m_ostr1321 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 41, %oop bitcast ([21 x i8]* @m_cstr1320 to %oop) }
@m_cstr1322 = private unnamed_addr constant [21 x i8] c"file-write-character\00"
@m_ostr1323 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 41, %oop bitcast ([21 x i8]* @m_cstr1322 to %oop) }
define %oop @"m_file-write-character/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = load %oop, %oop* %t2
	%r5 = call %oop @"m_pair?.code"(%oop %r4)
	%r7 = ptrtoint %oop %r5 to %word
	%r6 = icmp ne %word %r7, 0
	br i1 %r6, label %L1, label %L2
L1:
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t2
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	%r10 = load %oop, %oop* %r11
	store %oop %r10, %oop* %t3
	%r14 = inttoptr %word 0 to %oop
	store %oop %r14, %oop* %t6
	%r15 = load %oop, %oop* %t3
	%r16 = call %oop @"m_long?.code"(%oop %r15)
	store %oop %r16, %oop* %t6
	%r17 = inttoptr %word 0 to %oop
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = icmp eq %word %r21, %r20
	%r18 = inttoptr i1 %r19 to %oop
	%r23 = ptrtoint %oop %r18 to %word
	%r22 = icmp ne %word %r23, 0
	br i1 %r22, label %L5, label %L4
L5:
	%r24 = call %oop @m_error-prologue.code()
	%r25 = getelementptr %"<string>", %"<string>"* @m_ostr1299, i32 0, i32 1
	%r26 = bitcast %word* %r25 to %oop
	%r27 = call %oop @"m_%error.code"(%oop %r26)
	%r28 = getelementptr %"<string>", %"<string>"* @m_ostr1301, i32 0, i32 1
	%r29 = bitcast %word* %r28 to %oop
	%r30 = call %oop @"m_%error.code"(%oop %r29)
	%r31 = getelementptr %"<string>", %"<string>"* @m_ostr1303, i32 0, i32 1
	%r32 = bitcast %word* %r31 to %oop
	%r33 = call %oop @"m_%error.code"(%oop %r32)
	%r34 = getelementptr %"<string>", %"<string>"* @m_ostr1305, i32 0, i32 1
	%r35 = bitcast %word* %r34 to %oop
	%r36 = call %oop @"m_%error.code"(%oop %r35)
	%r37 = getelementptr %"<string>", %"<string>"* @m_ostr1307, i32 0, i32 1
	%r38 = bitcast %word* %r37 to %oop
	%r39 = call %oop @"m_%error.code"(%oop %r38)
	%r40 = call %oop @m_error-epilogue.code()
	store %oop %r40, %oop* %t6
	%r41 = inttoptr %word 0 to %oop
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = ptrtoint %oop %r40 to %word
	%r43 = icmp eq %word %r45, %r44
	%r42 = inttoptr i1 %r43 to %oop
	%r47 = ptrtoint %oop %r42 to %word
	%r46 = icmp ne %word %r47, 0
	br i1 %r46, label %L6, label %L4
L6:
	br label %L4
L4:
	%r48 = load %oop, %oop* %t6
	%r49 = inttoptr %word 1 to %oop
	%r50 = load %oop, %oop* %t3
	%r54 = ptrtoint %oop %r50 to %word
	%r53 = ptrtoint %oop %r49 to %word
	%r52 = ashr %word %r54, %r53
	%r51 = inttoptr %word %r52 to %oop
	store %oop %r51, %oop* %t3
	%r55 = inttoptr %word 1 to %oop
	%r56 = load %oop, %oop* %t2
	%r60 = bitcast %oop %r56 to [0 x %oop]*
	%r59 = ptrtoint %oop %r55 to %word
	%r58 = getelementptr [0 x %oop], [0 x %oop]* %r60, %word 0, %word %r59
	%r57 = load %oop, %oop* %r58
	store %oop %r57, %oop* %t2
	store %oop %r57, %oop* %t5
	br label %L3
L2:
	%r61 = getelementptr %"<string>", %"<string>"* @m_ostr1309, i32 0, i32 1
	%r62 = bitcast %word* %r61 to %oop
	%r63 = load %oop, %oop* %t0
	%r64 = call %oop @"m_%not-enough-arguments.code"(%oop %r62, %oop %r63)
	store %oop %r64, %oop* %t5
	br label %L3
L3:
	%r65 = load %oop, %oop* %t5
	%r66 = load %oop, %oop* %t2
	%r67 = call %oop @"m_pair?.code"(%oop %r66)
	%r69 = ptrtoint %oop %r67 to %word
	%r68 = icmp ne %word %r69, 0
	br i1 %r68, label %L7, label %L8
L7:
	%r70 = inttoptr %word 0 to %oop
	%r71 = load %oop, %oop* %t2
	%r75 = bitcast %oop %r71 to [0 x %oop]*
	%r74 = ptrtoint %oop %r70 to %word
	%r73 = getelementptr [0 x %oop], [0 x %oop]* %r75, %word 0, %word %r74
	%r72 = load %oop, %oop* %r73
	store %oop %r72, %oop* %t4
	%r76 = inttoptr %word 0 to %oop
	store %oop %r76, %oop* %t6
	%r77 = load %oop, %oop* %t4
	%r78 = call %oop @m_type-of.code(%oop %r77)
	%r79 = inttoptr %word 9 to %oop
	%r83 = ptrtoint %oop %r79 to %word
	%r82 = ptrtoint %oop %r78 to %word
	%r81 = icmp eq %word %r83, %r82
	%r80 = inttoptr i1 %r81 to %oop
	store %oop %r80, %oop* %t6
	%r84 = inttoptr %word 0 to %oop
	%r88 = ptrtoint %oop %r84 to %word
	%r87 = ptrtoint %oop %r80 to %word
	%r86 = icmp eq %word %r88, %r87
	%r85 = inttoptr i1 %r86 to %oop
	%r90 = ptrtoint %oop %r85 to %word
	%r89 = icmp ne %word %r90, 0
	br i1 %r89, label %L11, label %L10
L11:
	%r91 = call %oop @m_error-prologue.code()
	%r92 = getelementptr %"<string>", %"<string>"* @m_ostr1311, i32 0, i32 1
	%r93 = bitcast %word* %r92 to %oop
	%r94 = call %oop @"m_%error.code"(%oop %r93)
	%r95 = getelementptr %"<string>", %"<string>"* @m_ostr1313, i32 0, i32 1
	%r96 = bitcast %word* %r95 to %oop
	%r97 = call %oop @"m_%error.code"(%oop %r96)
	%r98 = getelementptr %"<string>", %"<string>"* @m_ostr1315, i32 0, i32 1
	%r99 = bitcast %word* %r98 to %oop
	%r100 = call %oop @"m_%error.code"(%oop %r99)
	%r101 = getelementptr %"<string>", %"<string>"* @m_ostr1317, i32 0, i32 1
	%r102 = bitcast %word* %r101 to %oop
	%r103 = call %oop @"m_%error.code"(%oop %r102)
	%r104 = getelementptr %"<string>", %"<string>"* @m_ostr1319, i32 0, i32 1
	%r105 = bitcast %word* %r104 to %oop
	%r106 = call %oop @"m_%error.code"(%oop %r105)
	%r107 = call %oop @m_error-epilogue.code()
	store %oop %r107, %oop* %t6
	%r108 = inttoptr %word 0 to %oop
	%r112 = ptrtoint %oop %r108 to %word
	%r111 = ptrtoint %oop %r107 to %word
	%r110 = icmp eq %word %r112, %r111
	%r109 = inttoptr i1 %r110 to %oop
	%r114 = ptrtoint %oop %r109 to %word
	%r113 = icmp ne %word %r114, 0
	br i1 %r113, label %L12, label %L10
L12:
	br label %L10
L10:
	%r115 = load %oop, %oop* %t6
	%r116 = inttoptr %word 0 to %oop
	%r117 = load %oop, %oop* %t4
	%r121 = bitcast %oop %r117 to [0 x %oop]*
	%r120 = ptrtoint %oop %r116 to %word
	%r119 = getelementptr [0 x %oop], [0 x %oop]* %r121, %word 0, %word %r120
	%r118 = load %oop, %oop* %r119
	store %oop %r118, %oop* %t4
	%r122 = inttoptr %word 1 to %oop
	%r123 = load %oop, %oop* %t2
	%r127 = bitcast %oop %r123 to [0 x %oop]*
	%r126 = ptrtoint %oop %r122 to %word
	%r125 = getelementptr [0 x %oop], [0 x %oop]* %r127, %word 0, %word %r126
	%r124 = load %oop, %oop* %r125
	store %oop %r124, %oop* %t2
	store %oop %r124, %oop* %t5
	br label %L9
L8:
	%r128 = getelementptr %"<string>", %"<string>"* @m_ostr1321, i32 0, i32 1
	%r129 = bitcast %word* %r128 to %oop
	%r130 = load %oop, %oop* %t0
	%r131 = call %oop @"m_%not-enough-arguments.code"(%oop %r129, %oop %r130)
	store %oop %r131, %oop* %t5
	br label %L9
L9:
	%r132 = load %oop, %oop* %t5
	%r133 = load %oop, %oop* %t2
	%r135 = ptrtoint %oop %r133 to %word
	%r134 = icmp ne %word %r135, 0
	br i1 %r134, label %L13, label %L14
L13:
	%r136 = getelementptr %"<string>", %"<string>"* @m_ostr1323, i32 0, i32 1
	%r137 = bitcast %word* %r136 to %oop
	%r138 = load %oop, %oop* %t0
	%r139 = call %oop @"m_%too-many-arguments.code"(%oop %r137, %oop %r138)
	store %oop %r139, %oop* %t5
	br label %L15
L14:
	%r140 = inttoptr %word 0 to %oop
	store %oop %r140, %oop* %t5
	br label %L15
L15:
	%r141 = load %oop, %oop* %t5
	%r142 = load %oop, %oop* %t3
	%r143 = load %oop, %oop* %t4
	%r144 = call %oop @m_file-write-character.code(%oop %r142, %oop %r143)
	ret %oop %r144
}
@m_cstr1324 = private unnamed_addr constant [36 x i8] c"file-write-character/evaluator-stub\00"
@m_ostr1325 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 71, %oop bitcast ([36 x i8]* @m_cstr1324 to %oop) }
@"m_file-write-character/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_file-write-character/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1325 }
@m_cstr1326 = private unnamed_addr constant [24 x i8] c"kernel assertion failed\00"
@m_ostr1327 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 47, %oop bitcast ([24 x i8]* @m_cstr1326 to %oop) }
define %oop @m_file-stream.code(%oop %fd) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	%t2 = alloca %oop
	store %oop %fd, %oop* %t0
	%r1 = inttoptr %word 0 to %oop
	store %oop %r1, %oop* %t1
	%r2 = load %oop, %oop* %t0
	%r3 = call %oop @m_type-of.code(%oop %r2)
	%r4 = inttoptr %word 9 to %oop
	%r8 = ptrtoint %oop %r4 to %word
	%r7 = ptrtoint %oop %r3 to %word
	%r6 = icmp eq %word %r8, %r7
	%r5 = inttoptr i1 %r6 to %oop
	store %oop %r5, %oop* %t1
	%r9 = inttoptr %word 0 to %oop
	%r13 = ptrtoint %oop %r9 to %word
	%r12 = ptrtoint %oop %r5 to %word
	%r11 = icmp eq %word %r13, %r12
	%r10 = inttoptr i1 %r11 to %oop
	%r15 = ptrtoint %oop %r10 to %word
	%r14 = icmp ne %word %r15, 0
	br i1 %r14, label %L2, label %L1
L2:
	%r16 = call %oop @m_error-prologue.code()
	%r17 = getelementptr %"<string>", %"<string>"* @m_ostr1327, i32 0, i32 1
	%r18 = bitcast %word* %r17 to %oop
	%r19 = call %oop @"m_%error.code"(%oop %r18)
	%r20 = call %oop @m_error-epilogue.code()
	store %oop %r20, %oop* %t1
	%r21 = inttoptr %word 0 to %oop
	%r25 = ptrtoint %oop %r21 to %word
	%r24 = ptrtoint %oop %r20 to %word
	%r23 = icmp eq %word %r25, %r24
	%r22 = inttoptr i1 %r23 to %oop
	%r27 = ptrtoint %oop %r22 to %word
	%r26 = icmp ne %word %r27, 0
	br i1 %r26, label %L3, label %L1
L3:
	br label %L1
L1:
	%r28 = load %oop, %oop* %t1
	%r29 = inttoptr %word 26 to %oop
	%r30 = inttoptr %word 16 to %oop
	%r31 = call %oop @"m_gc/allocate-opaque.code"(%oop %r29, %oop %r30)
	store %oop %r31, %oop* %t1
	%r33 = getelementptr %oop, %oop* %t1, %word 0
	%r32 = bitcast %oop* %r33 to %oop
	%r34 = call %oop @"m_gc/push-root.code"(%oop %r32)
	%r35 = inttoptr %word 0 to %oop
	%r36 = load %oop, %oop* %t0
	%r40 = bitcast %oop %r36 to [0 x %oop]*
	%r39 = ptrtoint %oop %r35 to %word
	%r38 = getelementptr [0 x %oop], [0 x %oop]* %r40, %word 0, %word %r39
	%r37 = load %oop, %oop* %r38
	%r41 = inttoptr %word 0 to %oop
	%r42 = load %oop, %oop* %t1
	%r46 = bitcast %oop %r42 to [0 x %oop]*
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = getelementptr [0 x %oop], [0 x %oop]* %r46, %word 0, %word %r45
	store %oop %r37, %oop* %r44
	%r43 = bitcast %oop %r37 to %oop
	%r47 = inttoptr %word -1 to %oop
	%r48 = inttoptr %word 1 to %oop
	%r49 = load %oop, %oop* %t1
	%r53 = bitcast %oop %r49 to [0 x %oop]*
	%r52 = ptrtoint %oop %r48 to %word
	%r51 = getelementptr [0 x %oop], [0 x %oop]* %r53, %word 0, %word %r52
	store %oop %r47, %oop* %r51
	%r50 = bitcast %oop %r47 to %oop
	%r54 = load %oop, %oop* %t1
	store %oop %r54, %oop* %t2
	%r56 = getelementptr %oop, %oop* %t1, %word 0
	%r55 = bitcast %oop* %r56 to %oop
	%r57 = call %oop @"m_gc/pop-root.code"(%oop %r55)
	%r58 = load %oop, %oop* %t2
	ret %oop %r58
}
@m_cstr1328 = private unnamed_addr constant [12 x i8] c"file-stream\00"
@m_ostr1329 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr1328 to %oop) }
@m_file-stream = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_file-stream.code to %oop), %"<string>"* @m_ostr1329 }
@m_cstr1330 = private unnamed_addr constant [12 x i8] c"file-stream\00"
@m_ostr1331 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr1330 to %oop) }
@m_cstr1332 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1333 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1332 to %oop) }
@m_cstr1334 = private unnamed_addr constant [3 x i8] c"fd\00"
@m_ostr1335 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 5, %oop bitcast ([3 x i8]* @m_cstr1334 to %oop) }
@m_cstr1336 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1337 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1336 to %oop) }
@m_cstr1338 = private unnamed_addr constant [17 x i8] c"<target-pointer>\00"
@m_ostr1339 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 33, %oop bitcast ([17 x i8]* @m_cstr1338 to %oop) }
@m_cstr1340 = private unnamed_addr constant [12 x i8] c"file-stream\00"
@m_ostr1341 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr1340 to %oop) }
@m_cstr1342 = private unnamed_addr constant [12 x i8] c"file-stream\00"
@m_ostr1343 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr1342 to %oop) }
define %oop @"m_file-stream/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = load %oop, %oop* %t2
	%r4 = call %oop @"m_pair?.code"(%oop %r3)
	%r6 = ptrtoint %oop %r4 to %word
	%r5 = icmp ne %word %r6, 0
	br i1 %r5, label %L1, label %L2
L1:
	%r7 = inttoptr %word 0 to %oop
	%r8 = load %oop, %oop* %t2
	%r12 = bitcast %oop %r8 to [0 x %oop]*
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = getelementptr [0 x %oop], [0 x %oop]* %r12, %word 0, %word %r11
	%r9 = load %oop, %oop* %r10
	store %oop %r9, %oop* %t3
	%r13 = inttoptr %word 0 to %oop
	store %oop %r13, %oop* %t5
	%r14 = load %oop, %oop* %t3
	%r15 = call %oop @m_type-of.code(%oop %r14)
	%r16 = inttoptr %word 9 to %oop
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = icmp eq %word %r20, %r19
	%r17 = inttoptr i1 %r18 to %oop
	store %oop %r17, %oop* %t5
	%r21 = inttoptr %word 0 to %oop
	%r25 = ptrtoint %oop %r21 to %word
	%r24 = ptrtoint %oop %r17 to %word
	%r23 = icmp eq %word %r25, %r24
	%r22 = inttoptr i1 %r23 to %oop
	%r27 = ptrtoint %oop %r22 to %word
	%r26 = icmp ne %word %r27, 0
	br i1 %r26, label %L5, label %L4
L5:
	%r28 = call %oop @m_error-prologue.code()
	%r29 = getelementptr %"<string>", %"<string>"* @m_ostr1331, i32 0, i32 1
	%r30 = bitcast %word* %r29 to %oop
	%r31 = call %oop @"m_%error.code"(%oop %r30)
	%r32 = getelementptr %"<string>", %"<string>"* @m_ostr1333, i32 0, i32 1
	%r33 = bitcast %word* %r32 to %oop
	%r34 = call %oop @"m_%error.code"(%oop %r33)
	%r35 = getelementptr %"<string>", %"<string>"* @m_ostr1335, i32 0, i32 1
	%r36 = bitcast %word* %r35 to %oop
	%r37 = call %oop @"m_%error.code"(%oop %r36)
	%r38 = getelementptr %"<string>", %"<string>"* @m_ostr1337, i32 0, i32 1
	%r39 = bitcast %word* %r38 to %oop
	%r40 = call %oop @"m_%error.code"(%oop %r39)
	%r41 = getelementptr %"<string>", %"<string>"* @m_ostr1339, i32 0, i32 1
	%r42 = bitcast %word* %r41 to %oop
	%r43 = call %oop @"m_%error.code"(%oop %r42)
	%r44 = call %oop @m_error-epilogue.code()
	store %oop %r44, %oop* %t5
	%r45 = inttoptr %word 0 to %oop
	%r49 = ptrtoint %oop %r45 to %word
	%r48 = ptrtoint %oop %r44 to %word
	%r47 = icmp eq %word %r49, %r48
	%r46 = inttoptr i1 %r47 to %oop
	%r51 = ptrtoint %oop %r46 to %word
	%r50 = icmp ne %word %r51, 0
	br i1 %r50, label %L6, label %L4
L6:
	br label %L4
L4:
	%r52 = load %oop, %oop* %t5
	%r53 = inttoptr %word 1 to %oop
	%r54 = load %oop, %oop* %t2
	%r58 = bitcast %oop %r54 to [0 x %oop]*
	%r57 = ptrtoint %oop %r53 to %word
	%r56 = getelementptr [0 x %oop], [0 x %oop]* %r58, %word 0, %word %r57
	%r55 = load %oop, %oop* %r56
	store %oop %r55, %oop* %t2
	store %oop %r55, %oop* %t4
	br label %L3
L2:
	%r59 = getelementptr %"<string>", %"<string>"* @m_ostr1341, i32 0, i32 1
	%r60 = bitcast %word* %r59 to %oop
	%r61 = load %oop, %oop* %t0
	%r62 = call %oop @"m_%not-enough-arguments.code"(%oop %r60, %oop %r61)
	store %oop %r62, %oop* %t4
	br label %L3
L3:
	%r63 = load %oop, %oop* %t4
	%r64 = load %oop, %oop* %t2
	%r66 = ptrtoint %oop %r64 to %word
	%r65 = icmp ne %word %r66, 0
	br i1 %r65, label %L7, label %L8
L7:
	%r67 = getelementptr %"<string>", %"<string>"* @m_ostr1343, i32 0, i32 1
	%r68 = bitcast %word* %r67 to %oop
	%r69 = load %oop, %oop* %t0
	%r70 = call %oop @"m_%too-many-arguments.code"(%oop %r68, %oop %r69)
	store %oop %r70, %oop* %t4
	br label %L9
L8:
	%r71 = inttoptr %word 0 to %oop
	store %oop %r71, %oop* %t4
	br label %L9
L9:
	%r72 = load %oop, %oop* %t4
	%r73 = load %oop, %oop* %t3
	%r74 = call %oop @m_file-stream.code(%oop %r73)
	ret %oop %r74
}
@m_cstr1344 = private unnamed_addr constant [27 x i8] c"file-stream/evaluator-stub\00"
@m_ostr1345 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 53, %oop bitcast ([27 x i8]* @m_cstr1344 to %oop) }
@"m_file-stream/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_file-stream/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1345 }
define %oop @"m_%ensure-peeked.code"(%oop %stream) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	store %oop %stream, %oop* %t0
	%r1 = inttoptr %word 0 to %oop
	store %oop %r1, %oop* %t1
	%r2 = inttoptr %word 1 to %oop
	%r3 = load %oop, %oop* %t0
	%r7 = bitcast %oop %r3 to [0 x %oop]*
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = getelementptr [0 x %oop], [0 x %oop]* %r7, %word 0, %word %r6
	%r4 = load %oop, %oop* %r5
	%r8 = inttoptr %word 0 to %oop
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = ptrtoint %oop %r4 to %word
	%r10 = icmp sle %word %r12, %r11
	%r9 = inttoptr i1 %r10 to %oop
	store %oop %r9, %oop* %t1
	%r13 = inttoptr %word 0 to %oop
	%r17 = ptrtoint %oop %r13 to %word
	%r16 = ptrtoint %oop %r9 to %word
	%r15 = icmp eq %word %r17, %r16
	%r14 = inttoptr i1 %r15 to %oop
	%r19 = ptrtoint %oop %r14 to %word
	%r18 = icmp ne %word %r19, 0
	br i1 %r18, label %L2, label %L1
L2:
	%r20 = inttoptr %word 0 to %oop
	%r21 = load %oop, %oop* %t0
	%r25 = bitcast %oop %r21 to [0 x %oop]*
	%r24 = ptrtoint %oop %r20 to %word
	%r23 = getelementptr [0 x %oop], [0 x %oop]* %r25, %word 0, %word %r24
	%r22 = load %oop, %oop* %r23
	store %oop %r22, %oop* %t2
	%r26 = inttoptr %word 0 to %oop
	store %oop %r26, %oop* %t3
	%r27 = inttoptr %word 0 to %oop
	%r28 = load %oop, %oop* %t2
	%r30 = getelementptr %oop, %oop* %t3, %word 0
	%r29 = bitcast %oop* %r30 to %oop
	%r31 = inttoptr %word 1 to %oop
	%r32 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r27, %oop %r28, %oop %r29, %oop %r31)
	store %oop %r32, %oop* %t4
	%r33 = load %oop, %oop* %t4
	%r34 = inttoptr %word 1 to %oop
	%r38 = ptrtoint %oop %r34 to %word
	%r37 = ptrtoint %oop %r33 to %word
	%r36 = icmp eq %word %r38, %r37
	%r35 = inttoptr i1 %r36 to %oop
	%r40 = ptrtoint %oop %r35 to %word
	%r39 = icmp ne %word %r40, 0
	br i1 %r39, label %L3, label %L4
L3:
	%r41 = load %oop, %oop* %t3
	store %oop %r41, %oop* %t5
	br label %L5
L4:
	%r42 = inttoptr %word -1 to %oop
	store %oop %r42, %oop* %t5
	br label %L5
L5:
	%r43 = load %oop, %oop* %t5
	%r44 = inttoptr %word 1 to %oop
	%r45 = load %oop, %oop* %t0
	%r49 = bitcast %oop %r45 to [0 x %oop]*
	%r48 = ptrtoint %oop %r44 to %word
	%r47 = getelementptr [0 x %oop], [0 x %oop]* %r49, %word 0, %word %r48
	store %oop %r43, %oop* %r47
	%r46 = bitcast %oop %r43 to %oop
	store %oop %r46, %oop* %t1
	%r50 = inttoptr %word 0 to %oop
	%r54 = ptrtoint %oop %r50 to %word
	%r53 = ptrtoint %oop %r46 to %word
	%r52 = icmp eq %word %r54, %r53
	%r51 = inttoptr i1 %r52 to %oop
	%r56 = ptrtoint %oop %r51 to %word
	%r55 = icmp ne %word %r56, 0
	br i1 %r55, label %L6, label %L1
L6:
	br label %L1
L1:
	%r57 = load %oop, %oop* %t1
	ret %oop %r57
}
@m_cstr1346 = private unnamed_addr constant [15 x i8] c"%ensure-peeked\00"
@m_ostr1347 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr1346 to %oop) }
@"m_%ensure-peeked" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @"m_%ensure-peeked.code" to %oop), %"<string>"* @m_ostr1347 }
define %oop @m_initialize-streams.code(%oop %in-handle, %oop %out-handle, %oop %err-handle) {
	%t2 = alloca %oop
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	store %oop %in-handle, %oop* %t0
	store %oop %out-handle, %oop* %t1
	store %oop %err-handle, %oop* %t2
	%r1 = inttoptr %word 0 to %oop
	store %oop %r1, %oop* %t3
	%r3 = getelementptr %oop, %oop* %t3, %word 0
	%r2 = bitcast %oop* %r3 to %oop
	%r4 = call %oop @"m_gc/push-root.code"(%oop %r2)
	%r5 = inttoptr %word 0 to %oop
	%r6 = inttoptr %word 9 to %oop
	%r7 = load %oop, %oop* %t0
	%r8 = call %oop @"m_%allocate-boxed.code"(%oop %r6, %oop %r7)
	store %oop %r8, %oop* %t3
	%r9 = load %oop, %oop* %t3
	%r10 = call %oop @m_file-stream.code(%oop %r9)
	store %oop %r10, %oop* %t3
	%r11 = load %oop, %oop* @"m_*maru-module*"
	%r12 = load %oop, %oop* @"m_symbol/*standard-input*"
	%r13 = load %oop, %oop* %t3
	%r14 = call %oop @m_set-global-variable-value.code(%oop %r11, %oop %r12, %oop %r13)
	%r15 = load %oop, %oop* @"m_*maru-user-module*"
	%r16 = load %oop, %oop* @"m_symbol/*standard-input*"
	%r17 = load %oop, %oop* %t3
	%r18 = call %oop @m_set-global-variable-value.code(%oop %r15, %oop %r16, %oop %r17)
	store %oop %r18, %oop* %t4
	%r20 = getelementptr %oop, %oop* %t3, %word 0
	%r19 = bitcast %oop* %r20 to %oop
	%r21 = call %oop @"m_gc/pop-root.code"(%oop %r19)
	%r22 = load %oop, %oop* %t4
	%r23 = inttoptr %word 0 to %oop
	store %oop %r23, %oop* %t3
	%r25 = getelementptr %oop, %oop* %t3, %word 0
	%r24 = bitcast %oop* %r25 to %oop
	%r26 = call %oop @"m_gc/push-root.code"(%oop %r24)
	%r27 = inttoptr %word 0 to %oop
	%r28 = inttoptr %word 9 to %oop
	%r29 = load %oop, %oop* %t1
	%r30 = call %oop @"m_%allocate-boxed.code"(%oop %r28, %oop %r29)
	store %oop %r30, %oop* %t3
	%r31 = load %oop, %oop* %t3
	%r32 = call %oop @m_file-stream.code(%oop %r31)
	store %oop %r32, %oop* %t3
	%r33 = load %oop, %oop* @"m_*maru-module*"
	%r34 = load %oop, %oop* @"m_symbol/*standard-output*"
	%r35 = load %oop, %oop* %t3
	%r36 = call %oop @m_set-global-variable-value.code(%oop %r33, %oop %r34, %oop %r35)
	%r37 = load %oop, %oop* @"m_*maru-user-module*"
	%r38 = load %oop, %oop* @"m_symbol/*standard-output*"
	%r39 = load %oop, %oop* %t3
	%r40 = call %oop @m_set-global-variable-value.code(%oop %r37, %oop %r38, %oop %r39)
	store %oop %r40, %oop* %t4
	%r42 = getelementptr %oop, %oop* %t3, %word 0
	%r41 = bitcast %oop* %r42 to %oop
	%r43 = call %oop @"m_gc/pop-root.code"(%oop %r41)
	%r44 = load %oop, %oop* %t4
	%r45 = inttoptr %word 0 to %oop
	store %oop %r45, %oop* %t3
	%r47 = getelementptr %oop, %oop* %t3, %word 0
	%r46 = bitcast %oop* %r47 to %oop
	%r48 = call %oop @"m_gc/push-root.code"(%oop %r46)
	%r49 = inttoptr %word 0 to %oop
	%r50 = inttoptr %word 9 to %oop
	%r51 = load %oop, %oop* %t2
	%r52 = call %oop @"m_%allocate-boxed.code"(%oop %r50, %oop %r51)
	store %oop %r52, %oop* %t3
	%r53 = load %oop, %oop* %t3
	%r54 = call %oop @m_file-stream.code(%oop %r53)
	store %oop %r54, %oop* %t3
	%r55 = load %oop, %oop* @"m_*maru-module*"
	%r56 = load %oop, %oop* @"m_symbol/*error-output*"
	%r57 = load %oop, %oop* %t3
	%r58 = call %oop @m_set-global-variable-value.code(%oop %r55, %oop %r56, %oop %r57)
	%r59 = load %oop, %oop* @"m_*maru-user-module*"
	%r60 = load %oop, %oop* @"m_symbol/*error-output*"
	%r61 = load %oop, %oop* %t3
	%r62 = call %oop @m_set-global-variable-value.code(%oop %r59, %oop %r60, %oop %r61)
	store %oop %r62, %oop* %t4
	%r64 = getelementptr %oop, %oop* %t3, %word 0
	%r63 = bitcast %oop* %r64 to %oop
	%r65 = call %oop @"m_gc/pop-root.code"(%oop %r63)
	%r66 = load %oop, %oop* %t4
	%r67 = inttoptr %word 0 to %oop
	store %oop %r67, %oop* %t3
	%r69 = getelementptr %oop, %oop* %t3, %word 0
	%r68 = bitcast %oop* %r69 to %oop
	%r70 = call %oop @"m_gc/push-root.code"(%oop %r68)
	%r71 = inttoptr %word 0 to %oop
	%r72 = inttoptr %word 9 to %oop
	%r73 = load %oop, %oop* %t2
	%r74 = call %oop @"m_%allocate-boxed.code"(%oop %r72, %oop %r73)
	store %oop %r74, %oop* %t3
	%r75 = load %oop, %oop* %t3
	%r76 = call %oop @m_file-stream.code(%oop %r75)
	store %oop %r76, %oop* %t3
	%r77 = load %oop, %oop* @"m_*maru-module*"
	%r78 = load %oop, %oop* @"m_symbol/*debug-output*"
	%r79 = load %oop, %oop* %t3
	%r80 = call %oop @m_set-global-variable-value.code(%oop %r77, %oop %r78, %oop %r79)
	%r81 = load %oop, %oop* @"m_*maru-user-module*"
	%r82 = load %oop, %oop* @"m_symbol/*debug-output*"
	%r83 = load %oop, %oop* %t3
	%r84 = call %oop @m_set-global-variable-value.code(%oop %r81, %oop %r82, %oop %r83)
	store %oop %r84, %oop* %t4
	%r86 = getelementptr %oop, %oop* %t3, %word 0
	%r85 = bitcast %oop* %r86 to %oop
	%r87 = call %oop @"m_gc/pop-root.code"(%oop %r85)
	%r88 = load %oop, %oop* %t4
	ret %oop %r88
}
@m_cstr1348 = private unnamed_addr constant [19 x i8] c"initialize-streams\00"
@m_ostr1349 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 37, %oop bitcast ([19 x i8]* @m_cstr1348 to %oop) }
@m_initialize-streams = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop, %oop)* @m_initialize-streams.code to %oop), %"<string>"* @m_ostr1349 }
@m_cstr1350 = private unnamed_addr constant [24 x i8] c"kernel assertion failed\00"
@m_ostr1351 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 47, %oop bitcast ([24 x i8]* @m_cstr1350 to %oop) }
@m_cstr1352 = private unnamed_addr constant [23 x i8] c"\0Amorituri te salutant\0A\00"
@m_ostr1353 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 45, %oop bitcast ([23 x i8]* @m_cstr1352 to %oop) }
define %oop @m_repl-stream.code(%oop %stream) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	store %oop %stream, %oop* %t0
	%r1 = inttoptr %word 0 to %oop
	store %oop %r1, %oop* %t1
	%r2 = load %oop, %oop* %t0
	store %oop %r2, %oop* %t2
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t3
	%r4 = inttoptr %word 1 to %oop
	store %oop %r4, %oop* %t4
	%r5 = load %oop, %oop* %t2
	store %oop %r5, %oop* %t4
	%r6 = inttoptr %word 0 to %oop
	%r10 = ptrtoint %oop %r6 to %word
	%r9 = ptrtoint %oop %r5 to %word
	%r8 = icmp eq %word %r10, %r9
	%r7 = inttoptr i1 %r8 to %oop
	%r12 = ptrtoint %oop %r7 to %word
	%r11 = icmp ne %word %r12, 0
	br i1 %r11, label %L3, label %L4
L4:
	%r13 = inttoptr %word 7 to %oop
	%r14 = load %oop, %oop* %t2
	%r18 = ptrtoint %oop %r14 to %word
	%r17 = ptrtoint %oop %r13 to %word
	%r16 = and %word %r18, %r17
	%r15 = inttoptr %word %r16 to %oop
	%r19 = inttoptr %word 0 to %oop
	%r23 = ptrtoint %oop %r19 to %word
	%r22 = ptrtoint %oop %r15 to %word
	%r21 = icmp eq %word %r23, %r22
	%r20 = inttoptr i1 %r21 to %oop
	store %oop %r20, %oop* %t4
	%r24 = inttoptr %word 0 to %oop
	%r28 = ptrtoint %oop %r24 to %word
	%r27 = ptrtoint %oop %r20 to %word
	%r26 = icmp eq %word %r28, %r27
	%r25 = inttoptr i1 %r26 to %oop
	%r30 = ptrtoint %oop %r25 to %word
	%r29 = icmp ne %word %r30, 0
	br i1 %r29, label %L3, label %L5
L5:
	br label %L3
L3:
	%r31 = load %oop, %oop* %t4
	%r35 = ptrtoint %oop %r31 to %word
	%r34 = icmp eq %word %r35, 0
	%r33 = zext i1 %r34 to %word
	%r32 = inttoptr %word %r33 to %oop
	store %oop %r32, %oop* %t3
	%r36 = inttoptr %word 0 to %oop
	%r40 = ptrtoint %oop %r36 to %word
	%r39 = ptrtoint %oop %r32 to %word
	%r38 = icmp eq %word %r40, %r39
	%r37 = inttoptr i1 %r38 to %oop
	%r42 = ptrtoint %oop %r37 to %word
	%r41 = icmp ne %word %r42, 0
	br i1 %r41, label %L6, label %L2
L6:
	%r43 = inttoptr %word 1 to %oop
	store %oop %r43, %oop* %t4
	%r44 = load %oop, %oop* %t2
	%r45 = inttoptr %word 10000 to %oop
	%r49 = ptrtoint %oop %r45 to %word
	%r48 = ptrtoint %oop %r44 to %word
	%r47 = icmp slt %word %r49, %r48
	%r46 = inttoptr i1 %r47 to %oop
	store %oop %r46, %oop* %t4
	%r50 = inttoptr %word 0 to %oop
	%r54 = ptrtoint %oop %r50 to %word
	%r53 = ptrtoint %oop %r46 to %word
	%r52 = icmp eq %word %r54, %r53
	%r51 = inttoptr i1 %r52 to %oop
	%r56 = ptrtoint %oop %r51 to %word
	%r55 = icmp ne %word %r56, 0
	br i1 %r55, label %L7, label %L8
L8:
	%r57 = inttoptr %word 1 to %oop
	store %oop %r57, %oop* %t4
	%r58 = inttoptr %word 0 to %oop
	%r62 = ptrtoint %oop %r58 to %word
	%r61 = ptrtoint %oop %r57 to %word
	%r60 = icmp eq %word %r62, %r61
	%r59 = inttoptr i1 %r60 to %oop
	%r64 = ptrtoint %oop %r59 to %word
	%r63 = icmp ne %word %r64, 0
	br i1 %r63, label %L7, label %L9
L9:
	br label %L7
L7:
	%r65 = load %oop, %oop* %t4
	store %oop %r65, %oop* %t3
	%r66 = inttoptr %word 0 to %oop
	%r70 = ptrtoint %oop %r66 to %word
	%r69 = ptrtoint %oop %r65 to %word
	%r68 = icmp eq %word %r70, %r69
	%r67 = inttoptr i1 %r68 to %oop
	%r72 = ptrtoint %oop %r67 to %word
	%r71 = icmp ne %word %r72, 0
	br i1 %r71, label %L10, label %L2
L10:
	br label %L2
L2:
	%r73 = load %oop, %oop* %t3
	store %oop %r73, %oop* %t1
	%r74 = inttoptr %word 0 to %oop
	%r78 = ptrtoint %oop %r74 to %word
	%r77 = ptrtoint %oop %r73 to %word
	%r76 = icmp eq %word %r78, %r77
	%r75 = inttoptr i1 %r76 to %oop
	%r80 = ptrtoint %oop %r75 to %word
	%r79 = icmp ne %word %r80, 0
	br i1 %r79, label %L11, label %L1
L11:
	%r81 = call %oop @m_error-prologue.code()
	%r82 = getelementptr %"<string>", %"<string>"* @m_ostr1351, i32 0, i32 1
	%r83 = bitcast %word* %r82 to %oop
	%r84 = call %oop @"m_%error.code"(%oop %r83)
	%r85 = call %oop @m_error-epilogue.code()
	store %oop %r85, %oop* %t1
	%r86 = inttoptr %word 0 to %oop
	%r90 = ptrtoint %oop %r86 to %word
	%r89 = ptrtoint %oop %r85 to %word
	%r88 = icmp eq %word %r90, %r89
	%r87 = inttoptr i1 %r88 to %oop
	%r92 = ptrtoint %oop %r87 to %word
	%r91 = icmp ne %word %r92, 0
	br i1 %r91, label %L12, label %L1
L12:
	br label %L1
L1:
	%r93 = load %oop, %oop* %t1
	%r94 = load %oop, %oop* %t0
	%r95 = load %oop, %oop* @"m_*maru-module*"
	%r96 = load %oop, %oop* @"m_symbol/*standard-input*"
	%r97 = call %oop @m_global-variable-value.code(%oop %r95, %oop %r96)
	%r101 = ptrtoint %oop %r97 to %word
	%r100 = ptrtoint %oop %r94 to %word
	%r99 = icmp eq %word %r101, %r100
	%r98 = inttoptr i1 %r99 to %oop
	store %oop %r98, %oop* %t1
	%r102 = inttoptr %word 0 to %oop
	store %oop %r102, %oop* %t2
	%r104 = getelementptr %oop, %oop* %t2, %word 0
	%r103 = bitcast %oop* %r104 to %oop
	%r105 = call %oop @"m_gc/push-root.code"(%oop %r103)
	br label %L14
L13:
	%r106 = load %oop, %oop* %t2
	%r107 = load %oop, %oop* @"m_+end+"
	%r111 = ptrtoint %oop %r107 to %word
	%r110 = ptrtoint %oop %r106 to %word
	%r109 = icmp eq %word %r111, %r110
	%r108 = inttoptr i1 %r109 to %oop
	%r113 = ptrtoint %oop %r108 to %word
	%r112 = icmp ne %word %r113, 0
	br i1 %r112, label %L16, label %L17
L16:
	%r114 = inttoptr %word 0 to %oop
	store %oop %r114, %oop* %t3
	br label %L18
L17:
	%r115 = load %oop, %oop* @"m_*module*"
	%r116 = call %oop @m_module-env.code(%oop %r115)
	%r117 = inttoptr %word 1 to %oop
	%r118 = inttoptr %word 0 to %oop
	%r119 = call %oop @m_environment.code(%oop %r116, %oop %r117, %oop %r118)
	store %oop %r119, %oop* %t4
	%r121 = getelementptr %oop, %oop* %t4, %word 0
	%r120 = bitcast %oop* %r121 to %oop
	%r122 = call %oop @"m_gc/push-root.code"(%oop %r120)
	%r123 = load %oop, %oop* %t2
	%r124 = load %oop, %oop* %t4
	%r125 = call %oop @m_expand-encode-eval.code(%oop %r123, %oop %r124)
	store %oop %r125, %oop* %t2
	%r126 = load %oop, %oop* %t1
	%r128 = ptrtoint %oop %r126 to %word
	%r127 = icmp ne %word %r128, 0
	br i1 %r127, label %L19, label %L20
L19:
	%r129 = load %oop, %oop* @"m_*maru-module*"
	%r130 = load %oop, %oop* @"m_symbol/*standard-output*"
	%r131 = call %oop @m_global-variable-value.code(%oop %r129, %oop %r130)
	%r132 = load %oop, %oop* %t2
	%r133 = inttoptr %word 0 to %oop
	%r134 = call %oop @m_do-print.code(%oop %r131, %oop %r132, %oop %r133)
	%r135 = call %oop @"m_platform/flush-streams.code"()
	store %oop %r135, %oop* %t5
	br label %L21
L20:
	%r136 = inttoptr %word 0 to %oop
	store %oop %r136, %oop* %t5
	br label %L21
L21:
	%r137 = load %oop, %oop* %t5
	store %oop %r137, %oop* %t5
	%r139 = getelementptr %oop, %oop* %t4, %word 0
	%r138 = bitcast %oop* %r139 to %oop
	%r140 = call %oop @"m_gc/pop-root.code"(%oop %r138)
	%r141 = load %oop, %oop* %t5
	store %oop %r141, %oop* %t3
	br label %L18
L18:
	%r142 = load %oop, %oop* %t3
	br label %L14
L14:
	%r143 = load %oop, %oop* %t1
	%r145 = ptrtoint %oop %r143 to %word
	%r144 = icmp ne %word %r145, 0
	br i1 %r144, label %L22, label %L23
L22:
	%r146 = load %oop, %oop* @"m_*maru-module*"
	%r147 = load %oop, %oop* @"m_symbol/*standard-output*"
	%r148 = call %oop @m_global-variable-value.code(%oop %r146, %oop %r147)
	%r149 = inttoptr %word 46 to %oop
	%r150 = call %oop @m_$put.code(%oop %r148, %oop %r149)
	%r151 = call %oop @"m_platform/flush-streams.code"()
	store %oop %r151, %oop* %t3
	br label %L24
L23:
	%r152 = inttoptr %word 0 to %oop
	store %oop %r152, %oop* %t3
	br label %L24
L24:
	%r153 = load %oop, %oop* %t3
	%r154 = inttoptr %word 1 to %oop
	store %oop %r154, %oop* %t3
	%r155 = load %oop, %oop* %t0
	%r156 = call %oop @m_read.code(%oop %r155)
	store %oop %r156, %oop* %t2
	%r157 = load %oop, %oop* @"m_+end+"
	%r161 = ptrtoint %oop %r157 to %word
	%r160 = ptrtoint %oop %r156 to %word
	%r159 = icmp eq %word %r161, %r160
	%r158 = inttoptr i1 %r159 to %oop
	%r165 = ptrtoint %oop %r158 to %word
	%r164 = icmp eq %word %r165, 0
	%r163 = zext i1 %r164 to %word
	%r162 = inttoptr %word %r163 to %oop
	store %oop %r162, %oop* %t3
	%r166 = inttoptr %word 0 to %oop
	%r170 = ptrtoint %oop %r166 to %word
	%r169 = ptrtoint %oop %r162 to %word
	%r168 = icmp eq %word %r170, %r169
	%r167 = inttoptr i1 %r168 to %oop
	%r172 = ptrtoint %oop %r167 to %word
	%r171 = icmp ne %word %r172, 0
	br i1 %r171, label %L25, label %L26
L26:
	%r173 = load %oop, %oop* %t0
	%r174 = call %oop @"m_$at-end?.code"(%oop %r173)
	%r178 = ptrtoint %oop %r174 to %word
	%r177 = icmp eq %word %r178, 0
	%r176 = zext i1 %r177 to %word
	%r175 = inttoptr %word %r176 to %oop
	store %oop %r175, %oop* %t3
	%r179 = inttoptr %word 0 to %oop
	%r183 = ptrtoint %oop %r179 to %word
	%r182 = ptrtoint %oop %r175 to %word
	%r181 = icmp eq %word %r183, %r182
	%r180 = inttoptr i1 %r181 to %oop
	%r185 = ptrtoint %oop %r180 to %word
	%r184 = icmp ne %word %r185, 0
	br i1 %r184, label %L25, label %L27
L27:
	br label %L25
L25:
	%r186 = load %oop, %oop* %t3
	%r188 = ptrtoint %oop %r186 to %word
	%r187 = icmp ne %word %r188, 0
	br i1 %r187, label %L13, label %L15
L15:
	%r189 = load %oop, %oop* %t1
	%r191 = ptrtoint %oop %r189 to %word
	%r190 = icmp ne %word %r191, 0
	br i1 %r190, label %L28, label %L29
L28:
	%r192 = load %oop, %oop* @"m_*maru-module*"
	%r193 = load %oop, %oop* @"m_symbol/*standard-output*"
	%r194 = call %oop @m_global-variable-value.code(%oop %r192, %oop %r193)
	%r195 = getelementptr %"<string>", %"<string>"* @m_ostr1353, i32 0, i32 1
	%r196 = bitcast %word* %r195 to %oop
	%r197 = call %oop @m_$put-all.code(%oop %r194, %oop %r196)
	store %oop %r197, %oop* %t3
	br label %L30
L29:
	%r198 = inttoptr %word 0 to %oop
	store %oop %r198, %oop* %t3
	br label %L30
L30:
	%r199 = load %oop, %oop* %t3
	%r200 = load %oop, %oop* %t2
	store %oop %r200, %oop* %t3
	%r202 = getelementptr %oop, %oop* %t2, %word 0
	%r201 = bitcast %oop* %r202 to %oop
	%r203 = call %oop @"m_gc/pop-root.code"(%oop %r201)
	%r204 = load %oop, %oop* %t3
	ret %oop %r204
}
@m_cstr1354 = private unnamed_addr constant [12 x i8] c"repl-stream\00"
@m_ostr1355 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr1354 to %oop) }
@m_repl-stream = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_repl-stream.code to %oop), %"<string>"* @m_ostr1355 }
@m_cstr1356 = private unnamed_addr constant [5 x i8] c"load\00"
@m_ostr1357 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr1356 to %oop) }
@m_cstr1358 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1359 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1358 to %oop) }
@m_cstr1360 = private unnamed_addr constant [5 x i8] c"path\00"
@m_ostr1361 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr1360 to %oop) }
@m_cstr1362 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1363 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1362 to %oop) }
@m_cstr1364 = private unnamed_addr constant [9 x i8] c"<string>\00"
@m_ostr1365 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr1364 to %oop) }
@m_cstr1366 = private unnamed_addr constant [5 x i8] c"load\00"
@m_ostr1367 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr1366 to %oop) }
@m_cstr1368 = private unnamed_addr constant [5 x i8] c"load\00"
@m_ostr1369 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr1368 to %oop) }
@m_cstr1370 = private unnamed_addr constant [2 x i8] c"r\00"
@m_ostr1371 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 3, %oop bitcast ([2 x i8]* @m_cstr1370 to %oop) }
@m_cstr1372 = private unnamed_addr constant [45 x i8] c"with-input-from-file: file-open failed for: \00"
@m_ostr1373 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 89, %oop bitcast ([45 x i8]* @m_cstr1372 to %oop) }
define %oop @"m_load/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	%t8 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = load %oop, %oop* %t2
	%r4 = call %oop @"m_pair?.code"(%oop %r3)
	%r6 = ptrtoint %oop %r4 to %word
	%r5 = icmp ne %word %r6, 0
	br i1 %r5, label %L1, label %L2
L1:
	%r7 = inttoptr %word 0 to %oop
	%r8 = load %oop, %oop* %t2
	%r12 = bitcast %oop %r8 to [0 x %oop]*
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = getelementptr [0 x %oop], [0 x %oop]* %r12, %word 0, %word %r11
	%r9 = load %oop, %oop* %r10
	store %oop %r9, %oop* %t3
	%r13 = inttoptr %word 0 to %oop
	store %oop %r13, %oop* %t5
	%r14 = load %oop, %oop* %t3
	%r15 = call %oop @"m_string?.code"(%oop %r14)
	store %oop %r15, %oop* %t5
	%r16 = inttoptr %word 0 to %oop
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = icmp eq %word %r20, %r19
	%r17 = inttoptr i1 %r18 to %oop
	%r22 = ptrtoint %oop %r17 to %word
	%r21 = icmp ne %word %r22, 0
	br i1 %r21, label %L5, label %L4
L5:
	%r23 = call %oop @m_error-prologue.code()
	%r24 = getelementptr %"<string>", %"<string>"* @m_ostr1357, i32 0, i32 1
	%r25 = bitcast %word* %r24 to %oop
	%r26 = call %oop @"m_%error.code"(%oop %r25)
	%r27 = getelementptr %"<string>", %"<string>"* @m_ostr1359, i32 0, i32 1
	%r28 = bitcast %word* %r27 to %oop
	%r29 = call %oop @"m_%error.code"(%oop %r28)
	%r30 = getelementptr %"<string>", %"<string>"* @m_ostr1361, i32 0, i32 1
	%r31 = bitcast %word* %r30 to %oop
	%r32 = call %oop @"m_%error.code"(%oop %r31)
	%r33 = getelementptr %"<string>", %"<string>"* @m_ostr1363, i32 0, i32 1
	%r34 = bitcast %word* %r33 to %oop
	%r35 = call %oop @"m_%error.code"(%oop %r34)
	%r36 = getelementptr %"<string>", %"<string>"* @m_ostr1365, i32 0, i32 1
	%r37 = bitcast %word* %r36 to %oop
	%r38 = call %oop @"m_%error.code"(%oop %r37)
	%r39 = call %oop @m_error-epilogue.code()
	store %oop %r39, %oop* %t5
	%r40 = inttoptr %word 0 to %oop
	%r44 = ptrtoint %oop %r40 to %word
	%r43 = ptrtoint %oop %r39 to %word
	%r42 = icmp eq %word %r44, %r43
	%r41 = inttoptr i1 %r42 to %oop
	%r46 = ptrtoint %oop %r41 to %word
	%r45 = icmp ne %word %r46, 0
	br i1 %r45, label %L6, label %L4
L6:
	br label %L4
L4:
	%r47 = load %oop, %oop* %t5
	%r48 = inttoptr %word 1 to %oop
	%r49 = load %oop, %oop* %t2
	%r53 = bitcast %oop %r49 to [0 x %oop]*
	%r52 = ptrtoint %oop %r48 to %word
	%r51 = getelementptr [0 x %oop], [0 x %oop]* %r53, %word 0, %word %r52
	%r50 = load %oop, %oop* %r51
	store %oop %r50, %oop* %t2
	store %oop %r50, %oop* %t4
	br label %L3
L2:
	%r54 = getelementptr %"<string>", %"<string>"* @m_ostr1367, i32 0, i32 1
	%r55 = bitcast %word* %r54 to %oop
	%r56 = load %oop, %oop* %t0
	%r57 = call %oop @"m_%not-enough-arguments.code"(%oop %r55, %oop %r56)
	store %oop %r57, %oop* %t4
	br label %L3
L3:
	%r58 = load %oop, %oop* %t4
	%r59 = load %oop, %oop* %t2
	%r61 = ptrtoint %oop %r59 to %word
	%r60 = icmp ne %word %r61, 0
	br i1 %r60, label %L7, label %L8
L7:
	%r62 = getelementptr %"<string>", %"<string>"* @m_ostr1369, i32 0, i32 1
	%r63 = bitcast %word* %r62 to %oop
	%r64 = load %oop, %oop* %t0
	%r65 = call %oop @"m_%too-many-arguments.code"(%oop %r63, %oop %r64)
	store %oop %r65, %oop* %t4
	br label %L9
L8:
	%r66 = inttoptr %word 0 to %oop
	store %oop %r66, %oop* %t4
	br label %L9
L9:
	%r67 = load %oop, %oop* %t4
	%r68 = load %oop, %oop* %t3
	store %oop %r68, %oop* %t4
	%r70 = getelementptr %oop, %oop* %t4, %word 0
	%r69 = bitcast %oop* %r70 to %oop
	%r71 = call %oop @"m_gc/push-root.code"(%oop %r69)
	%r72 = inttoptr %word 0 to %oop
	store %oop %r72, %oop* %t5
	%r73 = load %oop, %oop* %t4
	%r74 = getelementptr %"<string>", %"<string>"* @m_ostr1371, i32 0, i32 1
	%r75 = bitcast %word* %r74 to %oop
	%r76 = call %oop @m_file-open.code(%oop %r73, %oop %r75)
	store %oop %r76, %oop* %t5
	%r77 = inttoptr %word 0 to %oop
	%r81 = ptrtoint %oop %r77 to %word
	%r80 = ptrtoint %oop %r76 to %word
	%r79 = icmp eq %word %r81, %r80
	%r78 = inttoptr i1 %r79 to %oop
	%r83 = ptrtoint %oop %r78 to %word
	%r82 = icmp ne %word %r83, 0
	br i1 %r82, label %L11, label %L10
L11:
	%r84 = call %oop @m_error-prologue.code()
	%r85 = getelementptr %"<string>", %"<string>"* @m_ostr1373, i32 0, i32 1
	%r86 = bitcast %word* %r85 to %oop
	%r87 = call %oop @"m_%error.code"(%oop %r86)
	%r88 = load %oop, %oop* %t4
	%r89 = call %oop @"m_%error.code"(%oop %r88)
	%r90 = call %oop @m_error-epilogue.code()
	store %oop %r90, %oop* %t5
	%r91 = inttoptr %word 0 to %oop
	%r95 = ptrtoint %oop %r91 to %word
	%r94 = ptrtoint %oop %r90 to %word
	%r93 = icmp eq %word %r95, %r94
	%r92 = inttoptr i1 %r93 to %oop
	%r97 = ptrtoint %oop %r92 to %word
	%r96 = icmp ne %word %r97, 0
	br i1 %r96, label %L12, label %L10
L12:
	br label %L10
L10:
	%r98 = load %oop, %oop* %t5
	store %oop %r98, %oop* %t5
	%r100 = getelementptr %oop, %oop* %t5, %word 0
	%r99 = bitcast %oop* %r100 to %oop
	%r101 = call %oop @"m_gc/push-root.code"(%oop %r99)
	%r102 = load %oop, %oop* %t5
	%r103 = call %oop @m_file-stream.code(%oop %r102)
	store %oop %r103, %oop* %t6
	%r105 = getelementptr %oop, %oop* %t6, %word 0
	%r104 = bitcast %oop* %r105 to %oop
	%r106 = call %oop @"m_gc/push-root.code"(%oop %r104)
	%r107 = load %oop, %oop* %t6
	%r108 = call %oop @m_expand-encode-eval-stream.code(%oop %r107)
	store %oop %r108, %oop* %t7
	%r110 = getelementptr %oop, %oop* %t7, %word 0
	%r109 = bitcast %oop* %r110 to %oop
	%r111 = call %oop @"m_gc/push-root.code"(%oop %r109)
	%r112 = load %oop, %oop* %t5
	%r113 = call %oop @m_file-close.code(%oop %r112)
	%r114 = load %oop, %oop* %t7
	store %oop %r114, %oop* %t8
	%r116 = getelementptr %oop, %oop* %t7, %word 0
	%r115 = bitcast %oop* %r116 to %oop
	%r117 = call %oop @"m_gc/pop-root.code"(%oop %r115)
	%r118 = load %oop, %oop* %t8
	store %oop %r118, %oop* %t7
	%r120 = getelementptr %oop, %oop* %t6, %word 0
	%r119 = bitcast %oop* %r120 to %oop
	%r121 = call %oop @"m_gc/pop-root.code"(%oop %r119)
	%r122 = load %oop, %oop* %t7
	store %oop %r122, %oop* %t6
	%r124 = getelementptr %oop, %oop* %t5, %word 0
	%r123 = bitcast %oop* %r124 to %oop
	%r125 = call %oop @"m_gc/pop-root.code"(%oop %r123)
	%r126 = load %oop, %oop* %t6
	store %oop %r126, %oop* %t5
	%r128 = getelementptr %oop, %oop* %t4, %word 0
	%r127 = bitcast %oop* %r128 to %oop
	%r129 = call %oop @"m_gc/pop-root.code"(%oop %r127)
	%r130 = load %oop, %oop* %t5
	ret %oop %r130
}
@m_cstr1374 = private unnamed_addr constant [20 x i8] c"load/evaluator-stub\00"
@m_ostr1375 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 39, %oop bitcast ([20 x i8]* @m_cstr1374 to %oop) }
@"m_load/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_load/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1375 }
@m_cstr1376 = private unnamed_addr constant [25 x i8] c"*command-line-arguments*\00"
@m_ostr1377 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 49, %oop bitcast ([25 x i8]* @m_cstr1376 to %oop) }
@m_cstr1378 = private unnamed_addr constant [3 x i8] c"-v\00"
@m_ostr1379 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 5, %oop bitcast ([3 x i8]* @m_cstr1378 to %oop) }
@m_cstr1380 = private unnamed_addr constant [3 x i8] c"-O\00"
@m_ostr1381 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 5, %oop bitcast ([3 x i8]* @m_cstr1380 to %oop) }
@m_cstr1382 = private unnamed_addr constant [3 x i8] c"-p\00"
@m_ostr1383 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 5, %oop bitcast ([3 x i8]* @m_cstr1382 to %oop) }
@m_cstr1384 = private unnamed_addr constant [49 x i8] c"WARNING: this build has no profiler, ignoring -p\00"
@m_cstr1385 = private unnamed_addr constant [2 x i8] c"\0A\00"
@m_cstr1386 = private unnamed_addr constant [2 x i8] c"-\00"
@m_ostr1387 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 3, %oop bitcast ([2 x i8]* @m_cstr1386 to %oop) }
@m_cstr1388 = private unnamed_addr constant [7 x i8] c"--call\00"
@m_ostr1389 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1388 to %oop) }
@m_cstr1390 = private unnamed_addr constant [28 x i8] c"--call requires an argument\00"
@m_cstr1391 = private unnamed_addr constant [2 x i8] c"\0A\00"
@m_cstr1392 = private unnamed_addr constant [9 x i8] c"--define\00"
@m_ostr1393 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr1392 to %oop) }
@m_cstr1394 = private unnamed_addr constant [32 x i8] c"--define requires two arguments\00"
@m_cstr1395 = private unnamed_addr constant [2 x i8] c"\0A\00"
@m_cstr1396 = private unnamed_addr constant [15 x i8] c"loading file: \00"
@m_ostr1397 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr1396 to %oop) }
@m_cstr1398 = private unnamed_addr constant [13 x i8] c"\09(as a CLA)\0A\00"
@m_ostr1399 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 25, %oop bitcast ([13 x i8]* @m_cstr1398 to %oop) }
@m_cstr1400 = private unnamed_addr constant [2 x i8] c"r\00"
@m_ostr1401 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 3, %oop bitcast ([2 x i8]* @m_cstr1400 to %oop) }
@m_cstr1402 = private unnamed_addr constant [45 x i8] c"with-input-from-file: file-open failed for: \00"
@m_ostr1403 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 89, %oop bitcast ([45 x i8]* @m_cstr1402 to %oop) }
define %oop @m_process-command-line-arguments.code(%oop %argc, %oop %argv) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	%t8 = alloca %oop
	%t9 = alloca %oop
	%t10 = alloca %oop
	%t11 = alloca %oop
	%t12 = alloca %oop
	%t13 = alloca %oop
	%t14 = alloca %oop
	%t15 = alloca %oop
	%t16 = alloca %oop
	store %oop %argc, %oop* %t0
	store %oop %argv, %oop* %t1
	%r1 = inttoptr %word 0 to %oop
	%r2 = load %oop, %oop* @"m_*module*"
	%r3 = call %oop @m_module-env.code(%oop %r2)
	%r4 = getelementptr %"<string>", %"<string>"* @m_ostr1377, i32 0, i32 1
	%r5 = bitcast %word* %r4 to %oop
	%r6 = call %oop @"m_string->symbol.code"(%oop %r5)
	%r7 = inttoptr %word 0 to %oop
	%r8 = call %oop @m_environment-define.code(%oop %r3, %oop %r6, %oop %r7)
	store %oop %r8, %oop* %t2
	%r9 = inttoptr %word 0 to %oop
	store %oop %r9, %oop* %t3
	%r11 = getelementptr %oop, %oop* %t3, %word 0
	%r10 = bitcast %oop* %r11 to %oop
	%r12 = call %oop @"m_gc/push-root.code"(%oop %r10)
	%r13 = load %oop, %oop* %t0
	store %oop %r13, %oop* %t4
	br label %L2
L1:
	%r14 = inttoptr %word 0 to %oop
	%r15 = load %oop, %oop* %t3
	%r16 = call %oop @m_cons.code(%oop %r14, %oop %r15)
	store %oop %r16, %oop* %t3
	%r17 = load %oop, %oop* %t4
	%r18 = load %oop, %oop* %t1
	%r22 = bitcast %oop %r18 to [0 x %oop]*
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = getelementptr [0 x %oop], [0 x %oop]* %r22, %word 0, %word %r21
	%r19 = load %oop, %oop* %r20
	%r23 = call %oop @"m_C-string->string.code"(%oop %r19)
	%r24 = inttoptr %word 0 to %oop
	%r25 = load %oop, %oop* %t3
	%r29 = bitcast %oop %r25 to [0 x %oop]*
	%r28 = ptrtoint %oop %r24 to %word
	%r27 = getelementptr [0 x %oop], [0 x %oop]* %r29, %word 0, %word %r28
	store %oop %r23, %oop* %r27
	%r26 = bitcast %oop %r23 to %oop
	br label %L2
L2:
	%r30 = inttoptr %word 1 to %oop
	%r31 = load %oop, %oop* %t4
	%r35 = ptrtoint %oop %r31 to %word
	%r34 = ptrtoint %oop %r30 to %word
	%r33 = sub %word %r35, %r34
	%r32 = inttoptr %word %r33 to %oop
	store %oop %r32, %oop* %t4
	%r36 = inttoptr %word 0 to %oop
	%r40 = ptrtoint %oop %r36 to %word
	%r39 = ptrtoint %oop %r32 to %word
	%r38 = icmp slt %word %r40, %r39
	%r37 = inttoptr i1 %r38 to %oop
	%r42 = ptrtoint %oop %r37 to %word
	%r41 = icmp ne %word %r42, 0
	br i1 %r41, label %L1, label %L3
L3:
	%r43 = load %oop, %oop* %t3
	%r44 = inttoptr %word 1 to %oop
	%r45 = load %oop, %oop* %t2
	%r49 = bitcast %oop %r45 to [0 x %oop]*
	%r48 = ptrtoint %oop %r44 to %word
	%r47 = getelementptr [0 x %oop], [0 x %oop]* %r49, %word 0, %word %r48
	store %oop %r43, %oop* %r47
	%r46 = bitcast %oop %r43 to %oop
	store %oop %r46, %oop* %t4
	%r51 = getelementptr %oop, %oop* %t3, %word 0
	%r50 = bitcast %oop* %r51 to %oop
	%r52 = call %oop @"m_gc/pop-root.code"(%oop %r50)
	%r53 = load %oop, %oop* %t4
	%r54 = inttoptr %word 0 to %oop
	%r55 = inttoptr %word 0 to %oop
	store %oop %r55, %oop* %t3
	%r56 = inttoptr %word 0 to %oop
	store %oop %r56, %oop* %t4
	%r58 = getelementptr %oop, %oop* %t4, %word 0
	%r57 = bitcast %oop* %r58 to %oop
	%r59 = call %oop @"m_gc/push-root.code"(%oop %r57)
	%r60 = inttoptr %word 0 to %oop
	store %oop %r60, %oop* %t5
	%r62 = getelementptr %oop, %oop* %t5, %word 0
	%r61 = bitcast %oop* %r62 to %oop
	%r63 = call %oop @"m_gc/push-root.code"(%oop %r61)
	br label %L5
L4:
	%r64 = inttoptr %word 0 to %oop
	%r65 = load %oop, %oop* %t3
	%r69 = bitcast %oop %r65 to [0 x %oop]*
	%r68 = ptrtoint %oop %r64 to %word
	%r67 = getelementptr [0 x %oop], [0 x %oop]* %r69, %word 0, %word %r68
	%r66 = load %oop, %oop* %r67
	store %oop %r66, %oop* %t4
	%r70 = inttoptr %word 1 to %oop
	%r71 = load %oop, %oop* %t3
	%r75 = bitcast %oop %r71 to [0 x %oop]*
	%r74 = ptrtoint %oop %r70 to %word
	%r73 = getelementptr [0 x %oop], [0 x %oop]* %r75, %word 0, %word %r74
	%r72 = load %oop, %oop* %r73
	store %oop %r72, %oop* %t3
	%r76 = inttoptr %word 1 to %oop
	%r77 = load %oop, %oop* %t2
	%r81 = bitcast %oop %r77 to [0 x %oop]*
	%r80 = ptrtoint %oop %r76 to %word
	%r79 = getelementptr [0 x %oop], [0 x %oop]* %r81, %word 0, %word %r80
	store %oop %r72, %oop* %r79
	%r78 = bitcast %oop %r72 to %oop
	%r82 = getelementptr %"<string>", %"<string>"* @m_ostr1379, i32 0, i32 1
	%r83 = bitcast %word* %r82 to %oop
	%r84 = load %oop, %oop* %t4
	%r85 = call %oop @"m_string=.code"(%oop %r83, %oop %r84)
	%r87 = ptrtoint %oop %r85 to %word
	%r86 = icmp ne %word %r87, 0
	br i1 %r86, label %L7, label %L8
L7:
	%r88 = inttoptr %word 1 to %oop
	%r89 = load %oop, %oop* @"m_*verbosity*"
	%r93 = ptrtoint %oop %r89 to %word
	%r92 = ptrtoint %oop %r88 to %word
	%r91 = add %word %r93, %r92
	%r90 = inttoptr %word %r91 to %oop
	store %oop %r90, %oop* @"m_*verbosity*"
	%r94 = inttoptr %word 1 to %oop
	%r95 = inttoptr %word 1 to %oop
	%r96 = load %oop, %oop* @"m_*verbosity*"
	%r100 = ptrtoint %oop %r96 to %word
	%r99 = ptrtoint %oop %r95 to %word
	%r98 = shl %word %r100, %r99
	%r97 = inttoptr %word %r98 to %oop
	%r104 = ptrtoint %oop %r97 to %word
	%r103 = ptrtoint %oop %r94 to %word
	%r102 = or %word %r104, %r103
	%r101 = inttoptr %word %r102 to %oop
	store %oop %r101, %oop* %t5
	%r105 = load %oop, %oop* @"m_*maru-module*"
	%r106 = load %oop, %oop* @"m_symbol/*verbosity*"
	%r107 = load %oop, %oop* %t5
	%r108 = call %oop @m_set-global-variable-value.code(%oop %r105, %oop %r106, %oop %r107)
	%r109 = load %oop, %oop* @"m_*maru-user-module*"
	%r110 = load %oop, %oop* @"m_symbol/*verbosity*"
	%r111 = load %oop, %oop* %t5
	%r112 = call %oop @m_set-global-variable-value.code(%oop %r109, %oop %r110, %oop %r111)
	store %oop %r112, %oop* %t6
	br label %L9
L8:
	%r113 = getelementptr %"<string>", %"<string>"* @m_ostr1381, i32 0, i32 1
	%r114 = bitcast %word* %r113 to %oop
	%r115 = load %oop, %oop* %t4
	%r116 = call %oop @"m_string=.code"(%oop %r114, %oop %r115)
	%r118 = ptrtoint %oop %r116 to %word
	%r117 = icmp ne %word %r118, 0
	br i1 %r117, label %L10, label %L11
L10:
	%r119 = inttoptr %word 1 to %oop
	%r120 = load %oop, %oop* @"m_*optimised*"
	%r124 = ptrtoint %oop %r120 to %word
	%r123 = ptrtoint %oop %r119 to %word
	%r122 = add %word %r124, %r123
	%r121 = inttoptr %word %r122 to %oop
	store %oop %r121, %oop* @"m_*optimised*"
	%r125 = inttoptr %word 1 to %oop
	%r126 = inttoptr %word 1 to %oop
	%r127 = load %oop, %oop* @"m_*optimised*"
	%r131 = ptrtoint %oop %r127 to %word
	%r130 = ptrtoint %oop %r126 to %word
	%r129 = shl %word %r131, %r130
	%r128 = inttoptr %word %r129 to %oop
	%r135 = ptrtoint %oop %r128 to %word
	%r134 = ptrtoint %oop %r125 to %word
	%r133 = or %word %r135, %r134
	%r132 = inttoptr %word %r133 to %oop
	store %oop %r132, %oop* %t5
	%r136 = load %oop, %oop* @"m_*maru-module*"
	%r137 = load %oop, %oop* @"m_symbol/*optimised*"
	%r138 = load %oop, %oop* %t5
	%r139 = call %oop @m_set-global-variable-value.code(%oop %r136, %oop %r137, %oop %r138)
	%r140 = load %oop, %oop* @"m_*maru-user-module*"
	%r141 = load %oop, %oop* @"m_symbol/*optimised*"
	%r142 = load %oop, %oop* %t5
	%r143 = call %oop @m_set-global-variable-value.code(%oop %r140, %oop %r141, %oop %r142)
	store %oop %r143, %oop* %t7
	br label %L12
L11:
	%r144 = getelementptr %"<string>", %"<string>"* @m_ostr1383, i32 0, i32 1
	%r145 = bitcast %word* %r144 to %oop
	%r146 = load %oop, %oop* %t4
	%r147 = call %oop @"m_string=.code"(%oop %r145, %oop %r146)
	%r149 = ptrtoint %oop %r147 to %word
	%r148 = icmp ne %word %r149, 0
	br i1 %r148, label %L13, label %L14
L13:
	%r150 = inttoptr %word 1 to %oop
	%r151 = inttoptr %word 2 to %oop
	%r152 = getelementptr [49 x i8], [49 x i8]* @m_cstr1384, %word 0, %word 0
	%r154 = inttoptr %word 48 to %oop
	%r155 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r150, %oop %r151, %oop %r152, %oop %r154)
	%r156 = inttoptr %word 1 to %oop
	%r157 = inttoptr %word 2 to %oop
	%r158 = getelementptr [2 x i8], [2 x i8]* @m_cstr1385, %word 0, %word 0
	%r160 = inttoptr %word 1 to %oop
	%r161 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r156, %oop %r157, %oop %r158, %oop %r160)
	store %oop %r161, %oop* %t8
	br label %L15
L14:
	%r162 = getelementptr %"<string>", %"<string>"* @m_ostr1387, i32 0, i32 1
	%r163 = bitcast %word* %r162 to %oop
	%r164 = load %oop, %oop* %t4
	%r165 = call %oop @"m_string=.code"(%oop %r163, %oop %r164)
	%r167 = ptrtoint %oop %r165 to %word
	%r166 = icmp ne %word %r167, 0
	br i1 %r166, label %L16, label %L17
L16:
	%r168 = load %oop, %oop* @"m_*maru-module*"
	%r169 = load %oop, %oop* @"m_symbol/*standard-input*"
	%r170 = call %oop @m_global-variable-value.code(%oop %r168, %oop %r169)
	%r171 = call %oop @m_repl-stream.code(%oop %r170)
	store %oop %r171, %oop* %t9
	br label %L18
L17:
	%r172 = getelementptr %"<string>", %"<string>"* @m_ostr1389, i32 0, i32 1
	%r173 = bitcast %word* %r172 to %oop
	%r174 = load %oop, %oop* %t4
	%r175 = call %oop @"m_string=.code"(%oop %r173, %oop %r174)
	%r177 = ptrtoint %oop %r175 to %word
	%r176 = icmp ne %word %r177, 0
	br i1 %r176, label %L19, label %L20
L19:
	%r178 = inttoptr %word 0 to %oop
	%r179 = load %oop, %oop* %t3
	%r180 = call %oop @"m_pair?.code"(%oop %r179)
	%r182 = ptrtoint %oop %r180 to %word
	%r181 = icmp ne %word %r182, 0
	br i1 %r181, label %L22, label %L23
L22:
	%r183 = inttoptr %word 0 to %oop
	store %oop %r183, %oop* %t11
	br label %L24
L23:
	%r184 = call %oop @m_fatal-prologue.code()
	%r185 = inttoptr %word 1 to %oop
	%r186 = inttoptr %word 2 to %oop
	%r187 = getelementptr [28 x i8], [28 x i8]* @m_cstr1390, %word 0, %word 0
	%r189 = inttoptr %word 27 to %oop
	%r190 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r185, %oop %r186, %oop %r187, %oop %r189)
	%r191 = inttoptr %word 1 to %oop
	%r192 = inttoptr %word 2 to %oop
	%r193 = getelementptr [2 x i8], [2 x i8]* @m_cstr1391, %word 0, %word 0
	%r195 = inttoptr %word 1 to %oop
	%r196 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r191, %oop %r192, %oop %r193, %oop %r195)
	%r197 = call %oop @m_fatal-epilogue.code()
	store %oop %r197, %oop* %t11
	br label %L24
L24:
	%r198 = load %oop, %oop* %t11
	%r199 = inttoptr %word 0 to %oop
	%r200 = load %oop, %oop* %t3
	%r204 = bitcast %oop %r200 to [0 x %oop]*
	%r203 = ptrtoint %oop %r199 to %word
	%r202 = getelementptr [0 x %oop], [0 x %oop]* %r204, %word 0, %word %r203
	%r201 = load %oop, %oop* %r202
	store %oop %r201, %oop* %t4
	%r205 = inttoptr %word 1 to %oop
	%r206 = load %oop, %oop* %t3
	%r210 = bitcast %oop %r206 to [0 x %oop]*
	%r209 = ptrtoint %oop %r205 to %word
	%r208 = getelementptr [0 x %oop], [0 x %oop]* %r210, %word 0, %word %r209
	%r207 = load %oop, %oop* %r208
	store %oop %r207, %oop* %t3
	%r211 = inttoptr %word 1 to %oop
	%r212 = load %oop, %oop* %t2
	%r216 = bitcast %oop %r212 to [0 x %oop]*
	%r215 = ptrtoint %oop %r211 to %word
	%r214 = getelementptr [0 x %oop], [0 x %oop]* %r216, %word 0, %word %r215
	store %oop %r207, %oop* %r214
	%r213 = bitcast %oop %r207 to %oop
	%r217 = load %oop, %oop* %t4
	%r218 = call %oop @"m_string->symbol.code"(%oop %r217)
	store %oop %r218, %oop* %t11
	%r219 = load %oop, %oop* %t11
	%r220 = inttoptr %word 0 to %oop
	%r221 = call %oop @m_cons.code(%oop %r219, %oop %r220)
	store %oop %r221, %oop* %t12
	%r223 = getelementptr %oop, %oop* %t12, %word 0
	%r222 = bitcast %oop* %r223 to %oop
	%r224 = call %oop @"m_gc/push-root.code"(%oop %r222)
	%r225 = load %oop, %oop* %t12
	%r226 = load %oop, %oop* @"m_*module*"
	%r227 = call %oop @m_module-env.code(%oop %r226)
	%r228 = call %oop @m_expand-encode-eval.code(%oop %r225, %oop %r227)
	store %oop %r228, %oop* %t13
	%r230 = getelementptr %oop, %oop* %t12, %word 0
	%r229 = bitcast %oop* %r230 to %oop
	%r231 = call %oop @"m_gc/pop-root.code"(%oop %r229)
	%r232 = load %oop, %oop* %t13
	store %oop %r232, %oop* %t10
	br label %L21
L20:
	%r233 = getelementptr %"<string>", %"<string>"* @m_ostr1393, i32 0, i32 1
	%r234 = bitcast %word* %r233 to %oop
	%r235 = load %oop, %oop* %t4
	%r236 = call %oop @"m_string=.code"(%oop %r234, %oop %r235)
	%r238 = ptrtoint %oop %r236 to %word
	%r237 = icmp ne %word %r238, 0
	br i1 %r237, label %L25, label %L26
L25:
	%r239 = inttoptr %word 0 to %oop
	%r240 = inttoptr %word 1 to %oop
	store %oop %r240, %oop* %t13
	%r241 = load %oop, %oop* %t3
	%r242 = call %oop @"m_pair?.code"(%oop %r241)
	store %oop %r242, %oop* %t13
	%r243 = inttoptr %word 0 to %oop
	%r247 = ptrtoint %oop %r243 to %word
	%r246 = ptrtoint %oop %r242 to %word
	%r245 = icmp eq %word %r247, %r246
	%r244 = inttoptr i1 %r245 to %oop
	%r249 = ptrtoint %oop %r244 to %word
	%r248 = icmp ne %word %r249, 0
	br i1 %r248, label %L31, label %L32
L32:
	%r250 = inttoptr %word 1 to %oop
	%r251 = load %oop, %oop* %t3
	%r255 = bitcast %oop %r251 to [0 x %oop]*
	%r254 = ptrtoint %oop %r250 to %word
	%r253 = getelementptr [0 x %oop], [0 x %oop]* %r255, %word 0, %word %r254
	%r252 = load %oop, %oop* %r253
	%r256 = call %oop @"m_pair?.code"(%oop %r252)
	store %oop %r256, %oop* %t13
	%r257 = inttoptr %word 0 to %oop
	%r261 = ptrtoint %oop %r257 to %word
	%r260 = ptrtoint %oop %r256 to %word
	%r259 = icmp eq %word %r261, %r260
	%r258 = inttoptr i1 %r259 to %oop
	%r263 = ptrtoint %oop %r258 to %word
	%r262 = icmp ne %word %r263, 0
	br i1 %r262, label %L31, label %L33
L33:
	br label %L31
L31:
	%r264 = load %oop, %oop* %t13
	%r266 = ptrtoint %oop %r264 to %word
	%r265 = icmp ne %word %r266, 0
	br i1 %r265, label %L28, label %L29
L28:
	%r267 = inttoptr %word 0 to %oop
	store %oop %r267, %oop* %t12
	br label %L30
L29:
	%r268 = call %oop @m_fatal-prologue.code()
	%r269 = inttoptr %word 1 to %oop
	%r270 = inttoptr %word 2 to %oop
	%r271 = getelementptr [32 x i8], [32 x i8]* @m_cstr1394, %word 0, %word 0
	%r273 = inttoptr %word 31 to %oop
	%r274 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r269, %oop %r270, %oop %r271, %oop %r273)
	%r275 = inttoptr %word 1 to %oop
	%r276 = inttoptr %word 2 to %oop
	%r277 = getelementptr [2 x i8], [2 x i8]* @m_cstr1395, %word 0, %word 0
	%r279 = inttoptr %word 1 to %oop
	%r280 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	movq	$3, %rsi
	movq	$4, %rdx
	syscall", 
	"=A,r,r,r,r,~{rdx},~{rsi},~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r275, %oop %r276, %oop %r277, %oop %r279)
	%r281 = call %oop @m_fatal-epilogue.code()
	store %oop %r281, %oop* %t12
	br label %L30
L30:
	%r282 = load %oop, %oop* %t12
	%r283 = load %oop, %oop* %t3
	%r284 = call %oop @m_first.code(%oop %r283)
	store %oop %r284, %oop* %t12
	%r286 = getelementptr %oop, %oop* %t12, %word 0
	%r285 = bitcast %oop* %r286 to %oop
	%r287 = call %oop @"m_gc/push-root.code"(%oop %r285)
	%r288 = load %oop, %oop* %t3
	%r289 = call %oop @m_second.code(%oop %r288)
	store %oop %r289, %oop* %t13
	%r291 = getelementptr %oop, %oop* %t13, %word 0
	%r290 = bitcast %oop* %r291 to %oop
	%r292 = call %oop @"m_gc/push-root.code"(%oop %r290)
	%r293 = inttoptr %word 1 to %oop
	%r294 = load %oop, %oop* %t3
	%r298 = bitcast %oop %r294 to [0 x %oop]*
	%r297 = ptrtoint %oop %r293 to %word
	%r296 = getelementptr [0 x %oop], [0 x %oop]* %r298, %word 0, %word %r297
	%r295 = load %oop, %oop* %r296
	store %oop %r295, %oop* %t3
	%r299 = inttoptr %word 1 to %oop
	%r300 = load %oop, %oop* %t2
	%r304 = bitcast %oop %r300 to [0 x %oop]*
	%r303 = ptrtoint %oop %r299 to %word
	%r302 = getelementptr [0 x %oop], [0 x %oop]* %r304, %word 0, %word %r303
	store %oop %r295, %oop* %r302
	%r301 = bitcast %oop %r295 to %oop
	%r305 = inttoptr %word 1 to %oop
	%r306 = load %oop, %oop* %t3
	%r310 = bitcast %oop %r306 to [0 x %oop]*
	%r309 = ptrtoint %oop %r305 to %word
	%r308 = getelementptr [0 x %oop], [0 x %oop]* %r310, %word 0, %word %r309
	%r307 = load %oop, %oop* %r308
	store %oop %r307, %oop* %t3
	%r311 = inttoptr %word 1 to %oop
	%r312 = load %oop, %oop* %t2
	%r316 = bitcast %oop %r312 to [0 x %oop]*
	%r315 = ptrtoint %oop %r311 to %word
	%r314 = getelementptr [0 x %oop], [0 x %oop]* %r316, %word 0, %word %r315
	store %oop %r307, %oop* %r314
	%r313 = bitcast %oop %r307 to %oop
	%r317 = load %oop, %oop* %t13
	%r318 = inttoptr %word 10 to %oop
	%r319 = call %oop @"m_string->long*.code"(%oop %r317, %oop %r318)
	store %oop %r319, %oop* %t14
	%r320 = load %oop, %oop* %t14
	%r321 = load %oop, %oop* @"m_+end+"
	%r325 = ptrtoint %oop %r321 to %word
	%r324 = ptrtoint %oop %r320 to %word
	%r323 = icmp eq %word %r325, %r324
	%r322 = inttoptr i1 %r323 to %oop
	%r327 = ptrtoint %oop %r322 to %word
	%r326 = icmp ne %word %r327, 0
	br i1 %r326, label %L34, label %L35
L34:
	%r328 = inttoptr %word 0 to %oop
	store %oop %r328, %oop* %t15
	br label %L36
L35:
	%r329 = inttoptr %word 1 to %oop
	%r330 = inttoptr %word 1 to %oop
	%r331 = load %oop, %oop* %t14
	%r335 = ptrtoint %oop %r331 to %word
	%r334 = ptrtoint %oop %r330 to %word
	%r333 = shl %word %r335, %r334
	%r332 = inttoptr %word %r333 to %oop
	%r339 = ptrtoint %oop %r332 to %word
	%r338 = ptrtoint %oop %r329 to %word
	%r337 = or %word %r339, %r338
	%r336 = inttoptr %word %r337 to %oop
	store %oop %r336, %oop* %t13
	store %oop %r336, %oop* %t15
	br label %L36
L36:
	%r340 = load %oop, %oop* %t15
	%r341 = load %oop, %oop* @"m_*module*"
	%r342 = call %oop @m_module-env.code(%oop %r341)
	%r343 = load %oop, %oop* %t12
	%r344 = call %oop @"m_string->symbol.code"(%oop %r343)
	%r345 = load %oop, %oop* %t13
	%r346 = call %oop @m_environment-define.code(%oop %r342, %oop %r344, %oop %r345)
	store %oop %r346, %oop* %t14
	%r348 = getelementptr %oop, %oop* %t13, %word 0
	%r347 = bitcast %oop* %r348 to %oop
	%r349 = call %oop @"m_gc/pop-root.code"(%oop %r347)
	%r350 = load %oop, %oop* %t14
	store %oop %r350, %oop* %t13
	%r352 = getelementptr %oop, %oop* %t12, %word 0
	%r351 = bitcast %oop* %r352 to %oop
	%r353 = call %oop @"m_gc/pop-root.code"(%oop %r351)
	%r354 = load %oop, %oop* %t13
	store %oop %r354, %oop* %t11
	br label %L27
L26:
	%r355 = load %oop, %oop* @"m_*verbosity*"
	%r356 = inttoptr %word 1 to %oop
	%r360 = ptrtoint %oop %r356 to %word
	%r359 = ptrtoint %oop %r355 to %word
	%r358 = icmp sle %word %r360, %r359
	%r357 = inttoptr i1 %r358 to %oop
	%r362 = ptrtoint %oop %r357 to %word
	%r361 = icmp ne %word %r362, 0
	br i1 %r361, label %L37, label %L38
L37:
	%r363 = load %oop, %oop* @"m_*maru-module*"
	%r364 = load %oop, %oop* @"m_symbol/*debug-output*"
	%r365 = call %oop @m_global-variable-value.code(%oop %r363, %oop %r364)
	%r366 = getelementptr %"<string>", %"<string>"* @m_ostr1397, i32 0, i32 1
	%r367 = bitcast %word* %r366 to %oop
	%r368 = inttoptr %word 0 to %oop
	%r369 = call %oop @m_do-print.code(%oop %r365, %oop %r367, %oop %r368)
	%r370 = load %oop, %oop* @"m_*maru-module*"
	%r371 = load %oop, %oop* @"m_symbol/*debug-output*"
	%r372 = call %oop @m_global-variable-value.code(%oop %r370, %oop %r371)
	%r373 = load %oop, %oop* %t4
	%r374 = inttoptr %word 0 to %oop
	%r375 = call %oop @m_do-print.code(%oop %r372, %oop %r373, %oop %r374)
	%r376 = load %oop, %oop* @"m_*maru-module*"
	%r377 = load %oop, %oop* @"m_symbol/*debug-output*"
	%r378 = call %oop @m_global-variable-value.code(%oop %r376, %oop %r377)
	%r379 = getelementptr %"<string>", %"<string>"* @m_ostr1399, i32 0, i32 1
	%r380 = bitcast %word* %r379 to %oop
	%r381 = inttoptr %word 0 to %oop
	%r382 = call %oop @m_do-print.code(%oop %r378, %oop %r380, %oop %r381)
	store %oop %r382, %oop* %t12
	br label %L39
L38:
	%r383 = inttoptr %word 0 to %oop
	store %oop %r383, %oop* %t12
	br label %L39
L39:
	%r384 = load %oop, %oop* %t12
	%r385 = load %oop, %oop* %t4
	store %oop %r385, %oop* %t12
	%r387 = getelementptr %oop, %oop* %t12, %word 0
	%r386 = bitcast %oop* %r387 to %oop
	%r388 = call %oop @"m_gc/push-root.code"(%oop %r386)
	%r389 = inttoptr %word 0 to %oop
	store %oop %r389, %oop* %t13
	%r390 = load %oop, %oop* %t12
	%r391 = getelementptr %"<string>", %"<string>"* @m_ostr1401, i32 0, i32 1
	%r392 = bitcast %word* %r391 to %oop
	%r393 = call %oop @m_file-open.code(%oop %r390, %oop %r392)
	store %oop %r393, %oop* %t13
	%r394 = inttoptr %word 0 to %oop
	%r398 = ptrtoint %oop %r394 to %word
	%r397 = ptrtoint %oop %r393 to %word
	%r396 = icmp eq %word %r398, %r397
	%r395 = inttoptr i1 %r396 to %oop
	%r400 = ptrtoint %oop %r395 to %word
	%r399 = icmp ne %word %r400, 0
	br i1 %r399, label %L41, label %L40
L41:
	%r401 = call %oop @m_error-prologue.code()
	%r402 = getelementptr %"<string>", %"<string>"* @m_ostr1403, i32 0, i32 1
	%r403 = bitcast %word* %r402 to %oop
	%r404 = call %oop @"m_%error.code"(%oop %r403)
	%r405 = load %oop, %oop* %t12
	%r406 = call %oop @"m_%error.code"(%oop %r405)
	%r407 = call %oop @m_error-epilogue.code()
	store %oop %r407, %oop* %t13
	%r408 = inttoptr %word 0 to %oop
	%r412 = ptrtoint %oop %r408 to %word
	%r411 = ptrtoint %oop %r407 to %word
	%r410 = icmp eq %word %r412, %r411
	%r409 = inttoptr i1 %r410 to %oop
	%r414 = ptrtoint %oop %r409 to %word
	%r413 = icmp ne %word %r414, 0
	br i1 %r413, label %L42, label %L40
L42:
	br label %L40
L40:
	%r415 = load %oop, %oop* %t13
	store %oop %r415, %oop* %t13
	%r417 = getelementptr %oop, %oop* %t13, %word 0
	%r416 = bitcast %oop* %r417 to %oop
	%r418 = call %oop @"m_gc/push-root.code"(%oop %r416)
	%r419 = load %oop, %oop* %t13
	%r420 = call %oop @m_file-stream.code(%oop %r419)
	store %oop %r420, %oop* %t14
	%r422 = getelementptr %oop, %oop* %t14, %word 0
	%r421 = bitcast %oop* %r422 to %oop
	%r423 = call %oop @"m_gc/push-root.code"(%oop %r421)
	%r424 = load %oop, %oop* %t14
	%r425 = call %oop @m_repl-stream.code(%oop %r424)
	store %oop %r425, %oop* %t15
	%r427 = getelementptr %oop, %oop* %t15, %word 0
	%r426 = bitcast %oop* %r427 to %oop
	%r428 = call %oop @"m_gc/push-root.code"(%oop %r426)
	%r429 = load %oop, %oop* %t13
	%r430 = call %oop @m_file-close.code(%oop %r429)
	%r431 = load %oop, %oop* %t15
	store %oop %r431, %oop* %t16
	%r433 = getelementptr %oop, %oop* %t15, %word 0
	%r432 = bitcast %oop* %r433 to %oop
	%r434 = call %oop @"m_gc/pop-root.code"(%oop %r432)
	%r435 = load %oop, %oop* %t16
	store %oop %r435, %oop* %t15
	%r437 = getelementptr %oop, %oop* %t14, %word 0
	%r436 = bitcast %oop* %r437 to %oop
	%r438 = call %oop @"m_gc/pop-root.code"(%oop %r436)
	%r439 = load %oop, %oop* %t15
	store %oop %r439, %oop* %t14
	%r441 = getelementptr %oop, %oop* %t13, %word 0
	%r440 = bitcast %oop* %r441 to %oop
	%r442 = call %oop @"m_gc/pop-root.code"(%oop %r440)
	%r443 = load %oop, %oop* %t14
	store %oop %r443, %oop* %t13
	%r445 = getelementptr %oop, %oop* %t12, %word 0
	%r444 = bitcast %oop* %r445 to %oop
	%r446 = call %oop @"m_gc/pop-root.code"(%oop %r444)
	%r447 = load %oop, %oop* %t13
	store %oop %r447, %oop* %t11
	br label %L27
L27:
	%r448 = load %oop, %oop* %t11
	store %oop %r448, %oop* %t10
	br label %L21
L21:
	%r449 = load %oop, %oop* %t10
	store %oop %r449, %oop* %t9
	br label %L18
L18:
	%r450 = load %oop, %oop* %t9
	store %oop %r450, %oop* %t8
	br label %L15
L15:
	%r451 = load %oop, %oop* %t8
	store %oop %r451, %oop* %t7
	br label %L12
L12:
	%r452 = load %oop, %oop* %t7
	store %oop %r452, %oop* %t6
	br label %L9
L9:
	%r453 = load %oop, %oop* %t6
	br label %L5
L5:
	%r454 = inttoptr %word 1 to %oop
	%r455 = load %oop, %oop* %t2
	%r459 = bitcast %oop %r455 to [0 x %oop]*
	%r458 = ptrtoint %oop %r454 to %word
	%r457 = getelementptr [0 x %oop], [0 x %oop]* %r459, %word 0, %word %r458
	%r456 = load %oop, %oop* %r457
	store %oop %r456, %oop* %t3
	%r460 = call %oop @"m_pair?.code"(%oop %r456)
	%r462 = ptrtoint %oop %r460 to %word
	%r461 = icmp ne %word %r462, 0
	br i1 %r461, label %L4, label %L6
L6:
	store %oop %r460, %oop* %t6
	%r464 = getelementptr %oop, %oop* %t5, %word 0
	%r463 = bitcast %oop* %r464 to %oop
	%r465 = call %oop @"m_gc/pop-root.code"(%oop %r463)
	%r466 = load %oop, %oop* %t6
	store %oop %r466, %oop* %t5
	%r468 = getelementptr %oop, %oop* %t4, %word 0
	%r467 = bitcast %oop* %r468 to %oop
	%r469 = call %oop @"m_gc/pop-root.code"(%oop %r467)
	%r470 = load %oop, %oop* %t5
	ret %oop %r470
}
@m_cstr1404 = private unnamed_addr constant [31 x i8] c"process-command-line-arguments\00"
@m_ostr1405 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 61, %oop bitcast ([31 x i8]* @m_cstr1404 to %oop) }
@m_process-command-line-arguments = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @m_process-command-line-arguments.code to %oop), %"<string>"* @m_ostr1405 }
@m_cstr1406 = private unnamed_addr constant [7 x i8] c"define\00"
@m_ostr1407 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1406 to %oop) }
@m_cstr1408 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1409 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1408 to %oop) }
@m_cstr1410 = private unnamed_addr constant [9 x i8] c"variable\00"
@m_ostr1411 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr1410 to %oop) }
@m_cstr1412 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1413 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1412 to %oop) }
@m_cstr1414 = private unnamed_addr constant [11 x i8] c"<variable>\00"
@m_ostr1415 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr1414 to %oop) }
@m_cstr1416 = private unnamed_addr constant [7 x i8] c"define\00"
@m_ostr1417 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1416 to %oop) }
@m_cstr1418 = private unnamed_addr constant [7 x i8] c"define\00"
@m_ostr1419 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1418 to %oop) }
@m_cstr1420 = private unnamed_addr constant [7 x i8] c"define\00"
@m_ostr1421 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1420 to %oop) }
define %oop @"m_define/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	%t8 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = load %oop, %oop* %t2
	%r5 = call %oop @"m_pair?.code"(%oop %r4)
	%r7 = ptrtoint %oop %r5 to %word
	%r6 = icmp ne %word %r7, 0
	br i1 %r6, label %L1, label %L2
L1:
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t2
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	%r10 = load %oop, %oop* %r11
	store %oop %r10, %oop* %t3
	%r14 = inttoptr %word 0 to %oop
	store %oop %r14, %oop* %t6
	%r15 = load %oop, %oop* %t3
	%r16 = call %oop @m_type-of.code(%oop %r15)
	%r17 = inttoptr %word 16 to %oop
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = icmp eq %word %r21, %r20
	%r18 = inttoptr i1 %r19 to %oop
	store %oop %r18, %oop* %t6
	%r22 = inttoptr %word 0 to %oop
	%r26 = ptrtoint %oop %r22 to %word
	%r25 = ptrtoint %oop %r18 to %word
	%r24 = icmp eq %word %r26, %r25
	%r23 = inttoptr i1 %r24 to %oop
	%r28 = ptrtoint %oop %r23 to %word
	%r27 = icmp ne %word %r28, 0
	br i1 %r27, label %L5, label %L4
L5:
	%r29 = call %oop @m_error-prologue.code()
	%r30 = getelementptr %"<string>", %"<string>"* @m_ostr1407, i32 0, i32 1
	%r31 = bitcast %word* %r30 to %oop
	%r32 = call %oop @"m_%error.code"(%oop %r31)
	%r33 = getelementptr %"<string>", %"<string>"* @m_ostr1409, i32 0, i32 1
	%r34 = bitcast %word* %r33 to %oop
	%r35 = call %oop @"m_%error.code"(%oop %r34)
	%r36 = getelementptr %"<string>", %"<string>"* @m_ostr1411, i32 0, i32 1
	%r37 = bitcast %word* %r36 to %oop
	%r38 = call %oop @"m_%error.code"(%oop %r37)
	%r39 = getelementptr %"<string>", %"<string>"* @m_ostr1413, i32 0, i32 1
	%r40 = bitcast %word* %r39 to %oop
	%r41 = call %oop @"m_%error.code"(%oop %r40)
	%r42 = getelementptr %"<string>", %"<string>"* @m_ostr1415, i32 0, i32 1
	%r43 = bitcast %word* %r42 to %oop
	%r44 = call %oop @"m_%error.code"(%oop %r43)
	%r45 = call %oop @m_error-epilogue.code()
	store %oop %r45, %oop* %t6
	%r46 = inttoptr %word 0 to %oop
	%r50 = ptrtoint %oop %r46 to %word
	%r49 = ptrtoint %oop %r45 to %word
	%r48 = icmp eq %word %r50, %r49
	%r47 = inttoptr i1 %r48 to %oop
	%r52 = ptrtoint %oop %r47 to %word
	%r51 = icmp ne %word %r52, 0
	br i1 %r51, label %L6, label %L4
L6:
	br label %L4
L4:
	%r53 = load %oop, %oop* %t6
	%r54 = inttoptr %word 1 to %oop
	%r55 = load %oop, %oop* %t2
	%r59 = bitcast %oop %r55 to [0 x %oop]*
	%r58 = ptrtoint %oop %r54 to %word
	%r57 = getelementptr [0 x %oop], [0 x %oop]* %r59, %word 0, %word %r58
	%r56 = load %oop, %oop* %r57
	store %oop %r56, %oop* %t2
	store %oop %r56, %oop* %t5
	br label %L3
L2:
	%r60 = getelementptr %"<string>", %"<string>"* @m_ostr1417, i32 0, i32 1
	%r61 = bitcast %word* %r60 to %oop
	%r62 = load %oop, %oop* %t0
	%r63 = call %oop @"m_%not-enough-arguments.code"(%oop %r61, %oop %r62)
	store %oop %r63, %oop* %t5
	br label %L3
L3:
	%r64 = load %oop, %oop* %t5
	%r65 = load %oop, %oop* %t2
	%r66 = call %oop @"m_pair?.code"(%oop %r65)
	%r68 = ptrtoint %oop %r66 to %word
	%r67 = icmp ne %word %r68, 0
	br i1 %r67, label %L7, label %L8
L7:
	%r69 = inttoptr %word 0 to %oop
	%r70 = load %oop, %oop* %t2
	%r74 = bitcast %oop %r70 to [0 x %oop]*
	%r73 = ptrtoint %oop %r69 to %word
	%r72 = getelementptr [0 x %oop], [0 x %oop]* %r74, %word 0, %word %r73
	%r71 = load %oop, %oop* %r72
	store %oop %r71, %oop* %t4
	%r75 = inttoptr %word 1 to %oop
	%r76 = load %oop, %oop* %t2
	%r80 = bitcast %oop %r76 to [0 x %oop]*
	%r79 = ptrtoint %oop %r75 to %word
	%r78 = getelementptr [0 x %oop], [0 x %oop]* %r80, %word 0, %word %r79
	%r77 = load %oop, %oop* %r78
	store %oop %r77, %oop* %t2
	store %oop %r77, %oop* %t5
	br label %L9
L8:
	%r81 = getelementptr %"<string>", %"<string>"* @m_ostr1419, i32 0, i32 1
	%r82 = bitcast %word* %r81 to %oop
	%r83 = load %oop, %oop* %t0
	%r84 = call %oop @"m_%not-enough-arguments.code"(%oop %r82, %oop %r83)
	store %oop %r84, %oop* %t5
	br label %L9
L9:
	%r85 = load %oop, %oop* %t5
	%r86 = load %oop, %oop* %t2
	%r88 = ptrtoint %oop %r86 to %word
	%r87 = icmp ne %word %r88, 0
	br i1 %r87, label %L10, label %L11
L10:
	%r89 = getelementptr %"<string>", %"<string>"* @m_ostr1421, i32 0, i32 1
	%r90 = bitcast %word* %r89 to %oop
	%r91 = load %oop, %oop* %t0
	%r92 = call %oop @"m_%too-many-arguments.code"(%oop %r90, %oop %r91)
	store %oop %r92, %oop* %t5
	br label %L12
L11:
	%r93 = inttoptr %word 0 to %oop
	store %oop %r93, %oop* %t5
	br label %L12
L12:
	%r94 = load %oop, %oop* %t5
	%r95 = load %oop, %oop* %t4
	%r96 = load %oop, %oop* %t1
	%r97 = call %oop @m_eval.code(%oop %r95, %oop %r96)
	store %oop %r97, %oop* %t5
	%r98 = load %oop, %oop* %t5
	%r99 = inttoptr %word 1 to %oop
	%r100 = load %oop, %oop* %t3
	%r104 = bitcast %oop %r100 to [0 x %oop]*
	%r103 = ptrtoint %oop %r99 to %word
	%r102 = getelementptr [0 x %oop], [0 x %oop]* %r104, %word 0, %word %r103
	store %oop %r98, %oop* %r102
	%r101 = bitcast %oop %r98 to %oop
	%r105 = load %oop, %oop* %t5
	store %oop %r105, %oop* %t6
	%r106 = load %oop, %oop* %t6
	%r107 = call %oop @m_type-of.code(%oop %r106)
	%r108 = inttoptr %word 15 to %oop
	%r112 = ptrtoint %oop %r108 to %word
	%r111 = ptrtoint %oop %r107 to %word
	%r110 = icmp eq %word %r112, %r111
	%r109 = inttoptr i1 %r110 to %oop
	%r114 = ptrtoint %oop %r109 to %word
	%r113 = icmp ne %word %r114, 0
	br i1 %r113, label %L13, label %L14
L13:
	%r115 = inttoptr %word 0 to %oop
	%r116 = load %oop, %oop* %t6
	%r120 = bitcast %oop %r116 to [0 x %oop]*
	%r119 = ptrtoint %oop %r115 to %word
	%r118 = getelementptr [0 x %oop], [0 x %oop]* %r120, %word 0, %word %r119
	%r117 = load %oop, %oop* %r118
	store %oop %r117, %oop* %t6
	store %oop %r117, %oop* %t7
	br label %L15
L14:
	%r121 = inttoptr %word 0 to %oop
	store %oop %r121, %oop* %t7
	br label %L15
L15:
	%r122 = load %oop, %oop* %t7
	%r123 = inttoptr %word 1 to %oop
	store %oop %r123, %oop* %t8
	%r124 = load %oop, %oop* %t6
	%r125 = call %oop @m_type-of.code(%oop %r124)
	%r126 = inttoptr %word 14 to %oop
	%r130 = ptrtoint %oop %r126 to %word
	%r129 = ptrtoint %oop %r125 to %word
	%r128 = icmp eq %word %r130, %r129
	%r127 = inttoptr i1 %r128 to %oop
	store %oop %r127, %oop* %t8
	%r131 = inttoptr %word 0 to %oop
	%r135 = ptrtoint %oop %r131 to %word
	%r134 = ptrtoint %oop %r127 to %word
	%r133 = icmp eq %word %r135, %r134
	%r132 = inttoptr i1 %r133 to %oop
	%r137 = ptrtoint %oop %r132 to %word
	%r136 = icmp ne %word %r137, 0
	br i1 %r136, label %L19, label %L20
L20:
	%r138 = inttoptr %word 4 to %oop
	%r139 = load %oop, %oop* %t6
	%r143 = bitcast %oop %r139 to [0 x %oop]*
	%r142 = ptrtoint %oop %r138 to %word
	%r141 = getelementptr [0 x %oop], [0 x %oop]* %r143, %word 0, %word %r142
	%r140 = load %oop, %oop* %r141
	%r147 = ptrtoint %oop %r140 to %word
	%r146 = icmp eq %word %r147, 0
	%r145 = zext i1 %r146 to %word
	%r144 = inttoptr %word %r145 to %oop
	store %oop %r144, %oop* %t8
	%r148 = inttoptr %word 0 to %oop
	%r152 = ptrtoint %oop %r148 to %word
	%r151 = ptrtoint %oop %r144 to %word
	%r150 = icmp eq %word %r152, %r151
	%r149 = inttoptr i1 %r150 to %oop
	%r154 = ptrtoint %oop %r149 to %word
	%r153 = icmp ne %word %r154, 0
	br i1 %r153, label %L19, label %L21
L21:
	br label %L19
L19:
	%r155 = load %oop, %oop* %t8
	%r157 = ptrtoint %oop %r155 to %word
	%r156 = icmp ne %word %r157, 0
	br i1 %r156, label %L16, label %L17
L16:
	%r158 = inttoptr %word 0 to %oop
	%r159 = load %oop, %oop* %t3
	%r163 = bitcast %oop %r159 to [0 x %oop]*
	%r162 = ptrtoint %oop %r158 to %word
	%r161 = getelementptr [0 x %oop], [0 x %oop]* %r163, %word 0, %word %r162
	%r160 = load %oop, %oop* %r161
	%r164 = inttoptr %word 4 to %oop
	%r165 = load %oop, %oop* %t6
	%r169 = bitcast %oop %r165 to [0 x %oop]*
	%r168 = ptrtoint %oop %r164 to %word
	%r167 = getelementptr [0 x %oop], [0 x %oop]* %r169, %word 0, %word %r168
	store %oop %r160, %oop* %r167
	%r166 = bitcast %oop %r160 to %oop
	store %oop %r166, %oop* %t7
	br label %L18
L17:
	%r170 = inttoptr %word 0 to %oop
	store %oop %r170, %oop* %t7
	br label %L18
L18:
	%r171 = load %oop, %oop* %t7
	%r172 = load %oop, %oop* %t5
	ret %oop %r172
}
@m_cstr1422 = private unnamed_addr constant [22 x i8] c"define/evaluator-stub\00"
@m_ostr1423 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 43, %oop bitcast ([22 x i8]* @m_cstr1422 to %oop) }
@"m_define/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_define/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1423 }
define %oop @"m_eval/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @m_cdr.code(%oop %r1)
	%r4 = ptrtoint %oop %r2 to %word
	%r3 = icmp ne %word %r4, 0
	br i1 %r3, label %L1, label %L2
L1:
	%r5 = load %oop, %oop* %t0
	%r6 = call %oop @m_cadr.code(%oop %r5)
	store %oop %r6, %oop* %t2
	br label %L3
L2:
	%r7 = inttoptr %word 0 to %oop
	%r8 = load %oop, %oop* @"m_*module*"
	%r12 = bitcast %oop %r8 to [0 x %oop]*
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = getelementptr [0 x %oop], [0 x %oop]* %r12, %word 0, %word %r11
	%r9 = load %oop, %oop* %r10
	store %oop %r9, %oop* %t2
	br label %L3
L3:
	%r13 = load %oop, %oop* %t2
	store %oop %r13, %oop* %t2
	%r14 = inttoptr %word 1 to %oop
	%r15 = inttoptr %word 1 to %oop
	%r16 = load %oop, %oop* %t2
	%r20 = bitcast %oop %r16 to [0 x %oop]*
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = getelementptr [0 x %oop], [0 x %oop]* %r20, %word 0, %word %r19
	%r17 = load %oop, %oop* %r18
	%r24 = ptrtoint %oop %r17 to %word
	%r23 = ptrtoint %oop %r14 to %word
	%r22 = ashr %word %r24, %r23
	%r21 = inttoptr %word %r22 to %oop
	%r25 = inttoptr %word 0 to %oop
	%r29 = ptrtoint %oop %r25 to %word
	%r28 = ptrtoint %oop %r21 to %word
	%r27 = icmp eq %word %r29, %r28
	%r26 = inttoptr i1 %r27 to %oop
	store %oop %r26, %oop* %t3
	%r30 = inttoptr %word 0 to %oop
	%r31 = load %oop, %oop* @"m_*module*"
	%r35 = bitcast %oop %r31 to [0 x %oop]*
	%r34 = ptrtoint %oop %r30 to %word
	%r33 = getelementptr [0 x %oop], [0 x %oop]* %r35, %word 0, %word %r34
	%r32 = load %oop, %oop* %r33
	store %oop %r32, %oop* %t4
	%r36 = inttoptr %word 0 to %oop
	store %oop %r36, %oop* %t5
	%r37 = load %oop, %oop* %t3
	%r39 = ptrtoint %oop %r37 to %word
	%r38 = icmp ne %word %r39, 0
	br i1 %r38, label %L4, label %L5
L4:
	%r40 = load %oop, %oop* %t2
	%r41 = inttoptr %word 0 to %oop
	%r42 = load %oop, %oop* @"m_*module*"
	%r46 = bitcast %oop %r42 to [0 x %oop]*
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = getelementptr [0 x %oop], [0 x %oop]* %r46, %word 0, %word %r45
	store %oop %r40, %oop* %r44
	%r43 = bitcast %oop %r40 to %oop
	%r47 = call %oop @m_capture-well-known-module-values.code()
	store %oop %r47, %oop* %t6
	br label %L6
L5:
	%r48 = inttoptr %word 0 to %oop
	store %oop %r48, %oop* %t6
	br label %L6
L6:
	%r49 = load %oop, %oop* %t6
	%r50 = load %oop, %oop* %t2
	%r51 = inttoptr %word 1 to %oop
	%r52 = inttoptr %word 0 to %oop
	%r53 = call %oop @m_environment.code(%oop %r50, %oop %r51, %oop %r52)
	store %oop %r53, %oop* %t6
	%r55 = getelementptr %oop, %oop* %t6, %word 0
	%r54 = bitcast %oop* %r55 to %oop
	%r56 = call %oop @"m_gc/push-root.code"(%oop %r54)
	%r57 = load %oop, %oop* %t0
	%r58 = call %oop @m_car.code(%oop %r57)
	%r59 = load %oop, %oop* %t6
	%r60 = call %oop @m_expand-encode-eval.code(%oop %r58, %oop %r59)
	store %oop %r60, %oop* %t7
	%r62 = getelementptr %oop, %oop* %t6, %word 0
	%r61 = bitcast %oop* %r62 to %oop
	%r63 = call %oop @"m_gc/pop-root.code"(%oop %r61)
	%r64 = load %oop, %oop* %t7
	store %oop %r64, %oop* %t5
	%r65 = load %oop, %oop* %t3
	%r67 = ptrtoint %oop %r65 to %word
	%r66 = icmp ne %word %r67, 0
	br i1 %r66, label %L7, label %L8
L7:
	%r68 = load %oop, %oop* %t4
	%r69 = inttoptr %word 0 to %oop
	%r70 = load %oop, %oop* @"m_*module*"
	%r74 = bitcast %oop %r70 to [0 x %oop]*
	%r73 = ptrtoint %oop %r69 to %word
	%r72 = getelementptr [0 x %oop], [0 x %oop]* %r74, %word 0, %word %r73
	store %oop %r68, %oop* %r72
	%r71 = bitcast %oop %r68 to %oop
	%r75 = call %oop @m_capture-well-known-module-values.code()
	store %oop %r75, %oop* %t6
	br label %L9
L8:
	%r76 = inttoptr %word 0 to %oop
	store %oop %r76, %oop* %t6
	br label %L9
L9:
	%r77 = load %oop, %oop* %t6
	%r78 = load %oop, %oop* %t5
	ret %oop %r78
}
@m_cstr1424 = private unnamed_addr constant [20 x i8] c"eval/evaluator-stub\00"
@m_ostr1425 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 39, %oop bitcast ([20 x i8]* @m_cstr1424 to %oop) }
@"m_eval/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_eval/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1425 }
@m_cstr1426 = private unnamed_addr constant [15 x i8] c"eval-in-module\00"
@m_ostr1427 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr1426 to %oop) }
@m_cstr1428 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1429 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1428 to %oop) }
@m_cstr1430 = private unnamed_addr constant [7 x i8] c"module\00"
@m_ostr1431 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1430 to %oop) }
@m_cstr1432 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1433 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1432 to %oop) }
@m_cstr1434 = private unnamed_addr constant [9 x i8] c"<module>\00"
@m_ostr1435 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr1434 to %oop) }
@m_cstr1436 = private unnamed_addr constant [15 x i8] c"eval-in-module\00"
@m_ostr1437 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr1436 to %oop) }
@m_cstr1438 = private unnamed_addr constant [15 x i8] c"eval-in-module\00"
@m_ostr1439 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr1438 to %oop) }
@m_cstr1440 = private unnamed_addr constant [15 x i8] c"eval-in-module\00"
@m_ostr1441 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr1440 to %oop) }
define %oop @"m_eval-in-module/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	%t8 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = load %oop, %oop* %t2
	%r5 = call %oop @"m_pair?.code"(%oop %r4)
	%r7 = ptrtoint %oop %r5 to %word
	%r6 = icmp ne %word %r7, 0
	br i1 %r6, label %L1, label %L2
L1:
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t2
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	%r10 = load %oop, %oop* %r11
	store %oop %r10, %oop* %t3
	%r14 = inttoptr %word 0 to %oop
	store %oop %r14, %oop* %t6
	%r15 = load %oop, %oop* %t3
	%r16 = call %oop @m_type-of.code(%oop %r15)
	%r17 = inttoptr %word 18 to %oop
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = icmp eq %word %r21, %r20
	%r18 = inttoptr i1 %r19 to %oop
	store %oop %r18, %oop* %t6
	%r22 = inttoptr %word 0 to %oop
	%r26 = ptrtoint %oop %r22 to %word
	%r25 = ptrtoint %oop %r18 to %word
	%r24 = icmp eq %word %r26, %r25
	%r23 = inttoptr i1 %r24 to %oop
	%r28 = ptrtoint %oop %r23 to %word
	%r27 = icmp ne %word %r28, 0
	br i1 %r27, label %L5, label %L4
L5:
	%r29 = call %oop @m_error-prologue.code()
	%r30 = getelementptr %"<string>", %"<string>"* @m_ostr1427, i32 0, i32 1
	%r31 = bitcast %word* %r30 to %oop
	%r32 = call %oop @"m_%error.code"(%oop %r31)
	%r33 = getelementptr %"<string>", %"<string>"* @m_ostr1429, i32 0, i32 1
	%r34 = bitcast %word* %r33 to %oop
	%r35 = call %oop @"m_%error.code"(%oop %r34)
	%r36 = getelementptr %"<string>", %"<string>"* @m_ostr1431, i32 0, i32 1
	%r37 = bitcast %word* %r36 to %oop
	%r38 = call %oop @"m_%error.code"(%oop %r37)
	%r39 = getelementptr %"<string>", %"<string>"* @m_ostr1433, i32 0, i32 1
	%r40 = bitcast %word* %r39 to %oop
	%r41 = call %oop @"m_%error.code"(%oop %r40)
	%r42 = getelementptr %"<string>", %"<string>"* @m_ostr1435, i32 0, i32 1
	%r43 = bitcast %word* %r42 to %oop
	%r44 = call %oop @"m_%error.code"(%oop %r43)
	%r45 = call %oop @m_error-epilogue.code()
	store %oop %r45, %oop* %t6
	%r46 = inttoptr %word 0 to %oop
	%r50 = ptrtoint %oop %r46 to %word
	%r49 = ptrtoint %oop %r45 to %word
	%r48 = icmp eq %word %r50, %r49
	%r47 = inttoptr i1 %r48 to %oop
	%r52 = ptrtoint %oop %r47 to %word
	%r51 = icmp ne %word %r52, 0
	br i1 %r51, label %L6, label %L4
L6:
	br label %L4
L4:
	%r53 = load %oop, %oop* %t6
	%r54 = inttoptr %word 1 to %oop
	%r55 = load %oop, %oop* %t2
	%r59 = bitcast %oop %r55 to [0 x %oop]*
	%r58 = ptrtoint %oop %r54 to %word
	%r57 = getelementptr [0 x %oop], [0 x %oop]* %r59, %word 0, %word %r58
	%r56 = load %oop, %oop* %r57
	store %oop %r56, %oop* %t2
	store %oop %r56, %oop* %t5
	br label %L3
L2:
	%r60 = getelementptr %"<string>", %"<string>"* @m_ostr1437, i32 0, i32 1
	%r61 = bitcast %word* %r60 to %oop
	%r62 = load %oop, %oop* %t0
	%r63 = call %oop @"m_%not-enough-arguments.code"(%oop %r61, %oop %r62)
	store %oop %r63, %oop* %t5
	br label %L3
L3:
	%r64 = load %oop, %oop* %t5
	%r65 = load %oop, %oop* %t2
	%r66 = call %oop @"m_pair?.code"(%oop %r65)
	%r68 = ptrtoint %oop %r66 to %word
	%r67 = icmp ne %word %r68, 0
	br i1 %r67, label %L7, label %L8
L7:
	%r69 = inttoptr %word 0 to %oop
	%r70 = load %oop, %oop* %t2
	%r74 = bitcast %oop %r70 to [0 x %oop]*
	%r73 = ptrtoint %oop %r69 to %word
	%r72 = getelementptr [0 x %oop], [0 x %oop]* %r74, %word 0, %word %r73
	%r71 = load %oop, %oop* %r72
	store %oop %r71, %oop* %t4
	%r75 = inttoptr %word 1 to %oop
	%r76 = load %oop, %oop* %t2
	%r80 = bitcast %oop %r76 to [0 x %oop]*
	%r79 = ptrtoint %oop %r75 to %word
	%r78 = getelementptr [0 x %oop], [0 x %oop]* %r80, %word 0, %word %r79
	%r77 = load %oop, %oop* %r78
	store %oop %r77, %oop* %t2
	store %oop %r77, %oop* %t5
	br label %L9
L8:
	%r81 = getelementptr %"<string>", %"<string>"* @m_ostr1439, i32 0, i32 1
	%r82 = bitcast %word* %r81 to %oop
	%r83 = load %oop, %oop* %t0
	%r84 = call %oop @"m_%not-enough-arguments.code"(%oop %r82, %oop %r83)
	store %oop %r84, %oop* %t5
	br label %L9
L9:
	%r85 = load %oop, %oop* %t5
	%r86 = load %oop, %oop* %t2
	%r88 = ptrtoint %oop %r86 to %word
	%r87 = icmp ne %word %r88, 0
	br i1 %r87, label %L10, label %L11
L10:
	%r89 = getelementptr %"<string>", %"<string>"* @m_ostr1441, i32 0, i32 1
	%r90 = bitcast %word* %r89 to %oop
	%r91 = load %oop, %oop* %t0
	%r92 = call %oop @"m_%too-many-arguments.code"(%oop %r90, %oop %r91)
	store %oop %r92, %oop* %t5
	br label %L12
L11:
	%r93 = inttoptr %word 0 to %oop
	store %oop %r93, %oop* %t5
	br label %L12
L12:
	%r94 = load %oop, %oop* %t5
	%r95 = load %oop, %oop* @"m_*verbosity*"
	%r96 = inttoptr %word 2 to %oop
	%r100 = ptrtoint %oop %r96 to %word
	%r99 = ptrtoint %oop %r95 to %word
	%r98 = icmp sle %word %r100, %r99
	%r97 = inttoptr i1 %r98 to %oop
	%r102 = ptrtoint %oop %r97 to %word
	%r101 = icmp ne %word %r102, 0
	br i1 %r101, label %L13, label %L14
L13:
	%r103 = inttoptr %word 0 to %oop
	store %oop %r103, %oop* %t5
	br label %L15
L14:
	%r104 = inttoptr %word 0 to %oop
	store %oop %r104, %oop* %t5
	br label %L15
L15:
	%r105 = load %oop, %oop* %t5
	%r106 = load %oop, %oop* %t3
	%r107 = call %oop @m_module-env.code(%oop %r106)
	%r108 = inttoptr %word 1 to %oop
	%r109 = inttoptr %word 0 to %oop
	%r110 = call %oop @m_environment.code(%oop %r107, %oop %r108, %oop %r109)
	store %oop %r110, %oop* %t5
	%r112 = getelementptr %oop, %oop* %t5, %word 0
	%r111 = bitcast %oop* %r112 to %oop
	%r113 = call %oop @"m_gc/push-root.code"(%oop %r111)
	%r114 = load %oop, %oop* @"m_*module*"
	store %oop %r114, %oop* %t6
	%r116 = getelementptr %oop, %oop* %t6, %word 0
	%r115 = bitcast %oop* %r116 to %oop
	%r117 = call %oop @"m_gc/push-root.code"(%oop %r115)
	%r118 = inttoptr %word 0 to %oop
	store %oop %r118, %oop* %t7
	%r120 = getelementptr %oop, %oop* %t7, %word 0
	%r119 = bitcast %oop* %r120 to %oop
	%r121 = call %oop @"m_gc/push-root.code"(%oop %r119)
	%r122 = load %oop, %oop* %t3
	%r123 = call %oop @m_set-current-module.code(%oop %r122)
	%r124 = load %oop, %oop* %t4
	%r125 = load %oop, %oop* %t5
	%r126 = call %oop @m_expand-encode-eval.code(%oop %r124, %oop %r125)
	store %oop %r126, %oop* %t7
	%r127 = load %oop, %oop* %t6
	%r128 = call %oop @m_set-current-module.code(%oop %r127)
	%r129 = load %oop, %oop* %t7
	store %oop %r129, %oop* %t8
	%r131 = getelementptr %oop, %oop* %t7, %word 0
	%r130 = bitcast %oop* %r131 to %oop
	%r132 = call %oop @"m_gc/pop-root.code"(%oop %r130)
	%r133 = load %oop, %oop* %t8
	store %oop %r133, %oop* %t7
	%r135 = getelementptr %oop, %oop* %t6, %word 0
	%r134 = bitcast %oop* %r135 to %oop
	%r136 = call %oop @"m_gc/pop-root.code"(%oop %r134)
	%r137 = load %oop, %oop* %t7
	store %oop %r137, %oop* %t6
	%r139 = getelementptr %oop, %oop* %t5, %word 0
	%r138 = bitcast %oop* %r139 to %oop
	%r140 = call %oop @"m_gc/pop-root.code"(%oop %r138)
	%r141 = load %oop, %oop* %t6
	ret %oop %r141
}
@m_cstr1442 = private unnamed_addr constant [30 x i8] c"eval-in-module/evaluator-stub\00"
@m_ostr1443 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 59, %oop bitcast ([30 x i8]* @m_cstr1442 to %oop) }
@"m_eval-in-module/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_eval-in-module/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1443 }
@m_cstr1444 = private unnamed_addr constant [7 x i8] c"lambda\00"
@m_ostr1445 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1444 to %oop) }
@m_cstr1446 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1447 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1446 to %oop) }
@m_cstr1448 = private unnamed_addr constant [4 x i8] c"env\00"
@m_ostr1449 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr1448 to %oop) }
@m_cstr1450 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1451 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1450 to %oop) }
@m_cstr1452 = private unnamed_addr constant [6 x i8] c"<env>\00"
@m_ostr1453 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr1452 to %oop) }
@m_cstr1454 = private unnamed_addr constant [7 x i8] c"lambda\00"
@m_ostr1455 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1454 to %oop) }
@m_cstr1456 = private unnamed_addr constant [7 x i8] c"lambda\00"
@m_ostr1457 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1456 to %oop) }
@m_cstr1458 = private unnamed_addr constant [57 x i8] c"lambda primitive-function: parameters is of wrong type: \00"
@m_ostr1459 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 113, %oop bitcast ([57 x i8]* @m_cstr1458 to %oop) }
define %oop @"m_lambda/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t5 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = inttoptr %word 0 to %oop
	store %oop %r4, %oop* %t5
	%r5 = load %oop, %oop* %t2
	%r6 = call %oop @"m_pair?.code"(%oop %r5)
	%r8 = ptrtoint %oop %r6 to %word
	%r7 = icmp ne %word %r8, 0
	br i1 %r7, label %L1, label %L2
L1:
	%r9 = inttoptr %word 0 to %oop
	%r10 = load %oop, %oop* %t2
	%r14 = bitcast %oop %r10 to [0 x %oop]*
	%r13 = ptrtoint %oop %r9 to %word
	%r12 = getelementptr [0 x %oop], [0 x %oop]* %r14, %word 0, %word %r13
	%r11 = load %oop, %oop* %r12
	store %oop %r11, %oop* %t3
	%r15 = inttoptr %word 0 to %oop
	store %oop %r15, %oop* %t7
	%r16 = load %oop, %oop* %t3
	%r17 = call %oop @m_type-of.code(%oop %r16)
	%r18 = inttoptr %word 17 to %oop
	%r22 = ptrtoint %oop %r18 to %word
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = icmp eq %word %r22, %r21
	%r19 = inttoptr i1 %r20 to %oop
	store %oop %r19, %oop* %t7
	%r23 = inttoptr %word 0 to %oop
	%r27 = ptrtoint %oop %r23 to %word
	%r26 = ptrtoint %oop %r19 to %word
	%r25 = icmp eq %word %r27, %r26
	%r24 = inttoptr i1 %r25 to %oop
	%r29 = ptrtoint %oop %r24 to %word
	%r28 = icmp ne %word %r29, 0
	br i1 %r28, label %L5, label %L4
L5:
	%r30 = call %oop @m_error-prologue.code()
	%r31 = getelementptr %"<string>", %"<string>"* @m_ostr1445, i32 0, i32 1
	%r32 = bitcast %word* %r31 to %oop
	%r33 = call %oop @"m_%error.code"(%oop %r32)
	%r34 = getelementptr %"<string>", %"<string>"* @m_ostr1447, i32 0, i32 1
	%r35 = bitcast %word* %r34 to %oop
	%r36 = call %oop @"m_%error.code"(%oop %r35)
	%r37 = getelementptr %"<string>", %"<string>"* @m_ostr1449, i32 0, i32 1
	%r38 = bitcast %word* %r37 to %oop
	%r39 = call %oop @"m_%error.code"(%oop %r38)
	%r40 = getelementptr %"<string>", %"<string>"* @m_ostr1451, i32 0, i32 1
	%r41 = bitcast %word* %r40 to %oop
	%r42 = call %oop @"m_%error.code"(%oop %r41)
	%r43 = getelementptr %"<string>", %"<string>"* @m_ostr1453, i32 0, i32 1
	%r44 = bitcast %word* %r43 to %oop
	%r45 = call %oop @"m_%error.code"(%oop %r44)
	%r46 = call %oop @m_error-epilogue.code()
	store %oop %r46, %oop* %t7
	%r47 = inttoptr %word 0 to %oop
	%r51 = ptrtoint %oop %r47 to %word
	%r50 = ptrtoint %oop %r46 to %word
	%r49 = icmp eq %word %r51, %r50
	%r48 = inttoptr i1 %r49 to %oop
	%r53 = ptrtoint %oop %r48 to %word
	%r52 = icmp ne %word %r53, 0
	br i1 %r52, label %L6, label %L4
L6:
	br label %L4
L4:
	%r54 = load %oop, %oop* %t7
	%r55 = inttoptr %word 1 to %oop
	%r56 = load %oop, %oop* %t2
	%r60 = bitcast %oop %r56 to [0 x %oop]*
	%r59 = ptrtoint %oop %r55 to %word
	%r58 = getelementptr [0 x %oop], [0 x %oop]* %r60, %word 0, %word %r59
	%r57 = load %oop, %oop* %r58
	store %oop %r57, %oop* %t2
	store %oop %r57, %oop* %t6
	br label %L3
L2:
	%r61 = getelementptr %"<string>", %"<string>"* @m_ostr1455, i32 0, i32 1
	%r62 = bitcast %word* %r61 to %oop
	%r63 = load %oop, %oop* %t0
	%r64 = call %oop @"m_%not-enough-arguments.code"(%oop %r62, %oop %r63)
	store %oop %r64, %oop* %t6
	br label %L3
L3:
	%r65 = load %oop, %oop* %t6
	%r66 = load %oop, %oop* %t2
	%r67 = call %oop @"m_pair?.code"(%oop %r66)
	%r69 = ptrtoint %oop %r67 to %word
	%r68 = icmp ne %word %r69, 0
	br i1 %r68, label %L7, label %L8
L7:
	%r70 = inttoptr %word 0 to %oop
	%r71 = load %oop, %oop* %t2
	%r75 = bitcast %oop %r71 to [0 x %oop]*
	%r74 = ptrtoint %oop %r70 to %word
	%r73 = getelementptr [0 x %oop], [0 x %oop]* %r75, %word 0, %word %r74
	%r72 = load %oop, %oop* %r73
	store %oop %r72, %oop* %t4
	%r76 = inttoptr %word 1 to %oop
	%r77 = load %oop, %oop* %t2
	%r81 = bitcast %oop %r77 to [0 x %oop]*
	%r80 = ptrtoint %oop %r76 to %word
	%r79 = getelementptr [0 x %oop], [0 x %oop]* %r81, %word 0, %word %r80
	%r78 = load %oop, %oop* %r79
	store %oop %r78, %oop* %t2
	store %oop %r78, %oop* %t6
	br label %L9
L8:
	%r82 = getelementptr %"<string>", %"<string>"* @m_ostr1457, i32 0, i32 1
	%r83 = bitcast %word* %r82 to %oop
	%r84 = load %oop, %oop* %t0
	%r85 = call %oop @"m_%not-enough-arguments.code"(%oop %r83, %oop %r84)
	store %oop %r85, %oop* %t6
	br label %L9
L9:
	%r86 = load %oop, %oop* %t6
	%r87 = load %oop, %oop* %t2
	store %oop %r87, %oop* %t5
	%r88 = inttoptr %word 0 to %oop
	store %oop %r88, %oop* %t6
	%r89 = inttoptr %word 0 to %oop
	store %oop %r89, %oop* %t7
	%r90 = load %oop, %oop* %t4
	%r94 = ptrtoint %oop %r90 to %word
	%r93 = icmp eq %word %r94, 0
	%r92 = zext i1 %r93 to %word
	%r91 = inttoptr %word %r92 to %oop
	store %oop %r91, %oop* %t7
	%r95 = inttoptr %word 0 to %oop
	%r99 = ptrtoint %oop %r95 to %word
	%r98 = ptrtoint %oop %r91 to %word
	%r97 = icmp eq %word %r99, %r98
	%r96 = inttoptr i1 %r97 to %oop
	%r101 = ptrtoint %oop %r96 to %word
	%r100 = icmp ne %word %r101, 0
	br i1 %r100, label %L12, label %L11
L12:
	%r102 = load %oop, %oop* %t4
	%r103 = call %oop @m_type-of.code(%oop %r102)
	%r104 = inttoptr %word 16 to %oop
	%r108 = ptrtoint %oop %r104 to %word
	%r107 = ptrtoint %oop %r103 to %word
	%r106 = icmp eq %word %r108, %r107
	%r105 = inttoptr i1 %r106 to %oop
	store %oop %r105, %oop* %t7
	%r109 = inttoptr %word 0 to %oop
	%r113 = ptrtoint %oop %r109 to %word
	%r112 = ptrtoint %oop %r105 to %word
	%r111 = icmp eq %word %r113, %r112
	%r110 = inttoptr i1 %r111 to %oop
	%r115 = ptrtoint %oop %r110 to %word
	%r114 = icmp ne %word %r115, 0
	br i1 %r114, label %L13, label %L11
L13:
	%r116 = load %oop, %oop* %t4
	%r117 = call %oop @"m_pair?.code"(%oop %r116)
	store %oop %r117, %oop* %t7
	%r118 = inttoptr %word 0 to %oop
	%r122 = ptrtoint %oop %r118 to %word
	%r121 = ptrtoint %oop %r117 to %word
	%r120 = icmp eq %word %r122, %r121
	%r119 = inttoptr i1 %r120 to %oop
	%r124 = ptrtoint %oop %r119 to %word
	%r123 = icmp ne %word %r124, 0
	br i1 %r123, label %L14, label %L11
L14:
	br label %L11
L11:
	%r125 = load %oop, %oop* %t7
	store %oop %r125, %oop* %t6
	%r126 = inttoptr %word 0 to %oop
	%r130 = ptrtoint %oop %r126 to %word
	%r129 = ptrtoint %oop %r125 to %word
	%r128 = icmp eq %word %r130, %r129
	%r127 = inttoptr i1 %r128 to %oop
	%r132 = ptrtoint %oop %r127 to %word
	%r131 = icmp ne %word %r132, 0
	br i1 %r131, label %L15, label %L10
L15:
	%r133 = call %oop @m_error-prologue.code()
	%r134 = getelementptr %"<string>", %"<string>"* @m_ostr1459, i32 0, i32 1
	%r135 = bitcast %word* %r134 to %oop
	%r136 = call %oop @"m_%error.code"(%oop %r135)
	%r137 = load %oop, %oop* %t4
	%r138 = call %oop @"m_%error.code"(%oop %r137)
	%r139 = call %oop @m_error-epilogue.code()
	store %oop %r139, %oop* %t6
	%r140 = inttoptr %word 0 to %oop
	%r144 = ptrtoint %oop %r140 to %word
	%r143 = ptrtoint %oop %r139 to %word
	%r142 = icmp eq %word %r144, %r143
	%r141 = inttoptr i1 %r142 to %oop
	%r146 = ptrtoint %oop %r141 to %word
	%r145 = icmp ne %word %r146, 0
	br i1 %r145, label %L16, label %L10
L16:
	br label %L10
L10:
	%r147 = load %oop, %oop* %t6
	%r148 = load %oop, %oop* %t4
	%r149 = load %oop, %oop* %t5
	%r150 = load %oop, %oop* %t3
	%r151 = load %oop, %oop* %t1
	%r152 = call %oop @m_expr.code(%oop %r148, %oop %r149, %oop %r150, %oop %r151)
	ret %oop %r152
}
@m_cstr1460 = private unnamed_addr constant [22 x i8] c"lambda/evaluator-stub\00"
@m_ostr1461 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 43, %oop bitcast ([22 x i8]* @m_cstr1460 to %oop) }
@"m_lambda/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_lambda/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1461 }
@m_cstr1462 = private unnamed_addr constant [4 x i8] c"let\00"
@m_ostr1463 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr1462 to %oop) }
@m_cstr1464 = private unnamed_addr constant [4 x i8] c"let\00"
@m_ostr1465 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr1464 to %oop) }
define %oop @"m_let/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t5 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	%t8 = alloca %oop
	%t9 = alloca %oop
	%t10 = alloca %oop
	%t12 = alloca %oop
	%t11 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = inttoptr %word 0 to %oop
	store %oop %r4, %oop* %t5
	%r5 = load %oop, %oop* %t2
	%r6 = call %oop @"m_pair?.code"(%oop %r5)
	%r8 = ptrtoint %oop %r6 to %word
	%r7 = icmp ne %word %r8, 0
	br i1 %r7, label %L1, label %L2
L1:
	%r9 = inttoptr %word 0 to %oop
	%r10 = load %oop, %oop* %t2
	%r14 = bitcast %oop %r10 to [0 x %oop]*
	%r13 = ptrtoint %oop %r9 to %word
	%r12 = getelementptr [0 x %oop], [0 x %oop]* %r14, %word 0, %word %r13
	%r11 = load %oop, %oop* %r12
	store %oop %r11, %oop* %t3
	%r15 = inttoptr %word 1 to %oop
	%r16 = load %oop, %oop* %t2
	%r20 = bitcast %oop %r16 to [0 x %oop]*
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = getelementptr [0 x %oop], [0 x %oop]* %r20, %word 0, %word %r19
	%r17 = load %oop, %oop* %r18
	store %oop %r17, %oop* %t2
	store %oop %r17, %oop* %t6
	br label %L3
L2:
	%r21 = getelementptr %"<string>", %"<string>"* @m_ostr1463, i32 0, i32 1
	%r22 = bitcast %word* %r21 to %oop
	%r23 = load %oop, %oop* %t0
	%r24 = call %oop @"m_%not-enough-arguments.code"(%oop %r22, %oop %r23)
	store %oop %r24, %oop* %t6
	br label %L3
L3:
	%r25 = load %oop, %oop* %t6
	%r26 = load %oop, %oop* %t2
	%r27 = call %oop @"m_pair?.code"(%oop %r26)
	%r29 = ptrtoint %oop %r27 to %word
	%r28 = icmp ne %word %r29, 0
	br i1 %r28, label %L4, label %L5
L4:
	%r30 = inttoptr %word 0 to %oop
	%r31 = load %oop, %oop* %t2
	%r35 = bitcast %oop %r31 to [0 x %oop]*
	%r34 = ptrtoint %oop %r30 to %word
	%r33 = getelementptr [0 x %oop], [0 x %oop]* %r35, %word 0, %word %r34
	%r32 = load %oop, %oop* %r33
	store %oop %r32, %oop* %t4
	%r36 = inttoptr %word 1 to %oop
	%r37 = load %oop, %oop* %t2
	%r41 = bitcast %oop %r37 to [0 x %oop]*
	%r40 = ptrtoint %oop %r36 to %word
	%r39 = getelementptr [0 x %oop], [0 x %oop]* %r41, %word 0, %word %r40
	%r38 = load %oop, %oop* %r39
	store %oop %r38, %oop* %t2
	store %oop %r38, %oop* %t6
	br label %L6
L5:
	%r42 = getelementptr %"<string>", %"<string>"* @m_ostr1465, i32 0, i32 1
	%r43 = bitcast %word* %r42 to %oop
	%r44 = load %oop, %oop* %t0
	%r45 = call %oop @"m_%not-enough-arguments.code"(%oop %r43, %oop %r44)
	store %oop %r45, %oop* %t6
	br label %L6
L6:
	%r46 = load %oop, %oop* %t6
	%r47 = load %oop, %oop* %t2
	store %oop %r47, %oop* %t5
	%r48 = inttoptr %word 2 to %oop
	%r49 = load %oop, %oop* %t1
	%r53 = bitcast %oop %r49 to [0 x %oop]*
	%r52 = ptrtoint %oop %r48 to %word
	%r51 = getelementptr [0 x %oop], [0 x %oop]* %r53, %word 0, %word %r52
	%r50 = load %oop, %oop* %r51
	store %oop %r50, %oop* %t6
	%r54 = inttoptr %word 0 to %oop
	store %oop %r54, %oop* %t7
	%r56 = getelementptr %oop, %oop* %t7, %word 0
	%r55 = bitcast %oop* %r56 to %oop
	%r57 = call %oop @"m_gc/push-root.code"(%oop %r55)
	%r58 = load %oop, %oop* %t4
	store %oop %r58, %oop* %t8
	br label %L8
L7:
	%r59 = load %oop, %oop* %t8
	%r60 = call %oop @m_car.code(%oop %r59)
	store %oop %r60, %oop* %t9
	%r61 = load %oop, %oop* %t9
	%r62 = call %oop @"m_pair?.code"(%oop %r61)
	%r64 = ptrtoint %oop %r62 to %word
	%r63 = icmp ne %word %r64, 0
	br i1 %r63, label %L10, label %L11
L10:
	%r65 = inttoptr %word 0 to %oop
	%r66 = load %oop, %oop* %t9
	%r70 = bitcast %oop %r66 to [0 x %oop]*
	%r69 = ptrtoint %oop %r65 to %word
	%r68 = getelementptr [0 x %oop], [0 x %oop]* %r70, %word 0, %word %r69
	%r67 = load %oop, %oop* %r68
	store %oop %r67, %oop* %t11
	%r71 = inttoptr %word 1 to %oop
	%r72 = load %oop, %oop* %t9
	%r76 = bitcast %oop %r72 to [0 x %oop]*
	%r75 = ptrtoint %oop %r71 to %word
	%r74 = getelementptr [0 x %oop], [0 x %oop]* %r76, %word 0, %word %r75
	%r73 = load %oop, %oop* %r74
	store %oop %r73, %oop* %t12
	%r77 = inttoptr %word 0 to %oop
	%r78 = inttoptr %word 0 to %oop
	store %oop %r78, %oop* %t7
	br label %L14
L13:
	%r79 = inttoptr %word 0 to %oop
	%r80 = load %oop, %oop* %t12
	%r84 = bitcast %oop %r80 to [0 x %oop]*
	%r83 = ptrtoint %oop %r79 to %word
	%r82 = getelementptr [0 x %oop], [0 x %oop]* %r84, %word 0, %word %r83
	%r81 = load %oop, %oop* %r82
	%r85 = load %oop, %oop* %t1
	%r86 = call %oop @m_eval.code(%oop %r81, %oop %r85)
	store %oop %r86, %oop* %t7
	%r87 = inttoptr %word 1 to %oop
	%r88 = load %oop, %oop* %t12
	%r92 = bitcast %oop %r88 to [0 x %oop]*
	%r91 = ptrtoint %oop %r87 to %word
	%r90 = getelementptr [0 x %oop], [0 x %oop]* %r92, %word 0, %word %r91
	%r89 = load %oop, %oop* %r90
	store %oop %r89, %oop* %t12
	br label %L14
L14:
	%r93 = load %oop, %oop* %t12
	%r94 = call %oop @"m_pair?.code"(%oop %r93)
	%r96 = ptrtoint %oop %r94 to %word
	%r95 = icmp ne %word %r96, 0
	br i1 %r95, label %L13, label %L15
L15:
	%r97 = inttoptr %word 0 to %oop
	%r98 = load %oop, %oop* %t6
	%r99 = inttoptr %word 1 to %oop
	%r100 = inttoptr %word 3 to %oop
	%r101 = load %oop, %oop* %t11
	%r105 = bitcast %oop %r101 to [0 x %oop]*
	%r104 = ptrtoint %oop %r100 to %word
	%r103 = getelementptr [0 x %oop], [0 x %oop]* %r105, %word 0, %word %r104
	%r102 = load %oop, %oop* %r103
	%r109 = ptrtoint %oop %r102 to %word
	%r108 = ptrtoint %oop %r99 to %word
	%r107 = ashr %word %r109, %r108
	%r106 = inttoptr %word %r107 to %oop
	%r110 = load %oop, %oop* %t7
	%r111 = call %oop @m_set-array-at.code(%oop %r98, %oop %r106, %oop %r110)
	store %oop %r111, %oop* %t10
	br label %L12
L11:
	%r112 = inttoptr %word 0 to %oop
	store %oop %r112, %oop* %t10
	br label %L12
L12:
	%r113 = load %oop, %oop* %t10
	%r114 = load %oop, %oop* %t8
	%r115 = call %oop @m_cdr.code(%oop %r114)
	store %oop %r115, %oop* %t8
	br label %L8
L8:
	%r116 = load %oop, %oop* %t8
	%r118 = ptrtoint %oop %r116 to %word
	%r117 = icmp ne %word %r118, 0
	br i1 %r117, label %L7, label %L9
L9:
	%r119 = inttoptr %word 0 to %oop
	store %oop %r119, %oop* %t7
	%r120 = load %oop, %oop* %t5
	store %oop %r120, %oop* %t8
	br label %L17
L16:
	%r121 = load %oop, %oop* %t8
	%r122 = call %oop @m_car.code(%oop %r121)
	store %oop %r122, %oop* %t9
	%r123 = load %oop, %oop* %t9
	%r124 = load %oop, %oop* %t1
	%r125 = call %oop @m_eval.code(%oop %r123, %oop %r124)
	store %oop %r125, %oop* %t7
	%r126 = load %oop, %oop* %t8
	%r127 = call %oop @m_cdr.code(%oop %r126)
	store %oop %r127, %oop* %t8
	br label %L17
L17:
	%r128 = load %oop, %oop* %t8
	%r130 = ptrtoint %oop %r128 to %word
	%r129 = icmp ne %word %r130, 0
	br i1 %r129, label %L16, label %L18
L18:
	%r131 = load %oop, %oop* %t7
	store %oop %r131, %oop* %t8
	%r133 = getelementptr %oop, %oop* %t7, %word 0
	%r132 = bitcast %oop* %r133 to %oop
	%r134 = call %oop @"m_gc/pop-root.code"(%oop %r132)
	%r135 = load %oop, %oop* %t8
	ret %oop %r135
}
@m_cstr1466 = private unnamed_addr constant [19 x i8] c"let/evaluator-stub\00"
@m_ostr1467 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 37, %oop bitcast ([19 x i8]* @m_cstr1466 to %oop) }
@"m_let/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_let/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1467 }
@m_cstr1468 = private unnamed_addr constant [4 x i8] c"set\00"
@m_ostr1469 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr1468 to %oop) }
@m_cstr1470 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1471 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1470 to %oop) }
@m_cstr1472 = private unnamed_addr constant [4 x i8] c"var\00"
@m_ostr1473 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr1472 to %oop) }
@m_cstr1474 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1475 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1474 to %oop) }
@m_cstr1476 = private unnamed_addr constant [11 x i8] c"<variable>\00"
@m_ostr1477 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr1476 to %oop) }
@m_cstr1478 = private unnamed_addr constant [4 x i8] c"set\00"
@m_ostr1479 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr1478 to %oop) }
@m_cstr1480 = private unnamed_addr constant [4 x i8] c"set\00"
@m_ostr1481 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr1480 to %oop) }
@m_cstr1482 = private unnamed_addr constant [4 x i8] c"set\00"
@m_ostr1483 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr1482 to %oop) }
define %oop @"m_set/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	%t8 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = load %oop, %oop* %t2
	%r5 = call %oop @"m_pair?.code"(%oop %r4)
	%r7 = ptrtoint %oop %r5 to %word
	%r6 = icmp ne %word %r7, 0
	br i1 %r6, label %L1, label %L2
L1:
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t2
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	%r10 = load %oop, %oop* %r11
	store %oop %r10, %oop* %t3
	%r14 = inttoptr %word 0 to %oop
	store %oop %r14, %oop* %t6
	%r15 = load %oop, %oop* %t3
	%r16 = call %oop @m_type-of.code(%oop %r15)
	%r17 = inttoptr %word 16 to %oop
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = icmp eq %word %r21, %r20
	%r18 = inttoptr i1 %r19 to %oop
	store %oop %r18, %oop* %t6
	%r22 = inttoptr %word 0 to %oop
	%r26 = ptrtoint %oop %r22 to %word
	%r25 = ptrtoint %oop %r18 to %word
	%r24 = icmp eq %word %r26, %r25
	%r23 = inttoptr i1 %r24 to %oop
	%r28 = ptrtoint %oop %r23 to %word
	%r27 = icmp ne %word %r28, 0
	br i1 %r27, label %L5, label %L4
L5:
	%r29 = call %oop @m_error-prologue.code()
	%r30 = getelementptr %"<string>", %"<string>"* @m_ostr1469, i32 0, i32 1
	%r31 = bitcast %word* %r30 to %oop
	%r32 = call %oop @"m_%error.code"(%oop %r31)
	%r33 = getelementptr %"<string>", %"<string>"* @m_ostr1471, i32 0, i32 1
	%r34 = bitcast %word* %r33 to %oop
	%r35 = call %oop @"m_%error.code"(%oop %r34)
	%r36 = getelementptr %"<string>", %"<string>"* @m_ostr1473, i32 0, i32 1
	%r37 = bitcast %word* %r36 to %oop
	%r38 = call %oop @"m_%error.code"(%oop %r37)
	%r39 = getelementptr %"<string>", %"<string>"* @m_ostr1475, i32 0, i32 1
	%r40 = bitcast %word* %r39 to %oop
	%r41 = call %oop @"m_%error.code"(%oop %r40)
	%r42 = getelementptr %"<string>", %"<string>"* @m_ostr1477, i32 0, i32 1
	%r43 = bitcast %word* %r42 to %oop
	%r44 = call %oop @"m_%error.code"(%oop %r43)
	%r45 = call %oop @m_error-epilogue.code()
	store %oop %r45, %oop* %t6
	%r46 = inttoptr %word 0 to %oop
	%r50 = ptrtoint %oop %r46 to %word
	%r49 = ptrtoint %oop %r45 to %word
	%r48 = icmp eq %word %r50, %r49
	%r47 = inttoptr i1 %r48 to %oop
	%r52 = ptrtoint %oop %r47 to %word
	%r51 = icmp ne %word %r52, 0
	br i1 %r51, label %L6, label %L4
L6:
	br label %L4
L4:
	%r53 = load %oop, %oop* %t6
	%r54 = inttoptr %word 1 to %oop
	%r55 = load %oop, %oop* %t2
	%r59 = bitcast %oop %r55 to [0 x %oop]*
	%r58 = ptrtoint %oop %r54 to %word
	%r57 = getelementptr [0 x %oop], [0 x %oop]* %r59, %word 0, %word %r58
	%r56 = load %oop, %oop* %r57
	store %oop %r56, %oop* %t2
	store %oop %r56, %oop* %t5
	br label %L3
L2:
	%r60 = getelementptr %"<string>", %"<string>"* @m_ostr1479, i32 0, i32 1
	%r61 = bitcast %word* %r60 to %oop
	%r62 = load %oop, %oop* %t0
	%r63 = call %oop @"m_%not-enough-arguments.code"(%oop %r61, %oop %r62)
	store %oop %r63, %oop* %t5
	br label %L3
L3:
	%r64 = load %oop, %oop* %t5
	%r65 = load %oop, %oop* %t2
	%r66 = call %oop @"m_pair?.code"(%oop %r65)
	%r68 = ptrtoint %oop %r66 to %word
	%r67 = icmp ne %word %r68, 0
	br i1 %r67, label %L7, label %L8
L7:
	%r69 = inttoptr %word 0 to %oop
	%r70 = load %oop, %oop* %t2
	%r74 = bitcast %oop %r70 to [0 x %oop]*
	%r73 = ptrtoint %oop %r69 to %word
	%r72 = getelementptr [0 x %oop], [0 x %oop]* %r74, %word 0, %word %r73
	%r71 = load %oop, %oop* %r72
	store %oop %r71, %oop* %t4
	%r75 = inttoptr %word 1 to %oop
	%r76 = load %oop, %oop* %t2
	%r80 = bitcast %oop %r76 to [0 x %oop]*
	%r79 = ptrtoint %oop %r75 to %word
	%r78 = getelementptr [0 x %oop], [0 x %oop]* %r80, %word 0, %word %r79
	%r77 = load %oop, %oop* %r78
	store %oop %r77, %oop* %t2
	store %oop %r77, %oop* %t5
	br label %L9
L8:
	%r81 = getelementptr %"<string>", %"<string>"* @m_ostr1481, i32 0, i32 1
	%r82 = bitcast %word* %r81 to %oop
	%r83 = load %oop, %oop* %t0
	%r84 = call %oop @"m_%not-enough-arguments.code"(%oop %r82, %oop %r83)
	store %oop %r84, %oop* %t5
	br label %L9
L9:
	%r85 = load %oop, %oop* %t5
	%r86 = load %oop, %oop* %t2
	%r88 = ptrtoint %oop %r86 to %word
	%r87 = icmp ne %word %r88, 0
	br i1 %r87, label %L10, label %L11
L10:
	%r89 = getelementptr %"<string>", %"<string>"* @m_ostr1483, i32 0, i32 1
	%r90 = bitcast %word* %r89 to %oop
	%r91 = load %oop, %oop* %t0
	%r92 = call %oop @"m_%too-many-arguments.code"(%oop %r90, %oop %r91)
	store %oop %r92, %oop* %t5
	br label %L12
L11:
	%r93 = inttoptr %word 0 to %oop
	store %oop %r93, %oop* %t5
	br label %L12
L12:
	%r94 = load %oop, %oop* %t5
	%r95 = inttoptr %word 0 to %oop
	%r96 = load %oop, %oop* %t4
	%r97 = load %oop, %oop* %t1
	%r98 = call %oop @m_eval.code(%oop %r96, %oop %r97)
	store %oop %r98, %oop* %t5
	%r99 = load %oop, %oop* %t3
	%r100 = call %oop @"m_global-variable?.code"(%oop %r99)
	%r102 = ptrtoint %oop %r100 to %word
	%r101 = icmp ne %word %r102, 0
	br i1 %r101, label %L13, label %L14
L13:
	%r103 = load %oop, %oop* %t5
	%r104 = inttoptr %word 1 to %oop
	%r105 = load %oop, %oop* %t3
	%r109 = bitcast %oop %r105 to [0 x %oop]*
	%r108 = ptrtoint %oop %r104 to %word
	%r107 = getelementptr [0 x %oop], [0 x %oop]* %r109, %word 0, %word %r108
	store %oop %r103, %oop* %r107
	%r106 = bitcast %oop %r103 to %oop
	store %oop %r106, %oop* %t6
	br label %L15
L14:
	%r110 = inttoptr %word 1 to %oop
	%r111 = inttoptr %word 1 to %oop
	%r112 = inttoptr %word 2 to %oop
	%r113 = load %oop, %oop* %t3
	%r117 = bitcast %oop %r113 to [0 x %oop]*
	%r116 = ptrtoint %oop %r112 to %word
	%r115 = getelementptr [0 x %oop], [0 x %oop]* %r117, %word 0, %word %r116
	%r114 = load %oop, %oop* %r115
	%r121 = bitcast %oop %r114 to [0 x %oop]*
	%r120 = ptrtoint %oop %r111 to %word
	%r119 = getelementptr [0 x %oop], [0 x %oop]* %r121, %word 0, %word %r120
	%r118 = load %oop, %oop* %r119
	%r125 = ptrtoint %oop %r118 to %word
	%r124 = ptrtoint %oop %r110 to %word
	%r123 = ashr %word %r125, %r124
	%r122 = inttoptr %word %r123 to %oop
	%r126 = inttoptr %word 1 to %oop
	%r127 = inttoptr %word 1 to %oop
	%r128 = inttoptr %word 1 to %oop
	%r129 = load %oop, %oop* %t1
	%r133 = bitcast %oop %r129 to [0 x %oop]*
	%r132 = ptrtoint %oop %r128 to %word
	%r131 = getelementptr [0 x %oop], [0 x %oop]* %r133, %word 0, %word %r132
	%r130 = load %oop, %oop* %r131
	%r137 = bitcast %oop %r130 to [0 x %oop]*
	%r136 = ptrtoint %oop %r127 to %word
	%r135 = getelementptr [0 x %oop], [0 x %oop]* %r137, %word 0, %word %r136
	%r134 = load %oop, %oop* %r135
	%r141 = ptrtoint %oop %r134 to %word
	%r140 = ptrtoint %oop %r126 to %word
	%r139 = ashr %word %r141, %r140
	%r138 = inttoptr %word %r139 to %oop
	%r145 = ptrtoint %oop %r138 to %word
	%r144 = ptrtoint %oop %r122 to %word
	%r143 = sub %word %r145, %r144
	%r142 = inttoptr %word %r143 to %oop
	store %oop %r142, %oop* %t7
	%r146 = inttoptr %word 0 to %oop
	br label %L17
L16:
	%r147 = inttoptr %word 0 to %oop
	%r148 = load %oop, %oop* %t1
	%r152 = bitcast %oop %r148 to [0 x %oop]*
	%r151 = ptrtoint %oop %r147 to %word
	%r150 = getelementptr [0 x %oop], [0 x %oop]* %r152, %word 0, %word %r151
	%r149 = load %oop, %oop* %r150
	store %oop %r149, %oop* %t1
	%r153 = inttoptr %word 1 to %oop
	%r154 = load %oop, %oop* %t7
	%r158 = ptrtoint %oop %r154 to %word
	%r157 = ptrtoint %oop %r153 to %word
	%r156 = sub %word %r158, %r157
	%r155 = inttoptr %word %r156 to %oop
	store %oop %r155, %oop* %t7
	br label %L17
L17:
	%r159 = load %oop, %oop* %t7
	%r160 = inttoptr %word 0 to %oop
	%r164 = ptrtoint %oop %r160 to %word
	%r163 = ptrtoint %oop %r159 to %word
	%r162 = icmp slt %word %r164, %r163
	%r161 = inttoptr i1 %r162 to %oop
	%r166 = ptrtoint %oop %r161 to %word
	%r165 = icmp ne %word %r166, 0
	br i1 %r165, label %L16, label %L18
L18:
	%r167 = inttoptr %word 1 to %oop
	%r168 = inttoptr %word 3 to %oop
	%r169 = load %oop, %oop* %t3
	%r173 = bitcast %oop %r169 to [0 x %oop]*
	%r172 = ptrtoint %oop %r168 to %word
	%r171 = getelementptr [0 x %oop], [0 x %oop]* %r173, %word 0, %word %r172
	%r170 = load %oop, %oop* %r171
	%r177 = ptrtoint %oop %r170 to %word
	%r176 = ptrtoint %oop %r167 to %word
	%r175 = ashr %word %r177, %r176
	%r174 = inttoptr %word %r175 to %oop
	store %oop %r174, %oop* %t8
	%r178 = inttoptr %word 0 to %oop
	%r179 = inttoptr %word 2 to %oop
	%r180 = load %oop, %oop* %t1
	%r184 = bitcast %oop %r180 to [0 x %oop]*
	%r183 = ptrtoint %oop %r179 to %word
	%r182 = getelementptr [0 x %oop], [0 x %oop]* %r184, %word 0, %word %r183
	%r181 = load %oop, %oop* %r182
	%r185 = load %oop, %oop* %t8
	%r186 = load %oop, %oop* %t5
	%r187 = call %oop @m_set-array-at.code(%oop %r181, %oop %r185, %oop %r186)
	store %oop %r187, %oop* %t6
	br label %L15
L15:
	%r188 = load %oop, %oop* %t6
	ret %oop %r188
}
@m_cstr1484 = private unnamed_addr constant [19 x i8] c"set/evaluator-stub\00"
@m_ostr1485 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 37, %oop bitcast ([19 x i8]* @m_cstr1484 to %oop) }
@"m_set/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_set/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1485 }
define %oop @"m_while/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	%r2 = call %oop @m_car.code(%oop %r1)
	store %oop %r2, %oop* %t2
	%r3 = load %oop, %oop* %t0
	store %oop %r3, %oop* %t3
	br label %L2
L1:
	%r4 = load %oop, %oop* %t3
	store %oop %r4, %oop* %t4
	br label %L5
L4:
	%r5 = inttoptr %word 0 to %oop
	%r6 = load %oop, %oop* %t4
	%r10 = bitcast %oop %r6 to [0 x %oop]*
	%r9 = ptrtoint %oop %r5 to %word
	%r8 = getelementptr [0 x %oop], [0 x %oop]* %r10, %word 0, %word %r9
	%r7 = load %oop, %oop* %r8
	%r11 = load %oop, %oop* %t1
	%r12 = call %oop @m_eval.code(%oop %r7, %oop %r11)
	br label %L5
L5:
	%r13 = load %oop, %oop* %t4
	%r14 = call %oop @m_cdr.code(%oop %r13)
	store %oop %r14, %oop* %t4
	%r15 = call %oop @"m_pair?.code"(%oop %r14)
	%r17 = ptrtoint %oop %r15 to %word
	%r16 = icmp ne %word %r17, 0
	br i1 %r16, label %L4, label %L6
L6:
	br label %L2
L2:
	%r18 = load %oop, %oop* %t2
	%r19 = load %oop, %oop* %t1
	%r20 = call %oop @m_eval.code(%oop %r18, %oop %r19)
	%r22 = ptrtoint %oop %r20 to %word
	%r21 = icmp ne %word %r22, 0
	br i1 %r21, label %L1, label %L3
L3:
	ret %oop %r20
}
@m_cstr1486 = private unnamed_addr constant [21 x i8] c"while/evaluator-stub\00"
@m_ostr1487 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 41, %oop bitcast ([21 x i8]* @m_cstr1486 to %oop) }
@"m_while/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_while/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1487 }
@m_cstr1488 = private unnamed_addr constant [3 x i8] c"if\00"
@m_ostr1489 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 5, %oop bitcast ([3 x i8]* @m_cstr1488 to %oop) }
@m_cstr1490 = private unnamed_addr constant [3 x i8] c"if\00"
@m_ostr1491 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 5, %oop bitcast ([3 x i8]* @m_cstr1490 to %oop) }
define %oop @"m_if/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t5 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = inttoptr %word 0 to %oop
	store %oop %r4, %oop* %t5
	%r5 = load %oop, %oop* %t2
	%r6 = call %oop @"m_pair?.code"(%oop %r5)
	%r8 = ptrtoint %oop %r6 to %word
	%r7 = icmp ne %word %r8, 0
	br i1 %r7, label %L1, label %L2
L1:
	%r9 = inttoptr %word 0 to %oop
	%r10 = load %oop, %oop* %t2
	%r14 = bitcast %oop %r10 to [0 x %oop]*
	%r13 = ptrtoint %oop %r9 to %word
	%r12 = getelementptr [0 x %oop], [0 x %oop]* %r14, %word 0, %word %r13
	%r11 = load %oop, %oop* %r12
	store %oop %r11, %oop* %t3
	%r15 = inttoptr %word 1 to %oop
	%r16 = load %oop, %oop* %t2
	%r20 = bitcast %oop %r16 to [0 x %oop]*
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = getelementptr [0 x %oop], [0 x %oop]* %r20, %word 0, %word %r19
	%r17 = load %oop, %oop* %r18
	store %oop %r17, %oop* %t2
	store %oop %r17, %oop* %t6
	br label %L3
L2:
	%r21 = getelementptr %"<string>", %"<string>"* @m_ostr1489, i32 0, i32 1
	%r22 = bitcast %word* %r21 to %oop
	%r23 = load %oop, %oop* %t0
	%r24 = call %oop @"m_%not-enough-arguments.code"(%oop %r22, %oop %r23)
	store %oop %r24, %oop* %t6
	br label %L3
L3:
	%r25 = load %oop, %oop* %t6
	%r26 = load %oop, %oop* %t2
	%r27 = call %oop @"m_pair?.code"(%oop %r26)
	%r29 = ptrtoint %oop %r27 to %word
	%r28 = icmp ne %word %r29, 0
	br i1 %r28, label %L4, label %L5
L4:
	%r30 = inttoptr %word 0 to %oop
	%r31 = load %oop, %oop* %t2
	%r35 = bitcast %oop %r31 to [0 x %oop]*
	%r34 = ptrtoint %oop %r30 to %word
	%r33 = getelementptr [0 x %oop], [0 x %oop]* %r35, %word 0, %word %r34
	%r32 = load %oop, %oop* %r33
	store %oop %r32, %oop* %t4
	%r36 = inttoptr %word 1 to %oop
	%r37 = load %oop, %oop* %t2
	%r41 = bitcast %oop %r37 to [0 x %oop]*
	%r40 = ptrtoint %oop %r36 to %word
	%r39 = getelementptr [0 x %oop], [0 x %oop]* %r41, %word 0, %word %r40
	%r38 = load %oop, %oop* %r39
	store %oop %r38, %oop* %t2
	store %oop %r38, %oop* %t6
	br label %L6
L5:
	%r42 = getelementptr %"<string>", %"<string>"* @m_ostr1491, i32 0, i32 1
	%r43 = bitcast %word* %r42 to %oop
	%r44 = load %oop, %oop* %t0
	%r45 = call %oop @"m_%not-enough-arguments.code"(%oop %r43, %oop %r44)
	store %oop %r45, %oop* %t6
	br label %L6
L6:
	%r46 = load %oop, %oop* %t6
	%r47 = load %oop, %oop* %t2
	store %oop %r47, %oop* %t5
	%r48 = load %oop, %oop* %t3
	%r49 = load %oop, %oop* %t1
	%r50 = call %oop @m_eval.code(%oop %r48, %oop %r49)
	%r52 = ptrtoint %oop %r50 to %word
	%r51 = icmp ne %word %r52, 0
	br i1 %r51, label %L7, label %L8
L7:
	%r53 = load %oop, %oop* %t4
	%r54 = load %oop, %oop* %t1
	%r55 = call %oop @m_eval.code(%oop %r53, %oop %r54)
	store %oop %r55, %oop* %t6
	br label %L9
L8:
	%r56 = inttoptr %word 0 to %oop
	store %oop %r56, %oop* %t7
	br label %L11
L10:
	%r57 = inttoptr %word 0 to %oop
	%r58 = load %oop, %oop* %t5
	%r62 = bitcast %oop %r58 to [0 x %oop]*
	%r61 = ptrtoint %oop %r57 to %word
	%r60 = getelementptr [0 x %oop], [0 x %oop]* %r62, %word 0, %word %r61
	%r59 = load %oop, %oop* %r60
	%r63 = load %oop, %oop* %t1
	%r64 = call %oop @m_eval.code(%oop %r59, %oop %r63)
	store %oop %r64, %oop* %t7
	%r65 = load %oop, %oop* %t5
	%r66 = call %oop @m_cdr.code(%oop %r65)
	store %oop %r66, %oop* %t5
	br label %L11
L11:
	%r67 = load %oop, %oop* %t5
	%r68 = call %oop @"m_pair?.code"(%oop %r67)
	%r70 = ptrtoint %oop %r68 to %word
	%r69 = icmp ne %word %r70, 0
	br i1 %r69, label %L10, label %L12
L12:
	%r71 = load %oop, %oop* %t7
	store %oop %r71, %oop* %t6
	br label %L9
L9:
	%r72 = load %oop, %oop* %t6
	ret %oop %r72
}
@m_cstr1492 = private unnamed_addr constant [18 x i8] c"if/evaluator-stub\00"
@m_ostr1493 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1492 to %oop) }
@"m_if/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_if/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1493 }
define %oop @"m_or/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = inttoptr %word 0 to %oop
	store %oop %r1, %oop* %t2
	br label %L2
L1:
	%r2 = inttoptr %word 1 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	%r4 = load %oop, %oop* %t0
	%r8 = bitcast %oop %r4 to [0 x %oop]*
	%r7 = ptrtoint %oop %r3 to %word
	%r6 = getelementptr [0 x %oop], [0 x %oop]* %r8, %word 0, %word %r7
	%r5 = load %oop, %oop* %r6
	%r9 = load %oop, %oop* %t1
	%r10 = call %oop @m_eval.code(%oop %r5, %oop %r9)
	store %oop %r10, %oop* %t2
	store %oop %r10, %oop* %t3
	%r11 = inttoptr %word 0 to %oop
	%r15 = ptrtoint %oop %r11 to %word
	%r14 = ptrtoint %oop %r10 to %word
	%r13 = icmp eq %word %r15, %r14
	%r12 = inttoptr i1 %r13 to %oop
	%r17 = ptrtoint %oop %r12 to %word
	%r16 = icmp ne %word %r17, 0
	br i1 %r16, label %L4, label %L5
L5:
	%r18 = load %oop, %oop* %t2
	ret %oop %r18
	store %oop %r18, %oop* %t3
	%r20 = inttoptr %word 0 to %oop
	%r24 = ptrtoint %oop %r20 to %word
	%r23 = ptrtoint %oop %r18 to %word
	%r22 = icmp eq %word %r24, %r23
	%r21 = inttoptr i1 %r22 to %oop
	%r26 = ptrtoint %oop %r21 to %word
	%r25 = icmp ne %word %r26, 0
	br i1 %r25, label %L4, label %L6
L6:
	br label %L4
L4:
	%r27 = load %oop, %oop* %t3
	%r28 = inttoptr %word 1 to %oop
	%r29 = load %oop, %oop* %t0
	%r33 = bitcast %oop %r29 to [0 x %oop]*
	%r32 = ptrtoint %oop %r28 to %word
	%r31 = getelementptr [0 x %oop], [0 x %oop]* %r33, %word 0, %word %r32
	%r30 = load %oop, %oop* %r31
	store %oop %r30, %oop* %t0
	br label %L2
L2:
	%r34 = load %oop, %oop* %t0
	%r35 = call %oop @"m_pair?.code"(%oop %r34)
	%r37 = ptrtoint %oop %r35 to %word
	%r36 = icmp ne %word %r37, 0
	br i1 %r36, label %L1, label %L3
L3:
	ret %oop %r35
}
@m_cstr1494 = private unnamed_addr constant [18 x i8] c"or/evaluator-stub\00"
@m_ostr1495 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1494 to %oop) }
@"m_or/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_or/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1495 }
define %oop @"m_and/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* @"m_symbol/true"
	store %oop %r1, %oop* %t2
	br label %L2
L1:
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	%r4 = load %oop, %oop* %t0
	%r8 = bitcast %oop %r4 to [0 x %oop]*
	%r7 = ptrtoint %oop %r3 to %word
	%r6 = getelementptr [0 x %oop], [0 x %oop]* %r8, %word 0, %word %r7
	%r5 = load %oop, %oop* %r6
	%r9 = load %oop, %oop* %t1
	%r10 = call %oop @m_eval.code(%oop %r5, %oop %r9)
	store %oop %r10, %oop* %t2
	store %oop %r10, %oop* %t3
	%r11 = inttoptr %word 0 to %oop
	%r15 = ptrtoint %oop %r11 to %word
	%r14 = ptrtoint %oop %r10 to %word
	%r13 = icmp eq %word %r15, %r14
	%r12 = inttoptr i1 %r13 to %oop
	%r17 = ptrtoint %oop %r12 to %word
	%r16 = icmp ne %word %r17, 0
	br i1 %r16, label %L5, label %L4
L5:
	%r18 = inttoptr %word 0 to %oop
	ret %oop %r18
	store %oop %r18, %oop* %t3
	%r20 = inttoptr %word 0 to %oop
	%r24 = ptrtoint %oop %r20 to %word
	%r23 = ptrtoint %oop %r18 to %word
	%r22 = icmp eq %word %r24, %r23
	%r21 = inttoptr i1 %r22 to %oop
	%r26 = ptrtoint %oop %r21 to %word
	%r25 = icmp ne %word %r26, 0
	br i1 %r25, label %L6, label %L4
L6:
	br label %L4
L4:
	%r27 = load %oop, %oop* %t3
	%r28 = inttoptr %word 1 to %oop
	%r29 = load %oop, %oop* %t0
	%r33 = bitcast %oop %r29 to [0 x %oop]*
	%r32 = ptrtoint %oop %r28 to %word
	%r31 = getelementptr [0 x %oop], [0 x %oop]* %r33, %word 0, %word %r32
	%r30 = load %oop, %oop* %r31
	store %oop %r30, %oop* %t0
	br label %L2
L2:
	%r34 = load %oop, %oop* %t0
	%r35 = call %oop @"m_pair?.code"(%oop %r34)
	%r37 = ptrtoint %oop %r35 to %word
	%r36 = icmp ne %word %r37, 0
	br i1 %r36, label %L1, label %L3
L3:
	%r38 = load %oop, %oop* %t2
	ret %oop %r38
}
@m_cstr1496 = private unnamed_addr constant [19 x i8] c"and/evaluator-stub\00"
@m_ostr1497 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 37, %oop bitcast ([19 x i8]* @m_cstr1496 to %oop) }
@"m_and/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_and/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1497 }
@m_cstr1498 = private unnamed_addr constant [6 x i8] c"quote\00"
@m_ostr1499 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr1498 to %oop) }
@m_cstr1500 = private unnamed_addr constant [6 x i8] c"quote\00"
@m_ostr1501 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr1500 to %oop) }
define %oop @"m_quote/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = load %oop, %oop* %t2
	%r4 = call %oop @"m_pair?.code"(%oop %r3)
	%r6 = ptrtoint %oop %r4 to %word
	%r5 = icmp ne %word %r6, 0
	br i1 %r5, label %L1, label %L2
L1:
	%r7 = inttoptr %word 0 to %oop
	%r8 = load %oop, %oop* %t2
	%r12 = bitcast %oop %r8 to [0 x %oop]*
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = getelementptr [0 x %oop], [0 x %oop]* %r12, %word 0, %word %r11
	%r9 = load %oop, %oop* %r10
	store %oop %r9, %oop* %t3
	%r13 = inttoptr %word 1 to %oop
	%r14 = load %oop, %oop* %t2
	%r18 = bitcast %oop %r14 to [0 x %oop]*
	%r17 = ptrtoint %oop %r13 to %word
	%r16 = getelementptr [0 x %oop], [0 x %oop]* %r18, %word 0, %word %r17
	%r15 = load %oop, %oop* %r16
	store %oop %r15, %oop* %t2
	store %oop %r15, %oop* %t4
	br label %L3
L2:
	%r19 = getelementptr %"<string>", %"<string>"* @m_ostr1499, i32 0, i32 1
	%r20 = bitcast %word* %r19 to %oop
	%r21 = load %oop, %oop* %t0
	%r22 = call %oop @"m_%not-enough-arguments.code"(%oop %r20, %oop %r21)
	store %oop %r22, %oop* %t4
	br label %L3
L3:
	%r23 = load %oop, %oop* %t4
	%r24 = load %oop, %oop* %t2
	%r26 = ptrtoint %oop %r24 to %word
	%r25 = icmp ne %word %r26, 0
	br i1 %r25, label %L4, label %L5
L4:
	%r27 = getelementptr %"<string>", %"<string>"* @m_ostr1501, i32 0, i32 1
	%r28 = bitcast %word* %r27 to %oop
	%r29 = load %oop, %oop* %t0
	%r30 = call %oop @"m_%too-many-arguments.code"(%oop %r28, %oop %r29)
	store %oop %r30, %oop* %t4
	br label %L6
L5:
	%r31 = inttoptr %word 0 to %oop
	store %oop %r31, %oop* %t4
	br label %L6
L6:
	%r32 = load %oop, %oop* %t4
	%r33 = load %oop, %oop* %t3
	ret %oop %r33
}
@m_cstr1502 = private unnamed_addr constant [21 x i8] c"quote/evaluator-stub\00"
@m_ostr1503 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 41, %oop bitcast ([21 x i8]* @m_cstr1502 to %oop) }
@"m_quote/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_quote/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1503 }
@m_cstr1504 = private unnamed_addr constant [4 x i8] c"not\00"
@m_ostr1505 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr1504 to %oop) }
@m_cstr1506 = private unnamed_addr constant [4 x i8] c"not\00"
@m_ostr1507 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr1506 to %oop) }
define %oop @"m_not/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = load %oop, %oop* %t2
	%r4 = call %oop @"m_pair?.code"(%oop %r3)
	%r6 = ptrtoint %oop %r4 to %word
	%r5 = icmp ne %word %r6, 0
	br i1 %r5, label %L1, label %L2
L1:
	%r7 = inttoptr %word 0 to %oop
	%r8 = load %oop, %oop* %t2
	%r12 = bitcast %oop %r8 to [0 x %oop]*
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = getelementptr [0 x %oop], [0 x %oop]* %r12, %word 0, %word %r11
	%r9 = load %oop, %oop* %r10
	store %oop %r9, %oop* %t3
	%r13 = inttoptr %word 1 to %oop
	%r14 = load %oop, %oop* %t2
	%r18 = bitcast %oop %r14 to [0 x %oop]*
	%r17 = ptrtoint %oop %r13 to %word
	%r16 = getelementptr [0 x %oop], [0 x %oop]* %r18, %word 0, %word %r17
	%r15 = load %oop, %oop* %r16
	store %oop %r15, %oop* %t2
	store %oop %r15, %oop* %t4
	br label %L3
L2:
	%r19 = getelementptr %"<string>", %"<string>"* @m_ostr1505, i32 0, i32 1
	%r20 = bitcast %word* %r19 to %oop
	%r21 = load %oop, %oop* %t0
	%r22 = call %oop @"m_%not-enough-arguments.code"(%oop %r20, %oop %r21)
	store %oop %r22, %oop* %t4
	br label %L3
L3:
	%r23 = load %oop, %oop* %t4
	%r24 = load %oop, %oop* %t2
	%r26 = ptrtoint %oop %r24 to %word
	%r25 = icmp ne %word %r26, 0
	br i1 %r25, label %L4, label %L5
L4:
	%r27 = getelementptr %"<string>", %"<string>"* @m_ostr1507, i32 0, i32 1
	%r28 = bitcast %word* %r27 to %oop
	%r29 = load %oop, %oop* %t0
	%r30 = call %oop @"m_%too-many-arguments.code"(%oop %r28, %oop %r29)
	store %oop %r30, %oop* %t4
	br label %L6
L5:
	%r31 = inttoptr %word 0 to %oop
	store %oop %r31, %oop* %t4
	br label %L6
L6:
	%r32 = load %oop, %oop* %t4
	%r33 = load %oop, %oop* %t3
	%r35 = ptrtoint %oop %r33 to %word
	%r34 = icmp ne %word %r35, 0
	br i1 %r34, label %L7, label %L8
L7:
	%r36 = inttoptr %word 0 to %oop
	store %oop %r36, %oop* %t4
	br label %L9
L8:
	%r37 = load %oop, %oop* @"m_symbol/true"
	store %oop %r37, %oop* %t4
	br label %L9
L9:
	%r38 = load %oop, %oop* %t4
	ret %oop %r38
}
@m_cstr1508 = private unnamed_addr constant [19 x i8] c"not/evaluator-stub\00"
@m_ostr1509 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 37, %oop bitcast ([19 x i8]* @m_cstr1508 to %oop) }
@"m_not/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_not/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1509 }
@m_cstr1510 = private unnamed_addr constant [40 x i8] c"operator '-' called with zero arguments\00"
@m_ostr1511 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 79, %oop bitcast ([40 x i8]* @m_cstr1510 to %oop) }
define %oop @"m_-/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = inttoptr %word 0 to %oop
	store %oop %r1, %oop* %t2
	%r2 = load %oop, %oop* %t0
	%r3 = call %oop @"m_pair?.code"(%oop %r2)
	store %oop %r3, %oop* %t2
	%r4 = inttoptr %word 0 to %oop
	%r8 = ptrtoint %oop %r4 to %word
	%r7 = ptrtoint %oop %r3 to %word
	%r6 = icmp eq %word %r8, %r7
	%r5 = inttoptr i1 %r6 to %oop
	%r10 = ptrtoint %oop %r5 to %word
	%r9 = icmp ne %word %r10, 0
	br i1 %r9, label %L2, label %L1
L2:
	%r11 = call %oop @m_error-prologue.code()
	%r12 = getelementptr %"<string>", %"<string>"* @m_ostr1511, i32 0, i32 1
	%r13 = bitcast %word* %r12 to %oop
	%r14 = call %oop @"m_%error.code"(%oop %r13)
	%r15 = call %oop @m_error-epilogue.code()
	store %oop %r15, %oop* %t2
	%r16 = inttoptr %word 0 to %oop
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = icmp eq %word %r20, %r19
	%r17 = inttoptr i1 %r18 to %oop
	%r22 = ptrtoint %oop %r17 to %word
	%r21 = icmp ne %word %r22, 0
	br i1 %r21, label %L3, label %L1
L3:
	br label %L1
L1:
	%r23 = load %oop, %oop* %t2
	%r24 = inttoptr %word 1 to %oop
	%r25 = inttoptr %word 0 to %oop
	%r26 = load %oop, %oop* %t0
	%r30 = bitcast %oop %r26 to [0 x %oop]*
	%r29 = ptrtoint %oop %r25 to %word
	%r28 = getelementptr [0 x %oop], [0 x %oop]* %r30, %word 0, %word %r29
	%r27 = load %oop, %oop* %r28
	%r34 = ptrtoint %oop %r27 to %word
	%r33 = ptrtoint %oop %r24 to %word
	%r32 = ashr %word %r34, %r33
	%r31 = inttoptr %word %r32 to %oop
	store %oop %r31, %oop* %t2
	%r35 = inttoptr %word 1 to %oop
	%r36 = load %oop, %oop* %t0
	%r40 = bitcast %oop %r36 to [0 x %oop]*
	%r39 = ptrtoint %oop %r35 to %word
	%r38 = getelementptr [0 x %oop], [0 x %oop]* %r40, %word 0, %word %r39
	%r37 = load %oop, %oop* %r38
	store %oop %r37, %oop* %t3
	%r41 = load %oop, %oop* %t3
	%r42 = call %oop @"m_pair?.code"(%oop %r41)
	%r44 = ptrtoint %oop %r42 to %word
	%r43 = icmp ne %word %r44, 0
	br i1 %r43, label %L4, label %L5
L4:
	br label %L8
L7:
	br label %L8
L8:
	%r45 = inttoptr %word 1 to %oop
	%r46 = inttoptr %word 0 to %oop
	%r47 = load %oop, %oop* %t3
	%r51 = bitcast %oop %r47 to [0 x %oop]*
	%r50 = ptrtoint %oop %r46 to %word
	%r49 = getelementptr [0 x %oop], [0 x %oop]* %r51, %word 0, %word %r50
	%r48 = load %oop, %oop* %r49
	%r55 = ptrtoint %oop %r48 to %word
	%r54 = ptrtoint %oop %r45 to %word
	%r53 = ashr %word %r55, %r54
	%r52 = inttoptr %word %r53 to %oop
	%r56 = load %oop, %oop* %t2
	%r60 = ptrtoint %oop %r56 to %word
	%r59 = ptrtoint %oop %r52 to %word
	%r58 = sub %word %r60, %r59
	%r57 = inttoptr %word %r58 to %oop
	store %oop %r57, %oop* %t2
	%r61 = inttoptr %word 1 to %oop
	%r62 = load %oop, %oop* %t3
	%r66 = bitcast %oop %r62 to [0 x %oop]*
	%r65 = ptrtoint %oop %r61 to %word
	%r64 = getelementptr [0 x %oop], [0 x %oop]* %r66, %word 0, %word %r65
	%r63 = load %oop, %oop* %r64
	store %oop %r63, %oop* %t3
	%r67 = call %oop @"m_pair?.code"(%oop %r63)
	%r69 = ptrtoint %oop %r67 to %word
	%r68 = icmp ne %word %r69, 0
	br i1 %r68, label %L7, label %L9
L9:
	store %oop %r67, %oop* %t4
	br label %L6
L5:
	%r70 = load %oop, %oop* %t2
	%r73 = ptrtoint %oop %r70 to %word
	%r72 = sub nsw %word 0, %r73
	%r71 = inttoptr %word %r72 to %oop
	store %oop %r71, %oop* %t2
	store %oop %r71, %oop* %t4
	br label %L6
L6:
	%r74 = load %oop, %oop* %t4
	%r75 = inttoptr %word 1 to %oop
	%r76 = inttoptr %word 1 to %oop
	%r77 = load %oop, %oop* %t2
	%r81 = ptrtoint %oop %r77 to %word
	%r80 = ptrtoint %oop %r76 to %word
	%r79 = shl %word %r81, %r80
	%r78 = inttoptr %word %r79 to %oop
	%r85 = ptrtoint %oop %r78 to %word
	%r84 = ptrtoint %oop %r75 to %word
	%r83 = or %word %r85, %r84
	%r82 = inttoptr %word %r83 to %oop
	ret %oop %r82
}
@m_cstr1512 = private unnamed_addr constant [17 x i8] c"-/evaluator-stub\00"
@m_ostr1513 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 33, %oop bitcast ([17 x i8]* @m_cstr1512 to %oop) }
@"m_-/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_-/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1513 }
define %oop @"m_+/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = inttoptr %word 0 to %oop
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = load %oop, %oop* %t0
	%r4 = call %oop @"m_pair?.code"(%oop %r3)
	%r6 = ptrtoint %oop %r4 to %word
	%r5 = icmp ne %word %r6, 0
	br i1 %r5, label %L1, label %L2
L1:
	%r7 = inttoptr %word 1 to %oop
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t0
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	%r10 = load %oop, %oop* %r11
	%r17 = ptrtoint %oop %r10 to %word
	%r16 = ptrtoint %oop %r7 to %word
	%r15 = ashr %word %r17, %r16
	%r14 = inttoptr %word %r15 to %oop
	store %oop %r14, %oop* %t2
	%r18 = inttoptr %word 1 to %oop
	%r19 = load %oop, %oop* %t0
	%r23 = bitcast %oop %r19 to [0 x %oop]*
	%r22 = ptrtoint %oop %r18 to %word
	%r21 = getelementptr [0 x %oop], [0 x %oop]* %r23, %word 0, %word %r22
	%r20 = load %oop, %oop* %r21
	store %oop %r20, %oop* %t3
	store %oop %r20, %oop* %t4
	br label %L3
L2:
	%r24 = inttoptr %word 0 to %oop
	store %oop %r24, %oop* %t4
	br label %L3
L3:
	%r25 = load %oop, %oop* %t4
	br label %L5
L4:
	%r26 = inttoptr %word 1 to %oop
	%r27 = inttoptr %word 0 to %oop
	%r28 = load %oop, %oop* %t3
	%r32 = bitcast %oop %r28 to [0 x %oop]*
	%r31 = ptrtoint %oop %r27 to %word
	%r30 = getelementptr [0 x %oop], [0 x %oop]* %r32, %word 0, %word %r31
	%r29 = load %oop, %oop* %r30
	%r36 = ptrtoint %oop %r29 to %word
	%r35 = ptrtoint %oop %r26 to %word
	%r34 = ashr %word %r36, %r35
	%r33 = inttoptr %word %r34 to %oop
	%r37 = load %oop, %oop* %t2
	%r41 = ptrtoint %oop %r37 to %word
	%r40 = ptrtoint %oop %r33 to %word
	%r39 = add %word %r41, %r40
	%r38 = inttoptr %word %r39 to %oop
	store %oop %r38, %oop* %t2
	%r42 = inttoptr %word 1 to %oop
	%r43 = load %oop, %oop* %t3
	%r47 = bitcast %oop %r43 to [0 x %oop]*
	%r46 = ptrtoint %oop %r42 to %word
	%r45 = getelementptr [0 x %oop], [0 x %oop]* %r47, %word 0, %word %r46
	%r44 = load %oop, %oop* %r45
	store %oop %r44, %oop* %t3
	br label %L5
L5:
	%r48 = load %oop, %oop* %t3
	%r49 = call %oop @"m_pair?.code"(%oop %r48)
	%r51 = ptrtoint %oop %r49 to %word
	%r50 = icmp ne %word %r51, 0
	br i1 %r50, label %L4, label %L6
L6:
	%r52 = inttoptr %word 1 to %oop
	%r53 = inttoptr %word 1 to %oop
	%r54 = load %oop, %oop* %t2
	%r58 = ptrtoint %oop %r54 to %word
	%r57 = ptrtoint %oop %r53 to %word
	%r56 = shl %word %r58, %r57
	%r55 = inttoptr %word %r56 to %oop
	%r62 = ptrtoint %oop %r55 to %word
	%r61 = ptrtoint %oop %r52 to %word
	%r60 = or %word %r62, %r61
	%r59 = inttoptr %word %r60 to %oop
	ret %oop %r59
}
@m_cstr1514 = private unnamed_addr constant [17 x i8] c"+/evaluator-stub\00"
@m_ostr1515 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 33, %oop bitcast ([17 x i8]* @m_cstr1514 to %oop) }
@"m_+/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_+/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1515 }
@m_cstr1516 = private unnamed_addr constant [40 x i8] c"operator '/' called with zero arguments\00"
@m_ostr1517 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 79, %oop bitcast ([40 x i8]* @m_cstr1516 to %oop) }
define %oop @"m_//evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = inttoptr %word 0 to %oop
	store %oop %r1, %oop* %t2
	%r2 = load %oop, %oop* %t0
	%r3 = call %oop @"m_pair?.code"(%oop %r2)
	store %oop %r3, %oop* %t2
	%r4 = inttoptr %word 0 to %oop
	%r8 = ptrtoint %oop %r4 to %word
	%r7 = ptrtoint %oop %r3 to %word
	%r6 = icmp eq %word %r8, %r7
	%r5 = inttoptr i1 %r6 to %oop
	%r10 = ptrtoint %oop %r5 to %word
	%r9 = icmp ne %word %r10, 0
	br i1 %r9, label %L2, label %L1
L2:
	%r11 = call %oop @m_error-prologue.code()
	%r12 = getelementptr %"<string>", %"<string>"* @m_ostr1517, i32 0, i32 1
	%r13 = bitcast %word* %r12 to %oop
	%r14 = call %oop @"m_%error.code"(%oop %r13)
	%r15 = call %oop @m_error-epilogue.code()
	store %oop %r15, %oop* %t2
	%r16 = inttoptr %word 0 to %oop
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = icmp eq %word %r20, %r19
	%r17 = inttoptr i1 %r18 to %oop
	%r22 = ptrtoint %oop %r17 to %word
	%r21 = icmp ne %word %r22, 0
	br i1 %r21, label %L3, label %L1
L3:
	br label %L1
L1:
	%r23 = load %oop, %oop* %t2
	%r24 = inttoptr %word 1 to %oop
	%r25 = inttoptr %word 0 to %oop
	%r26 = load %oop, %oop* %t0
	%r30 = bitcast %oop %r26 to [0 x %oop]*
	%r29 = ptrtoint %oop %r25 to %word
	%r28 = getelementptr [0 x %oop], [0 x %oop]* %r30, %word 0, %word %r29
	%r27 = load %oop, %oop* %r28
	%r34 = ptrtoint %oop %r27 to %word
	%r33 = ptrtoint %oop %r24 to %word
	%r32 = ashr %word %r34, %r33
	%r31 = inttoptr %word %r32 to %oop
	store %oop %r31, %oop* %t2
	%r35 = inttoptr %word 1 to %oop
	%r36 = load %oop, %oop* %t0
	%r40 = bitcast %oop %r36 to [0 x %oop]*
	%r39 = ptrtoint %oop %r35 to %word
	%r38 = getelementptr [0 x %oop], [0 x %oop]* %r40, %word 0, %word %r39
	%r37 = load %oop, %oop* %r38
	store %oop %r37, %oop* %t3
	%r41 = load %oop, %oop* %t3
	%r42 = call %oop @"m_pair?.code"(%oop %r41)
	%r44 = ptrtoint %oop %r42 to %word
	%r43 = icmp ne %word %r44, 0
	br i1 %r43, label %L4, label %L5
L4:
	br label %L8
L7:
	br label %L8
L8:
	%r45 = inttoptr %word 1 to %oop
	%r46 = inttoptr %word 0 to %oop
	%r47 = load %oop, %oop* %t3
	%r51 = bitcast %oop %r47 to [0 x %oop]*
	%r50 = ptrtoint %oop %r46 to %word
	%r49 = getelementptr [0 x %oop], [0 x %oop]* %r51, %word 0, %word %r50
	%r48 = load %oop, %oop* %r49
	%r55 = ptrtoint %oop %r48 to %word
	%r54 = ptrtoint %oop %r45 to %word
	%r53 = ashr %word %r55, %r54
	%r52 = inttoptr %word %r53 to %oop
	%r56 = load %oop, %oop* %t2
	%r60 = ptrtoint %oop %r56 to %word
	%r59 = ptrtoint %oop %r52 to %word
	%r58 = sdiv %word %r60, %r59
	%r57 = inttoptr %word %r58 to %oop
	store %oop %r57, %oop* %t2
	%r61 = inttoptr %word 1 to %oop
	%r62 = load %oop, %oop* %t3
	%r66 = bitcast %oop %r62 to [0 x %oop]*
	%r65 = ptrtoint %oop %r61 to %word
	%r64 = getelementptr [0 x %oop], [0 x %oop]* %r66, %word 0, %word %r65
	%r63 = load %oop, %oop* %r64
	store %oop %r63, %oop* %t3
	%r67 = call %oop @"m_pair?.code"(%oop %r63)
	%r69 = ptrtoint %oop %r67 to %word
	%r68 = icmp ne %word %r69, 0
	br i1 %r68, label %L7, label %L9
L9:
	store %oop %r67, %oop* %t4
	br label %L6
L5:
	%r70 = load %oop, %oop* %t2
	%r71 = inttoptr %word 1 to %oop
	%r75 = ptrtoint %oop %r71 to %word
	%r74 = ptrtoint %oop %r70 to %word
	%r73 = sdiv %word %r75, %r74
	%r72 = inttoptr %word %r73 to %oop
	store %oop %r72, %oop* %t2
	store %oop %r72, %oop* %t4
	br label %L6
L6:
	%r76 = load %oop, %oop* %t4
	%r77 = inttoptr %word 1 to %oop
	%r78 = inttoptr %word 1 to %oop
	%r79 = load %oop, %oop* %t2
	%r83 = ptrtoint %oop %r79 to %word
	%r82 = ptrtoint %oop %r78 to %word
	%r81 = shl %word %r83, %r82
	%r80 = inttoptr %word %r81 to %oop
	%r87 = ptrtoint %oop %r80 to %word
	%r86 = ptrtoint %oop %r77 to %word
	%r85 = or %word %r87, %r86
	%r84 = inttoptr %word %r85 to %oop
	ret %oop %r84
}
@m_cstr1518 = private unnamed_addr constant [17 x i8] c"//evaluator-stub\00"
@m_ostr1519 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 33, %oop bitcast ([17 x i8]* @m_cstr1518 to %oop) }
@"m_//evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_//evaluator-stub.code" to %oop), %"<string>"* @m_ostr1519 }
define %oop @"m_*/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = inttoptr %word 1 to %oop
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = load %oop, %oop* %t0
	%r4 = call %oop @"m_pair?.code"(%oop %r3)
	%r6 = ptrtoint %oop %r4 to %word
	%r5 = icmp ne %word %r6, 0
	br i1 %r5, label %L1, label %L2
L1:
	%r7 = inttoptr %word 1 to %oop
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t0
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	%r10 = load %oop, %oop* %r11
	%r17 = ptrtoint %oop %r10 to %word
	%r16 = ptrtoint %oop %r7 to %word
	%r15 = ashr %word %r17, %r16
	%r14 = inttoptr %word %r15 to %oop
	store %oop %r14, %oop* %t2
	%r18 = inttoptr %word 1 to %oop
	%r19 = load %oop, %oop* %t0
	%r23 = bitcast %oop %r19 to [0 x %oop]*
	%r22 = ptrtoint %oop %r18 to %word
	%r21 = getelementptr [0 x %oop], [0 x %oop]* %r23, %word 0, %word %r22
	%r20 = load %oop, %oop* %r21
	store %oop %r20, %oop* %t3
	store %oop %r20, %oop* %t4
	br label %L3
L2:
	%r24 = inttoptr %word 0 to %oop
	store %oop %r24, %oop* %t4
	br label %L3
L3:
	%r25 = load %oop, %oop* %t4
	br label %L5
L4:
	%r26 = inttoptr %word 1 to %oop
	%r27 = inttoptr %word 0 to %oop
	%r28 = load %oop, %oop* %t3
	%r32 = bitcast %oop %r28 to [0 x %oop]*
	%r31 = ptrtoint %oop %r27 to %word
	%r30 = getelementptr [0 x %oop], [0 x %oop]* %r32, %word 0, %word %r31
	%r29 = load %oop, %oop* %r30
	%r36 = ptrtoint %oop %r29 to %word
	%r35 = ptrtoint %oop %r26 to %word
	%r34 = ashr %word %r36, %r35
	%r33 = inttoptr %word %r34 to %oop
	%r37 = load %oop, %oop* %t2
	%r41 = ptrtoint %oop %r37 to %word
	%r40 = ptrtoint %oop %r33 to %word
	%r39 = mul %word %r41, %r40
	%r38 = inttoptr %word %r39 to %oop
	store %oop %r38, %oop* %t2
	%r42 = inttoptr %word 1 to %oop
	%r43 = load %oop, %oop* %t3
	%r47 = bitcast %oop %r43 to [0 x %oop]*
	%r46 = ptrtoint %oop %r42 to %word
	%r45 = getelementptr [0 x %oop], [0 x %oop]* %r47, %word 0, %word %r46
	%r44 = load %oop, %oop* %r45
	store %oop %r44, %oop* %t3
	br label %L5
L5:
	%r48 = load %oop, %oop* %t3
	%r49 = call %oop @"m_pair?.code"(%oop %r48)
	%r51 = ptrtoint %oop %r49 to %word
	%r50 = icmp ne %word %r51, 0
	br i1 %r50, label %L4, label %L6
L6:
	%r52 = inttoptr %word 1 to %oop
	%r53 = inttoptr %word 1 to %oop
	%r54 = load %oop, %oop* %t2
	%r58 = ptrtoint %oop %r54 to %word
	%r57 = ptrtoint %oop %r53 to %word
	%r56 = shl %word %r58, %r57
	%r55 = inttoptr %word %r56 to %oop
	%r62 = ptrtoint %oop %r55 to %word
	%r61 = ptrtoint %oop %r52 to %word
	%r60 = or %word %r62, %r61
	%r59 = inttoptr %word %r60 to %oop
	ret %oop %r59
}
@m_cstr1520 = private unnamed_addr constant [17 x i8] c"*/evaluator-stub\00"
@m_ostr1521 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 33, %oop bitcast ([17 x i8]* @m_cstr1520 to %oop) }
@"m_*/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_*/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1521 }
@m_cstr1522 = private unnamed_addr constant [12 x i8] c"bitwise-and\00"
@m_ostr1523 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr1522 to %oop) }
@m_cstr1524 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1525 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1524 to %oop) }
@m_cstr1526 = private unnamed_addr constant [4 x i8] c"lhs\00"
@m_ostr1527 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr1526 to %oop) }
@m_cstr1528 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1529 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1528 to %oop) }
@m_cstr1530 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr1531 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1530 to %oop) }
@m_cstr1532 = private unnamed_addr constant [12 x i8] c"bitwise-and\00"
@m_ostr1533 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr1532 to %oop) }
@m_cstr1534 = private unnamed_addr constant [12 x i8] c"bitwise-and\00"
@m_ostr1535 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr1534 to %oop) }
@m_cstr1536 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1537 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1536 to %oop) }
@m_cstr1538 = private unnamed_addr constant [4 x i8] c"rhs\00"
@m_ostr1539 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr1538 to %oop) }
@m_cstr1540 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1541 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1540 to %oop) }
@m_cstr1542 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr1543 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1542 to %oop) }
@m_cstr1544 = private unnamed_addr constant [12 x i8] c"bitwise-and\00"
@m_ostr1545 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr1544 to %oop) }
@m_cstr1546 = private unnamed_addr constant [12 x i8] c"bitwise-and\00"
@m_ostr1547 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr1546 to %oop) }
define %oop @"m_bitwise-and/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = load %oop, %oop* %t2
	%r5 = call %oop @"m_pair?.code"(%oop %r4)
	%r7 = ptrtoint %oop %r5 to %word
	%r6 = icmp ne %word %r7, 0
	br i1 %r6, label %L1, label %L2
L1:
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t2
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	%r10 = load %oop, %oop* %r11
	store %oop %r10, %oop* %t3
	%r14 = inttoptr %word 0 to %oop
	store %oop %r14, %oop* %t6
	%r15 = load %oop, %oop* %t3
	%r16 = call %oop @"m_long?.code"(%oop %r15)
	store %oop %r16, %oop* %t6
	%r17 = inttoptr %word 0 to %oop
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = icmp eq %word %r21, %r20
	%r18 = inttoptr i1 %r19 to %oop
	%r23 = ptrtoint %oop %r18 to %word
	%r22 = icmp ne %word %r23, 0
	br i1 %r22, label %L5, label %L4
L5:
	%r24 = call %oop @m_error-prologue.code()
	%r25 = getelementptr %"<string>", %"<string>"* @m_ostr1523, i32 0, i32 1
	%r26 = bitcast %word* %r25 to %oop
	%r27 = call %oop @"m_%error.code"(%oop %r26)
	%r28 = getelementptr %"<string>", %"<string>"* @m_ostr1525, i32 0, i32 1
	%r29 = bitcast %word* %r28 to %oop
	%r30 = call %oop @"m_%error.code"(%oop %r29)
	%r31 = getelementptr %"<string>", %"<string>"* @m_ostr1527, i32 0, i32 1
	%r32 = bitcast %word* %r31 to %oop
	%r33 = call %oop @"m_%error.code"(%oop %r32)
	%r34 = getelementptr %"<string>", %"<string>"* @m_ostr1529, i32 0, i32 1
	%r35 = bitcast %word* %r34 to %oop
	%r36 = call %oop @"m_%error.code"(%oop %r35)
	%r37 = getelementptr %"<string>", %"<string>"* @m_ostr1531, i32 0, i32 1
	%r38 = bitcast %word* %r37 to %oop
	%r39 = call %oop @"m_%error.code"(%oop %r38)
	%r40 = call %oop @m_error-epilogue.code()
	store %oop %r40, %oop* %t6
	%r41 = inttoptr %word 0 to %oop
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = ptrtoint %oop %r40 to %word
	%r43 = icmp eq %word %r45, %r44
	%r42 = inttoptr i1 %r43 to %oop
	%r47 = ptrtoint %oop %r42 to %word
	%r46 = icmp ne %word %r47, 0
	br i1 %r46, label %L6, label %L4
L6:
	br label %L4
L4:
	%r48 = load %oop, %oop* %t6
	%r49 = inttoptr %word 1 to %oop
	%r50 = load %oop, %oop* %t3
	%r54 = ptrtoint %oop %r50 to %word
	%r53 = ptrtoint %oop %r49 to %word
	%r52 = ashr %word %r54, %r53
	%r51 = inttoptr %word %r52 to %oop
	store %oop %r51, %oop* %t3
	%r55 = inttoptr %word 1 to %oop
	%r56 = load %oop, %oop* %t2
	%r60 = bitcast %oop %r56 to [0 x %oop]*
	%r59 = ptrtoint %oop %r55 to %word
	%r58 = getelementptr [0 x %oop], [0 x %oop]* %r60, %word 0, %word %r59
	%r57 = load %oop, %oop* %r58
	store %oop %r57, %oop* %t2
	store %oop %r57, %oop* %t5
	br label %L3
L2:
	%r61 = getelementptr %"<string>", %"<string>"* @m_ostr1533, i32 0, i32 1
	%r62 = bitcast %word* %r61 to %oop
	%r63 = load %oop, %oop* %t0
	%r64 = call %oop @"m_%not-enough-arguments.code"(%oop %r62, %oop %r63)
	store %oop %r64, %oop* %t5
	br label %L3
L3:
	%r65 = load %oop, %oop* %t5
	%r66 = load %oop, %oop* %t2
	%r67 = call %oop @"m_pair?.code"(%oop %r66)
	%r69 = ptrtoint %oop %r67 to %word
	%r68 = icmp ne %word %r69, 0
	br i1 %r68, label %L7, label %L8
L7:
	%r70 = inttoptr %word 0 to %oop
	%r71 = load %oop, %oop* %t2
	%r75 = bitcast %oop %r71 to [0 x %oop]*
	%r74 = ptrtoint %oop %r70 to %word
	%r73 = getelementptr [0 x %oop], [0 x %oop]* %r75, %word 0, %word %r74
	%r72 = load %oop, %oop* %r73
	store %oop %r72, %oop* %t4
	%r76 = inttoptr %word 0 to %oop
	store %oop %r76, %oop* %t6
	%r77 = load %oop, %oop* %t4
	%r78 = call %oop @"m_long?.code"(%oop %r77)
	store %oop %r78, %oop* %t6
	%r79 = inttoptr %word 0 to %oop
	%r83 = ptrtoint %oop %r79 to %word
	%r82 = ptrtoint %oop %r78 to %word
	%r81 = icmp eq %word %r83, %r82
	%r80 = inttoptr i1 %r81 to %oop
	%r85 = ptrtoint %oop %r80 to %word
	%r84 = icmp ne %word %r85, 0
	br i1 %r84, label %L11, label %L10
L11:
	%r86 = call %oop @m_error-prologue.code()
	%r87 = getelementptr %"<string>", %"<string>"* @m_ostr1535, i32 0, i32 1
	%r88 = bitcast %word* %r87 to %oop
	%r89 = call %oop @"m_%error.code"(%oop %r88)
	%r90 = getelementptr %"<string>", %"<string>"* @m_ostr1537, i32 0, i32 1
	%r91 = bitcast %word* %r90 to %oop
	%r92 = call %oop @"m_%error.code"(%oop %r91)
	%r93 = getelementptr %"<string>", %"<string>"* @m_ostr1539, i32 0, i32 1
	%r94 = bitcast %word* %r93 to %oop
	%r95 = call %oop @"m_%error.code"(%oop %r94)
	%r96 = getelementptr %"<string>", %"<string>"* @m_ostr1541, i32 0, i32 1
	%r97 = bitcast %word* %r96 to %oop
	%r98 = call %oop @"m_%error.code"(%oop %r97)
	%r99 = getelementptr %"<string>", %"<string>"* @m_ostr1543, i32 0, i32 1
	%r100 = bitcast %word* %r99 to %oop
	%r101 = call %oop @"m_%error.code"(%oop %r100)
	%r102 = call %oop @m_error-epilogue.code()
	store %oop %r102, %oop* %t6
	%r103 = inttoptr %word 0 to %oop
	%r107 = ptrtoint %oop %r103 to %word
	%r106 = ptrtoint %oop %r102 to %word
	%r105 = icmp eq %word %r107, %r106
	%r104 = inttoptr i1 %r105 to %oop
	%r109 = ptrtoint %oop %r104 to %word
	%r108 = icmp ne %word %r109, 0
	br i1 %r108, label %L12, label %L10
L12:
	br label %L10
L10:
	%r110 = load %oop, %oop* %t6
	%r111 = inttoptr %word 1 to %oop
	%r112 = load %oop, %oop* %t4
	%r116 = ptrtoint %oop %r112 to %word
	%r115 = ptrtoint %oop %r111 to %word
	%r114 = ashr %word %r116, %r115
	%r113 = inttoptr %word %r114 to %oop
	store %oop %r113, %oop* %t4
	%r117 = inttoptr %word 1 to %oop
	%r118 = load %oop, %oop* %t2
	%r122 = bitcast %oop %r118 to [0 x %oop]*
	%r121 = ptrtoint %oop %r117 to %word
	%r120 = getelementptr [0 x %oop], [0 x %oop]* %r122, %word 0, %word %r121
	%r119 = load %oop, %oop* %r120
	store %oop %r119, %oop* %t2
	store %oop %r119, %oop* %t5
	br label %L9
L8:
	%r123 = getelementptr %"<string>", %"<string>"* @m_ostr1545, i32 0, i32 1
	%r124 = bitcast %word* %r123 to %oop
	%r125 = load %oop, %oop* %t0
	%r126 = call %oop @"m_%not-enough-arguments.code"(%oop %r124, %oop %r125)
	store %oop %r126, %oop* %t5
	br label %L9
L9:
	%r127 = load %oop, %oop* %t5
	%r128 = load %oop, %oop* %t2
	%r130 = ptrtoint %oop %r128 to %word
	%r129 = icmp ne %word %r130, 0
	br i1 %r129, label %L13, label %L14
L13:
	%r131 = getelementptr %"<string>", %"<string>"* @m_ostr1547, i32 0, i32 1
	%r132 = bitcast %word* %r131 to %oop
	%r133 = load %oop, %oop* %t0
	%r134 = call %oop @"m_%too-many-arguments.code"(%oop %r132, %oop %r133)
	store %oop %r134, %oop* %t5
	br label %L15
L14:
	%r135 = inttoptr %word 0 to %oop
	store %oop %r135, %oop* %t5
	br label %L15
L15:
	%r136 = load %oop, %oop* %t5
	%r137 = inttoptr %word 1 to %oop
	%r138 = inttoptr %word 1 to %oop
	%r139 = load %oop, %oop* %t4
	%r140 = load %oop, %oop* %t3
	%r144 = ptrtoint %oop %r140 to %word
	%r143 = ptrtoint %oop %r139 to %word
	%r142 = and %word %r144, %r143
	%r141 = inttoptr %word %r142 to %oop
	%r148 = ptrtoint %oop %r141 to %word
	%r147 = ptrtoint %oop %r138 to %word
	%r146 = shl %word %r148, %r147
	%r145 = inttoptr %word %r146 to %oop
	%r152 = ptrtoint %oop %r145 to %word
	%r151 = ptrtoint %oop %r137 to %word
	%r150 = or %word %r152, %r151
	%r149 = inttoptr %word %r150 to %oop
	ret %oop %r149
}
@m_cstr1548 = private unnamed_addr constant [27 x i8] c"bitwise-and/evaluator-stub\00"
@m_ostr1549 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 53, %oop bitcast ([27 x i8]* @m_cstr1548 to %oop) }
@"m_bitwise-and/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_bitwise-and/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1549 }
@m_cstr1550 = private unnamed_addr constant [11 x i8] c"bitwise-or\00"
@m_ostr1551 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr1550 to %oop) }
@m_cstr1552 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1553 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1552 to %oop) }
@m_cstr1554 = private unnamed_addr constant [4 x i8] c"lhs\00"
@m_ostr1555 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr1554 to %oop) }
@m_cstr1556 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1557 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1556 to %oop) }
@m_cstr1558 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr1559 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1558 to %oop) }
@m_cstr1560 = private unnamed_addr constant [11 x i8] c"bitwise-or\00"
@m_ostr1561 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr1560 to %oop) }
@m_cstr1562 = private unnamed_addr constant [11 x i8] c"bitwise-or\00"
@m_ostr1563 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr1562 to %oop) }
@m_cstr1564 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1565 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1564 to %oop) }
@m_cstr1566 = private unnamed_addr constant [4 x i8] c"rhs\00"
@m_ostr1567 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr1566 to %oop) }
@m_cstr1568 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1569 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1568 to %oop) }
@m_cstr1570 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr1571 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1570 to %oop) }
@m_cstr1572 = private unnamed_addr constant [11 x i8] c"bitwise-or\00"
@m_ostr1573 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr1572 to %oop) }
@m_cstr1574 = private unnamed_addr constant [11 x i8] c"bitwise-or\00"
@m_ostr1575 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr1574 to %oop) }
define %oop @"m_bitwise-or/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = load %oop, %oop* %t2
	%r5 = call %oop @"m_pair?.code"(%oop %r4)
	%r7 = ptrtoint %oop %r5 to %word
	%r6 = icmp ne %word %r7, 0
	br i1 %r6, label %L1, label %L2
L1:
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t2
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	%r10 = load %oop, %oop* %r11
	store %oop %r10, %oop* %t3
	%r14 = inttoptr %word 0 to %oop
	store %oop %r14, %oop* %t6
	%r15 = load %oop, %oop* %t3
	%r16 = call %oop @"m_long?.code"(%oop %r15)
	store %oop %r16, %oop* %t6
	%r17 = inttoptr %word 0 to %oop
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = icmp eq %word %r21, %r20
	%r18 = inttoptr i1 %r19 to %oop
	%r23 = ptrtoint %oop %r18 to %word
	%r22 = icmp ne %word %r23, 0
	br i1 %r22, label %L5, label %L4
L5:
	%r24 = call %oop @m_error-prologue.code()
	%r25 = getelementptr %"<string>", %"<string>"* @m_ostr1551, i32 0, i32 1
	%r26 = bitcast %word* %r25 to %oop
	%r27 = call %oop @"m_%error.code"(%oop %r26)
	%r28 = getelementptr %"<string>", %"<string>"* @m_ostr1553, i32 0, i32 1
	%r29 = bitcast %word* %r28 to %oop
	%r30 = call %oop @"m_%error.code"(%oop %r29)
	%r31 = getelementptr %"<string>", %"<string>"* @m_ostr1555, i32 0, i32 1
	%r32 = bitcast %word* %r31 to %oop
	%r33 = call %oop @"m_%error.code"(%oop %r32)
	%r34 = getelementptr %"<string>", %"<string>"* @m_ostr1557, i32 0, i32 1
	%r35 = bitcast %word* %r34 to %oop
	%r36 = call %oop @"m_%error.code"(%oop %r35)
	%r37 = getelementptr %"<string>", %"<string>"* @m_ostr1559, i32 0, i32 1
	%r38 = bitcast %word* %r37 to %oop
	%r39 = call %oop @"m_%error.code"(%oop %r38)
	%r40 = call %oop @m_error-epilogue.code()
	store %oop %r40, %oop* %t6
	%r41 = inttoptr %word 0 to %oop
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = ptrtoint %oop %r40 to %word
	%r43 = icmp eq %word %r45, %r44
	%r42 = inttoptr i1 %r43 to %oop
	%r47 = ptrtoint %oop %r42 to %word
	%r46 = icmp ne %word %r47, 0
	br i1 %r46, label %L6, label %L4
L6:
	br label %L4
L4:
	%r48 = load %oop, %oop* %t6
	%r49 = inttoptr %word 1 to %oop
	%r50 = load %oop, %oop* %t3
	%r54 = ptrtoint %oop %r50 to %word
	%r53 = ptrtoint %oop %r49 to %word
	%r52 = ashr %word %r54, %r53
	%r51 = inttoptr %word %r52 to %oop
	store %oop %r51, %oop* %t3
	%r55 = inttoptr %word 1 to %oop
	%r56 = load %oop, %oop* %t2
	%r60 = bitcast %oop %r56 to [0 x %oop]*
	%r59 = ptrtoint %oop %r55 to %word
	%r58 = getelementptr [0 x %oop], [0 x %oop]* %r60, %word 0, %word %r59
	%r57 = load %oop, %oop* %r58
	store %oop %r57, %oop* %t2
	store %oop %r57, %oop* %t5
	br label %L3
L2:
	%r61 = getelementptr %"<string>", %"<string>"* @m_ostr1561, i32 0, i32 1
	%r62 = bitcast %word* %r61 to %oop
	%r63 = load %oop, %oop* %t0
	%r64 = call %oop @"m_%not-enough-arguments.code"(%oop %r62, %oop %r63)
	store %oop %r64, %oop* %t5
	br label %L3
L3:
	%r65 = load %oop, %oop* %t5
	%r66 = load %oop, %oop* %t2
	%r67 = call %oop @"m_pair?.code"(%oop %r66)
	%r69 = ptrtoint %oop %r67 to %word
	%r68 = icmp ne %word %r69, 0
	br i1 %r68, label %L7, label %L8
L7:
	%r70 = inttoptr %word 0 to %oop
	%r71 = load %oop, %oop* %t2
	%r75 = bitcast %oop %r71 to [0 x %oop]*
	%r74 = ptrtoint %oop %r70 to %word
	%r73 = getelementptr [0 x %oop], [0 x %oop]* %r75, %word 0, %word %r74
	%r72 = load %oop, %oop* %r73
	store %oop %r72, %oop* %t4
	%r76 = inttoptr %word 0 to %oop
	store %oop %r76, %oop* %t6
	%r77 = load %oop, %oop* %t4
	%r78 = call %oop @"m_long?.code"(%oop %r77)
	store %oop %r78, %oop* %t6
	%r79 = inttoptr %word 0 to %oop
	%r83 = ptrtoint %oop %r79 to %word
	%r82 = ptrtoint %oop %r78 to %word
	%r81 = icmp eq %word %r83, %r82
	%r80 = inttoptr i1 %r81 to %oop
	%r85 = ptrtoint %oop %r80 to %word
	%r84 = icmp ne %word %r85, 0
	br i1 %r84, label %L11, label %L10
L11:
	%r86 = call %oop @m_error-prologue.code()
	%r87 = getelementptr %"<string>", %"<string>"* @m_ostr1563, i32 0, i32 1
	%r88 = bitcast %word* %r87 to %oop
	%r89 = call %oop @"m_%error.code"(%oop %r88)
	%r90 = getelementptr %"<string>", %"<string>"* @m_ostr1565, i32 0, i32 1
	%r91 = bitcast %word* %r90 to %oop
	%r92 = call %oop @"m_%error.code"(%oop %r91)
	%r93 = getelementptr %"<string>", %"<string>"* @m_ostr1567, i32 0, i32 1
	%r94 = bitcast %word* %r93 to %oop
	%r95 = call %oop @"m_%error.code"(%oop %r94)
	%r96 = getelementptr %"<string>", %"<string>"* @m_ostr1569, i32 0, i32 1
	%r97 = bitcast %word* %r96 to %oop
	%r98 = call %oop @"m_%error.code"(%oop %r97)
	%r99 = getelementptr %"<string>", %"<string>"* @m_ostr1571, i32 0, i32 1
	%r100 = bitcast %word* %r99 to %oop
	%r101 = call %oop @"m_%error.code"(%oop %r100)
	%r102 = call %oop @m_error-epilogue.code()
	store %oop %r102, %oop* %t6
	%r103 = inttoptr %word 0 to %oop
	%r107 = ptrtoint %oop %r103 to %word
	%r106 = ptrtoint %oop %r102 to %word
	%r105 = icmp eq %word %r107, %r106
	%r104 = inttoptr i1 %r105 to %oop
	%r109 = ptrtoint %oop %r104 to %word
	%r108 = icmp ne %word %r109, 0
	br i1 %r108, label %L12, label %L10
L12:
	br label %L10
L10:
	%r110 = load %oop, %oop* %t6
	%r111 = inttoptr %word 1 to %oop
	%r112 = load %oop, %oop* %t4
	%r116 = ptrtoint %oop %r112 to %word
	%r115 = ptrtoint %oop %r111 to %word
	%r114 = ashr %word %r116, %r115
	%r113 = inttoptr %word %r114 to %oop
	store %oop %r113, %oop* %t4
	%r117 = inttoptr %word 1 to %oop
	%r118 = load %oop, %oop* %t2
	%r122 = bitcast %oop %r118 to [0 x %oop]*
	%r121 = ptrtoint %oop %r117 to %word
	%r120 = getelementptr [0 x %oop], [0 x %oop]* %r122, %word 0, %word %r121
	%r119 = load %oop, %oop* %r120
	store %oop %r119, %oop* %t2
	store %oop %r119, %oop* %t5
	br label %L9
L8:
	%r123 = getelementptr %"<string>", %"<string>"* @m_ostr1573, i32 0, i32 1
	%r124 = bitcast %word* %r123 to %oop
	%r125 = load %oop, %oop* %t0
	%r126 = call %oop @"m_%not-enough-arguments.code"(%oop %r124, %oop %r125)
	store %oop %r126, %oop* %t5
	br label %L9
L9:
	%r127 = load %oop, %oop* %t5
	%r128 = load %oop, %oop* %t2
	%r130 = ptrtoint %oop %r128 to %word
	%r129 = icmp ne %word %r130, 0
	br i1 %r129, label %L13, label %L14
L13:
	%r131 = getelementptr %"<string>", %"<string>"* @m_ostr1575, i32 0, i32 1
	%r132 = bitcast %word* %r131 to %oop
	%r133 = load %oop, %oop* %t0
	%r134 = call %oop @"m_%too-many-arguments.code"(%oop %r132, %oop %r133)
	store %oop %r134, %oop* %t5
	br label %L15
L14:
	%r135 = inttoptr %word 0 to %oop
	store %oop %r135, %oop* %t5
	br label %L15
L15:
	%r136 = load %oop, %oop* %t5
	%r137 = inttoptr %word 1 to %oop
	%r138 = inttoptr %word 1 to %oop
	%r139 = load %oop, %oop* %t4
	%r140 = load %oop, %oop* %t3
	%r144 = ptrtoint %oop %r140 to %word
	%r143 = ptrtoint %oop %r139 to %word
	%r142 = or %word %r144, %r143
	%r141 = inttoptr %word %r142 to %oop
	%r148 = ptrtoint %oop %r141 to %word
	%r147 = ptrtoint %oop %r138 to %word
	%r146 = shl %word %r148, %r147
	%r145 = inttoptr %word %r146 to %oop
	%r152 = ptrtoint %oop %r145 to %word
	%r151 = ptrtoint %oop %r137 to %word
	%r150 = or %word %r152, %r151
	%r149 = inttoptr %word %r150 to %oop
	ret %oop %r149
}
@m_cstr1576 = private unnamed_addr constant [26 x i8] c"bitwise-or/evaluator-stub\00"
@m_ostr1577 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 51, %oop bitcast ([26 x i8]* @m_cstr1576 to %oop) }
@"m_bitwise-or/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_bitwise-or/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1577 }
@m_cstr1578 = private unnamed_addr constant [12 x i8] c"bitwise-xor\00"
@m_ostr1579 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr1578 to %oop) }
@m_cstr1580 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1581 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1580 to %oop) }
@m_cstr1582 = private unnamed_addr constant [4 x i8] c"lhs\00"
@m_ostr1583 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr1582 to %oop) }
@m_cstr1584 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1585 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1584 to %oop) }
@m_cstr1586 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr1587 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1586 to %oop) }
@m_cstr1588 = private unnamed_addr constant [12 x i8] c"bitwise-xor\00"
@m_ostr1589 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr1588 to %oop) }
@m_cstr1590 = private unnamed_addr constant [12 x i8] c"bitwise-xor\00"
@m_ostr1591 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr1590 to %oop) }
@m_cstr1592 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1593 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1592 to %oop) }
@m_cstr1594 = private unnamed_addr constant [4 x i8] c"rhs\00"
@m_ostr1595 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr1594 to %oop) }
@m_cstr1596 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1597 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1596 to %oop) }
@m_cstr1598 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr1599 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1598 to %oop) }
@m_cstr1600 = private unnamed_addr constant [12 x i8] c"bitwise-xor\00"
@m_ostr1601 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr1600 to %oop) }
@m_cstr1602 = private unnamed_addr constant [12 x i8] c"bitwise-xor\00"
@m_ostr1603 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr1602 to %oop) }
define %oop @"m_bitwise-xor/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = load %oop, %oop* %t2
	%r5 = call %oop @"m_pair?.code"(%oop %r4)
	%r7 = ptrtoint %oop %r5 to %word
	%r6 = icmp ne %word %r7, 0
	br i1 %r6, label %L1, label %L2
L1:
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t2
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	%r10 = load %oop, %oop* %r11
	store %oop %r10, %oop* %t3
	%r14 = inttoptr %word 0 to %oop
	store %oop %r14, %oop* %t6
	%r15 = load %oop, %oop* %t3
	%r16 = call %oop @"m_long?.code"(%oop %r15)
	store %oop %r16, %oop* %t6
	%r17 = inttoptr %word 0 to %oop
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = icmp eq %word %r21, %r20
	%r18 = inttoptr i1 %r19 to %oop
	%r23 = ptrtoint %oop %r18 to %word
	%r22 = icmp ne %word %r23, 0
	br i1 %r22, label %L5, label %L4
L5:
	%r24 = call %oop @m_error-prologue.code()
	%r25 = getelementptr %"<string>", %"<string>"* @m_ostr1579, i32 0, i32 1
	%r26 = bitcast %word* %r25 to %oop
	%r27 = call %oop @"m_%error.code"(%oop %r26)
	%r28 = getelementptr %"<string>", %"<string>"* @m_ostr1581, i32 0, i32 1
	%r29 = bitcast %word* %r28 to %oop
	%r30 = call %oop @"m_%error.code"(%oop %r29)
	%r31 = getelementptr %"<string>", %"<string>"* @m_ostr1583, i32 0, i32 1
	%r32 = bitcast %word* %r31 to %oop
	%r33 = call %oop @"m_%error.code"(%oop %r32)
	%r34 = getelementptr %"<string>", %"<string>"* @m_ostr1585, i32 0, i32 1
	%r35 = bitcast %word* %r34 to %oop
	%r36 = call %oop @"m_%error.code"(%oop %r35)
	%r37 = getelementptr %"<string>", %"<string>"* @m_ostr1587, i32 0, i32 1
	%r38 = bitcast %word* %r37 to %oop
	%r39 = call %oop @"m_%error.code"(%oop %r38)
	%r40 = call %oop @m_error-epilogue.code()
	store %oop %r40, %oop* %t6
	%r41 = inttoptr %word 0 to %oop
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = ptrtoint %oop %r40 to %word
	%r43 = icmp eq %word %r45, %r44
	%r42 = inttoptr i1 %r43 to %oop
	%r47 = ptrtoint %oop %r42 to %word
	%r46 = icmp ne %word %r47, 0
	br i1 %r46, label %L6, label %L4
L6:
	br label %L4
L4:
	%r48 = load %oop, %oop* %t6
	%r49 = inttoptr %word 1 to %oop
	%r50 = load %oop, %oop* %t3
	%r54 = ptrtoint %oop %r50 to %word
	%r53 = ptrtoint %oop %r49 to %word
	%r52 = ashr %word %r54, %r53
	%r51 = inttoptr %word %r52 to %oop
	store %oop %r51, %oop* %t3
	%r55 = inttoptr %word 1 to %oop
	%r56 = load %oop, %oop* %t2
	%r60 = bitcast %oop %r56 to [0 x %oop]*
	%r59 = ptrtoint %oop %r55 to %word
	%r58 = getelementptr [0 x %oop], [0 x %oop]* %r60, %word 0, %word %r59
	%r57 = load %oop, %oop* %r58
	store %oop %r57, %oop* %t2
	store %oop %r57, %oop* %t5
	br label %L3
L2:
	%r61 = getelementptr %"<string>", %"<string>"* @m_ostr1589, i32 0, i32 1
	%r62 = bitcast %word* %r61 to %oop
	%r63 = load %oop, %oop* %t0
	%r64 = call %oop @"m_%not-enough-arguments.code"(%oop %r62, %oop %r63)
	store %oop %r64, %oop* %t5
	br label %L3
L3:
	%r65 = load %oop, %oop* %t5
	%r66 = load %oop, %oop* %t2
	%r67 = call %oop @"m_pair?.code"(%oop %r66)
	%r69 = ptrtoint %oop %r67 to %word
	%r68 = icmp ne %word %r69, 0
	br i1 %r68, label %L7, label %L8
L7:
	%r70 = inttoptr %word 0 to %oop
	%r71 = load %oop, %oop* %t2
	%r75 = bitcast %oop %r71 to [0 x %oop]*
	%r74 = ptrtoint %oop %r70 to %word
	%r73 = getelementptr [0 x %oop], [0 x %oop]* %r75, %word 0, %word %r74
	%r72 = load %oop, %oop* %r73
	store %oop %r72, %oop* %t4
	%r76 = inttoptr %word 0 to %oop
	store %oop %r76, %oop* %t6
	%r77 = load %oop, %oop* %t4
	%r78 = call %oop @"m_long?.code"(%oop %r77)
	store %oop %r78, %oop* %t6
	%r79 = inttoptr %word 0 to %oop
	%r83 = ptrtoint %oop %r79 to %word
	%r82 = ptrtoint %oop %r78 to %word
	%r81 = icmp eq %word %r83, %r82
	%r80 = inttoptr i1 %r81 to %oop
	%r85 = ptrtoint %oop %r80 to %word
	%r84 = icmp ne %word %r85, 0
	br i1 %r84, label %L11, label %L10
L11:
	%r86 = call %oop @m_error-prologue.code()
	%r87 = getelementptr %"<string>", %"<string>"* @m_ostr1591, i32 0, i32 1
	%r88 = bitcast %word* %r87 to %oop
	%r89 = call %oop @"m_%error.code"(%oop %r88)
	%r90 = getelementptr %"<string>", %"<string>"* @m_ostr1593, i32 0, i32 1
	%r91 = bitcast %word* %r90 to %oop
	%r92 = call %oop @"m_%error.code"(%oop %r91)
	%r93 = getelementptr %"<string>", %"<string>"* @m_ostr1595, i32 0, i32 1
	%r94 = bitcast %word* %r93 to %oop
	%r95 = call %oop @"m_%error.code"(%oop %r94)
	%r96 = getelementptr %"<string>", %"<string>"* @m_ostr1597, i32 0, i32 1
	%r97 = bitcast %word* %r96 to %oop
	%r98 = call %oop @"m_%error.code"(%oop %r97)
	%r99 = getelementptr %"<string>", %"<string>"* @m_ostr1599, i32 0, i32 1
	%r100 = bitcast %word* %r99 to %oop
	%r101 = call %oop @"m_%error.code"(%oop %r100)
	%r102 = call %oop @m_error-epilogue.code()
	store %oop %r102, %oop* %t6
	%r103 = inttoptr %word 0 to %oop
	%r107 = ptrtoint %oop %r103 to %word
	%r106 = ptrtoint %oop %r102 to %word
	%r105 = icmp eq %word %r107, %r106
	%r104 = inttoptr i1 %r105 to %oop
	%r109 = ptrtoint %oop %r104 to %word
	%r108 = icmp ne %word %r109, 0
	br i1 %r108, label %L12, label %L10
L12:
	br label %L10
L10:
	%r110 = load %oop, %oop* %t6
	%r111 = inttoptr %word 1 to %oop
	%r112 = load %oop, %oop* %t4
	%r116 = ptrtoint %oop %r112 to %word
	%r115 = ptrtoint %oop %r111 to %word
	%r114 = ashr %word %r116, %r115
	%r113 = inttoptr %word %r114 to %oop
	store %oop %r113, %oop* %t4
	%r117 = inttoptr %word 1 to %oop
	%r118 = load %oop, %oop* %t2
	%r122 = bitcast %oop %r118 to [0 x %oop]*
	%r121 = ptrtoint %oop %r117 to %word
	%r120 = getelementptr [0 x %oop], [0 x %oop]* %r122, %word 0, %word %r121
	%r119 = load %oop, %oop* %r120
	store %oop %r119, %oop* %t2
	store %oop %r119, %oop* %t5
	br label %L9
L8:
	%r123 = getelementptr %"<string>", %"<string>"* @m_ostr1601, i32 0, i32 1
	%r124 = bitcast %word* %r123 to %oop
	%r125 = load %oop, %oop* %t0
	%r126 = call %oop @"m_%not-enough-arguments.code"(%oop %r124, %oop %r125)
	store %oop %r126, %oop* %t5
	br label %L9
L9:
	%r127 = load %oop, %oop* %t5
	%r128 = load %oop, %oop* %t2
	%r130 = ptrtoint %oop %r128 to %word
	%r129 = icmp ne %word %r130, 0
	br i1 %r129, label %L13, label %L14
L13:
	%r131 = getelementptr %"<string>", %"<string>"* @m_ostr1603, i32 0, i32 1
	%r132 = bitcast %word* %r131 to %oop
	%r133 = load %oop, %oop* %t0
	%r134 = call %oop @"m_%too-many-arguments.code"(%oop %r132, %oop %r133)
	store %oop %r134, %oop* %t5
	br label %L15
L14:
	%r135 = inttoptr %word 0 to %oop
	store %oop %r135, %oop* %t5
	br label %L15
L15:
	%r136 = load %oop, %oop* %t5
	%r137 = inttoptr %word 1 to %oop
	%r138 = inttoptr %word 1 to %oop
	%r139 = load %oop, %oop* %t4
	%r140 = load %oop, %oop* %t3
	%r144 = ptrtoint %oop %r140 to %word
	%r143 = ptrtoint %oop %r139 to %word
	%r142 = xor %word %r144, %r143
	%r141 = inttoptr %word %r142 to %oop
	%r148 = ptrtoint %oop %r141 to %word
	%r147 = ptrtoint %oop %r138 to %word
	%r146 = shl %word %r148, %r147
	%r145 = inttoptr %word %r146 to %oop
	%r152 = ptrtoint %oop %r145 to %word
	%r151 = ptrtoint %oop %r137 to %word
	%r150 = or %word %r152, %r151
	%r149 = inttoptr %word %r150 to %oop
	ret %oop %r149
}
@m_cstr1604 = private unnamed_addr constant [27 x i8] c"bitwise-xor/evaluator-stub\00"
@m_ostr1605 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 53, %oop bitcast ([27 x i8]* @m_cstr1604 to %oop) }
@"m_bitwise-xor/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_bitwise-xor/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1605 }
@m_cstr1606 = private unnamed_addr constant [12 x i8] c"bitwise-not\00"
@m_ostr1607 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr1606 to %oop) }
@m_cstr1608 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1609 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1608 to %oop) }
@m_cstr1610 = private unnamed_addr constant [6 x i8] c"value\00"
@m_ostr1611 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr1610 to %oop) }
@m_cstr1612 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1613 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1612 to %oop) }
@m_cstr1614 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr1615 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1614 to %oop) }
@m_cstr1616 = private unnamed_addr constant [12 x i8] c"bitwise-not\00"
@m_ostr1617 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr1616 to %oop) }
@m_cstr1618 = private unnamed_addr constant [12 x i8] c"bitwise-not\00"
@m_ostr1619 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr1618 to %oop) }
define %oop @"m_bitwise-not/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = load %oop, %oop* %t2
	%r4 = call %oop @"m_pair?.code"(%oop %r3)
	%r6 = ptrtoint %oop %r4 to %word
	%r5 = icmp ne %word %r6, 0
	br i1 %r5, label %L1, label %L2
L1:
	%r7 = inttoptr %word 0 to %oop
	%r8 = load %oop, %oop* %t2
	%r12 = bitcast %oop %r8 to [0 x %oop]*
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = getelementptr [0 x %oop], [0 x %oop]* %r12, %word 0, %word %r11
	%r9 = load %oop, %oop* %r10
	store %oop %r9, %oop* %t3
	%r13 = inttoptr %word 0 to %oop
	store %oop %r13, %oop* %t5
	%r14 = load %oop, %oop* %t3
	%r15 = call %oop @"m_long?.code"(%oop %r14)
	store %oop %r15, %oop* %t5
	%r16 = inttoptr %word 0 to %oop
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = icmp eq %word %r20, %r19
	%r17 = inttoptr i1 %r18 to %oop
	%r22 = ptrtoint %oop %r17 to %word
	%r21 = icmp ne %word %r22, 0
	br i1 %r21, label %L5, label %L4
L5:
	%r23 = call %oop @m_error-prologue.code()
	%r24 = getelementptr %"<string>", %"<string>"* @m_ostr1607, i32 0, i32 1
	%r25 = bitcast %word* %r24 to %oop
	%r26 = call %oop @"m_%error.code"(%oop %r25)
	%r27 = getelementptr %"<string>", %"<string>"* @m_ostr1609, i32 0, i32 1
	%r28 = bitcast %word* %r27 to %oop
	%r29 = call %oop @"m_%error.code"(%oop %r28)
	%r30 = getelementptr %"<string>", %"<string>"* @m_ostr1611, i32 0, i32 1
	%r31 = bitcast %word* %r30 to %oop
	%r32 = call %oop @"m_%error.code"(%oop %r31)
	%r33 = getelementptr %"<string>", %"<string>"* @m_ostr1613, i32 0, i32 1
	%r34 = bitcast %word* %r33 to %oop
	%r35 = call %oop @"m_%error.code"(%oop %r34)
	%r36 = getelementptr %"<string>", %"<string>"* @m_ostr1615, i32 0, i32 1
	%r37 = bitcast %word* %r36 to %oop
	%r38 = call %oop @"m_%error.code"(%oop %r37)
	%r39 = call %oop @m_error-epilogue.code()
	store %oop %r39, %oop* %t5
	%r40 = inttoptr %word 0 to %oop
	%r44 = ptrtoint %oop %r40 to %word
	%r43 = ptrtoint %oop %r39 to %word
	%r42 = icmp eq %word %r44, %r43
	%r41 = inttoptr i1 %r42 to %oop
	%r46 = ptrtoint %oop %r41 to %word
	%r45 = icmp ne %word %r46, 0
	br i1 %r45, label %L6, label %L4
L6:
	br label %L4
L4:
	%r47 = load %oop, %oop* %t5
	%r48 = inttoptr %word 1 to %oop
	%r49 = load %oop, %oop* %t3
	%r53 = ptrtoint %oop %r49 to %word
	%r52 = ptrtoint %oop %r48 to %word
	%r51 = ashr %word %r53, %r52
	%r50 = inttoptr %word %r51 to %oop
	store %oop %r50, %oop* %t3
	%r54 = inttoptr %word 1 to %oop
	%r55 = load %oop, %oop* %t2
	%r59 = bitcast %oop %r55 to [0 x %oop]*
	%r58 = ptrtoint %oop %r54 to %word
	%r57 = getelementptr [0 x %oop], [0 x %oop]* %r59, %word 0, %word %r58
	%r56 = load %oop, %oop* %r57
	store %oop %r56, %oop* %t2
	store %oop %r56, %oop* %t4
	br label %L3
L2:
	%r60 = getelementptr %"<string>", %"<string>"* @m_ostr1617, i32 0, i32 1
	%r61 = bitcast %word* %r60 to %oop
	%r62 = load %oop, %oop* %t0
	%r63 = call %oop @"m_%not-enough-arguments.code"(%oop %r61, %oop %r62)
	store %oop %r63, %oop* %t4
	br label %L3
L3:
	%r64 = load %oop, %oop* %t4
	%r65 = load %oop, %oop* %t2
	%r67 = ptrtoint %oop %r65 to %word
	%r66 = icmp ne %word %r67, 0
	br i1 %r66, label %L7, label %L8
L7:
	%r68 = getelementptr %"<string>", %"<string>"* @m_ostr1619, i32 0, i32 1
	%r69 = bitcast %word* %r68 to %oop
	%r70 = load %oop, %oop* %t0
	%r71 = call %oop @"m_%too-many-arguments.code"(%oop %r69, %oop %r70)
	store %oop %r71, %oop* %t4
	br label %L9
L8:
	%r72 = inttoptr %word 0 to %oop
	store %oop %r72, %oop* %t4
	br label %L9
L9:
	%r73 = load %oop, %oop* %t4
	%r74 = inttoptr %word 1 to %oop
	%r75 = inttoptr %word 1 to %oop
	%r76 = inttoptr %word -1 to %oop
	%r77 = load %oop, %oop* %t3
	%r81 = ptrtoint %oop %r77 to %word
	%r80 = ptrtoint %oop %r76 to %word
	%r79 = xor %word %r81, %r80
	%r78 = inttoptr %word %r79 to %oop
	%r85 = ptrtoint %oop %r78 to %word
	%r84 = ptrtoint %oop %r75 to %word
	%r83 = shl %word %r85, %r84
	%r82 = inttoptr %word %r83 to %oop
	%r89 = ptrtoint %oop %r82 to %word
	%r88 = ptrtoint %oop %r74 to %word
	%r87 = or %word %r89, %r88
	%r86 = inttoptr %word %r87 to %oop
	ret %oop %r86
}
@m_cstr1620 = private unnamed_addr constant [27 x i8] c"bitwise-not/evaluator-stub\00"
@m_ostr1621 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 53, %oop bitcast ([27 x i8]* @m_cstr1620 to %oop) }
@"m_bitwise-not/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_bitwise-not/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1621 }
@m_cstr1622 = private unnamed_addr constant [14 x i8] c"bitwise-shift\00"
@m_ostr1623 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr1622 to %oop) }
@m_cstr1624 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1625 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1624 to %oop) }
@m_cstr1626 = private unnamed_addr constant [6 x i8] c"value\00"
@m_ostr1627 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr1626 to %oop) }
@m_cstr1628 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1629 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1628 to %oop) }
@m_cstr1630 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr1631 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1630 to %oop) }
@m_cstr1632 = private unnamed_addr constant [14 x i8] c"bitwise-shift\00"
@m_ostr1633 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr1632 to %oop) }
@m_cstr1634 = private unnamed_addr constant [14 x i8] c"bitwise-shift\00"
@m_ostr1635 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr1634 to %oop) }
@m_cstr1636 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1637 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1636 to %oop) }
@m_cstr1638 = private unnamed_addr constant [6 x i8] c"shift\00"
@m_ostr1639 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr1638 to %oop) }
@m_cstr1640 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1641 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1640 to %oop) }
@m_cstr1642 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr1643 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1642 to %oop) }
@m_cstr1644 = private unnamed_addr constant [14 x i8] c"bitwise-shift\00"
@m_ostr1645 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr1644 to %oop) }
@m_cstr1646 = private unnamed_addr constant [14 x i8] c"bitwise-shift\00"
@m_ostr1647 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr1646 to %oop) }
define %oop @"m_bitwise-shift/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = load %oop, %oop* %t2
	%r5 = call %oop @"m_pair?.code"(%oop %r4)
	%r7 = ptrtoint %oop %r5 to %word
	%r6 = icmp ne %word %r7, 0
	br i1 %r6, label %L1, label %L2
L1:
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t2
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	%r10 = load %oop, %oop* %r11
	store %oop %r10, %oop* %t3
	%r14 = inttoptr %word 0 to %oop
	store %oop %r14, %oop* %t6
	%r15 = load %oop, %oop* %t3
	%r16 = call %oop @"m_long?.code"(%oop %r15)
	store %oop %r16, %oop* %t6
	%r17 = inttoptr %word 0 to %oop
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = icmp eq %word %r21, %r20
	%r18 = inttoptr i1 %r19 to %oop
	%r23 = ptrtoint %oop %r18 to %word
	%r22 = icmp ne %word %r23, 0
	br i1 %r22, label %L5, label %L4
L5:
	%r24 = call %oop @m_error-prologue.code()
	%r25 = getelementptr %"<string>", %"<string>"* @m_ostr1623, i32 0, i32 1
	%r26 = bitcast %word* %r25 to %oop
	%r27 = call %oop @"m_%error.code"(%oop %r26)
	%r28 = getelementptr %"<string>", %"<string>"* @m_ostr1625, i32 0, i32 1
	%r29 = bitcast %word* %r28 to %oop
	%r30 = call %oop @"m_%error.code"(%oop %r29)
	%r31 = getelementptr %"<string>", %"<string>"* @m_ostr1627, i32 0, i32 1
	%r32 = bitcast %word* %r31 to %oop
	%r33 = call %oop @"m_%error.code"(%oop %r32)
	%r34 = getelementptr %"<string>", %"<string>"* @m_ostr1629, i32 0, i32 1
	%r35 = bitcast %word* %r34 to %oop
	%r36 = call %oop @"m_%error.code"(%oop %r35)
	%r37 = getelementptr %"<string>", %"<string>"* @m_ostr1631, i32 0, i32 1
	%r38 = bitcast %word* %r37 to %oop
	%r39 = call %oop @"m_%error.code"(%oop %r38)
	%r40 = call %oop @m_error-epilogue.code()
	store %oop %r40, %oop* %t6
	%r41 = inttoptr %word 0 to %oop
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = ptrtoint %oop %r40 to %word
	%r43 = icmp eq %word %r45, %r44
	%r42 = inttoptr i1 %r43 to %oop
	%r47 = ptrtoint %oop %r42 to %word
	%r46 = icmp ne %word %r47, 0
	br i1 %r46, label %L6, label %L4
L6:
	br label %L4
L4:
	%r48 = load %oop, %oop* %t6
	%r49 = inttoptr %word 1 to %oop
	%r50 = load %oop, %oop* %t3
	%r54 = ptrtoint %oop %r50 to %word
	%r53 = ptrtoint %oop %r49 to %word
	%r52 = ashr %word %r54, %r53
	%r51 = inttoptr %word %r52 to %oop
	store %oop %r51, %oop* %t3
	%r55 = inttoptr %word 1 to %oop
	%r56 = load %oop, %oop* %t2
	%r60 = bitcast %oop %r56 to [0 x %oop]*
	%r59 = ptrtoint %oop %r55 to %word
	%r58 = getelementptr [0 x %oop], [0 x %oop]* %r60, %word 0, %word %r59
	%r57 = load %oop, %oop* %r58
	store %oop %r57, %oop* %t2
	store %oop %r57, %oop* %t5
	br label %L3
L2:
	%r61 = getelementptr %"<string>", %"<string>"* @m_ostr1633, i32 0, i32 1
	%r62 = bitcast %word* %r61 to %oop
	%r63 = load %oop, %oop* %t0
	%r64 = call %oop @"m_%not-enough-arguments.code"(%oop %r62, %oop %r63)
	store %oop %r64, %oop* %t5
	br label %L3
L3:
	%r65 = load %oop, %oop* %t5
	%r66 = load %oop, %oop* %t2
	%r67 = call %oop @"m_pair?.code"(%oop %r66)
	%r69 = ptrtoint %oop %r67 to %word
	%r68 = icmp ne %word %r69, 0
	br i1 %r68, label %L7, label %L8
L7:
	%r70 = inttoptr %word 0 to %oop
	%r71 = load %oop, %oop* %t2
	%r75 = bitcast %oop %r71 to [0 x %oop]*
	%r74 = ptrtoint %oop %r70 to %word
	%r73 = getelementptr [0 x %oop], [0 x %oop]* %r75, %word 0, %word %r74
	%r72 = load %oop, %oop* %r73
	store %oop %r72, %oop* %t4
	%r76 = inttoptr %word 0 to %oop
	store %oop %r76, %oop* %t6
	%r77 = load %oop, %oop* %t4
	%r78 = call %oop @"m_long?.code"(%oop %r77)
	store %oop %r78, %oop* %t6
	%r79 = inttoptr %word 0 to %oop
	%r83 = ptrtoint %oop %r79 to %word
	%r82 = ptrtoint %oop %r78 to %word
	%r81 = icmp eq %word %r83, %r82
	%r80 = inttoptr i1 %r81 to %oop
	%r85 = ptrtoint %oop %r80 to %word
	%r84 = icmp ne %word %r85, 0
	br i1 %r84, label %L11, label %L10
L11:
	%r86 = call %oop @m_error-prologue.code()
	%r87 = getelementptr %"<string>", %"<string>"* @m_ostr1635, i32 0, i32 1
	%r88 = bitcast %word* %r87 to %oop
	%r89 = call %oop @"m_%error.code"(%oop %r88)
	%r90 = getelementptr %"<string>", %"<string>"* @m_ostr1637, i32 0, i32 1
	%r91 = bitcast %word* %r90 to %oop
	%r92 = call %oop @"m_%error.code"(%oop %r91)
	%r93 = getelementptr %"<string>", %"<string>"* @m_ostr1639, i32 0, i32 1
	%r94 = bitcast %word* %r93 to %oop
	%r95 = call %oop @"m_%error.code"(%oop %r94)
	%r96 = getelementptr %"<string>", %"<string>"* @m_ostr1641, i32 0, i32 1
	%r97 = bitcast %word* %r96 to %oop
	%r98 = call %oop @"m_%error.code"(%oop %r97)
	%r99 = getelementptr %"<string>", %"<string>"* @m_ostr1643, i32 0, i32 1
	%r100 = bitcast %word* %r99 to %oop
	%r101 = call %oop @"m_%error.code"(%oop %r100)
	%r102 = call %oop @m_error-epilogue.code()
	store %oop %r102, %oop* %t6
	%r103 = inttoptr %word 0 to %oop
	%r107 = ptrtoint %oop %r103 to %word
	%r106 = ptrtoint %oop %r102 to %word
	%r105 = icmp eq %word %r107, %r106
	%r104 = inttoptr i1 %r105 to %oop
	%r109 = ptrtoint %oop %r104 to %word
	%r108 = icmp ne %word %r109, 0
	br i1 %r108, label %L12, label %L10
L12:
	br label %L10
L10:
	%r110 = load %oop, %oop* %t6
	%r111 = inttoptr %word 1 to %oop
	%r112 = load %oop, %oop* %t4
	%r116 = ptrtoint %oop %r112 to %word
	%r115 = ptrtoint %oop %r111 to %word
	%r114 = ashr %word %r116, %r115
	%r113 = inttoptr %word %r114 to %oop
	store %oop %r113, %oop* %t4
	%r117 = inttoptr %word 1 to %oop
	%r118 = load %oop, %oop* %t2
	%r122 = bitcast %oop %r118 to [0 x %oop]*
	%r121 = ptrtoint %oop %r117 to %word
	%r120 = getelementptr [0 x %oop], [0 x %oop]* %r122, %word 0, %word %r121
	%r119 = load %oop, %oop* %r120
	store %oop %r119, %oop* %t2
	store %oop %r119, %oop* %t5
	br label %L9
L8:
	%r123 = getelementptr %"<string>", %"<string>"* @m_ostr1645, i32 0, i32 1
	%r124 = bitcast %word* %r123 to %oop
	%r125 = load %oop, %oop* %t0
	%r126 = call %oop @"m_%not-enough-arguments.code"(%oop %r124, %oop %r125)
	store %oop %r126, %oop* %t5
	br label %L9
L9:
	%r127 = load %oop, %oop* %t5
	%r128 = load %oop, %oop* %t2
	%r130 = ptrtoint %oop %r128 to %word
	%r129 = icmp ne %word %r130, 0
	br i1 %r129, label %L13, label %L14
L13:
	%r131 = getelementptr %"<string>", %"<string>"* @m_ostr1647, i32 0, i32 1
	%r132 = bitcast %word* %r131 to %oop
	%r133 = load %oop, %oop* %t0
	%r134 = call %oop @"m_%too-many-arguments.code"(%oop %r132, %oop %r133)
	store %oop %r134, %oop* %t5
	br label %L15
L14:
	%r135 = inttoptr %word 0 to %oop
	store %oop %r135, %oop* %t5
	br label %L15
L15:
	%r136 = load %oop, %oop* %t5
	%r137 = inttoptr %word 1 to %oop
	%r138 = inttoptr %word 1 to %oop
	%r139 = load %oop, %oop* %t3
	%r140 = load %oop, %oop* %t4
	%r141 = call %oop @"m_%bitwise-shift.code"(%oop %r139, %oop %r140)
	%r145 = ptrtoint %oop %r141 to %word
	%r144 = ptrtoint %oop %r138 to %word
	%r143 = shl %word %r145, %r144
	%r142 = inttoptr %word %r143 to %oop
	%r149 = ptrtoint %oop %r142 to %word
	%r148 = ptrtoint %oop %r137 to %word
	%r147 = or %word %r149, %r148
	%r146 = inttoptr %word %r147 to %oop
	ret %oop %r146
}
@m_cstr1648 = private unnamed_addr constant [29 x i8] c"bitwise-shift/evaluator-stub\00"
@m_ostr1649 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 57, %oop bitcast ([29 x i8]* @m_cstr1648 to %oop) }
@"m_bitwise-shift/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_bitwise-shift/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1649 }
@m_cstr1650 = private unnamed_addr constant [2 x i8] c"<\00"
@m_ostr1651 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 3, %oop bitcast ([2 x i8]* @m_cstr1650 to %oop) }
@m_cstr1652 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1653 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1652 to %oop) }
@m_cstr1654 = private unnamed_addr constant [4 x i8] c"lhs\00"
@m_ostr1655 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr1654 to %oop) }
@m_cstr1656 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1657 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1656 to %oop) }
@m_cstr1658 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr1659 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1658 to %oop) }
@m_cstr1660 = private unnamed_addr constant [2 x i8] c"<\00"
@m_ostr1661 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 3, %oop bitcast ([2 x i8]* @m_cstr1660 to %oop) }
@m_cstr1662 = private unnamed_addr constant [2 x i8] c"<\00"
@m_ostr1663 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 3, %oop bitcast ([2 x i8]* @m_cstr1662 to %oop) }
@m_cstr1664 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1665 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1664 to %oop) }
@m_cstr1666 = private unnamed_addr constant [4 x i8] c"rhs\00"
@m_ostr1667 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr1666 to %oop) }
@m_cstr1668 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1669 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1668 to %oop) }
@m_cstr1670 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr1671 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1670 to %oop) }
@m_cstr1672 = private unnamed_addr constant [2 x i8] c"<\00"
@m_ostr1673 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 3, %oop bitcast ([2 x i8]* @m_cstr1672 to %oop) }
@m_cstr1674 = private unnamed_addr constant [2 x i8] c"<\00"
@m_ostr1675 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 3, %oop bitcast ([2 x i8]* @m_cstr1674 to %oop) }
define %oop @"m_</evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = load %oop, %oop* %t2
	%r5 = call %oop @"m_pair?.code"(%oop %r4)
	%r7 = ptrtoint %oop %r5 to %word
	%r6 = icmp ne %word %r7, 0
	br i1 %r6, label %L1, label %L2
L1:
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t2
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	%r10 = load %oop, %oop* %r11
	store %oop %r10, %oop* %t3
	%r14 = inttoptr %word 0 to %oop
	store %oop %r14, %oop* %t6
	%r15 = load %oop, %oop* %t3
	%r16 = call %oop @"m_long?.code"(%oop %r15)
	store %oop %r16, %oop* %t6
	%r17 = inttoptr %word 0 to %oop
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = icmp eq %word %r21, %r20
	%r18 = inttoptr i1 %r19 to %oop
	%r23 = ptrtoint %oop %r18 to %word
	%r22 = icmp ne %word %r23, 0
	br i1 %r22, label %L5, label %L4
L5:
	%r24 = call %oop @m_error-prologue.code()
	%r25 = getelementptr %"<string>", %"<string>"* @m_ostr1651, i32 0, i32 1
	%r26 = bitcast %word* %r25 to %oop
	%r27 = call %oop @"m_%error.code"(%oop %r26)
	%r28 = getelementptr %"<string>", %"<string>"* @m_ostr1653, i32 0, i32 1
	%r29 = bitcast %word* %r28 to %oop
	%r30 = call %oop @"m_%error.code"(%oop %r29)
	%r31 = getelementptr %"<string>", %"<string>"* @m_ostr1655, i32 0, i32 1
	%r32 = bitcast %word* %r31 to %oop
	%r33 = call %oop @"m_%error.code"(%oop %r32)
	%r34 = getelementptr %"<string>", %"<string>"* @m_ostr1657, i32 0, i32 1
	%r35 = bitcast %word* %r34 to %oop
	%r36 = call %oop @"m_%error.code"(%oop %r35)
	%r37 = getelementptr %"<string>", %"<string>"* @m_ostr1659, i32 0, i32 1
	%r38 = bitcast %word* %r37 to %oop
	%r39 = call %oop @"m_%error.code"(%oop %r38)
	%r40 = call %oop @m_error-epilogue.code()
	store %oop %r40, %oop* %t6
	%r41 = inttoptr %word 0 to %oop
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = ptrtoint %oop %r40 to %word
	%r43 = icmp eq %word %r45, %r44
	%r42 = inttoptr i1 %r43 to %oop
	%r47 = ptrtoint %oop %r42 to %word
	%r46 = icmp ne %word %r47, 0
	br i1 %r46, label %L6, label %L4
L6:
	br label %L4
L4:
	%r48 = load %oop, %oop* %t6
	%r49 = inttoptr %word 1 to %oop
	%r50 = load %oop, %oop* %t3
	%r54 = ptrtoint %oop %r50 to %word
	%r53 = ptrtoint %oop %r49 to %word
	%r52 = ashr %word %r54, %r53
	%r51 = inttoptr %word %r52 to %oop
	store %oop %r51, %oop* %t3
	%r55 = inttoptr %word 1 to %oop
	%r56 = load %oop, %oop* %t2
	%r60 = bitcast %oop %r56 to [0 x %oop]*
	%r59 = ptrtoint %oop %r55 to %word
	%r58 = getelementptr [0 x %oop], [0 x %oop]* %r60, %word 0, %word %r59
	%r57 = load %oop, %oop* %r58
	store %oop %r57, %oop* %t2
	store %oop %r57, %oop* %t5
	br label %L3
L2:
	%r61 = getelementptr %"<string>", %"<string>"* @m_ostr1661, i32 0, i32 1
	%r62 = bitcast %word* %r61 to %oop
	%r63 = load %oop, %oop* %t0
	%r64 = call %oop @"m_%not-enough-arguments.code"(%oop %r62, %oop %r63)
	store %oop %r64, %oop* %t5
	br label %L3
L3:
	%r65 = load %oop, %oop* %t5
	%r66 = load %oop, %oop* %t2
	%r67 = call %oop @"m_pair?.code"(%oop %r66)
	%r69 = ptrtoint %oop %r67 to %word
	%r68 = icmp ne %word %r69, 0
	br i1 %r68, label %L7, label %L8
L7:
	%r70 = inttoptr %word 0 to %oop
	%r71 = load %oop, %oop* %t2
	%r75 = bitcast %oop %r71 to [0 x %oop]*
	%r74 = ptrtoint %oop %r70 to %word
	%r73 = getelementptr [0 x %oop], [0 x %oop]* %r75, %word 0, %word %r74
	%r72 = load %oop, %oop* %r73
	store %oop %r72, %oop* %t4
	%r76 = inttoptr %word 0 to %oop
	store %oop %r76, %oop* %t6
	%r77 = load %oop, %oop* %t4
	%r78 = call %oop @"m_long?.code"(%oop %r77)
	store %oop %r78, %oop* %t6
	%r79 = inttoptr %word 0 to %oop
	%r83 = ptrtoint %oop %r79 to %word
	%r82 = ptrtoint %oop %r78 to %word
	%r81 = icmp eq %word %r83, %r82
	%r80 = inttoptr i1 %r81 to %oop
	%r85 = ptrtoint %oop %r80 to %word
	%r84 = icmp ne %word %r85, 0
	br i1 %r84, label %L11, label %L10
L11:
	%r86 = call %oop @m_error-prologue.code()
	%r87 = getelementptr %"<string>", %"<string>"* @m_ostr1663, i32 0, i32 1
	%r88 = bitcast %word* %r87 to %oop
	%r89 = call %oop @"m_%error.code"(%oop %r88)
	%r90 = getelementptr %"<string>", %"<string>"* @m_ostr1665, i32 0, i32 1
	%r91 = bitcast %word* %r90 to %oop
	%r92 = call %oop @"m_%error.code"(%oop %r91)
	%r93 = getelementptr %"<string>", %"<string>"* @m_ostr1667, i32 0, i32 1
	%r94 = bitcast %word* %r93 to %oop
	%r95 = call %oop @"m_%error.code"(%oop %r94)
	%r96 = getelementptr %"<string>", %"<string>"* @m_ostr1669, i32 0, i32 1
	%r97 = bitcast %word* %r96 to %oop
	%r98 = call %oop @"m_%error.code"(%oop %r97)
	%r99 = getelementptr %"<string>", %"<string>"* @m_ostr1671, i32 0, i32 1
	%r100 = bitcast %word* %r99 to %oop
	%r101 = call %oop @"m_%error.code"(%oop %r100)
	%r102 = call %oop @m_error-epilogue.code()
	store %oop %r102, %oop* %t6
	%r103 = inttoptr %word 0 to %oop
	%r107 = ptrtoint %oop %r103 to %word
	%r106 = ptrtoint %oop %r102 to %word
	%r105 = icmp eq %word %r107, %r106
	%r104 = inttoptr i1 %r105 to %oop
	%r109 = ptrtoint %oop %r104 to %word
	%r108 = icmp ne %word %r109, 0
	br i1 %r108, label %L12, label %L10
L12:
	br label %L10
L10:
	%r110 = load %oop, %oop* %t6
	%r111 = inttoptr %word 1 to %oop
	%r112 = load %oop, %oop* %t4
	%r116 = ptrtoint %oop %r112 to %word
	%r115 = ptrtoint %oop %r111 to %word
	%r114 = ashr %word %r116, %r115
	%r113 = inttoptr %word %r114 to %oop
	store %oop %r113, %oop* %t4
	%r117 = inttoptr %word 1 to %oop
	%r118 = load %oop, %oop* %t2
	%r122 = bitcast %oop %r118 to [0 x %oop]*
	%r121 = ptrtoint %oop %r117 to %word
	%r120 = getelementptr [0 x %oop], [0 x %oop]* %r122, %word 0, %word %r121
	%r119 = load %oop, %oop* %r120
	store %oop %r119, %oop* %t2
	store %oop %r119, %oop* %t5
	br label %L9
L8:
	%r123 = getelementptr %"<string>", %"<string>"* @m_ostr1673, i32 0, i32 1
	%r124 = bitcast %word* %r123 to %oop
	%r125 = load %oop, %oop* %t0
	%r126 = call %oop @"m_%not-enough-arguments.code"(%oop %r124, %oop %r125)
	store %oop %r126, %oop* %t5
	br label %L9
L9:
	%r127 = load %oop, %oop* %t5
	%r128 = load %oop, %oop* %t2
	%r130 = ptrtoint %oop %r128 to %word
	%r129 = icmp ne %word %r130, 0
	br i1 %r129, label %L13, label %L14
L13:
	%r131 = getelementptr %"<string>", %"<string>"* @m_ostr1675, i32 0, i32 1
	%r132 = bitcast %word* %r131 to %oop
	%r133 = load %oop, %oop* %t0
	%r134 = call %oop @"m_%too-many-arguments.code"(%oop %r132, %oop %r133)
	store %oop %r134, %oop* %t5
	br label %L15
L14:
	%r135 = inttoptr %word 0 to %oop
	store %oop %r135, %oop* %t5
	br label %L15
L15:
	%r136 = load %oop, %oop* %t5
	%r137 = inttoptr %word 1 to %oop
	store %oop %r137, %oop* %t5
	%r138 = load %oop, %oop* %t4
	%r139 = load %oop, %oop* %t3
	%r143 = ptrtoint %oop %r139 to %word
	%r142 = ptrtoint %oop %r138 to %word
	%r141 = icmp slt %word %r143, %r142
	%r140 = inttoptr i1 %r141 to %oop
	store %oop %r140, %oop* %t5
	%r144 = inttoptr %word 0 to %oop
	%r148 = ptrtoint %oop %r144 to %word
	%r147 = ptrtoint %oop %r140 to %word
	%r146 = icmp eq %word %r148, %r147
	%r145 = inttoptr i1 %r146 to %oop
	%r150 = ptrtoint %oop %r145 to %word
	%r149 = icmp ne %word %r150, 0
	br i1 %r149, label %L16, label %L17
L17:
	%r151 = load %oop, %oop* @"m_symbol/true"
	store %oop %r151, %oop* %t5
	%r152 = inttoptr %word 0 to %oop
	%r156 = ptrtoint %oop %r152 to %word
	%r155 = ptrtoint %oop %r151 to %word
	%r154 = icmp eq %word %r156, %r155
	%r153 = inttoptr i1 %r154 to %oop
	%r158 = ptrtoint %oop %r153 to %word
	%r157 = icmp ne %word %r158, 0
	br i1 %r157, label %L16, label %L18
L18:
	br label %L16
L16:
	%r159 = load %oop, %oop* %t5
	ret %oop %r159
}
@m_cstr1676 = private unnamed_addr constant [17 x i8] c"</evaluator-stub\00"
@m_ostr1677 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 33, %oop bitcast ([17 x i8]* @m_cstr1676 to %oop) }
@"m_</evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_</evaluator-stub.code" to %oop), %"<string>"* @m_ostr1677 }
@m_cstr1678 = private unnamed_addr constant [3 x i8] c"<=\00"
@m_ostr1679 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 5, %oop bitcast ([3 x i8]* @m_cstr1678 to %oop) }
@m_cstr1680 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1681 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1680 to %oop) }
@m_cstr1682 = private unnamed_addr constant [4 x i8] c"lhs\00"
@m_ostr1683 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr1682 to %oop) }
@m_cstr1684 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1685 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1684 to %oop) }
@m_cstr1686 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr1687 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1686 to %oop) }
@m_cstr1688 = private unnamed_addr constant [3 x i8] c"<=\00"
@m_ostr1689 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 5, %oop bitcast ([3 x i8]* @m_cstr1688 to %oop) }
@m_cstr1690 = private unnamed_addr constant [3 x i8] c"<=\00"
@m_ostr1691 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 5, %oop bitcast ([3 x i8]* @m_cstr1690 to %oop) }
@m_cstr1692 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1693 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1692 to %oop) }
@m_cstr1694 = private unnamed_addr constant [4 x i8] c"rhs\00"
@m_ostr1695 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr1694 to %oop) }
@m_cstr1696 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1697 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1696 to %oop) }
@m_cstr1698 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr1699 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1698 to %oop) }
@m_cstr1700 = private unnamed_addr constant [3 x i8] c"<=\00"
@m_ostr1701 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 5, %oop bitcast ([3 x i8]* @m_cstr1700 to %oop) }
@m_cstr1702 = private unnamed_addr constant [3 x i8] c"<=\00"
@m_ostr1703 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 5, %oop bitcast ([3 x i8]* @m_cstr1702 to %oop) }
define %oop @"m_<=/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = load %oop, %oop* %t2
	%r5 = call %oop @"m_pair?.code"(%oop %r4)
	%r7 = ptrtoint %oop %r5 to %word
	%r6 = icmp ne %word %r7, 0
	br i1 %r6, label %L1, label %L2
L1:
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t2
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	%r10 = load %oop, %oop* %r11
	store %oop %r10, %oop* %t3
	%r14 = inttoptr %word 0 to %oop
	store %oop %r14, %oop* %t6
	%r15 = load %oop, %oop* %t3
	%r16 = call %oop @"m_long?.code"(%oop %r15)
	store %oop %r16, %oop* %t6
	%r17 = inttoptr %word 0 to %oop
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = icmp eq %word %r21, %r20
	%r18 = inttoptr i1 %r19 to %oop
	%r23 = ptrtoint %oop %r18 to %word
	%r22 = icmp ne %word %r23, 0
	br i1 %r22, label %L5, label %L4
L5:
	%r24 = call %oop @m_error-prologue.code()
	%r25 = getelementptr %"<string>", %"<string>"* @m_ostr1679, i32 0, i32 1
	%r26 = bitcast %word* %r25 to %oop
	%r27 = call %oop @"m_%error.code"(%oop %r26)
	%r28 = getelementptr %"<string>", %"<string>"* @m_ostr1681, i32 0, i32 1
	%r29 = bitcast %word* %r28 to %oop
	%r30 = call %oop @"m_%error.code"(%oop %r29)
	%r31 = getelementptr %"<string>", %"<string>"* @m_ostr1683, i32 0, i32 1
	%r32 = bitcast %word* %r31 to %oop
	%r33 = call %oop @"m_%error.code"(%oop %r32)
	%r34 = getelementptr %"<string>", %"<string>"* @m_ostr1685, i32 0, i32 1
	%r35 = bitcast %word* %r34 to %oop
	%r36 = call %oop @"m_%error.code"(%oop %r35)
	%r37 = getelementptr %"<string>", %"<string>"* @m_ostr1687, i32 0, i32 1
	%r38 = bitcast %word* %r37 to %oop
	%r39 = call %oop @"m_%error.code"(%oop %r38)
	%r40 = call %oop @m_error-epilogue.code()
	store %oop %r40, %oop* %t6
	%r41 = inttoptr %word 0 to %oop
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = ptrtoint %oop %r40 to %word
	%r43 = icmp eq %word %r45, %r44
	%r42 = inttoptr i1 %r43 to %oop
	%r47 = ptrtoint %oop %r42 to %word
	%r46 = icmp ne %word %r47, 0
	br i1 %r46, label %L6, label %L4
L6:
	br label %L4
L4:
	%r48 = load %oop, %oop* %t6
	%r49 = inttoptr %word 1 to %oop
	%r50 = load %oop, %oop* %t3
	%r54 = ptrtoint %oop %r50 to %word
	%r53 = ptrtoint %oop %r49 to %word
	%r52 = ashr %word %r54, %r53
	%r51 = inttoptr %word %r52 to %oop
	store %oop %r51, %oop* %t3
	%r55 = inttoptr %word 1 to %oop
	%r56 = load %oop, %oop* %t2
	%r60 = bitcast %oop %r56 to [0 x %oop]*
	%r59 = ptrtoint %oop %r55 to %word
	%r58 = getelementptr [0 x %oop], [0 x %oop]* %r60, %word 0, %word %r59
	%r57 = load %oop, %oop* %r58
	store %oop %r57, %oop* %t2
	store %oop %r57, %oop* %t5
	br label %L3
L2:
	%r61 = getelementptr %"<string>", %"<string>"* @m_ostr1689, i32 0, i32 1
	%r62 = bitcast %word* %r61 to %oop
	%r63 = load %oop, %oop* %t0
	%r64 = call %oop @"m_%not-enough-arguments.code"(%oop %r62, %oop %r63)
	store %oop %r64, %oop* %t5
	br label %L3
L3:
	%r65 = load %oop, %oop* %t5
	%r66 = load %oop, %oop* %t2
	%r67 = call %oop @"m_pair?.code"(%oop %r66)
	%r69 = ptrtoint %oop %r67 to %word
	%r68 = icmp ne %word %r69, 0
	br i1 %r68, label %L7, label %L8
L7:
	%r70 = inttoptr %word 0 to %oop
	%r71 = load %oop, %oop* %t2
	%r75 = bitcast %oop %r71 to [0 x %oop]*
	%r74 = ptrtoint %oop %r70 to %word
	%r73 = getelementptr [0 x %oop], [0 x %oop]* %r75, %word 0, %word %r74
	%r72 = load %oop, %oop* %r73
	store %oop %r72, %oop* %t4
	%r76 = inttoptr %word 0 to %oop
	store %oop %r76, %oop* %t6
	%r77 = load %oop, %oop* %t4
	%r78 = call %oop @"m_long?.code"(%oop %r77)
	store %oop %r78, %oop* %t6
	%r79 = inttoptr %word 0 to %oop
	%r83 = ptrtoint %oop %r79 to %word
	%r82 = ptrtoint %oop %r78 to %word
	%r81 = icmp eq %word %r83, %r82
	%r80 = inttoptr i1 %r81 to %oop
	%r85 = ptrtoint %oop %r80 to %word
	%r84 = icmp ne %word %r85, 0
	br i1 %r84, label %L11, label %L10
L11:
	%r86 = call %oop @m_error-prologue.code()
	%r87 = getelementptr %"<string>", %"<string>"* @m_ostr1691, i32 0, i32 1
	%r88 = bitcast %word* %r87 to %oop
	%r89 = call %oop @"m_%error.code"(%oop %r88)
	%r90 = getelementptr %"<string>", %"<string>"* @m_ostr1693, i32 0, i32 1
	%r91 = bitcast %word* %r90 to %oop
	%r92 = call %oop @"m_%error.code"(%oop %r91)
	%r93 = getelementptr %"<string>", %"<string>"* @m_ostr1695, i32 0, i32 1
	%r94 = bitcast %word* %r93 to %oop
	%r95 = call %oop @"m_%error.code"(%oop %r94)
	%r96 = getelementptr %"<string>", %"<string>"* @m_ostr1697, i32 0, i32 1
	%r97 = bitcast %word* %r96 to %oop
	%r98 = call %oop @"m_%error.code"(%oop %r97)
	%r99 = getelementptr %"<string>", %"<string>"* @m_ostr1699, i32 0, i32 1
	%r100 = bitcast %word* %r99 to %oop
	%r101 = call %oop @"m_%error.code"(%oop %r100)
	%r102 = call %oop @m_error-epilogue.code()
	store %oop %r102, %oop* %t6
	%r103 = inttoptr %word 0 to %oop
	%r107 = ptrtoint %oop %r103 to %word
	%r106 = ptrtoint %oop %r102 to %word
	%r105 = icmp eq %word %r107, %r106
	%r104 = inttoptr i1 %r105 to %oop
	%r109 = ptrtoint %oop %r104 to %word
	%r108 = icmp ne %word %r109, 0
	br i1 %r108, label %L12, label %L10
L12:
	br label %L10
L10:
	%r110 = load %oop, %oop* %t6
	%r111 = inttoptr %word 1 to %oop
	%r112 = load %oop, %oop* %t4
	%r116 = ptrtoint %oop %r112 to %word
	%r115 = ptrtoint %oop %r111 to %word
	%r114 = ashr %word %r116, %r115
	%r113 = inttoptr %word %r114 to %oop
	store %oop %r113, %oop* %t4
	%r117 = inttoptr %word 1 to %oop
	%r118 = load %oop, %oop* %t2
	%r122 = bitcast %oop %r118 to [0 x %oop]*
	%r121 = ptrtoint %oop %r117 to %word
	%r120 = getelementptr [0 x %oop], [0 x %oop]* %r122, %word 0, %word %r121
	%r119 = load %oop, %oop* %r120
	store %oop %r119, %oop* %t2
	store %oop %r119, %oop* %t5
	br label %L9
L8:
	%r123 = getelementptr %"<string>", %"<string>"* @m_ostr1701, i32 0, i32 1
	%r124 = bitcast %word* %r123 to %oop
	%r125 = load %oop, %oop* %t0
	%r126 = call %oop @"m_%not-enough-arguments.code"(%oop %r124, %oop %r125)
	store %oop %r126, %oop* %t5
	br label %L9
L9:
	%r127 = load %oop, %oop* %t5
	%r128 = load %oop, %oop* %t2
	%r130 = ptrtoint %oop %r128 to %word
	%r129 = icmp ne %word %r130, 0
	br i1 %r129, label %L13, label %L14
L13:
	%r131 = getelementptr %"<string>", %"<string>"* @m_ostr1703, i32 0, i32 1
	%r132 = bitcast %word* %r131 to %oop
	%r133 = load %oop, %oop* %t0
	%r134 = call %oop @"m_%too-many-arguments.code"(%oop %r132, %oop %r133)
	store %oop %r134, %oop* %t5
	br label %L15
L14:
	%r135 = inttoptr %word 0 to %oop
	store %oop %r135, %oop* %t5
	br label %L15
L15:
	%r136 = load %oop, %oop* %t5
	%r137 = inttoptr %word 1 to %oop
	store %oop %r137, %oop* %t5
	%r138 = load %oop, %oop* %t4
	%r139 = load %oop, %oop* %t3
	%r143 = ptrtoint %oop %r139 to %word
	%r142 = ptrtoint %oop %r138 to %word
	%r141 = icmp sle %word %r143, %r142
	%r140 = inttoptr i1 %r141 to %oop
	store %oop %r140, %oop* %t5
	%r144 = inttoptr %word 0 to %oop
	%r148 = ptrtoint %oop %r144 to %word
	%r147 = ptrtoint %oop %r140 to %word
	%r146 = icmp eq %word %r148, %r147
	%r145 = inttoptr i1 %r146 to %oop
	%r150 = ptrtoint %oop %r145 to %word
	%r149 = icmp ne %word %r150, 0
	br i1 %r149, label %L16, label %L17
L17:
	%r151 = load %oop, %oop* @"m_symbol/true"
	store %oop %r151, %oop* %t5
	%r152 = inttoptr %word 0 to %oop
	%r156 = ptrtoint %oop %r152 to %word
	%r155 = ptrtoint %oop %r151 to %word
	%r154 = icmp eq %word %r156, %r155
	%r153 = inttoptr i1 %r154 to %oop
	%r158 = ptrtoint %oop %r153 to %word
	%r157 = icmp ne %word %r158, 0
	br i1 %r157, label %L16, label %L18
L18:
	br label %L16
L16:
	%r159 = load %oop, %oop* %t5
	ret %oop %r159
}
@m_cstr1704 = private unnamed_addr constant [18 x i8] c"<=/evaluator-stub\00"
@m_ostr1705 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1704 to %oop) }
@"m_<=/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_<=/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1705 }
@m_cstr1706 = private unnamed_addr constant [3 x i8] c">=\00"
@m_ostr1707 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 5, %oop bitcast ([3 x i8]* @m_cstr1706 to %oop) }
@m_cstr1708 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1709 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1708 to %oop) }
@m_cstr1710 = private unnamed_addr constant [4 x i8] c"lhs\00"
@m_ostr1711 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr1710 to %oop) }
@m_cstr1712 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1713 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1712 to %oop) }
@m_cstr1714 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr1715 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1714 to %oop) }
@m_cstr1716 = private unnamed_addr constant [3 x i8] c">=\00"
@m_ostr1717 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 5, %oop bitcast ([3 x i8]* @m_cstr1716 to %oop) }
@m_cstr1718 = private unnamed_addr constant [3 x i8] c">=\00"
@m_ostr1719 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 5, %oop bitcast ([3 x i8]* @m_cstr1718 to %oop) }
@m_cstr1720 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1721 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1720 to %oop) }
@m_cstr1722 = private unnamed_addr constant [4 x i8] c"rhs\00"
@m_ostr1723 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr1722 to %oop) }
@m_cstr1724 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1725 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1724 to %oop) }
@m_cstr1726 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr1727 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1726 to %oop) }
@m_cstr1728 = private unnamed_addr constant [3 x i8] c">=\00"
@m_ostr1729 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 5, %oop bitcast ([3 x i8]* @m_cstr1728 to %oop) }
@m_cstr1730 = private unnamed_addr constant [3 x i8] c">=\00"
@m_ostr1731 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 5, %oop bitcast ([3 x i8]* @m_cstr1730 to %oop) }
define %oop @"m_>=/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = load %oop, %oop* %t2
	%r5 = call %oop @"m_pair?.code"(%oop %r4)
	%r7 = ptrtoint %oop %r5 to %word
	%r6 = icmp ne %word %r7, 0
	br i1 %r6, label %L1, label %L2
L1:
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t2
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	%r10 = load %oop, %oop* %r11
	store %oop %r10, %oop* %t3
	%r14 = inttoptr %word 0 to %oop
	store %oop %r14, %oop* %t6
	%r15 = load %oop, %oop* %t3
	%r16 = call %oop @"m_long?.code"(%oop %r15)
	store %oop %r16, %oop* %t6
	%r17 = inttoptr %word 0 to %oop
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = icmp eq %word %r21, %r20
	%r18 = inttoptr i1 %r19 to %oop
	%r23 = ptrtoint %oop %r18 to %word
	%r22 = icmp ne %word %r23, 0
	br i1 %r22, label %L5, label %L4
L5:
	%r24 = call %oop @m_error-prologue.code()
	%r25 = getelementptr %"<string>", %"<string>"* @m_ostr1707, i32 0, i32 1
	%r26 = bitcast %word* %r25 to %oop
	%r27 = call %oop @"m_%error.code"(%oop %r26)
	%r28 = getelementptr %"<string>", %"<string>"* @m_ostr1709, i32 0, i32 1
	%r29 = bitcast %word* %r28 to %oop
	%r30 = call %oop @"m_%error.code"(%oop %r29)
	%r31 = getelementptr %"<string>", %"<string>"* @m_ostr1711, i32 0, i32 1
	%r32 = bitcast %word* %r31 to %oop
	%r33 = call %oop @"m_%error.code"(%oop %r32)
	%r34 = getelementptr %"<string>", %"<string>"* @m_ostr1713, i32 0, i32 1
	%r35 = bitcast %word* %r34 to %oop
	%r36 = call %oop @"m_%error.code"(%oop %r35)
	%r37 = getelementptr %"<string>", %"<string>"* @m_ostr1715, i32 0, i32 1
	%r38 = bitcast %word* %r37 to %oop
	%r39 = call %oop @"m_%error.code"(%oop %r38)
	%r40 = call %oop @m_error-epilogue.code()
	store %oop %r40, %oop* %t6
	%r41 = inttoptr %word 0 to %oop
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = ptrtoint %oop %r40 to %word
	%r43 = icmp eq %word %r45, %r44
	%r42 = inttoptr i1 %r43 to %oop
	%r47 = ptrtoint %oop %r42 to %word
	%r46 = icmp ne %word %r47, 0
	br i1 %r46, label %L6, label %L4
L6:
	br label %L4
L4:
	%r48 = load %oop, %oop* %t6
	%r49 = inttoptr %word 1 to %oop
	%r50 = load %oop, %oop* %t3
	%r54 = ptrtoint %oop %r50 to %word
	%r53 = ptrtoint %oop %r49 to %word
	%r52 = ashr %word %r54, %r53
	%r51 = inttoptr %word %r52 to %oop
	store %oop %r51, %oop* %t3
	%r55 = inttoptr %word 1 to %oop
	%r56 = load %oop, %oop* %t2
	%r60 = bitcast %oop %r56 to [0 x %oop]*
	%r59 = ptrtoint %oop %r55 to %word
	%r58 = getelementptr [0 x %oop], [0 x %oop]* %r60, %word 0, %word %r59
	%r57 = load %oop, %oop* %r58
	store %oop %r57, %oop* %t2
	store %oop %r57, %oop* %t5
	br label %L3
L2:
	%r61 = getelementptr %"<string>", %"<string>"* @m_ostr1717, i32 0, i32 1
	%r62 = bitcast %word* %r61 to %oop
	%r63 = load %oop, %oop* %t0
	%r64 = call %oop @"m_%not-enough-arguments.code"(%oop %r62, %oop %r63)
	store %oop %r64, %oop* %t5
	br label %L3
L3:
	%r65 = load %oop, %oop* %t5
	%r66 = load %oop, %oop* %t2
	%r67 = call %oop @"m_pair?.code"(%oop %r66)
	%r69 = ptrtoint %oop %r67 to %word
	%r68 = icmp ne %word %r69, 0
	br i1 %r68, label %L7, label %L8
L7:
	%r70 = inttoptr %word 0 to %oop
	%r71 = load %oop, %oop* %t2
	%r75 = bitcast %oop %r71 to [0 x %oop]*
	%r74 = ptrtoint %oop %r70 to %word
	%r73 = getelementptr [0 x %oop], [0 x %oop]* %r75, %word 0, %word %r74
	%r72 = load %oop, %oop* %r73
	store %oop %r72, %oop* %t4
	%r76 = inttoptr %word 0 to %oop
	store %oop %r76, %oop* %t6
	%r77 = load %oop, %oop* %t4
	%r78 = call %oop @"m_long?.code"(%oop %r77)
	store %oop %r78, %oop* %t6
	%r79 = inttoptr %word 0 to %oop
	%r83 = ptrtoint %oop %r79 to %word
	%r82 = ptrtoint %oop %r78 to %word
	%r81 = icmp eq %word %r83, %r82
	%r80 = inttoptr i1 %r81 to %oop
	%r85 = ptrtoint %oop %r80 to %word
	%r84 = icmp ne %word %r85, 0
	br i1 %r84, label %L11, label %L10
L11:
	%r86 = call %oop @m_error-prologue.code()
	%r87 = getelementptr %"<string>", %"<string>"* @m_ostr1719, i32 0, i32 1
	%r88 = bitcast %word* %r87 to %oop
	%r89 = call %oop @"m_%error.code"(%oop %r88)
	%r90 = getelementptr %"<string>", %"<string>"* @m_ostr1721, i32 0, i32 1
	%r91 = bitcast %word* %r90 to %oop
	%r92 = call %oop @"m_%error.code"(%oop %r91)
	%r93 = getelementptr %"<string>", %"<string>"* @m_ostr1723, i32 0, i32 1
	%r94 = bitcast %word* %r93 to %oop
	%r95 = call %oop @"m_%error.code"(%oop %r94)
	%r96 = getelementptr %"<string>", %"<string>"* @m_ostr1725, i32 0, i32 1
	%r97 = bitcast %word* %r96 to %oop
	%r98 = call %oop @"m_%error.code"(%oop %r97)
	%r99 = getelementptr %"<string>", %"<string>"* @m_ostr1727, i32 0, i32 1
	%r100 = bitcast %word* %r99 to %oop
	%r101 = call %oop @"m_%error.code"(%oop %r100)
	%r102 = call %oop @m_error-epilogue.code()
	store %oop %r102, %oop* %t6
	%r103 = inttoptr %word 0 to %oop
	%r107 = ptrtoint %oop %r103 to %word
	%r106 = ptrtoint %oop %r102 to %word
	%r105 = icmp eq %word %r107, %r106
	%r104 = inttoptr i1 %r105 to %oop
	%r109 = ptrtoint %oop %r104 to %word
	%r108 = icmp ne %word %r109, 0
	br i1 %r108, label %L12, label %L10
L12:
	br label %L10
L10:
	%r110 = load %oop, %oop* %t6
	%r111 = inttoptr %word 1 to %oop
	%r112 = load %oop, %oop* %t4
	%r116 = ptrtoint %oop %r112 to %word
	%r115 = ptrtoint %oop %r111 to %word
	%r114 = ashr %word %r116, %r115
	%r113 = inttoptr %word %r114 to %oop
	store %oop %r113, %oop* %t4
	%r117 = inttoptr %word 1 to %oop
	%r118 = load %oop, %oop* %t2
	%r122 = bitcast %oop %r118 to [0 x %oop]*
	%r121 = ptrtoint %oop %r117 to %word
	%r120 = getelementptr [0 x %oop], [0 x %oop]* %r122, %word 0, %word %r121
	%r119 = load %oop, %oop* %r120
	store %oop %r119, %oop* %t2
	store %oop %r119, %oop* %t5
	br label %L9
L8:
	%r123 = getelementptr %"<string>", %"<string>"* @m_ostr1729, i32 0, i32 1
	%r124 = bitcast %word* %r123 to %oop
	%r125 = load %oop, %oop* %t0
	%r126 = call %oop @"m_%not-enough-arguments.code"(%oop %r124, %oop %r125)
	store %oop %r126, %oop* %t5
	br label %L9
L9:
	%r127 = load %oop, %oop* %t5
	%r128 = load %oop, %oop* %t2
	%r130 = ptrtoint %oop %r128 to %word
	%r129 = icmp ne %word %r130, 0
	br i1 %r129, label %L13, label %L14
L13:
	%r131 = getelementptr %"<string>", %"<string>"* @m_ostr1731, i32 0, i32 1
	%r132 = bitcast %word* %r131 to %oop
	%r133 = load %oop, %oop* %t0
	%r134 = call %oop @"m_%too-many-arguments.code"(%oop %r132, %oop %r133)
	store %oop %r134, %oop* %t5
	br label %L15
L14:
	%r135 = inttoptr %word 0 to %oop
	store %oop %r135, %oop* %t5
	br label %L15
L15:
	%r136 = load %oop, %oop* %t5
	%r137 = inttoptr %word 1 to %oop
	store %oop %r137, %oop* %t5
	%r138 = load %oop, %oop* %t4
	%r139 = load %oop, %oop* %t3
	%r143 = ptrtoint %oop %r139 to %word
	%r142 = ptrtoint %oop %r138 to %word
	%r141 = icmp sge %word %r143, %r142
	%r140 = inttoptr i1 %r141 to %oop
	store %oop %r140, %oop* %t5
	%r144 = inttoptr %word 0 to %oop
	%r148 = ptrtoint %oop %r144 to %word
	%r147 = ptrtoint %oop %r140 to %word
	%r146 = icmp eq %word %r148, %r147
	%r145 = inttoptr i1 %r146 to %oop
	%r150 = ptrtoint %oop %r145 to %word
	%r149 = icmp ne %word %r150, 0
	br i1 %r149, label %L16, label %L17
L17:
	%r151 = load %oop, %oop* @"m_symbol/true"
	store %oop %r151, %oop* %t5
	%r152 = inttoptr %word 0 to %oop
	%r156 = ptrtoint %oop %r152 to %word
	%r155 = ptrtoint %oop %r151 to %word
	%r154 = icmp eq %word %r156, %r155
	%r153 = inttoptr i1 %r154 to %oop
	%r158 = ptrtoint %oop %r153 to %word
	%r157 = icmp ne %word %r158, 0
	br i1 %r157, label %L16, label %L18
L18:
	br label %L16
L16:
	%r159 = load %oop, %oop* %t5
	ret %oop %r159
}
@m_cstr1732 = private unnamed_addr constant [18 x i8] c">=/evaluator-stub\00"
@m_ostr1733 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1732 to %oop) }
@"m_>=/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_>=/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1733 }
@m_cstr1734 = private unnamed_addr constant [2 x i8] c">\00"
@m_ostr1735 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 3, %oop bitcast ([2 x i8]* @m_cstr1734 to %oop) }
@m_cstr1736 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1737 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1736 to %oop) }
@m_cstr1738 = private unnamed_addr constant [4 x i8] c"lhs\00"
@m_ostr1739 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr1738 to %oop) }
@m_cstr1740 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1741 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1740 to %oop) }
@m_cstr1742 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr1743 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1742 to %oop) }
@m_cstr1744 = private unnamed_addr constant [2 x i8] c">\00"
@m_ostr1745 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 3, %oop bitcast ([2 x i8]* @m_cstr1744 to %oop) }
@m_cstr1746 = private unnamed_addr constant [2 x i8] c">\00"
@m_ostr1747 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 3, %oop bitcast ([2 x i8]* @m_cstr1746 to %oop) }
@m_cstr1748 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1749 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1748 to %oop) }
@m_cstr1750 = private unnamed_addr constant [4 x i8] c"rhs\00"
@m_ostr1751 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr1750 to %oop) }
@m_cstr1752 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1753 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1752 to %oop) }
@m_cstr1754 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr1755 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1754 to %oop) }
@m_cstr1756 = private unnamed_addr constant [2 x i8] c">\00"
@m_ostr1757 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 3, %oop bitcast ([2 x i8]* @m_cstr1756 to %oop) }
@m_cstr1758 = private unnamed_addr constant [2 x i8] c">\00"
@m_ostr1759 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 3, %oop bitcast ([2 x i8]* @m_cstr1758 to %oop) }
define %oop @"m_>/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = load %oop, %oop* %t2
	%r5 = call %oop @"m_pair?.code"(%oop %r4)
	%r7 = ptrtoint %oop %r5 to %word
	%r6 = icmp ne %word %r7, 0
	br i1 %r6, label %L1, label %L2
L1:
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t2
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	%r10 = load %oop, %oop* %r11
	store %oop %r10, %oop* %t3
	%r14 = inttoptr %word 0 to %oop
	store %oop %r14, %oop* %t6
	%r15 = load %oop, %oop* %t3
	%r16 = call %oop @"m_long?.code"(%oop %r15)
	store %oop %r16, %oop* %t6
	%r17 = inttoptr %word 0 to %oop
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = icmp eq %word %r21, %r20
	%r18 = inttoptr i1 %r19 to %oop
	%r23 = ptrtoint %oop %r18 to %word
	%r22 = icmp ne %word %r23, 0
	br i1 %r22, label %L5, label %L4
L5:
	%r24 = call %oop @m_error-prologue.code()
	%r25 = getelementptr %"<string>", %"<string>"* @m_ostr1735, i32 0, i32 1
	%r26 = bitcast %word* %r25 to %oop
	%r27 = call %oop @"m_%error.code"(%oop %r26)
	%r28 = getelementptr %"<string>", %"<string>"* @m_ostr1737, i32 0, i32 1
	%r29 = bitcast %word* %r28 to %oop
	%r30 = call %oop @"m_%error.code"(%oop %r29)
	%r31 = getelementptr %"<string>", %"<string>"* @m_ostr1739, i32 0, i32 1
	%r32 = bitcast %word* %r31 to %oop
	%r33 = call %oop @"m_%error.code"(%oop %r32)
	%r34 = getelementptr %"<string>", %"<string>"* @m_ostr1741, i32 0, i32 1
	%r35 = bitcast %word* %r34 to %oop
	%r36 = call %oop @"m_%error.code"(%oop %r35)
	%r37 = getelementptr %"<string>", %"<string>"* @m_ostr1743, i32 0, i32 1
	%r38 = bitcast %word* %r37 to %oop
	%r39 = call %oop @"m_%error.code"(%oop %r38)
	%r40 = call %oop @m_error-epilogue.code()
	store %oop %r40, %oop* %t6
	%r41 = inttoptr %word 0 to %oop
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = ptrtoint %oop %r40 to %word
	%r43 = icmp eq %word %r45, %r44
	%r42 = inttoptr i1 %r43 to %oop
	%r47 = ptrtoint %oop %r42 to %word
	%r46 = icmp ne %word %r47, 0
	br i1 %r46, label %L6, label %L4
L6:
	br label %L4
L4:
	%r48 = load %oop, %oop* %t6
	%r49 = inttoptr %word 1 to %oop
	%r50 = load %oop, %oop* %t3
	%r54 = ptrtoint %oop %r50 to %word
	%r53 = ptrtoint %oop %r49 to %word
	%r52 = ashr %word %r54, %r53
	%r51 = inttoptr %word %r52 to %oop
	store %oop %r51, %oop* %t3
	%r55 = inttoptr %word 1 to %oop
	%r56 = load %oop, %oop* %t2
	%r60 = bitcast %oop %r56 to [0 x %oop]*
	%r59 = ptrtoint %oop %r55 to %word
	%r58 = getelementptr [0 x %oop], [0 x %oop]* %r60, %word 0, %word %r59
	%r57 = load %oop, %oop* %r58
	store %oop %r57, %oop* %t2
	store %oop %r57, %oop* %t5
	br label %L3
L2:
	%r61 = getelementptr %"<string>", %"<string>"* @m_ostr1745, i32 0, i32 1
	%r62 = bitcast %word* %r61 to %oop
	%r63 = load %oop, %oop* %t0
	%r64 = call %oop @"m_%not-enough-arguments.code"(%oop %r62, %oop %r63)
	store %oop %r64, %oop* %t5
	br label %L3
L3:
	%r65 = load %oop, %oop* %t5
	%r66 = load %oop, %oop* %t2
	%r67 = call %oop @"m_pair?.code"(%oop %r66)
	%r69 = ptrtoint %oop %r67 to %word
	%r68 = icmp ne %word %r69, 0
	br i1 %r68, label %L7, label %L8
L7:
	%r70 = inttoptr %word 0 to %oop
	%r71 = load %oop, %oop* %t2
	%r75 = bitcast %oop %r71 to [0 x %oop]*
	%r74 = ptrtoint %oop %r70 to %word
	%r73 = getelementptr [0 x %oop], [0 x %oop]* %r75, %word 0, %word %r74
	%r72 = load %oop, %oop* %r73
	store %oop %r72, %oop* %t4
	%r76 = inttoptr %word 0 to %oop
	store %oop %r76, %oop* %t6
	%r77 = load %oop, %oop* %t4
	%r78 = call %oop @"m_long?.code"(%oop %r77)
	store %oop %r78, %oop* %t6
	%r79 = inttoptr %word 0 to %oop
	%r83 = ptrtoint %oop %r79 to %word
	%r82 = ptrtoint %oop %r78 to %word
	%r81 = icmp eq %word %r83, %r82
	%r80 = inttoptr i1 %r81 to %oop
	%r85 = ptrtoint %oop %r80 to %word
	%r84 = icmp ne %word %r85, 0
	br i1 %r84, label %L11, label %L10
L11:
	%r86 = call %oop @m_error-prologue.code()
	%r87 = getelementptr %"<string>", %"<string>"* @m_ostr1747, i32 0, i32 1
	%r88 = bitcast %word* %r87 to %oop
	%r89 = call %oop @"m_%error.code"(%oop %r88)
	%r90 = getelementptr %"<string>", %"<string>"* @m_ostr1749, i32 0, i32 1
	%r91 = bitcast %word* %r90 to %oop
	%r92 = call %oop @"m_%error.code"(%oop %r91)
	%r93 = getelementptr %"<string>", %"<string>"* @m_ostr1751, i32 0, i32 1
	%r94 = bitcast %word* %r93 to %oop
	%r95 = call %oop @"m_%error.code"(%oop %r94)
	%r96 = getelementptr %"<string>", %"<string>"* @m_ostr1753, i32 0, i32 1
	%r97 = bitcast %word* %r96 to %oop
	%r98 = call %oop @"m_%error.code"(%oop %r97)
	%r99 = getelementptr %"<string>", %"<string>"* @m_ostr1755, i32 0, i32 1
	%r100 = bitcast %word* %r99 to %oop
	%r101 = call %oop @"m_%error.code"(%oop %r100)
	%r102 = call %oop @m_error-epilogue.code()
	store %oop %r102, %oop* %t6
	%r103 = inttoptr %word 0 to %oop
	%r107 = ptrtoint %oop %r103 to %word
	%r106 = ptrtoint %oop %r102 to %word
	%r105 = icmp eq %word %r107, %r106
	%r104 = inttoptr i1 %r105 to %oop
	%r109 = ptrtoint %oop %r104 to %word
	%r108 = icmp ne %word %r109, 0
	br i1 %r108, label %L12, label %L10
L12:
	br label %L10
L10:
	%r110 = load %oop, %oop* %t6
	%r111 = inttoptr %word 1 to %oop
	%r112 = load %oop, %oop* %t4
	%r116 = ptrtoint %oop %r112 to %word
	%r115 = ptrtoint %oop %r111 to %word
	%r114 = ashr %word %r116, %r115
	%r113 = inttoptr %word %r114 to %oop
	store %oop %r113, %oop* %t4
	%r117 = inttoptr %word 1 to %oop
	%r118 = load %oop, %oop* %t2
	%r122 = bitcast %oop %r118 to [0 x %oop]*
	%r121 = ptrtoint %oop %r117 to %word
	%r120 = getelementptr [0 x %oop], [0 x %oop]* %r122, %word 0, %word %r121
	%r119 = load %oop, %oop* %r120
	store %oop %r119, %oop* %t2
	store %oop %r119, %oop* %t5
	br label %L9
L8:
	%r123 = getelementptr %"<string>", %"<string>"* @m_ostr1757, i32 0, i32 1
	%r124 = bitcast %word* %r123 to %oop
	%r125 = load %oop, %oop* %t0
	%r126 = call %oop @"m_%not-enough-arguments.code"(%oop %r124, %oop %r125)
	store %oop %r126, %oop* %t5
	br label %L9
L9:
	%r127 = load %oop, %oop* %t5
	%r128 = load %oop, %oop* %t2
	%r130 = ptrtoint %oop %r128 to %word
	%r129 = icmp ne %word %r130, 0
	br i1 %r129, label %L13, label %L14
L13:
	%r131 = getelementptr %"<string>", %"<string>"* @m_ostr1759, i32 0, i32 1
	%r132 = bitcast %word* %r131 to %oop
	%r133 = load %oop, %oop* %t0
	%r134 = call %oop @"m_%too-many-arguments.code"(%oop %r132, %oop %r133)
	store %oop %r134, %oop* %t5
	br label %L15
L14:
	%r135 = inttoptr %word 0 to %oop
	store %oop %r135, %oop* %t5
	br label %L15
L15:
	%r136 = load %oop, %oop* %t5
	%r137 = inttoptr %word 1 to %oop
	store %oop %r137, %oop* %t5
	%r138 = load %oop, %oop* %t4
	%r139 = load %oop, %oop* %t3
	%r143 = ptrtoint %oop %r139 to %word
	%r142 = ptrtoint %oop %r138 to %word
	%r141 = icmp sgt %word %r143, %r142
	%r140 = inttoptr i1 %r141 to %oop
	store %oop %r140, %oop* %t5
	%r144 = inttoptr %word 0 to %oop
	%r148 = ptrtoint %oop %r144 to %word
	%r147 = ptrtoint %oop %r140 to %word
	%r146 = icmp eq %word %r148, %r147
	%r145 = inttoptr i1 %r146 to %oop
	%r150 = ptrtoint %oop %r145 to %word
	%r149 = icmp ne %word %r150, 0
	br i1 %r149, label %L16, label %L17
L17:
	%r151 = load %oop, %oop* @"m_symbol/true"
	store %oop %r151, %oop* %t5
	%r152 = inttoptr %word 0 to %oop
	%r156 = ptrtoint %oop %r152 to %word
	%r155 = ptrtoint %oop %r151 to %word
	%r154 = icmp eq %word %r156, %r155
	%r153 = inttoptr i1 %r154 to %oop
	%r158 = ptrtoint %oop %r153 to %word
	%r157 = icmp ne %word %r158, 0
	br i1 %r157, label %L16, label %L18
L18:
	br label %L16
L16:
	%r159 = load %oop, %oop* %t5
	ret %oop %r159
}
@m_cstr1760 = private unnamed_addr constant [17 x i8] c">/evaluator-stub\00"
@m_ostr1761 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 33, %oop bitcast ([17 x i8]* @m_cstr1760 to %oop) }
@"m_>/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_>/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1761 }
define %oop @"m_=/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = inttoptr %word 0 to %oop
	%r2 = load %oop, %oop* %t0
	%r6 = bitcast %oop %r2 to [0 x %oop]*
	%r5 = ptrtoint %oop %r1 to %word
	%r4 = getelementptr [0 x %oop], [0 x %oop]* %r6, %word 0, %word %r5
	%r3 = load %oop, %oop* %r4
	store %oop %r3, %oop* %t2
	%r7 = inttoptr %word 0 to %oop
	%r8 = inttoptr %word 1 to %oop
	%r9 = load %oop, %oop* %t0
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	%r10 = load %oop, %oop* %r11
	%r17 = bitcast %oop %r10 to [0 x %oop]*
	%r16 = ptrtoint %oop %r7 to %word
	%r15 = getelementptr [0 x %oop], [0 x %oop]* %r17, %word 0, %word %r16
	%r14 = load %oop, %oop* %r15
	store %oop %r14, %oop* %t3
	%r18 = load %oop, %oop* %t2
	store %oop %r18, %oop* %t4
	%r19 = load %oop, %oop* %t4
	%r20 = call %oop @m_type-of.code(%oop %r19)
	%r21 = inttoptr %word 7 to %oop
	%r25 = ptrtoint %oop %r21 to %word
	%r24 = ptrtoint %oop %r20 to %word
	%r23 = icmp eq %word %r25, %r24
	%r22 = inttoptr i1 %r23 to %oop
	%r27 = ptrtoint %oop %r22 to %word
	%r26 = icmp ne %word %r27, 0
	br i1 %r26, label %L1, label %L2
L1:
	%r28 = inttoptr %word 1 to %oop
	store %oop %r28, %oop* %t6
	%r29 = load %oop, %oop* %t3
	%r30 = call %oop @"m_long?.code"(%oop %r29)
	store %oop %r30, %oop* %t6
	%r31 = inttoptr %word 0 to %oop
	%r35 = ptrtoint %oop %r31 to %word
	%r34 = ptrtoint %oop %r30 to %word
	%r33 = icmp eq %word %r35, %r34
	%r32 = inttoptr i1 %r33 to %oop
	%r37 = ptrtoint %oop %r32 to %word
	%r36 = icmp ne %word %r37, 0
	br i1 %r36, label %L4, label %L5
L5:
	%r38 = inttoptr %word 1 to %oop
	%r39 = load %oop, %oop* %t3
	%r43 = ptrtoint %oop %r39 to %word
	%r42 = ptrtoint %oop %r38 to %word
	%r41 = ashr %word %r43, %r42
	%r40 = inttoptr %word %r41 to %oop
	%r44 = inttoptr %word 1 to %oop
	%r45 = load %oop, %oop* %t2
	%r49 = ptrtoint %oop %r45 to %word
	%r48 = ptrtoint %oop %r44 to %word
	%r47 = ashr %word %r49, %r48
	%r46 = inttoptr %word %r47 to %oop
	%r53 = ptrtoint %oop %r46 to %word
	%r52 = ptrtoint %oop %r40 to %word
	%r51 = icmp eq %word %r53, %r52
	%r50 = inttoptr i1 %r51 to %oop
	store %oop %r50, %oop* %t6
	%r54 = inttoptr %word 0 to %oop
	%r58 = ptrtoint %oop %r54 to %word
	%r57 = ptrtoint %oop %r50 to %word
	%r56 = icmp eq %word %r58, %r57
	%r55 = inttoptr i1 %r56 to %oop
	%r60 = ptrtoint %oop %r55 to %word
	%r59 = icmp ne %word %r60, 0
	br i1 %r59, label %L4, label %L6
L6:
	%r61 = load %oop, %oop* @"m_symbol/true"
	store %oop %r61, %oop* %t6
	%r62 = inttoptr %word 0 to %oop
	%r66 = ptrtoint %oop %r62 to %word
	%r65 = ptrtoint %oop %r61 to %word
	%r64 = icmp eq %word %r66, %r65
	%r63 = inttoptr i1 %r64 to %oop
	%r68 = ptrtoint %oop %r63 to %word
	%r67 = icmp ne %word %r68, 0
	br i1 %r67, label %L4, label %L7
L7:
	br label %L4
L4:
	%r69 = load %oop, %oop* %t6
	store %oop %r69, %oop* %t5
	br label %L3
L2:
	%r70 = load %oop, %oop* %t4
	%r71 = call %oop @m_type-of.code(%oop %r70)
	%r72 = inttoptr %word 13 to %oop
	%r76 = ptrtoint %oop %r72 to %word
	%r75 = ptrtoint %oop %r71 to %word
	%r74 = icmp eq %word %r76, %r75
	%r73 = inttoptr i1 %r74 to %oop
	%r78 = ptrtoint %oop %r73 to %word
	%r77 = icmp ne %word %r78, 0
	br i1 %r77, label %L8, label %L9
L8:
	%r79 = inttoptr %word 1 to %oop
	store %oop %r79, %oop* %t7
	%r80 = load %oop, %oop* %t3
	%r81 = call %oop @"m_string?.code"(%oop %r80)
	store %oop %r81, %oop* %t7
	%r82 = inttoptr %word 0 to %oop
	%r86 = ptrtoint %oop %r82 to %word
	%r85 = ptrtoint %oop %r81 to %word
	%r84 = icmp eq %word %r86, %r85
	%r83 = inttoptr i1 %r84 to %oop
	%r88 = ptrtoint %oop %r83 to %word
	%r87 = icmp ne %word %r88, 0
	br i1 %r87, label %L11, label %L12
L12:
	%r89 = load %oop, %oop* %t2
	%r90 = load %oop, %oop* %t3
	%r91 = call %oop @m_compare-strings.code(%oop %r89, %oop %r90)
	%r92 = inttoptr %word 0 to %oop
	%r96 = ptrtoint %oop %r92 to %word
	%r95 = ptrtoint %oop %r91 to %word
	%r94 = icmp eq %word %r96, %r95
	%r93 = inttoptr i1 %r94 to %oop
	store %oop %r93, %oop* %t7
	%r97 = inttoptr %word 0 to %oop
	%r101 = ptrtoint %oop %r97 to %word
	%r100 = ptrtoint %oop %r93 to %word
	%r99 = icmp eq %word %r101, %r100
	%r98 = inttoptr i1 %r99 to %oop
	%r103 = ptrtoint %oop %r98 to %word
	%r102 = icmp ne %word %r103, 0
	br i1 %r102, label %L11, label %L13
L13:
	%r104 = load %oop, %oop* @"m_symbol/true"
	store %oop %r104, %oop* %t7
	%r105 = inttoptr %word 0 to %oop
	%r109 = ptrtoint %oop %r105 to %word
	%r108 = ptrtoint %oop %r104 to %word
	%r107 = icmp eq %word %r109, %r108
	%r106 = inttoptr i1 %r107 to %oop
	%r111 = ptrtoint %oop %r106 to %word
	%r110 = icmp ne %word %r111, 0
	br i1 %r110, label %L11, label %L14
L14:
	br label %L11
L11:
	%r112 = load %oop, %oop* %t7
	store %oop %r112, %oop* %t6
	br label %L10
L9:
	%r113 = inttoptr %word 1 to %oop
	store %oop %r113, %oop* %t7
	%r114 = load %oop, %oop* %t3
	%r115 = load %oop, %oop* %t2
	%r119 = ptrtoint %oop %r115 to %word
	%r118 = ptrtoint %oop %r114 to %word
	%r117 = icmp eq %word %r119, %r118
	%r116 = inttoptr i1 %r117 to %oop
	store %oop %r116, %oop* %t7
	%r120 = inttoptr %word 0 to %oop
	%r124 = ptrtoint %oop %r120 to %word
	%r123 = ptrtoint %oop %r116 to %word
	%r122 = icmp eq %word %r124, %r123
	%r121 = inttoptr i1 %r122 to %oop
	%r126 = ptrtoint %oop %r121 to %word
	%r125 = icmp ne %word %r126, 0
	br i1 %r125, label %L15, label %L16
L16:
	%r127 = load %oop, %oop* @"m_symbol/true"
	store %oop %r127, %oop* %t7
	%r128 = inttoptr %word 0 to %oop
	%r132 = ptrtoint %oop %r128 to %word
	%r131 = ptrtoint %oop %r127 to %word
	%r130 = icmp eq %word %r132, %r131
	%r129 = inttoptr i1 %r130 to %oop
	%r134 = ptrtoint %oop %r129 to %word
	%r133 = icmp ne %word %r134, 0
	br i1 %r133, label %L15, label %L17
L17:
	br label %L15
L15:
	%r135 = load %oop, %oop* %t7
	store %oop %r135, %oop* %t6
	br label %L10
L10:
	%r136 = load %oop, %oop* %t6
	store %oop %r136, %oop* %t5
	br label %L3
L3:
	%r137 = load %oop, %oop* %t5
	ret %oop %r137
}
@m_cstr1762 = private unnamed_addr constant [17 x i8] c"=/evaluator-stub\00"
@m_ostr1763 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 33, %oop bitcast ([17 x i8]* @m_cstr1762 to %oop) }
@"m_=/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_=/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1763 }
@m_cstr1764 = private unnamed_addr constant [5 x i8] c"exit\00"
@m_ostr1765 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr1764 to %oop) }
@m_cstr1766 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1767 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1766 to %oop) }
@m_cstr1768 = private unnamed_addr constant [10 x i8] c"exit-code\00"
@m_ostr1769 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 19, %oop bitcast ([10 x i8]* @m_cstr1768 to %oop) }
@m_cstr1770 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1771 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1770 to %oop) }
@m_cstr1772 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr1773 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1772 to %oop) }
@m_cstr1774 = private unnamed_addr constant [5 x i8] c"exit\00"
@m_ostr1775 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr1774 to %oop) }
define %oop @"m_exit/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = load %oop, %oop* %t2
	%r4 = call %oop @"m_pair?.code"(%oop %r3)
	%r6 = ptrtoint %oop %r4 to %word
	%r5 = icmp ne %word %r6, 0
	br i1 %r5, label %L1, label %L2
L1:
	%r7 = inttoptr %word 0 to %oop
	%r8 = load %oop, %oop* %t2
	%r12 = bitcast %oop %r8 to [0 x %oop]*
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = getelementptr [0 x %oop], [0 x %oop]* %r12, %word 0, %word %r11
	%r9 = load %oop, %oop* %r10
	store %oop %r9, %oop* %t3
	%r13 = inttoptr %word 0 to %oop
	store %oop %r13, %oop* %t5
	%r14 = load %oop, %oop* %t3
	%r15 = call %oop @"m_long?.code"(%oop %r14)
	store %oop %r15, %oop* %t5
	%r16 = inttoptr %word 0 to %oop
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = icmp eq %word %r20, %r19
	%r17 = inttoptr i1 %r18 to %oop
	%r22 = ptrtoint %oop %r17 to %word
	%r21 = icmp ne %word %r22, 0
	br i1 %r21, label %L5, label %L4
L5:
	%r23 = call %oop @m_error-prologue.code()
	%r24 = getelementptr %"<string>", %"<string>"* @m_ostr1765, i32 0, i32 1
	%r25 = bitcast %word* %r24 to %oop
	%r26 = call %oop @"m_%error.code"(%oop %r25)
	%r27 = getelementptr %"<string>", %"<string>"* @m_ostr1767, i32 0, i32 1
	%r28 = bitcast %word* %r27 to %oop
	%r29 = call %oop @"m_%error.code"(%oop %r28)
	%r30 = getelementptr %"<string>", %"<string>"* @m_ostr1769, i32 0, i32 1
	%r31 = bitcast %word* %r30 to %oop
	%r32 = call %oop @"m_%error.code"(%oop %r31)
	%r33 = getelementptr %"<string>", %"<string>"* @m_ostr1771, i32 0, i32 1
	%r34 = bitcast %word* %r33 to %oop
	%r35 = call %oop @"m_%error.code"(%oop %r34)
	%r36 = getelementptr %"<string>", %"<string>"* @m_ostr1773, i32 0, i32 1
	%r37 = bitcast %word* %r36 to %oop
	%r38 = call %oop @"m_%error.code"(%oop %r37)
	%r39 = call %oop @m_error-epilogue.code()
	store %oop %r39, %oop* %t5
	%r40 = inttoptr %word 0 to %oop
	%r44 = ptrtoint %oop %r40 to %word
	%r43 = ptrtoint %oop %r39 to %word
	%r42 = icmp eq %word %r44, %r43
	%r41 = inttoptr i1 %r42 to %oop
	%r46 = ptrtoint %oop %r41 to %word
	%r45 = icmp ne %word %r46, 0
	br i1 %r45, label %L6, label %L4
L6:
	br label %L4
L4:
	%r47 = load %oop, %oop* %t5
	%r48 = inttoptr %word 1 to %oop
	%r49 = load %oop, %oop* %t3
	%r53 = ptrtoint %oop %r49 to %word
	%r52 = ptrtoint %oop %r48 to %word
	%r51 = ashr %word %r53, %r52
	%r50 = inttoptr %word %r51 to %oop
	store %oop %r50, %oop* %t3
	%r54 = inttoptr %word 1 to %oop
	%r55 = load %oop, %oop* %t2
	%r59 = bitcast %oop %r55 to [0 x %oop]*
	%r58 = ptrtoint %oop %r54 to %word
	%r57 = getelementptr [0 x %oop], [0 x %oop]* %r59, %word 0, %word %r58
	%r56 = load %oop, %oop* %r57
	store %oop %r56, %oop* %t2
	store %oop %r56, %oop* %t4
	br label %L3
L2:
	%r60 = inttoptr %word 0 to %oop
	store %oop %r60, %oop* %t3
	store %oop %r60, %oop* %t4
	br label %L3
L3:
	%r61 = load %oop, %oop* %t4
	%r62 = load %oop, %oop* %t2
	%r64 = ptrtoint %oop %r62 to %word
	%r63 = icmp ne %word %r64, 0
	br i1 %r63, label %L7, label %L8
L7:
	%r65 = getelementptr %"<string>", %"<string>"* @m_ostr1775, i32 0, i32 1
	%r66 = bitcast %word* %r65 to %oop
	%r67 = load %oop, %oop* %t0
	%r68 = call %oop @"m_%too-many-arguments.code"(%oop %r66, %oop %r67)
	store %oop %r68, %oop* %t4
	br label %L9
L8:
	%r69 = inttoptr %word 0 to %oop
	store %oop %r69, %oop* %t4
	br label %L9
L9:
	%r70 = load %oop, %oop* %t4
	%r71 = inttoptr %word 0 to %oop
	%r72 = call %oop @"m_platform/flush-streams.code"()
	%r73 = inttoptr %word 60 to %oop
	%r74 = load %oop, %oop* %t3
	%r75 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	syscall", 
	"=A,r,r,~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r73, %oop %r74)
	ret %oop %r75
}
@m_cstr1776 = private unnamed_addr constant [20 x i8] c"exit/evaluator-stub\00"
@m_ostr1777 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 39, %oop bitcast ([20 x i8]* @m_cstr1776 to %oop) }
@"m_exit/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_exit/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1777 }
define %oop @"m_warn/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	br label %L2
L1:
	%r2 = load %oop, %oop* %t2
	%r3 = call %oop @m_car.code(%oop %r2)
	store %oop %r3, %oop* %t3
	%r4 = load %oop, %oop* @"m_*maru-module*"
	%r5 = load %oop, %oop* @"m_symbol/*error-output*"
	%r6 = call %oop @m_global-variable-value.code(%oop %r4, %oop %r5)
	%r7 = load %oop, %oop* %t3
	%r8 = inttoptr %word 0 to %oop
	%r9 = call %oop @m_do-print.code(%oop %r6, %oop %r7, %oop %r8)
	%r10 = load %oop, %oop* %t2
	%r11 = call %oop @m_cdr.code(%oop %r10)
	store %oop %r11, %oop* %t2
	br label %L2
L2:
	%r12 = load %oop, %oop* %t2
	%r14 = ptrtoint %oop %r12 to %word
	%r13 = icmp ne %word %r14, 0
	br i1 %r13, label %L1, label %L3
L3:
	%r15 = call %oop @"m_platform/flush-streams.code"()
	ret %oop %r15
}
@m_cstr1778 = private unnamed_addr constant [20 x i8] c"warn/evaluator-stub\00"
@m_ostr1779 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 39, %oop bitcast ([20 x i8]* @m_cstr1778 to %oop) }
@"m_warn/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_warn/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1779 }
@m_cstr1780 = private unnamed_addr constant [8 x i8] c"type-of\00"
@m_ostr1781 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1780 to %oop) }
@m_cstr1782 = private unnamed_addr constant [8 x i8] c"type-of\00"
@m_ostr1783 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1782 to %oop) }
define %oop @"m_type-of/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = load %oop, %oop* %t2
	%r4 = call %oop @"m_pair?.code"(%oop %r3)
	%r6 = ptrtoint %oop %r4 to %word
	%r5 = icmp ne %word %r6, 0
	br i1 %r5, label %L1, label %L2
L1:
	%r7 = inttoptr %word 0 to %oop
	%r8 = load %oop, %oop* %t2
	%r12 = bitcast %oop %r8 to [0 x %oop]*
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = getelementptr [0 x %oop], [0 x %oop]* %r12, %word 0, %word %r11
	%r9 = load %oop, %oop* %r10
	store %oop %r9, %oop* %t3
	%r13 = inttoptr %word 1 to %oop
	%r14 = load %oop, %oop* %t2
	%r18 = bitcast %oop %r14 to [0 x %oop]*
	%r17 = ptrtoint %oop %r13 to %word
	%r16 = getelementptr [0 x %oop], [0 x %oop]* %r18, %word 0, %word %r17
	%r15 = load %oop, %oop* %r16
	store %oop %r15, %oop* %t2
	store %oop %r15, %oop* %t4
	br label %L3
L2:
	%r19 = getelementptr %"<string>", %"<string>"* @m_ostr1781, i32 0, i32 1
	%r20 = bitcast %word* %r19 to %oop
	%r21 = load %oop, %oop* %t0
	%r22 = call %oop @"m_%not-enough-arguments.code"(%oop %r20, %oop %r21)
	store %oop %r22, %oop* %t4
	br label %L3
L3:
	%r23 = load %oop, %oop* %t4
	%r24 = load %oop, %oop* %t2
	%r26 = ptrtoint %oop %r24 to %word
	%r25 = icmp ne %word %r26, 0
	br i1 %r25, label %L4, label %L5
L4:
	%r27 = getelementptr %"<string>", %"<string>"* @m_ostr1783, i32 0, i32 1
	%r28 = bitcast %word* %r27 to %oop
	%r29 = load %oop, %oop* %t0
	%r30 = call %oop @"m_%too-many-arguments.code"(%oop %r28, %oop %r29)
	store %oop %r30, %oop* %t4
	br label %L6
L5:
	%r31 = inttoptr %word 0 to %oop
	store %oop %r31, %oop* %t4
	br label %L6
L6:
	%r32 = load %oop, %oop* %t4
	%r33 = inttoptr %word 1 to %oop
	%r34 = inttoptr %word 1 to %oop
	%r35 = load %oop, %oop* %t3
	%r36 = call %oop @m_type-of.code(%oop %r35)
	%r40 = ptrtoint %oop %r36 to %word
	%r39 = ptrtoint %oop %r34 to %word
	%r38 = shl %word %r40, %r39
	%r37 = inttoptr %word %r38 to %oop
	%r44 = ptrtoint %oop %r37 to %word
	%r43 = ptrtoint %oop %r33 to %word
	%r42 = or %word %r44, %r43
	%r41 = inttoptr %word %r42 to %oop
	ret %oop %r41
}
@m_cstr1784 = private unnamed_addr constant [23 x i8] c"type-of/evaluator-stub\00"
@m_ostr1785 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 45, %oop bitcast ([23 x i8]* @m_cstr1784 to %oop) }
@"m_type-of/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_type-of/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1785 }
@m_cstr1786 = private unnamed_addr constant [8 x i8] c"string?\00"
@m_ostr1787 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1786 to %oop) }
@m_cstr1788 = private unnamed_addr constant [8 x i8] c"string?\00"
@m_ostr1789 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1788 to %oop) }
define %oop @"m_string?/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = load %oop, %oop* %t2
	%r4 = call %oop @"m_pair?.code"(%oop %r3)
	%r6 = ptrtoint %oop %r4 to %word
	%r5 = icmp ne %word %r6, 0
	br i1 %r5, label %L1, label %L2
L1:
	%r7 = inttoptr %word 0 to %oop
	%r8 = load %oop, %oop* %t2
	%r12 = bitcast %oop %r8 to [0 x %oop]*
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = getelementptr [0 x %oop], [0 x %oop]* %r12, %word 0, %word %r11
	%r9 = load %oop, %oop* %r10
	store %oop %r9, %oop* %t3
	%r13 = inttoptr %word 1 to %oop
	%r14 = load %oop, %oop* %t2
	%r18 = bitcast %oop %r14 to [0 x %oop]*
	%r17 = ptrtoint %oop %r13 to %word
	%r16 = getelementptr [0 x %oop], [0 x %oop]* %r18, %word 0, %word %r17
	%r15 = load %oop, %oop* %r16
	store %oop %r15, %oop* %t2
	store %oop %r15, %oop* %t4
	br label %L3
L2:
	%r19 = getelementptr %"<string>", %"<string>"* @m_ostr1787, i32 0, i32 1
	%r20 = bitcast %word* %r19 to %oop
	%r21 = load %oop, %oop* %t0
	%r22 = call %oop @"m_%not-enough-arguments.code"(%oop %r20, %oop %r21)
	store %oop %r22, %oop* %t4
	br label %L3
L3:
	%r23 = load %oop, %oop* %t4
	%r24 = load %oop, %oop* %t2
	%r26 = ptrtoint %oop %r24 to %word
	%r25 = icmp ne %word %r26, 0
	br i1 %r25, label %L4, label %L5
L4:
	%r27 = getelementptr %"<string>", %"<string>"* @m_ostr1789, i32 0, i32 1
	%r28 = bitcast %word* %r27 to %oop
	%r29 = load %oop, %oop* %t0
	%r30 = call %oop @"m_%too-many-arguments.code"(%oop %r28, %oop %r29)
	store %oop %r30, %oop* %t4
	br label %L6
L5:
	%r31 = inttoptr %word 0 to %oop
	store %oop %r31, %oop* %t4
	br label %L6
L6:
	%r32 = load %oop, %oop* %t4
	%r33 = inttoptr %word 1 to %oop
	store %oop %r33, %oop* %t4
	%r34 = load %oop, %oop* %t3
	%r35 = call %oop @"m_string?.code"(%oop %r34)
	store %oop %r35, %oop* %t4
	%r36 = inttoptr %word 0 to %oop
	%r40 = ptrtoint %oop %r36 to %word
	%r39 = ptrtoint %oop %r35 to %word
	%r38 = icmp eq %word %r40, %r39
	%r37 = inttoptr i1 %r38 to %oop
	%r42 = ptrtoint %oop %r37 to %word
	%r41 = icmp ne %word %r42, 0
	br i1 %r41, label %L7, label %L8
L8:
	%r43 = load %oop, %oop* @"m_symbol/true"
	store %oop %r43, %oop* %t4
	%r44 = inttoptr %word 0 to %oop
	%r48 = ptrtoint %oop %r44 to %word
	%r47 = ptrtoint %oop %r43 to %word
	%r46 = icmp eq %word %r48, %r47
	%r45 = inttoptr i1 %r46 to %oop
	%r50 = ptrtoint %oop %r45 to %word
	%r49 = icmp ne %word %r50, 0
	br i1 %r49, label %L7, label %L9
L9:
	br label %L7
L7:
	%r51 = load %oop, %oop* %t4
	ret %oop %r51
}
@m_cstr1790 = private unnamed_addr constant [23 x i8] c"string?/evaluator-stub\00"
@m_ostr1791 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 45, %oop bitcast ([23 x i8]* @m_cstr1790 to %oop) }
@"m_string?/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_string?/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1791 }
@m_cstr1792 = private unnamed_addr constant [8 x i8] c"symbol?\00"
@m_ostr1793 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1792 to %oop) }
@m_cstr1794 = private unnamed_addr constant [8 x i8] c"symbol?\00"
@m_ostr1795 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1794 to %oop) }
define %oop @"m_symbol?/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = load %oop, %oop* %t2
	%r4 = call %oop @"m_pair?.code"(%oop %r3)
	%r6 = ptrtoint %oop %r4 to %word
	%r5 = icmp ne %word %r6, 0
	br i1 %r5, label %L1, label %L2
L1:
	%r7 = inttoptr %word 0 to %oop
	%r8 = load %oop, %oop* %t2
	%r12 = bitcast %oop %r8 to [0 x %oop]*
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = getelementptr [0 x %oop], [0 x %oop]* %r12, %word 0, %word %r11
	%r9 = load %oop, %oop* %r10
	store %oop %r9, %oop* %t3
	%r13 = inttoptr %word 1 to %oop
	%r14 = load %oop, %oop* %t2
	%r18 = bitcast %oop %r14 to [0 x %oop]*
	%r17 = ptrtoint %oop %r13 to %word
	%r16 = getelementptr [0 x %oop], [0 x %oop]* %r18, %word 0, %word %r17
	%r15 = load %oop, %oop* %r16
	store %oop %r15, %oop* %t2
	store %oop %r15, %oop* %t4
	br label %L3
L2:
	%r19 = getelementptr %"<string>", %"<string>"* @m_ostr1793, i32 0, i32 1
	%r20 = bitcast %word* %r19 to %oop
	%r21 = load %oop, %oop* %t0
	%r22 = call %oop @"m_%not-enough-arguments.code"(%oop %r20, %oop %r21)
	store %oop %r22, %oop* %t4
	br label %L3
L3:
	%r23 = load %oop, %oop* %t4
	%r24 = load %oop, %oop* %t2
	%r26 = ptrtoint %oop %r24 to %word
	%r25 = icmp ne %word %r26, 0
	br i1 %r25, label %L4, label %L5
L4:
	%r27 = getelementptr %"<string>", %"<string>"* @m_ostr1795, i32 0, i32 1
	%r28 = bitcast %word* %r27 to %oop
	%r29 = load %oop, %oop* %t0
	%r30 = call %oop @"m_%too-many-arguments.code"(%oop %r28, %oop %r29)
	store %oop %r30, %oop* %t4
	br label %L6
L5:
	%r31 = inttoptr %word 0 to %oop
	store %oop %r31, %oop* %t4
	br label %L6
L6:
	%r32 = load %oop, %oop* %t4
	%r33 = inttoptr %word 1 to %oop
	store %oop %r33, %oop* %t4
	%r34 = load %oop, %oop* %t3
	%r35 = call %oop @"m_symbol?.code"(%oop %r34)
	store %oop %r35, %oop* %t4
	%r36 = inttoptr %word 0 to %oop
	%r40 = ptrtoint %oop %r36 to %word
	%r39 = ptrtoint %oop %r35 to %word
	%r38 = icmp eq %word %r40, %r39
	%r37 = inttoptr i1 %r38 to %oop
	%r42 = ptrtoint %oop %r37 to %word
	%r41 = icmp ne %word %r42, 0
	br i1 %r41, label %L7, label %L8
L8:
	%r43 = load %oop, %oop* @"m_symbol/true"
	store %oop %r43, %oop* %t4
	%r44 = inttoptr %word 0 to %oop
	%r48 = ptrtoint %oop %r44 to %word
	%r47 = ptrtoint %oop %r43 to %word
	%r46 = icmp eq %word %r48, %r47
	%r45 = inttoptr i1 %r46 to %oop
	%r50 = ptrtoint %oop %r45 to %word
	%r49 = icmp ne %word %r50, 0
	br i1 %r49, label %L7, label %L9
L9:
	br label %L7
L7:
	%r51 = load %oop, %oop* %t4
	ret %oop %r51
}
@m_cstr1796 = private unnamed_addr constant [23 x i8] c"symbol?/evaluator-stub\00"
@m_ostr1797 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 45, %oop bitcast ([23 x i8]* @m_cstr1796 to %oop) }
@"m_symbol?/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_symbol?/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1797 }
@m_cstr1798 = private unnamed_addr constant [6 x i8] c"pair?\00"
@m_ostr1799 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr1798 to %oop) }
@m_cstr1800 = private unnamed_addr constant [6 x i8] c"pair?\00"
@m_ostr1801 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr1800 to %oop) }
define %oop @"m_pair?/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = load %oop, %oop* %t2
	%r4 = call %oop @"m_pair?.code"(%oop %r3)
	%r6 = ptrtoint %oop %r4 to %word
	%r5 = icmp ne %word %r6, 0
	br i1 %r5, label %L1, label %L2
L1:
	%r7 = inttoptr %word 0 to %oop
	%r8 = load %oop, %oop* %t2
	%r12 = bitcast %oop %r8 to [0 x %oop]*
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = getelementptr [0 x %oop], [0 x %oop]* %r12, %word 0, %word %r11
	%r9 = load %oop, %oop* %r10
	store %oop %r9, %oop* %t3
	%r13 = inttoptr %word 1 to %oop
	%r14 = load %oop, %oop* %t2
	%r18 = bitcast %oop %r14 to [0 x %oop]*
	%r17 = ptrtoint %oop %r13 to %word
	%r16 = getelementptr [0 x %oop], [0 x %oop]* %r18, %word 0, %word %r17
	%r15 = load %oop, %oop* %r16
	store %oop %r15, %oop* %t2
	store %oop %r15, %oop* %t4
	br label %L3
L2:
	%r19 = getelementptr %"<string>", %"<string>"* @m_ostr1799, i32 0, i32 1
	%r20 = bitcast %word* %r19 to %oop
	%r21 = load %oop, %oop* %t0
	%r22 = call %oop @"m_%not-enough-arguments.code"(%oop %r20, %oop %r21)
	store %oop %r22, %oop* %t4
	br label %L3
L3:
	%r23 = load %oop, %oop* %t4
	%r24 = load %oop, %oop* %t2
	%r26 = ptrtoint %oop %r24 to %word
	%r25 = icmp ne %word %r26, 0
	br i1 %r25, label %L4, label %L5
L4:
	%r27 = getelementptr %"<string>", %"<string>"* @m_ostr1801, i32 0, i32 1
	%r28 = bitcast %word* %r27 to %oop
	%r29 = load %oop, %oop* %t0
	%r30 = call %oop @"m_%too-many-arguments.code"(%oop %r28, %oop %r29)
	store %oop %r30, %oop* %t4
	br label %L6
L5:
	%r31 = inttoptr %word 0 to %oop
	store %oop %r31, %oop* %t4
	br label %L6
L6:
	%r32 = load %oop, %oop* %t4
	%r33 = inttoptr %word 1 to %oop
	store %oop %r33, %oop* %t4
	%r34 = load %oop, %oop* %t3
	%r35 = call %oop @"m_pair?.code"(%oop %r34)
	store %oop %r35, %oop* %t4
	%r36 = inttoptr %word 0 to %oop
	%r40 = ptrtoint %oop %r36 to %word
	%r39 = ptrtoint %oop %r35 to %word
	%r38 = icmp eq %word %r40, %r39
	%r37 = inttoptr i1 %r38 to %oop
	%r42 = ptrtoint %oop %r37 to %word
	%r41 = icmp ne %word %r42, 0
	br i1 %r41, label %L7, label %L8
L8:
	%r43 = load %oop, %oop* @"m_symbol/true"
	store %oop %r43, %oop* %t4
	%r44 = inttoptr %word 0 to %oop
	%r48 = ptrtoint %oop %r44 to %word
	%r47 = ptrtoint %oop %r43 to %word
	%r46 = icmp eq %word %r48, %r47
	%r45 = inttoptr i1 %r46 to %oop
	%r50 = ptrtoint %oop %r45 to %word
	%r49 = icmp ne %word %r50, 0
	br i1 %r49, label %L7, label %L9
L9:
	br label %L7
L7:
	%r51 = load %oop, %oop* %t4
	ret %oop %r51
}
@m_cstr1802 = private unnamed_addr constant [21 x i8] c"pair?/evaluator-stub\00"
@m_ostr1803 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 41, %oop bitcast ([21 x i8]* @m_cstr1802 to %oop) }
@"m_pair?/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_pair?/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1803 }
@m_cstr1804 = private unnamed_addr constant [7 x i8] c"array?\00"
@m_ostr1805 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1804 to %oop) }
@m_cstr1806 = private unnamed_addr constant [7 x i8] c"array?\00"
@m_ostr1807 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1806 to %oop) }
define %oop @"m_array?/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = load %oop, %oop* %t2
	%r4 = call %oop @"m_pair?.code"(%oop %r3)
	%r6 = ptrtoint %oop %r4 to %word
	%r5 = icmp ne %word %r6, 0
	br i1 %r5, label %L1, label %L2
L1:
	%r7 = inttoptr %word 0 to %oop
	%r8 = load %oop, %oop* %t2
	%r12 = bitcast %oop %r8 to [0 x %oop]*
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = getelementptr [0 x %oop], [0 x %oop]* %r12, %word 0, %word %r11
	%r9 = load %oop, %oop* %r10
	store %oop %r9, %oop* %t3
	%r13 = inttoptr %word 1 to %oop
	%r14 = load %oop, %oop* %t2
	%r18 = bitcast %oop %r14 to [0 x %oop]*
	%r17 = ptrtoint %oop %r13 to %word
	%r16 = getelementptr [0 x %oop], [0 x %oop]* %r18, %word 0, %word %r17
	%r15 = load %oop, %oop* %r16
	store %oop %r15, %oop* %t2
	store %oop %r15, %oop* %t4
	br label %L3
L2:
	%r19 = getelementptr %"<string>", %"<string>"* @m_ostr1805, i32 0, i32 1
	%r20 = bitcast %word* %r19 to %oop
	%r21 = load %oop, %oop* %t0
	%r22 = call %oop @"m_%not-enough-arguments.code"(%oop %r20, %oop %r21)
	store %oop %r22, %oop* %t4
	br label %L3
L3:
	%r23 = load %oop, %oop* %t4
	%r24 = load %oop, %oop* %t2
	%r26 = ptrtoint %oop %r24 to %word
	%r25 = icmp ne %word %r26, 0
	br i1 %r25, label %L4, label %L5
L4:
	%r27 = getelementptr %"<string>", %"<string>"* @m_ostr1807, i32 0, i32 1
	%r28 = bitcast %word* %r27 to %oop
	%r29 = load %oop, %oop* %t0
	%r30 = call %oop @"m_%too-many-arguments.code"(%oop %r28, %oop %r29)
	store %oop %r30, %oop* %t4
	br label %L6
L5:
	%r31 = inttoptr %word 0 to %oop
	store %oop %r31, %oop* %t4
	br label %L6
L6:
	%r32 = load %oop, %oop* %t4
	%r33 = inttoptr %word 1 to %oop
	store %oop %r33, %oop* %t4
	%r34 = load %oop, %oop* %t3
	%r35 = call %oop @"m_array?.code"(%oop %r34)
	store %oop %r35, %oop* %t4
	%r36 = inttoptr %word 0 to %oop
	%r40 = ptrtoint %oop %r36 to %word
	%r39 = ptrtoint %oop %r35 to %word
	%r38 = icmp eq %word %r40, %r39
	%r37 = inttoptr i1 %r38 to %oop
	%r42 = ptrtoint %oop %r37 to %word
	%r41 = icmp ne %word %r42, 0
	br i1 %r41, label %L7, label %L8
L8:
	%r43 = load %oop, %oop* @"m_symbol/true"
	store %oop %r43, %oop* %t4
	%r44 = inttoptr %word 0 to %oop
	%r48 = ptrtoint %oop %r44 to %word
	%r47 = ptrtoint %oop %r43 to %word
	%r46 = icmp eq %word %r48, %r47
	%r45 = inttoptr i1 %r46 to %oop
	%r50 = ptrtoint %oop %r45 to %word
	%r49 = icmp ne %word %r50, 0
	br i1 %r49, label %L7, label %L9
L9:
	br label %L7
L7:
	%r51 = load %oop, %oop* %t4
	ret %oop %r51
}
@m_cstr1808 = private unnamed_addr constant [22 x i8] c"array?/evaluator-stub\00"
@m_ostr1809 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 43, %oop bitcast ([22 x i8]* @m_cstr1808 to %oop) }
@"m_array?/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_array?/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1809 }
define %oop @m_set-car.code(%oop %pair, %oop %value) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	store %oop %pair, %oop* %t0
	store %oop %value, %oop* %t1
	%r1 = load %oop, %oop* %t1
	%r2 = inttoptr %word 0 to %oop
	%r3 = load %oop, %oop* %t0
	%r7 = bitcast %oop %r3 to [0 x %oop]*
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = getelementptr [0 x %oop], [0 x %oop]* %r7, %word 0, %word %r6
	store %oop %r1, %oop* %r5
	%r4 = bitcast %oop %r1 to %oop
	ret %oop %r4
}
@m_cstr1810 = private unnamed_addr constant [8 x i8] c"set-car\00"
@m_ostr1811 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1810 to %oop) }
@m_set-car = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @m_set-car.code to %oop), %"<string>"* @m_ostr1811 }
@m_cstr1812 = private unnamed_addr constant [8 x i8] c"set-car\00"
@m_ostr1813 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1812 to %oop) }
@m_cstr1814 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1815 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1814 to %oop) }
@m_cstr1816 = private unnamed_addr constant [5 x i8] c"pair\00"
@m_ostr1817 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr1816 to %oop) }
@m_cstr1818 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1819 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1818 to %oop) }
@m_cstr1820 = private unnamed_addr constant [7 x i8] c"<pair>\00"
@m_ostr1821 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1820 to %oop) }
@m_cstr1822 = private unnamed_addr constant [8 x i8] c"set-car\00"
@m_ostr1823 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1822 to %oop) }
@m_cstr1824 = private unnamed_addr constant [8 x i8] c"set-car\00"
@m_ostr1825 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1824 to %oop) }
@m_cstr1826 = private unnamed_addr constant [8 x i8] c"set-car\00"
@m_ostr1827 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1826 to %oop) }
define %oop @"m_set-car/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = load %oop, %oop* %t2
	%r5 = call %oop @"m_pair?.code"(%oop %r4)
	%r7 = ptrtoint %oop %r5 to %word
	%r6 = icmp ne %word %r7, 0
	br i1 %r6, label %L1, label %L2
L1:
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t2
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	%r10 = load %oop, %oop* %r11
	store %oop %r10, %oop* %t3
	%r14 = inttoptr %word 0 to %oop
	store %oop %r14, %oop* %t6
	%r15 = load %oop, %oop* %t3
	%r16 = call %oop @"m_pair?.code"(%oop %r15)
	store %oop %r16, %oop* %t6
	%r17 = inttoptr %word 0 to %oop
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = icmp eq %word %r21, %r20
	%r18 = inttoptr i1 %r19 to %oop
	%r23 = ptrtoint %oop %r18 to %word
	%r22 = icmp ne %word %r23, 0
	br i1 %r22, label %L5, label %L4
L5:
	%r24 = call %oop @m_error-prologue.code()
	%r25 = getelementptr %"<string>", %"<string>"* @m_ostr1813, i32 0, i32 1
	%r26 = bitcast %word* %r25 to %oop
	%r27 = call %oop @"m_%error.code"(%oop %r26)
	%r28 = getelementptr %"<string>", %"<string>"* @m_ostr1815, i32 0, i32 1
	%r29 = bitcast %word* %r28 to %oop
	%r30 = call %oop @"m_%error.code"(%oop %r29)
	%r31 = getelementptr %"<string>", %"<string>"* @m_ostr1817, i32 0, i32 1
	%r32 = bitcast %word* %r31 to %oop
	%r33 = call %oop @"m_%error.code"(%oop %r32)
	%r34 = getelementptr %"<string>", %"<string>"* @m_ostr1819, i32 0, i32 1
	%r35 = bitcast %word* %r34 to %oop
	%r36 = call %oop @"m_%error.code"(%oop %r35)
	%r37 = getelementptr %"<string>", %"<string>"* @m_ostr1821, i32 0, i32 1
	%r38 = bitcast %word* %r37 to %oop
	%r39 = call %oop @"m_%error.code"(%oop %r38)
	%r40 = call %oop @m_error-epilogue.code()
	store %oop %r40, %oop* %t6
	%r41 = inttoptr %word 0 to %oop
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = ptrtoint %oop %r40 to %word
	%r43 = icmp eq %word %r45, %r44
	%r42 = inttoptr i1 %r43 to %oop
	%r47 = ptrtoint %oop %r42 to %word
	%r46 = icmp ne %word %r47, 0
	br i1 %r46, label %L6, label %L4
L6:
	br label %L4
L4:
	%r48 = load %oop, %oop* %t6
	%r49 = inttoptr %word 1 to %oop
	%r50 = load %oop, %oop* %t2
	%r54 = bitcast %oop %r50 to [0 x %oop]*
	%r53 = ptrtoint %oop %r49 to %word
	%r52 = getelementptr [0 x %oop], [0 x %oop]* %r54, %word 0, %word %r53
	%r51 = load %oop, %oop* %r52
	store %oop %r51, %oop* %t2
	store %oop %r51, %oop* %t5
	br label %L3
L2:
	%r55 = getelementptr %"<string>", %"<string>"* @m_ostr1823, i32 0, i32 1
	%r56 = bitcast %word* %r55 to %oop
	%r57 = load %oop, %oop* %t0
	%r58 = call %oop @"m_%not-enough-arguments.code"(%oop %r56, %oop %r57)
	store %oop %r58, %oop* %t5
	br label %L3
L3:
	%r59 = load %oop, %oop* %t5
	%r60 = load %oop, %oop* %t2
	%r61 = call %oop @"m_pair?.code"(%oop %r60)
	%r63 = ptrtoint %oop %r61 to %word
	%r62 = icmp ne %word %r63, 0
	br i1 %r62, label %L7, label %L8
L7:
	%r64 = inttoptr %word 0 to %oop
	%r65 = load %oop, %oop* %t2
	%r69 = bitcast %oop %r65 to [0 x %oop]*
	%r68 = ptrtoint %oop %r64 to %word
	%r67 = getelementptr [0 x %oop], [0 x %oop]* %r69, %word 0, %word %r68
	%r66 = load %oop, %oop* %r67
	store %oop %r66, %oop* %t4
	%r70 = inttoptr %word 1 to %oop
	%r71 = load %oop, %oop* %t2
	%r75 = bitcast %oop %r71 to [0 x %oop]*
	%r74 = ptrtoint %oop %r70 to %word
	%r73 = getelementptr [0 x %oop], [0 x %oop]* %r75, %word 0, %word %r74
	%r72 = load %oop, %oop* %r73
	store %oop %r72, %oop* %t2
	store %oop %r72, %oop* %t5
	br label %L9
L8:
	%r76 = getelementptr %"<string>", %"<string>"* @m_ostr1825, i32 0, i32 1
	%r77 = bitcast %word* %r76 to %oop
	%r78 = load %oop, %oop* %t0
	%r79 = call %oop @"m_%not-enough-arguments.code"(%oop %r77, %oop %r78)
	store %oop %r79, %oop* %t5
	br label %L9
L9:
	%r80 = load %oop, %oop* %t5
	%r81 = load %oop, %oop* %t2
	%r83 = ptrtoint %oop %r81 to %word
	%r82 = icmp ne %word %r83, 0
	br i1 %r82, label %L10, label %L11
L10:
	%r84 = getelementptr %"<string>", %"<string>"* @m_ostr1827, i32 0, i32 1
	%r85 = bitcast %word* %r84 to %oop
	%r86 = load %oop, %oop* %t0
	%r87 = call %oop @"m_%too-many-arguments.code"(%oop %r85, %oop %r86)
	store %oop %r87, %oop* %t5
	br label %L12
L11:
	%r88 = inttoptr %word 0 to %oop
	store %oop %r88, %oop* %t5
	br label %L12
L12:
	%r89 = load %oop, %oop* %t5
	%r90 = load %oop, %oop* %t3
	%r91 = load %oop, %oop* %t4
	%r92 = call %oop @m_set-car.code(%oop %r90, %oop %r91)
	ret %oop %r92
}
@m_cstr1828 = private unnamed_addr constant [23 x i8] c"set-car/evaluator-stub\00"
@m_ostr1829 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 45, %oop bitcast ([23 x i8]* @m_cstr1828 to %oop) }
@"m_set-car/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_set-car/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1829 }
define %oop @m_set-cdr.code(%oop %pair, %oop %value) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	store %oop %pair, %oop* %t0
	store %oop %value, %oop* %t1
	%r1 = load %oop, %oop* %t1
	%r2 = inttoptr %word 1 to %oop
	%r3 = load %oop, %oop* %t0
	%r7 = bitcast %oop %r3 to [0 x %oop]*
	%r6 = ptrtoint %oop %r2 to %word
	%r5 = getelementptr [0 x %oop], [0 x %oop]* %r7, %word 0, %word %r6
	store %oop %r1, %oop* %r5
	%r4 = bitcast %oop %r1 to %oop
	ret %oop %r4
}
@m_cstr1830 = private unnamed_addr constant [8 x i8] c"set-cdr\00"
@m_ostr1831 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1830 to %oop) }
@m_set-cdr = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @m_set-cdr.code to %oop), %"<string>"* @m_ostr1831 }
@m_cstr1832 = private unnamed_addr constant [8 x i8] c"set-cdr\00"
@m_ostr1833 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1832 to %oop) }
@m_cstr1834 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1835 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1834 to %oop) }
@m_cstr1836 = private unnamed_addr constant [5 x i8] c"pair\00"
@m_ostr1837 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr1836 to %oop) }
@m_cstr1838 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1839 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1838 to %oop) }
@m_cstr1840 = private unnamed_addr constant [7 x i8] c"<pair>\00"
@m_ostr1841 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1840 to %oop) }
@m_cstr1842 = private unnamed_addr constant [8 x i8] c"set-cdr\00"
@m_ostr1843 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1842 to %oop) }
@m_cstr1844 = private unnamed_addr constant [8 x i8] c"set-cdr\00"
@m_ostr1845 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1844 to %oop) }
@m_cstr1846 = private unnamed_addr constant [8 x i8] c"set-cdr\00"
@m_ostr1847 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1846 to %oop) }
define %oop @"m_set-cdr/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = load %oop, %oop* %t2
	%r5 = call %oop @"m_pair?.code"(%oop %r4)
	%r7 = ptrtoint %oop %r5 to %word
	%r6 = icmp ne %word %r7, 0
	br i1 %r6, label %L1, label %L2
L1:
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t2
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	%r10 = load %oop, %oop* %r11
	store %oop %r10, %oop* %t3
	%r14 = inttoptr %word 0 to %oop
	store %oop %r14, %oop* %t6
	%r15 = load %oop, %oop* %t3
	%r16 = call %oop @"m_pair?.code"(%oop %r15)
	store %oop %r16, %oop* %t6
	%r17 = inttoptr %word 0 to %oop
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = icmp eq %word %r21, %r20
	%r18 = inttoptr i1 %r19 to %oop
	%r23 = ptrtoint %oop %r18 to %word
	%r22 = icmp ne %word %r23, 0
	br i1 %r22, label %L5, label %L4
L5:
	%r24 = call %oop @m_error-prologue.code()
	%r25 = getelementptr %"<string>", %"<string>"* @m_ostr1833, i32 0, i32 1
	%r26 = bitcast %word* %r25 to %oop
	%r27 = call %oop @"m_%error.code"(%oop %r26)
	%r28 = getelementptr %"<string>", %"<string>"* @m_ostr1835, i32 0, i32 1
	%r29 = bitcast %word* %r28 to %oop
	%r30 = call %oop @"m_%error.code"(%oop %r29)
	%r31 = getelementptr %"<string>", %"<string>"* @m_ostr1837, i32 0, i32 1
	%r32 = bitcast %word* %r31 to %oop
	%r33 = call %oop @"m_%error.code"(%oop %r32)
	%r34 = getelementptr %"<string>", %"<string>"* @m_ostr1839, i32 0, i32 1
	%r35 = bitcast %word* %r34 to %oop
	%r36 = call %oop @"m_%error.code"(%oop %r35)
	%r37 = getelementptr %"<string>", %"<string>"* @m_ostr1841, i32 0, i32 1
	%r38 = bitcast %word* %r37 to %oop
	%r39 = call %oop @"m_%error.code"(%oop %r38)
	%r40 = call %oop @m_error-epilogue.code()
	store %oop %r40, %oop* %t6
	%r41 = inttoptr %word 0 to %oop
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = ptrtoint %oop %r40 to %word
	%r43 = icmp eq %word %r45, %r44
	%r42 = inttoptr i1 %r43 to %oop
	%r47 = ptrtoint %oop %r42 to %word
	%r46 = icmp ne %word %r47, 0
	br i1 %r46, label %L6, label %L4
L6:
	br label %L4
L4:
	%r48 = load %oop, %oop* %t6
	%r49 = inttoptr %word 1 to %oop
	%r50 = load %oop, %oop* %t2
	%r54 = bitcast %oop %r50 to [0 x %oop]*
	%r53 = ptrtoint %oop %r49 to %word
	%r52 = getelementptr [0 x %oop], [0 x %oop]* %r54, %word 0, %word %r53
	%r51 = load %oop, %oop* %r52
	store %oop %r51, %oop* %t2
	store %oop %r51, %oop* %t5
	br label %L3
L2:
	%r55 = getelementptr %"<string>", %"<string>"* @m_ostr1843, i32 0, i32 1
	%r56 = bitcast %word* %r55 to %oop
	%r57 = load %oop, %oop* %t0
	%r58 = call %oop @"m_%not-enough-arguments.code"(%oop %r56, %oop %r57)
	store %oop %r58, %oop* %t5
	br label %L3
L3:
	%r59 = load %oop, %oop* %t5
	%r60 = load %oop, %oop* %t2
	%r61 = call %oop @"m_pair?.code"(%oop %r60)
	%r63 = ptrtoint %oop %r61 to %word
	%r62 = icmp ne %word %r63, 0
	br i1 %r62, label %L7, label %L8
L7:
	%r64 = inttoptr %word 0 to %oop
	%r65 = load %oop, %oop* %t2
	%r69 = bitcast %oop %r65 to [0 x %oop]*
	%r68 = ptrtoint %oop %r64 to %word
	%r67 = getelementptr [0 x %oop], [0 x %oop]* %r69, %word 0, %word %r68
	%r66 = load %oop, %oop* %r67
	store %oop %r66, %oop* %t4
	%r70 = inttoptr %word 1 to %oop
	%r71 = load %oop, %oop* %t2
	%r75 = bitcast %oop %r71 to [0 x %oop]*
	%r74 = ptrtoint %oop %r70 to %word
	%r73 = getelementptr [0 x %oop], [0 x %oop]* %r75, %word 0, %word %r74
	%r72 = load %oop, %oop* %r73
	store %oop %r72, %oop* %t2
	store %oop %r72, %oop* %t5
	br label %L9
L8:
	%r76 = getelementptr %"<string>", %"<string>"* @m_ostr1845, i32 0, i32 1
	%r77 = bitcast %word* %r76 to %oop
	%r78 = load %oop, %oop* %t0
	%r79 = call %oop @"m_%not-enough-arguments.code"(%oop %r77, %oop %r78)
	store %oop %r79, %oop* %t5
	br label %L9
L9:
	%r80 = load %oop, %oop* %t5
	%r81 = load %oop, %oop* %t2
	%r83 = ptrtoint %oop %r81 to %word
	%r82 = icmp ne %word %r83, 0
	br i1 %r82, label %L10, label %L11
L10:
	%r84 = getelementptr %"<string>", %"<string>"* @m_ostr1847, i32 0, i32 1
	%r85 = bitcast %word* %r84 to %oop
	%r86 = load %oop, %oop* %t0
	%r87 = call %oop @"m_%too-many-arguments.code"(%oop %r85, %oop %r86)
	store %oop %r87, %oop* %t5
	br label %L12
L11:
	%r88 = inttoptr %word 0 to %oop
	store %oop %r88, %oop* %t5
	br label %L12
L12:
	%r89 = load %oop, %oop* %t5
	%r90 = load %oop, %oop* %t3
	%r91 = load %oop, %oop* %t4
	%r92 = call %oop @m_set-cdr.code(%oop %r90, %oop %r91)
	ret %oop %r92
}
@m_cstr1848 = private unnamed_addr constant [23 x i8] c"set-cdr/evaluator-stub\00"
@m_ostr1849 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 45, %oop bitcast ([23 x i8]* @m_cstr1848 to %oop) }
@"m_set-cdr/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_set-cdr/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1849 }
@m_cstr1850 = private unnamed_addr constant [7 x i8] c"oop-at\00"
@m_ostr1851 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1850 to %oop) }
@m_cstr1852 = private unnamed_addr constant [7 x i8] c"oop-at\00"
@m_ostr1853 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1852 to %oop) }
@m_cstr1854 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1855 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1854 to %oop) }
@m_cstr1856 = private unnamed_addr constant [10 x i8] c"wordindex\00"
@m_ostr1857 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 19, %oop bitcast ([10 x i8]* @m_cstr1856 to %oop) }
@m_cstr1858 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1859 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1858 to %oop) }
@m_cstr1860 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr1861 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1860 to %oop) }
@m_cstr1862 = private unnamed_addr constant [7 x i8] c"oop-at\00"
@m_ostr1863 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1862 to %oop) }
@m_cstr1864 = private unnamed_addr constant [7 x i8] c"oop-at\00"
@m_ostr1865 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1864 to %oop) }
define %oop @"m_oop-at/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = load %oop, %oop* %t2
	%r5 = call %oop @"m_pair?.code"(%oop %r4)
	%r7 = ptrtoint %oop %r5 to %word
	%r6 = icmp ne %word %r7, 0
	br i1 %r6, label %L1, label %L2
L1:
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t2
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	%r10 = load %oop, %oop* %r11
	store %oop %r10, %oop* %t3
	%r14 = inttoptr %word 1 to %oop
	%r15 = load %oop, %oop* %t2
	%r19 = bitcast %oop %r15 to [0 x %oop]*
	%r18 = ptrtoint %oop %r14 to %word
	%r17 = getelementptr [0 x %oop], [0 x %oop]* %r19, %word 0, %word %r18
	%r16 = load %oop, %oop* %r17
	store %oop %r16, %oop* %t2
	store %oop %r16, %oop* %t5
	br label %L3
L2:
	%r20 = getelementptr %"<string>", %"<string>"* @m_ostr1851, i32 0, i32 1
	%r21 = bitcast %word* %r20 to %oop
	%r22 = load %oop, %oop* %t0
	%r23 = call %oop @"m_%not-enough-arguments.code"(%oop %r21, %oop %r22)
	store %oop %r23, %oop* %t5
	br label %L3
L3:
	%r24 = load %oop, %oop* %t5
	%r25 = load %oop, %oop* %t2
	%r26 = call %oop @"m_pair?.code"(%oop %r25)
	%r28 = ptrtoint %oop %r26 to %word
	%r27 = icmp ne %word %r28, 0
	br i1 %r27, label %L4, label %L5
L4:
	%r29 = inttoptr %word 0 to %oop
	%r30 = load %oop, %oop* %t2
	%r34 = bitcast %oop %r30 to [0 x %oop]*
	%r33 = ptrtoint %oop %r29 to %word
	%r32 = getelementptr [0 x %oop], [0 x %oop]* %r34, %word 0, %word %r33
	%r31 = load %oop, %oop* %r32
	store %oop %r31, %oop* %t4
	%r35 = inttoptr %word 0 to %oop
	store %oop %r35, %oop* %t6
	%r36 = load %oop, %oop* %t4
	%r37 = call %oop @"m_long?.code"(%oop %r36)
	store %oop %r37, %oop* %t6
	%r38 = inttoptr %word 0 to %oop
	%r42 = ptrtoint %oop %r38 to %word
	%r41 = ptrtoint %oop %r37 to %word
	%r40 = icmp eq %word %r42, %r41
	%r39 = inttoptr i1 %r40 to %oop
	%r44 = ptrtoint %oop %r39 to %word
	%r43 = icmp ne %word %r44, 0
	br i1 %r43, label %L8, label %L7
L8:
	%r45 = call %oop @m_error-prologue.code()
	%r46 = getelementptr %"<string>", %"<string>"* @m_ostr1853, i32 0, i32 1
	%r47 = bitcast %word* %r46 to %oop
	%r48 = call %oop @"m_%error.code"(%oop %r47)
	%r49 = getelementptr %"<string>", %"<string>"* @m_ostr1855, i32 0, i32 1
	%r50 = bitcast %word* %r49 to %oop
	%r51 = call %oop @"m_%error.code"(%oop %r50)
	%r52 = getelementptr %"<string>", %"<string>"* @m_ostr1857, i32 0, i32 1
	%r53 = bitcast %word* %r52 to %oop
	%r54 = call %oop @"m_%error.code"(%oop %r53)
	%r55 = getelementptr %"<string>", %"<string>"* @m_ostr1859, i32 0, i32 1
	%r56 = bitcast %word* %r55 to %oop
	%r57 = call %oop @"m_%error.code"(%oop %r56)
	%r58 = getelementptr %"<string>", %"<string>"* @m_ostr1861, i32 0, i32 1
	%r59 = bitcast %word* %r58 to %oop
	%r60 = call %oop @"m_%error.code"(%oop %r59)
	%r61 = call %oop @m_error-epilogue.code()
	store %oop %r61, %oop* %t6
	%r62 = inttoptr %word 0 to %oop
	%r66 = ptrtoint %oop %r62 to %word
	%r65 = ptrtoint %oop %r61 to %word
	%r64 = icmp eq %word %r66, %r65
	%r63 = inttoptr i1 %r64 to %oop
	%r68 = ptrtoint %oop %r63 to %word
	%r67 = icmp ne %word %r68, 0
	br i1 %r67, label %L9, label %L7
L9:
	br label %L7
L7:
	%r69 = load %oop, %oop* %t6
	%r70 = inttoptr %word 1 to %oop
	%r71 = load %oop, %oop* %t4
	%r75 = ptrtoint %oop %r71 to %word
	%r74 = ptrtoint %oop %r70 to %word
	%r73 = ashr %word %r75, %r74
	%r72 = inttoptr %word %r73 to %oop
	store %oop %r72, %oop* %t4
	%r76 = inttoptr %word 1 to %oop
	%r77 = load %oop, %oop* %t2
	%r81 = bitcast %oop %r77 to [0 x %oop]*
	%r80 = ptrtoint %oop %r76 to %word
	%r79 = getelementptr [0 x %oop], [0 x %oop]* %r81, %word 0, %word %r80
	%r78 = load %oop, %oop* %r79
	store %oop %r78, %oop* %t2
	store %oop %r78, %oop* %t5
	br label %L6
L5:
	%r82 = getelementptr %"<string>", %"<string>"* @m_ostr1863, i32 0, i32 1
	%r83 = bitcast %word* %r82 to %oop
	%r84 = load %oop, %oop* %t0
	%r85 = call %oop @"m_%not-enough-arguments.code"(%oop %r83, %oop %r84)
	store %oop %r85, %oop* %t5
	br label %L6
L6:
	%r86 = load %oop, %oop* %t5
	%r87 = load %oop, %oop* %t2
	%r89 = ptrtoint %oop %r87 to %word
	%r88 = icmp ne %word %r89, 0
	br i1 %r88, label %L10, label %L11
L10:
	%r90 = getelementptr %"<string>", %"<string>"* @m_ostr1865, i32 0, i32 1
	%r91 = bitcast %word* %r90 to %oop
	%r92 = load %oop, %oop* %t0
	%r93 = call %oop @"m_%too-many-arguments.code"(%oop %r91, %oop %r92)
	store %oop %r93, %oop* %t5
	br label %L12
L11:
	%r94 = inttoptr %word 0 to %oop
	store %oop %r94, %oop* %t5
	br label %L12
L12:
	%r95 = load %oop, %oop* %t5
	%r96 = inttoptr %word 0 to %oop
	%r97 = load %oop, %oop* %t4
	%r98 = load %oop, %oop* %t3
	%r102 = bitcast %oop %r98 to [0 x %oop]*
	%r101 = ptrtoint %oop %r97 to %word
	%r100 = getelementptr [0 x %oop], [0 x %oop]* %r102, %word 0, %word %r101
	%r99 = load %oop, %oop* %r100
	ret %oop %r99
}
@m_cstr1866 = private unnamed_addr constant [22 x i8] c"oop-at/evaluator-stub\00"
@m_ostr1867 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 43, %oop bitcast ([22 x i8]* @m_cstr1866 to %oop) }
@"m_oop-at/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_oop-at/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1867 }
@m_cstr1868 = private unnamed_addr constant [11 x i8] c"set-oop-at\00"
@m_ostr1869 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr1868 to %oop) }
@m_cstr1870 = private unnamed_addr constant [11 x i8] c"set-oop-at\00"
@m_ostr1871 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr1870 to %oop) }
@m_cstr1872 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1873 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1872 to %oop) }
@m_cstr1874 = private unnamed_addr constant [10 x i8] c"wordindex\00"
@m_ostr1875 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 19, %oop bitcast ([10 x i8]* @m_cstr1874 to %oop) }
@m_cstr1876 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1877 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1876 to %oop) }
@m_cstr1878 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr1879 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1878 to %oop) }
@m_cstr1880 = private unnamed_addr constant [11 x i8] c"set-oop-at\00"
@m_ostr1881 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr1880 to %oop) }
@m_cstr1882 = private unnamed_addr constant [11 x i8] c"set-oop-at\00"
@m_ostr1883 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr1882 to %oop) }
@m_cstr1884 = private unnamed_addr constant [11 x i8] c"set-oop-at\00"
@m_ostr1885 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr1884 to %oop) }
define %oop @"m_set-oop-at/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t5 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = inttoptr %word 0 to %oop
	store %oop %r4, %oop* %t5
	%r5 = load %oop, %oop* %t2
	%r6 = call %oop @"m_pair?.code"(%oop %r5)
	%r8 = ptrtoint %oop %r6 to %word
	%r7 = icmp ne %word %r8, 0
	br i1 %r7, label %L1, label %L2
L1:
	%r9 = inttoptr %word 0 to %oop
	%r10 = load %oop, %oop* %t2
	%r14 = bitcast %oop %r10 to [0 x %oop]*
	%r13 = ptrtoint %oop %r9 to %word
	%r12 = getelementptr [0 x %oop], [0 x %oop]* %r14, %word 0, %word %r13
	%r11 = load %oop, %oop* %r12
	store %oop %r11, %oop* %t3
	%r15 = inttoptr %word 1 to %oop
	%r16 = load %oop, %oop* %t2
	%r20 = bitcast %oop %r16 to [0 x %oop]*
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = getelementptr [0 x %oop], [0 x %oop]* %r20, %word 0, %word %r19
	%r17 = load %oop, %oop* %r18
	store %oop %r17, %oop* %t2
	store %oop %r17, %oop* %t6
	br label %L3
L2:
	%r21 = getelementptr %"<string>", %"<string>"* @m_ostr1869, i32 0, i32 1
	%r22 = bitcast %word* %r21 to %oop
	%r23 = load %oop, %oop* %t0
	%r24 = call %oop @"m_%not-enough-arguments.code"(%oop %r22, %oop %r23)
	store %oop %r24, %oop* %t6
	br label %L3
L3:
	%r25 = load %oop, %oop* %t6
	%r26 = load %oop, %oop* %t2
	%r27 = call %oop @"m_pair?.code"(%oop %r26)
	%r29 = ptrtoint %oop %r27 to %word
	%r28 = icmp ne %word %r29, 0
	br i1 %r28, label %L4, label %L5
L4:
	%r30 = inttoptr %word 0 to %oop
	%r31 = load %oop, %oop* %t2
	%r35 = bitcast %oop %r31 to [0 x %oop]*
	%r34 = ptrtoint %oop %r30 to %word
	%r33 = getelementptr [0 x %oop], [0 x %oop]* %r35, %word 0, %word %r34
	%r32 = load %oop, %oop* %r33
	store %oop %r32, %oop* %t4
	%r36 = inttoptr %word 0 to %oop
	store %oop %r36, %oop* %t7
	%r37 = load %oop, %oop* %t4
	%r38 = call %oop @"m_long?.code"(%oop %r37)
	store %oop %r38, %oop* %t7
	%r39 = inttoptr %word 0 to %oop
	%r43 = ptrtoint %oop %r39 to %word
	%r42 = ptrtoint %oop %r38 to %word
	%r41 = icmp eq %word %r43, %r42
	%r40 = inttoptr i1 %r41 to %oop
	%r45 = ptrtoint %oop %r40 to %word
	%r44 = icmp ne %word %r45, 0
	br i1 %r44, label %L8, label %L7
L8:
	%r46 = call %oop @m_error-prologue.code()
	%r47 = getelementptr %"<string>", %"<string>"* @m_ostr1871, i32 0, i32 1
	%r48 = bitcast %word* %r47 to %oop
	%r49 = call %oop @"m_%error.code"(%oop %r48)
	%r50 = getelementptr %"<string>", %"<string>"* @m_ostr1873, i32 0, i32 1
	%r51 = bitcast %word* %r50 to %oop
	%r52 = call %oop @"m_%error.code"(%oop %r51)
	%r53 = getelementptr %"<string>", %"<string>"* @m_ostr1875, i32 0, i32 1
	%r54 = bitcast %word* %r53 to %oop
	%r55 = call %oop @"m_%error.code"(%oop %r54)
	%r56 = getelementptr %"<string>", %"<string>"* @m_ostr1877, i32 0, i32 1
	%r57 = bitcast %word* %r56 to %oop
	%r58 = call %oop @"m_%error.code"(%oop %r57)
	%r59 = getelementptr %"<string>", %"<string>"* @m_ostr1879, i32 0, i32 1
	%r60 = bitcast %word* %r59 to %oop
	%r61 = call %oop @"m_%error.code"(%oop %r60)
	%r62 = call %oop @m_error-epilogue.code()
	store %oop %r62, %oop* %t7
	%r63 = inttoptr %word 0 to %oop
	%r67 = ptrtoint %oop %r63 to %word
	%r66 = ptrtoint %oop %r62 to %word
	%r65 = icmp eq %word %r67, %r66
	%r64 = inttoptr i1 %r65 to %oop
	%r69 = ptrtoint %oop %r64 to %word
	%r68 = icmp ne %word %r69, 0
	br i1 %r68, label %L9, label %L7
L9:
	br label %L7
L7:
	%r70 = load %oop, %oop* %t7
	%r71 = inttoptr %word 1 to %oop
	%r72 = load %oop, %oop* %t4
	%r76 = ptrtoint %oop %r72 to %word
	%r75 = ptrtoint %oop %r71 to %word
	%r74 = ashr %word %r76, %r75
	%r73 = inttoptr %word %r74 to %oop
	store %oop %r73, %oop* %t4
	%r77 = inttoptr %word 1 to %oop
	%r78 = load %oop, %oop* %t2
	%r82 = bitcast %oop %r78 to [0 x %oop]*
	%r81 = ptrtoint %oop %r77 to %word
	%r80 = getelementptr [0 x %oop], [0 x %oop]* %r82, %word 0, %word %r81
	%r79 = load %oop, %oop* %r80
	store %oop %r79, %oop* %t2
	store %oop %r79, %oop* %t6
	br label %L6
L5:
	%r83 = getelementptr %"<string>", %"<string>"* @m_ostr1881, i32 0, i32 1
	%r84 = bitcast %word* %r83 to %oop
	%r85 = load %oop, %oop* %t0
	%r86 = call %oop @"m_%not-enough-arguments.code"(%oop %r84, %oop %r85)
	store %oop %r86, %oop* %t6
	br label %L6
L6:
	%r87 = load %oop, %oop* %t6
	%r88 = load %oop, %oop* %t2
	%r89 = call %oop @"m_pair?.code"(%oop %r88)
	%r91 = ptrtoint %oop %r89 to %word
	%r90 = icmp ne %word %r91, 0
	br i1 %r90, label %L10, label %L11
L10:
	%r92 = inttoptr %word 0 to %oop
	%r93 = load %oop, %oop* %t2
	%r97 = bitcast %oop %r93 to [0 x %oop]*
	%r96 = ptrtoint %oop %r92 to %word
	%r95 = getelementptr [0 x %oop], [0 x %oop]* %r97, %word 0, %word %r96
	%r94 = load %oop, %oop* %r95
	store %oop %r94, %oop* %t5
	%r98 = inttoptr %word 1 to %oop
	%r99 = load %oop, %oop* %t2
	%r103 = bitcast %oop %r99 to [0 x %oop]*
	%r102 = ptrtoint %oop %r98 to %word
	%r101 = getelementptr [0 x %oop], [0 x %oop]* %r103, %word 0, %word %r102
	%r100 = load %oop, %oop* %r101
	store %oop %r100, %oop* %t2
	store %oop %r100, %oop* %t6
	br label %L12
L11:
	%r104 = getelementptr %"<string>", %"<string>"* @m_ostr1883, i32 0, i32 1
	%r105 = bitcast %word* %r104 to %oop
	%r106 = load %oop, %oop* %t0
	%r107 = call %oop @"m_%not-enough-arguments.code"(%oop %r105, %oop %r106)
	store %oop %r107, %oop* %t6
	br label %L12
L12:
	%r108 = load %oop, %oop* %t6
	%r109 = load %oop, %oop* %t2
	%r111 = ptrtoint %oop %r109 to %word
	%r110 = icmp ne %word %r111, 0
	br i1 %r110, label %L13, label %L14
L13:
	%r112 = getelementptr %"<string>", %"<string>"* @m_ostr1885, i32 0, i32 1
	%r113 = bitcast %word* %r112 to %oop
	%r114 = load %oop, %oop* %t0
	%r115 = call %oop @"m_%too-many-arguments.code"(%oop %r113, %oop %r114)
	store %oop %r115, %oop* %t6
	br label %L15
L14:
	%r116 = inttoptr %word 0 to %oop
	store %oop %r116, %oop* %t6
	br label %L15
L15:
	%r117 = load %oop, %oop* %t6
	%r118 = inttoptr %word 0 to %oop
	%r119 = load %oop, %oop* %t5
	%r120 = load %oop, %oop* %t4
	%r121 = load %oop, %oop* %t3
	%r125 = bitcast %oop %r121 to [0 x %oop]*
	%r124 = ptrtoint %oop %r120 to %word
	%r123 = getelementptr [0 x %oop], [0 x %oop]* %r125, %word 0, %word %r124
	store %oop %r119, %oop* %r123
	%r122 = bitcast %oop %r119 to %oop
	ret %oop %r122
}
@m_cstr1886 = private unnamed_addr constant [26 x i8] c"set-oop-at/evaluator-stub\00"
@m_ostr1887 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 51, %oop bitcast ([26 x i8]* @m_cstr1886 to %oop) }
@"m_set-oop-at/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_set-oop-at/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1887 }
@m_cstr1888 = private unnamed_addr constant [11 x i8] c"copy-bytes\00"
@m_ostr1889 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr1888 to %oop) }
@m_cstr1890 = private unnamed_addr constant [11 x i8] c"copy-bytes\00"
@m_ostr1891 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr1890 to %oop) }
@m_cstr1892 = private unnamed_addr constant [11 x i8] c"copy-bytes\00"
@m_ostr1893 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr1892 to %oop) }
@m_cstr1894 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1895 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1894 to %oop) }
@m_cstr1896 = private unnamed_addr constant [6 x i8] c"count\00"
@m_ostr1897 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr1896 to %oop) }
@m_cstr1898 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1899 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1898 to %oop) }
@m_cstr1900 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr1901 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1900 to %oop) }
@m_cstr1902 = private unnamed_addr constant [11 x i8] c"copy-bytes\00"
@m_ostr1903 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr1902 to %oop) }
@m_cstr1904 = private unnamed_addr constant [11 x i8] c"copy-bytes\00"
@m_ostr1905 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr1904 to %oop) }
define %oop @"m_copy-bytes/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t5 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t7 = alloca %oop
	%t6 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = inttoptr %word 0 to %oop
	store %oop %r4, %oop* %t5
	%r5 = load %oop, %oop* %t2
	%r6 = call %oop @"m_pair?.code"(%oop %r5)
	%r8 = ptrtoint %oop %r6 to %word
	%r7 = icmp ne %word %r8, 0
	br i1 %r7, label %L1, label %L2
L1:
	%r9 = inttoptr %word 0 to %oop
	%r10 = load %oop, %oop* %t2
	%r14 = bitcast %oop %r10 to [0 x %oop]*
	%r13 = ptrtoint %oop %r9 to %word
	%r12 = getelementptr [0 x %oop], [0 x %oop]* %r14, %word 0, %word %r13
	%r11 = load %oop, %oop* %r12
	store %oop %r11, %oop* %t3
	%r15 = inttoptr %word 1 to %oop
	%r16 = load %oop, %oop* %t2
	%r20 = bitcast %oop %r16 to [0 x %oop]*
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = getelementptr [0 x %oop], [0 x %oop]* %r20, %word 0, %word %r19
	%r17 = load %oop, %oop* %r18
	store %oop %r17, %oop* %t2
	store %oop %r17, %oop* %t6
	br label %L3
L2:
	%r21 = getelementptr %"<string>", %"<string>"* @m_ostr1889, i32 0, i32 1
	%r22 = bitcast %word* %r21 to %oop
	%r23 = load %oop, %oop* %t0
	%r24 = call %oop @"m_%not-enough-arguments.code"(%oop %r22, %oop %r23)
	store %oop %r24, %oop* %t6
	br label %L3
L3:
	%r25 = load %oop, %oop* %t6
	%r26 = load %oop, %oop* %t2
	%r27 = call %oop @"m_pair?.code"(%oop %r26)
	%r29 = ptrtoint %oop %r27 to %word
	%r28 = icmp ne %word %r29, 0
	br i1 %r28, label %L4, label %L5
L4:
	%r30 = inttoptr %word 0 to %oop
	%r31 = load %oop, %oop* %t2
	%r35 = bitcast %oop %r31 to [0 x %oop]*
	%r34 = ptrtoint %oop %r30 to %word
	%r33 = getelementptr [0 x %oop], [0 x %oop]* %r35, %word 0, %word %r34
	%r32 = load %oop, %oop* %r33
	store %oop %r32, %oop* %t4
	%r36 = inttoptr %word 1 to %oop
	%r37 = load %oop, %oop* %t2
	%r41 = bitcast %oop %r37 to [0 x %oop]*
	%r40 = ptrtoint %oop %r36 to %word
	%r39 = getelementptr [0 x %oop], [0 x %oop]* %r41, %word 0, %word %r40
	%r38 = load %oop, %oop* %r39
	store %oop %r38, %oop* %t2
	store %oop %r38, %oop* %t6
	br label %L6
L5:
	%r42 = getelementptr %"<string>", %"<string>"* @m_ostr1891, i32 0, i32 1
	%r43 = bitcast %word* %r42 to %oop
	%r44 = load %oop, %oop* %t0
	%r45 = call %oop @"m_%not-enough-arguments.code"(%oop %r43, %oop %r44)
	store %oop %r45, %oop* %t6
	br label %L6
L6:
	%r46 = load %oop, %oop* %t6
	%r47 = load %oop, %oop* %t2
	%r48 = call %oop @"m_pair?.code"(%oop %r47)
	%r50 = ptrtoint %oop %r48 to %word
	%r49 = icmp ne %word %r50, 0
	br i1 %r49, label %L7, label %L8
L7:
	%r51 = inttoptr %word 0 to %oop
	%r52 = load %oop, %oop* %t2
	%r56 = bitcast %oop %r52 to [0 x %oop]*
	%r55 = ptrtoint %oop %r51 to %word
	%r54 = getelementptr [0 x %oop], [0 x %oop]* %r56, %word 0, %word %r55
	%r53 = load %oop, %oop* %r54
	store %oop %r53, %oop* %t5
	%r57 = inttoptr %word 0 to %oop
	store %oop %r57, %oop* %t7
	%r58 = load %oop, %oop* %t5
	%r59 = call %oop @"m_long?.code"(%oop %r58)
	store %oop %r59, %oop* %t7
	%r60 = inttoptr %word 0 to %oop
	%r64 = ptrtoint %oop %r60 to %word
	%r63 = ptrtoint %oop %r59 to %word
	%r62 = icmp eq %word %r64, %r63
	%r61 = inttoptr i1 %r62 to %oop
	%r66 = ptrtoint %oop %r61 to %word
	%r65 = icmp ne %word %r66, 0
	br i1 %r65, label %L11, label %L10
L11:
	%r67 = call %oop @m_error-prologue.code()
	%r68 = getelementptr %"<string>", %"<string>"* @m_ostr1893, i32 0, i32 1
	%r69 = bitcast %word* %r68 to %oop
	%r70 = call %oop @"m_%error.code"(%oop %r69)
	%r71 = getelementptr %"<string>", %"<string>"* @m_ostr1895, i32 0, i32 1
	%r72 = bitcast %word* %r71 to %oop
	%r73 = call %oop @"m_%error.code"(%oop %r72)
	%r74 = getelementptr %"<string>", %"<string>"* @m_ostr1897, i32 0, i32 1
	%r75 = bitcast %word* %r74 to %oop
	%r76 = call %oop @"m_%error.code"(%oop %r75)
	%r77 = getelementptr %"<string>", %"<string>"* @m_ostr1899, i32 0, i32 1
	%r78 = bitcast %word* %r77 to %oop
	%r79 = call %oop @"m_%error.code"(%oop %r78)
	%r80 = getelementptr %"<string>", %"<string>"* @m_ostr1901, i32 0, i32 1
	%r81 = bitcast %word* %r80 to %oop
	%r82 = call %oop @"m_%error.code"(%oop %r81)
	%r83 = call %oop @m_error-epilogue.code()
	store %oop %r83, %oop* %t7
	%r84 = inttoptr %word 0 to %oop
	%r88 = ptrtoint %oop %r84 to %word
	%r87 = ptrtoint %oop %r83 to %word
	%r86 = icmp eq %word %r88, %r87
	%r85 = inttoptr i1 %r86 to %oop
	%r90 = ptrtoint %oop %r85 to %word
	%r89 = icmp ne %word %r90, 0
	br i1 %r89, label %L12, label %L10
L12:
	br label %L10
L10:
	%r91 = load %oop, %oop* %t7
	%r92 = inttoptr %word 1 to %oop
	%r93 = load %oop, %oop* %t5
	%r97 = ptrtoint %oop %r93 to %word
	%r96 = ptrtoint %oop %r92 to %word
	%r95 = ashr %word %r97, %r96
	%r94 = inttoptr %word %r95 to %oop
	store %oop %r94, %oop* %t5
	%r98 = inttoptr %word 1 to %oop
	%r99 = load %oop, %oop* %t2
	%r103 = bitcast %oop %r99 to [0 x %oop]*
	%r102 = ptrtoint %oop %r98 to %word
	%r101 = getelementptr [0 x %oop], [0 x %oop]* %r103, %word 0, %word %r102
	%r100 = load %oop, %oop* %r101
	store %oop %r100, %oop* %t2
	store %oop %r100, %oop* %t6
	br label %L9
L8:
	%r104 = getelementptr %"<string>", %"<string>"* @m_ostr1903, i32 0, i32 1
	%r105 = bitcast %word* %r104 to %oop
	%r106 = load %oop, %oop* %t0
	%r107 = call %oop @"m_%not-enough-arguments.code"(%oop %r105, %oop %r106)
	store %oop %r107, %oop* %t6
	br label %L9
L9:
	%r108 = load %oop, %oop* %t6
	%r109 = load %oop, %oop* %t2
	%r111 = ptrtoint %oop %r109 to %word
	%r110 = icmp ne %word %r111, 0
	br i1 %r110, label %L13, label %L14
L13:
	%r112 = getelementptr %"<string>", %"<string>"* @m_ostr1905, i32 0, i32 1
	%r113 = bitcast %word* %r112 to %oop
	%r114 = load %oop, %oop* %t0
	%r115 = call %oop @"m_%too-many-arguments.code"(%oop %r113, %oop %r114)
	store %oop %r115, %oop* %t6
	br label %L15
L14:
	%r116 = inttoptr %word 0 to %oop
	store %oop %r116, %oop* %t6
	br label %L15
L15:
	%r117 = load %oop, %oop* %t6
	%r118 = inttoptr %word 0 to %oop
	store %oop %r118, %oop* %t6
	%r119 = load %oop, %oop* %t5
	store %oop %r119, %oop* %t7
	br label %L17
L16:
	%r120 = load %oop, %oop* %t6
	%r121 = load %oop, %oop* %t3
	%r126 = bitcast %oop %r121 to [0 x i8]*
	%r125 = ptrtoint %oop %r120 to %word
	%r124 = getelementptr [0 x i8], [0 x i8]* %r126, %word 0, %word %r125
	%r123 = load i8, i8* %r124
	%r122 = inttoptr i8 %r123 to %oop
	%r127 = load %oop, %oop* %t6
	%r128 = load %oop, %oop* %t4
	%r134 = bitcast %oop %r128 to [0 x i8]*
	%r133 = ptrtoint %oop %r127 to %word
	%r132 = getelementptr [0 x i8], [0 x i8]* %r134, %word 0, %word %r133
	%r131 = ptrtoint %oop %r122 to i8
	store i8 %r131, i8* %r132
	%r130 = zext i8 %r131 to %word
	%r129 = inttoptr %word %r130 to %oop
	%r135 = inttoptr %word 1 to %oop
	%r136 = load %oop, %oop* %t6
	%r140 = ptrtoint %oop %r136 to %word
	%r139 = ptrtoint %oop %r135 to %word
	%r138 = add %word %r140, %r139
	%r137 = inttoptr %word %r138 to %oop
	store %oop %r137, %oop* %t6
	br label %L17
L17:
	%r141 = load %oop, %oop* %t7
	%r142 = load %oop, %oop* %t6
	%r146 = ptrtoint %oop %r142 to %word
	%r145 = ptrtoint %oop %r141 to %word
	%r144 = icmp eq %word %r146, %r145
	%r143 = inttoptr i1 %r144 to %oop
	%r150 = ptrtoint %oop %r143 to %word
	%r149 = icmp eq %word %r150, 0
	%r148 = zext i1 %r149 to %word
	%r147 = inttoptr %word %r148 to %oop
	%r152 = ptrtoint %oop %r147 to %word
	%r151 = icmp ne %word %r152, 0
	br i1 %r151, label %L16, label %L18
L18:
	ret %oop %r147
}
@m_cstr1906 = private unnamed_addr constant [26 x i8] c"copy-bytes/evaluator-stub\00"
@m_ostr1907 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 51, %oop bitcast ([26 x i8]* @m_cstr1906 to %oop) }
@"m_copy-bytes/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_copy-bytes/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1907 }
@m_cstr1908 = private unnamed_addr constant [8 x i8] c"byte-at\00"
@m_ostr1909 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1908 to %oop) }
@m_cstr1910 = private unnamed_addr constant [8 x i8] c"byte-at\00"
@m_ostr1911 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1910 to %oop) }
@m_cstr1912 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1913 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1912 to %oop) }
@m_cstr1914 = private unnamed_addr constant [6 x i8] c"index\00"
@m_ostr1915 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr1914 to %oop) }
@m_cstr1916 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1917 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1916 to %oop) }
@m_cstr1918 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr1919 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1918 to %oop) }
@m_cstr1920 = private unnamed_addr constant [8 x i8] c"byte-at\00"
@m_ostr1921 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1920 to %oop) }
@m_cstr1922 = private unnamed_addr constant [8 x i8] c"byte-at\00"
@m_ostr1923 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1922 to %oop) }
define %oop @"m_byte-at/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = load %oop, %oop* %t2
	%r5 = call %oop @"m_pair?.code"(%oop %r4)
	%r7 = ptrtoint %oop %r5 to %word
	%r6 = icmp ne %word %r7, 0
	br i1 %r6, label %L1, label %L2
L1:
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t2
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	%r10 = load %oop, %oop* %r11
	store %oop %r10, %oop* %t3
	%r14 = inttoptr %word 1 to %oop
	%r15 = load %oop, %oop* %t2
	%r19 = bitcast %oop %r15 to [0 x %oop]*
	%r18 = ptrtoint %oop %r14 to %word
	%r17 = getelementptr [0 x %oop], [0 x %oop]* %r19, %word 0, %word %r18
	%r16 = load %oop, %oop* %r17
	store %oop %r16, %oop* %t2
	store %oop %r16, %oop* %t5
	br label %L3
L2:
	%r20 = getelementptr %"<string>", %"<string>"* @m_ostr1909, i32 0, i32 1
	%r21 = bitcast %word* %r20 to %oop
	%r22 = load %oop, %oop* %t0
	%r23 = call %oop @"m_%not-enough-arguments.code"(%oop %r21, %oop %r22)
	store %oop %r23, %oop* %t5
	br label %L3
L3:
	%r24 = load %oop, %oop* %t5
	%r25 = load %oop, %oop* %t2
	%r26 = call %oop @"m_pair?.code"(%oop %r25)
	%r28 = ptrtoint %oop %r26 to %word
	%r27 = icmp ne %word %r28, 0
	br i1 %r27, label %L4, label %L5
L4:
	%r29 = inttoptr %word 0 to %oop
	%r30 = load %oop, %oop* %t2
	%r34 = bitcast %oop %r30 to [0 x %oop]*
	%r33 = ptrtoint %oop %r29 to %word
	%r32 = getelementptr [0 x %oop], [0 x %oop]* %r34, %word 0, %word %r33
	%r31 = load %oop, %oop* %r32
	store %oop %r31, %oop* %t4
	%r35 = inttoptr %word 0 to %oop
	store %oop %r35, %oop* %t6
	%r36 = load %oop, %oop* %t4
	%r37 = call %oop @"m_long?.code"(%oop %r36)
	store %oop %r37, %oop* %t6
	%r38 = inttoptr %word 0 to %oop
	%r42 = ptrtoint %oop %r38 to %word
	%r41 = ptrtoint %oop %r37 to %word
	%r40 = icmp eq %word %r42, %r41
	%r39 = inttoptr i1 %r40 to %oop
	%r44 = ptrtoint %oop %r39 to %word
	%r43 = icmp ne %word %r44, 0
	br i1 %r43, label %L8, label %L7
L8:
	%r45 = call %oop @m_error-prologue.code()
	%r46 = getelementptr %"<string>", %"<string>"* @m_ostr1911, i32 0, i32 1
	%r47 = bitcast %word* %r46 to %oop
	%r48 = call %oop @"m_%error.code"(%oop %r47)
	%r49 = getelementptr %"<string>", %"<string>"* @m_ostr1913, i32 0, i32 1
	%r50 = bitcast %word* %r49 to %oop
	%r51 = call %oop @"m_%error.code"(%oop %r50)
	%r52 = getelementptr %"<string>", %"<string>"* @m_ostr1915, i32 0, i32 1
	%r53 = bitcast %word* %r52 to %oop
	%r54 = call %oop @"m_%error.code"(%oop %r53)
	%r55 = getelementptr %"<string>", %"<string>"* @m_ostr1917, i32 0, i32 1
	%r56 = bitcast %word* %r55 to %oop
	%r57 = call %oop @"m_%error.code"(%oop %r56)
	%r58 = getelementptr %"<string>", %"<string>"* @m_ostr1919, i32 0, i32 1
	%r59 = bitcast %word* %r58 to %oop
	%r60 = call %oop @"m_%error.code"(%oop %r59)
	%r61 = call %oop @m_error-epilogue.code()
	store %oop %r61, %oop* %t6
	%r62 = inttoptr %word 0 to %oop
	%r66 = ptrtoint %oop %r62 to %word
	%r65 = ptrtoint %oop %r61 to %word
	%r64 = icmp eq %word %r66, %r65
	%r63 = inttoptr i1 %r64 to %oop
	%r68 = ptrtoint %oop %r63 to %word
	%r67 = icmp ne %word %r68, 0
	br i1 %r67, label %L9, label %L7
L9:
	br label %L7
L7:
	%r69 = load %oop, %oop* %t6
	%r70 = inttoptr %word 1 to %oop
	%r71 = load %oop, %oop* %t4
	%r75 = ptrtoint %oop %r71 to %word
	%r74 = ptrtoint %oop %r70 to %word
	%r73 = ashr %word %r75, %r74
	%r72 = inttoptr %word %r73 to %oop
	store %oop %r72, %oop* %t4
	%r76 = inttoptr %word 1 to %oop
	%r77 = load %oop, %oop* %t2
	%r81 = bitcast %oop %r77 to [0 x %oop]*
	%r80 = ptrtoint %oop %r76 to %word
	%r79 = getelementptr [0 x %oop], [0 x %oop]* %r81, %word 0, %word %r80
	%r78 = load %oop, %oop* %r79
	store %oop %r78, %oop* %t2
	store %oop %r78, %oop* %t5
	br label %L6
L5:
	%r82 = getelementptr %"<string>", %"<string>"* @m_ostr1921, i32 0, i32 1
	%r83 = bitcast %word* %r82 to %oop
	%r84 = load %oop, %oop* %t0
	%r85 = call %oop @"m_%not-enough-arguments.code"(%oop %r83, %oop %r84)
	store %oop %r85, %oop* %t5
	br label %L6
L6:
	%r86 = load %oop, %oop* %t5
	%r87 = load %oop, %oop* %t2
	%r89 = ptrtoint %oop %r87 to %word
	%r88 = icmp ne %word %r89, 0
	br i1 %r88, label %L10, label %L11
L10:
	%r90 = getelementptr %"<string>", %"<string>"* @m_ostr1923, i32 0, i32 1
	%r91 = bitcast %word* %r90 to %oop
	%r92 = load %oop, %oop* %t0
	%r93 = call %oop @"m_%too-many-arguments.code"(%oop %r91, %oop %r92)
	store %oop %r93, %oop* %t5
	br label %L12
L11:
	%r94 = inttoptr %word 0 to %oop
	store %oop %r94, %oop* %t5
	br label %L12
L12:
	%r95 = load %oop, %oop* %t5
	%r96 = inttoptr %word 1 to %oop
	%r97 = inttoptr %word 1 to %oop
	%r98 = load %oop, %oop* %t4
	%r99 = load %oop, %oop* %t3
	%r104 = bitcast %oop %r99 to [0 x i8]*
	%r103 = ptrtoint %oop %r98 to %word
	%r102 = getelementptr [0 x i8], [0 x i8]* %r104, %word 0, %word %r103
	%r101 = load i8, i8* %r102
	%r100 = inttoptr i8 %r101 to %oop
	%r108 = ptrtoint %oop %r100 to %word
	%r107 = ptrtoint %oop %r97 to %word
	%r106 = shl %word %r108, %r107
	%r105 = inttoptr %word %r106 to %oop
	%r112 = ptrtoint %oop %r105 to %word
	%r111 = ptrtoint %oop %r96 to %word
	%r110 = or %word %r112, %r111
	%r109 = inttoptr %word %r110 to %oop
	ret %oop %r109
}
@m_cstr1924 = private unnamed_addr constant [23 x i8] c"byte-at/evaluator-stub\00"
@m_ostr1925 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 45, %oop bitcast ([23 x i8]* @m_cstr1924 to %oop) }
@"m_byte-at/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_byte-at/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1925 }
@m_cstr1926 = private unnamed_addr constant [12 x i8] c"set-byte-at\00"
@m_ostr1927 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr1926 to %oop) }
@m_cstr1928 = private unnamed_addr constant [12 x i8] c"set-byte-at\00"
@m_ostr1929 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr1928 to %oop) }
@m_cstr1930 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1931 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1930 to %oop) }
@m_cstr1932 = private unnamed_addr constant [6 x i8] c"index\00"
@m_ostr1933 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr1932 to %oop) }
@m_cstr1934 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1935 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1934 to %oop) }
@m_cstr1936 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr1937 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1936 to %oop) }
@m_cstr1938 = private unnamed_addr constant [12 x i8] c"set-byte-at\00"
@m_ostr1939 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr1938 to %oop) }
@m_cstr1940 = private unnamed_addr constant [12 x i8] c"set-byte-at\00"
@m_ostr1941 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr1940 to %oop) }
@m_cstr1942 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1943 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1942 to %oop) }
@m_cstr1944 = private unnamed_addr constant [6 x i8] c"value\00"
@m_ostr1945 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr1944 to %oop) }
@m_cstr1946 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1947 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1946 to %oop) }
@m_cstr1948 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr1949 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr1948 to %oop) }
@m_cstr1950 = private unnamed_addr constant [12 x i8] c"set-byte-at\00"
@m_ostr1951 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr1950 to %oop) }
@m_cstr1952 = private unnamed_addr constant [12 x i8] c"set-byte-at\00"
@m_ostr1953 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr1952 to %oop) }
define %oop @"m_set-byte-at/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t5 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = inttoptr %word 0 to %oop
	store %oop %r4, %oop* %t5
	%r5 = load %oop, %oop* %t2
	%r6 = call %oop @"m_pair?.code"(%oop %r5)
	%r8 = ptrtoint %oop %r6 to %word
	%r7 = icmp ne %word %r8, 0
	br i1 %r7, label %L1, label %L2
L1:
	%r9 = inttoptr %word 0 to %oop
	%r10 = load %oop, %oop* %t2
	%r14 = bitcast %oop %r10 to [0 x %oop]*
	%r13 = ptrtoint %oop %r9 to %word
	%r12 = getelementptr [0 x %oop], [0 x %oop]* %r14, %word 0, %word %r13
	%r11 = load %oop, %oop* %r12
	store %oop %r11, %oop* %t3
	%r15 = inttoptr %word 1 to %oop
	%r16 = load %oop, %oop* %t2
	%r20 = bitcast %oop %r16 to [0 x %oop]*
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = getelementptr [0 x %oop], [0 x %oop]* %r20, %word 0, %word %r19
	%r17 = load %oop, %oop* %r18
	store %oop %r17, %oop* %t2
	store %oop %r17, %oop* %t6
	br label %L3
L2:
	%r21 = getelementptr %"<string>", %"<string>"* @m_ostr1927, i32 0, i32 1
	%r22 = bitcast %word* %r21 to %oop
	%r23 = load %oop, %oop* %t0
	%r24 = call %oop @"m_%not-enough-arguments.code"(%oop %r22, %oop %r23)
	store %oop %r24, %oop* %t6
	br label %L3
L3:
	%r25 = load %oop, %oop* %t6
	%r26 = load %oop, %oop* %t2
	%r27 = call %oop @"m_pair?.code"(%oop %r26)
	%r29 = ptrtoint %oop %r27 to %word
	%r28 = icmp ne %word %r29, 0
	br i1 %r28, label %L4, label %L5
L4:
	%r30 = inttoptr %word 0 to %oop
	%r31 = load %oop, %oop* %t2
	%r35 = bitcast %oop %r31 to [0 x %oop]*
	%r34 = ptrtoint %oop %r30 to %word
	%r33 = getelementptr [0 x %oop], [0 x %oop]* %r35, %word 0, %word %r34
	%r32 = load %oop, %oop* %r33
	store %oop %r32, %oop* %t4
	%r36 = inttoptr %word 0 to %oop
	store %oop %r36, %oop* %t7
	%r37 = load %oop, %oop* %t4
	%r38 = call %oop @"m_long?.code"(%oop %r37)
	store %oop %r38, %oop* %t7
	%r39 = inttoptr %word 0 to %oop
	%r43 = ptrtoint %oop %r39 to %word
	%r42 = ptrtoint %oop %r38 to %word
	%r41 = icmp eq %word %r43, %r42
	%r40 = inttoptr i1 %r41 to %oop
	%r45 = ptrtoint %oop %r40 to %word
	%r44 = icmp ne %word %r45, 0
	br i1 %r44, label %L8, label %L7
L8:
	%r46 = call %oop @m_error-prologue.code()
	%r47 = getelementptr %"<string>", %"<string>"* @m_ostr1929, i32 0, i32 1
	%r48 = bitcast %word* %r47 to %oop
	%r49 = call %oop @"m_%error.code"(%oop %r48)
	%r50 = getelementptr %"<string>", %"<string>"* @m_ostr1931, i32 0, i32 1
	%r51 = bitcast %word* %r50 to %oop
	%r52 = call %oop @"m_%error.code"(%oop %r51)
	%r53 = getelementptr %"<string>", %"<string>"* @m_ostr1933, i32 0, i32 1
	%r54 = bitcast %word* %r53 to %oop
	%r55 = call %oop @"m_%error.code"(%oop %r54)
	%r56 = getelementptr %"<string>", %"<string>"* @m_ostr1935, i32 0, i32 1
	%r57 = bitcast %word* %r56 to %oop
	%r58 = call %oop @"m_%error.code"(%oop %r57)
	%r59 = getelementptr %"<string>", %"<string>"* @m_ostr1937, i32 0, i32 1
	%r60 = bitcast %word* %r59 to %oop
	%r61 = call %oop @"m_%error.code"(%oop %r60)
	%r62 = call %oop @m_error-epilogue.code()
	store %oop %r62, %oop* %t7
	%r63 = inttoptr %word 0 to %oop
	%r67 = ptrtoint %oop %r63 to %word
	%r66 = ptrtoint %oop %r62 to %word
	%r65 = icmp eq %word %r67, %r66
	%r64 = inttoptr i1 %r65 to %oop
	%r69 = ptrtoint %oop %r64 to %word
	%r68 = icmp ne %word %r69, 0
	br i1 %r68, label %L9, label %L7
L9:
	br label %L7
L7:
	%r70 = load %oop, %oop* %t7
	%r71 = inttoptr %word 1 to %oop
	%r72 = load %oop, %oop* %t4
	%r76 = ptrtoint %oop %r72 to %word
	%r75 = ptrtoint %oop %r71 to %word
	%r74 = ashr %word %r76, %r75
	%r73 = inttoptr %word %r74 to %oop
	store %oop %r73, %oop* %t4
	%r77 = inttoptr %word 1 to %oop
	%r78 = load %oop, %oop* %t2
	%r82 = bitcast %oop %r78 to [0 x %oop]*
	%r81 = ptrtoint %oop %r77 to %word
	%r80 = getelementptr [0 x %oop], [0 x %oop]* %r82, %word 0, %word %r81
	%r79 = load %oop, %oop* %r80
	store %oop %r79, %oop* %t2
	store %oop %r79, %oop* %t6
	br label %L6
L5:
	%r83 = getelementptr %"<string>", %"<string>"* @m_ostr1939, i32 0, i32 1
	%r84 = bitcast %word* %r83 to %oop
	%r85 = load %oop, %oop* %t0
	%r86 = call %oop @"m_%not-enough-arguments.code"(%oop %r84, %oop %r85)
	store %oop %r86, %oop* %t6
	br label %L6
L6:
	%r87 = load %oop, %oop* %t6
	%r88 = load %oop, %oop* %t2
	%r89 = call %oop @"m_pair?.code"(%oop %r88)
	%r91 = ptrtoint %oop %r89 to %word
	%r90 = icmp ne %word %r91, 0
	br i1 %r90, label %L10, label %L11
L10:
	%r92 = inttoptr %word 0 to %oop
	%r93 = load %oop, %oop* %t2
	%r97 = bitcast %oop %r93 to [0 x %oop]*
	%r96 = ptrtoint %oop %r92 to %word
	%r95 = getelementptr [0 x %oop], [0 x %oop]* %r97, %word 0, %word %r96
	%r94 = load %oop, %oop* %r95
	store %oop %r94, %oop* %t5
	%r98 = inttoptr %word 0 to %oop
	store %oop %r98, %oop* %t7
	%r99 = load %oop, %oop* %t5
	%r100 = call %oop @"m_long?.code"(%oop %r99)
	store %oop %r100, %oop* %t7
	%r101 = inttoptr %word 0 to %oop
	%r105 = ptrtoint %oop %r101 to %word
	%r104 = ptrtoint %oop %r100 to %word
	%r103 = icmp eq %word %r105, %r104
	%r102 = inttoptr i1 %r103 to %oop
	%r107 = ptrtoint %oop %r102 to %word
	%r106 = icmp ne %word %r107, 0
	br i1 %r106, label %L14, label %L13
L14:
	%r108 = call %oop @m_error-prologue.code()
	%r109 = getelementptr %"<string>", %"<string>"* @m_ostr1941, i32 0, i32 1
	%r110 = bitcast %word* %r109 to %oop
	%r111 = call %oop @"m_%error.code"(%oop %r110)
	%r112 = getelementptr %"<string>", %"<string>"* @m_ostr1943, i32 0, i32 1
	%r113 = bitcast %word* %r112 to %oop
	%r114 = call %oop @"m_%error.code"(%oop %r113)
	%r115 = getelementptr %"<string>", %"<string>"* @m_ostr1945, i32 0, i32 1
	%r116 = bitcast %word* %r115 to %oop
	%r117 = call %oop @"m_%error.code"(%oop %r116)
	%r118 = getelementptr %"<string>", %"<string>"* @m_ostr1947, i32 0, i32 1
	%r119 = bitcast %word* %r118 to %oop
	%r120 = call %oop @"m_%error.code"(%oop %r119)
	%r121 = getelementptr %"<string>", %"<string>"* @m_ostr1949, i32 0, i32 1
	%r122 = bitcast %word* %r121 to %oop
	%r123 = call %oop @"m_%error.code"(%oop %r122)
	%r124 = call %oop @m_error-epilogue.code()
	store %oop %r124, %oop* %t7
	%r125 = inttoptr %word 0 to %oop
	%r129 = ptrtoint %oop %r125 to %word
	%r128 = ptrtoint %oop %r124 to %word
	%r127 = icmp eq %word %r129, %r128
	%r126 = inttoptr i1 %r127 to %oop
	%r131 = ptrtoint %oop %r126 to %word
	%r130 = icmp ne %word %r131, 0
	br i1 %r130, label %L15, label %L13
L15:
	br label %L13
L13:
	%r132 = load %oop, %oop* %t7
	%r133 = inttoptr %word 1 to %oop
	%r134 = load %oop, %oop* %t5
	%r138 = ptrtoint %oop %r134 to %word
	%r137 = ptrtoint %oop %r133 to %word
	%r136 = ashr %word %r138, %r137
	%r135 = inttoptr %word %r136 to %oop
	store %oop %r135, %oop* %t5
	%r139 = inttoptr %word 1 to %oop
	%r140 = load %oop, %oop* %t2
	%r144 = bitcast %oop %r140 to [0 x %oop]*
	%r143 = ptrtoint %oop %r139 to %word
	%r142 = getelementptr [0 x %oop], [0 x %oop]* %r144, %word 0, %word %r143
	%r141 = load %oop, %oop* %r142
	store %oop %r141, %oop* %t2
	store %oop %r141, %oop* %t6
	br label %L12
L11:
	%r145 = getelementptr %"<string>", %"<string>"* @m_ostr1951, i32 0, i32 1
	%r146 = bitcast %word* %r145 to %oop
	%r147 = load %oop, %oop* %t0
	%r148 = call %oop @"m_%not-enough-arguments.code"(%oop %r146, %oop %r147)
	store %oop %r148, %oop* %t6
	br label %L12
L12:
	%r149 = load %oop, %oop* %t6
	%r150 = load %oop, %oop* %t2
	%r152 = ptrtoint %oop %r150 to %word
	%r151 = icmp ne %word %r152, 0
	br i1 %r151, label %L16, label %L17
L16:
	%r153 = getelementptr %"<string>", %"<string>"* @m_ostr1953, i32 0, i32 1
	%r154 = bitcast %word* %r153 to %oop
	%r155 = load %oop, %oop* %t0
	%r156 = call %oop @"m_%too-many-arguments.code"(%oop %r154, %oop %r155)
	store %oop %r156, %oop* %t6
	br label %L18
L17:
	%r157 = inttoptr %word 0 to %oop
	store %oop %r157, %oop* %t6
	br label %L18
L18:
	%r158 = load %oop, %oop* %t6
	%r159 = inttoptr %word 0 to %oop
	%r160 = inttoptr %word 1 to %oop
	%r161 = inttoptr %word 1 to %oop
	%r162 = load %oop, %oop* %t5
	%r163 = load %oop, %oop* %t4
	%r164 = load %oop, %oop* %t3
	%r170 = bitcast %oop %r164 to [0 x i8]*
	%r169 = ptrtoint %oop %r163 to %word
	%r168 = getelementptr [0 x i8], [0 x i8]* %r170, %word 0, %word %r169
	%r167 = ptrtoint %oop %r162 to i8
	store i8 %r167, i8* %r168
	%r166 = zext i8 %r167 to %word
	%r165 = inttoptr %word %r166 to %oop
	%r174 = ptrtoint %oop %r165 to %word
	%r173 = ptrtoint %oop %r161 to %word
	%r172 = shl %word %r174, %r173
	%r171 = inttoptr %word %r172 to %oop
	%r178 = ptrtoint %oop %r171 to %word
	%r177 = ptrtoint %oop %r160 to %word
	%r176 = or %word %r178, %r177
	%r175 = inttoptr %word %r176 to %oop
	ret %oop %r175
}
@m_cstr1954 = private unnamed_addr constant [27 x i8] c"set-byte-at/evaluator-stub\00"
@m_ostr1955 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 53, %oop bitcast ([27 x i8]* @m_cstr1954 to %oop) }
@"m_set-byte-at/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_set-byte-at/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1955 }
@m_cstr1956 = private unnamed_addr constant [11 x i8] c"address-of\00"
@m_ostr1957 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr1956 to %oop) }
@m_cstr1958 = private unnamed_addr constant [11 x i8] c"address-of\00"
@m_ostr1959 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 21, %oop bitcast ([11 x i8]* @m_cstr1958 to %oop) }
define %oop @"m_address-of/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = load %oop, %oop* %t2
	%r4 = call %oop @"m_pair?.code"(%oop %r3)
	%r6 = ptrtoint %oop %r4 to %word
	%r5 = icmp ne %word %r6, 0
	br i1 %r5, label %L1, label %L2
L1:
	%r7 = inttoptr %word 0 to %oop
	%r8 = load %oop, %oop* %t2
	%r12 = bitcast %oop %r8 to [0 x %oop]*
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = getelementptr [0 x %oop], [0 x %oop]* %r12, %word 0, %word %r11
	%r9 = load %oop, %oop* %r10
	store %oop %r9, %oop* %t3
	%r13 = inttoptr %word 1 to %oop
	%r14 = load %oop, %oop* %t2
	%r18 = bitcast %oop %r14 to [0 x %oop]*
	%r17 = ptrtoint %oop %r13 to %word
	%r16 = getelementptr [0 x %oop], [0 x %oop]* %r18, %word 0, %word %r17
	%r15 = load %oop, %oop* %r16
	store %oop %r15, %oop* %t2
	store %oop %r15, %oop* %t4
	br label %L3
L2:
	%r19 = getelementptr %"<string>", %"<string>"* @m_ostr1957, i32 0, i32 1
	%r20 = bitcast %word* %r19 to %oop
	%r21 = load %oop, %oop* %t0
	%r22 = call %oop @"m_%not-enough-arguments.code"(%oop %r20, %oop %r21)
	store %oop %r22, %oop* %t4
	br label %L3
L3:
	%r23 = load %oop, %oop* %t4
	%r24 = load %oop, %oop* %t2
	%r26 = ptrtoint %oop %r24 to %word
	%r25 = icmp ne %word %r26, 0
	br i1 %r25, label %L4, label %L5
L4:
	%r27 = getelementptr %"<string>", %"<string>"* @m_ostr1959, i32 0, i32 1
	%r28 = bitcast %word* %r27 to %oop
	%r29 = load %oop, %oop* %t0
	%r30 = call %oop @"m_%too-many-arguments.code"(%oop %r28, %oop %r29)
	store %oop %r30, %oop* %t4
	br label %L6
L5:
	%r31 = inttoptr %word 0 to %oop
	store %oop %r31, %oop* %t4
	br label %L6
L6:
	%r32 = load %oop, %oop* %t4
	%r33 = inttoptr %word 1 to %oop
	%r34 = inttoptr %word 1 to %oop
	%r35 = load %oop, %oop* %t3
	%r39 = ptrtoint %oop %r35 to %word
	%r38 = ptrtoint %oop %r34 to %word
	%r37 = shl %word %r39, %r38
	%r36 = inttoptr %word %r37 to %oop
	%r43 = ptrtoint %oop %r36 to %word
	%r42 = ptrtoint %oop %r33 to %word
	%r41 = or %word %r43, %r42
	%r40 = inttoptr %word %r41 to %oop
	ret %oop %r40
}
@m_cstr1960 = private unnamed_addr constant [26 x i8] c"address-of/evaluator-stub\00"
@m_ostr1961 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 51, %oop bitcast ([26 x i8]* @m_cstr1960 to %oop) }
@"m_address-of/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_address-of/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1961 }
@m_cstr1962 = private unnamed_addr constant [13 x i8] c"array-length\00"
@m_ostr1963 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 25, %oop bitcast ([13 x i8]* @m_cstr1962 to %oop) }
@m_cstr1964 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1965 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1964 to %oop) }
@m_cstr1966 = private unnamed_addr constant [4 x i8] c"arg\00"
@m_ostr1967 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr1966 to %oop) }
@m_cstr1968 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1969 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1968 to %oop) }
@m_cstr1970 = private unnamed_addr constant [8 x i8] c"<array>\00"
@m_ostr1971 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1970 to %oop) }
@m_cstr1972 = private unnamed_addr constant [13 x i8] c"array-length\00"
@m_ostr1973 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 25, %oop bitcast ([13 x i8]* @m_cstr1972 to %oop) }
@m_cstr1974 = private unnamed_addr constant [13 x i8] c"array-length\00"
@m_ostr1975 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 25, %oop bitcast ([13 x i8]* @m_cstr1974 to %oop) }
define %oop @"m_array-length/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = load %oop, %oop* %t2
	%r4 = call %oop @"m_pair?.code"(%oop %r3)
	%r6 = ptrtoint %oop %r4 to %word
	%r5 = icmp ne %word %r6, 0
	br i1 %r5, label %L1, label %L2
L1:
	%r7 = inttoptr %word 0 to %oop
	%r8 = load %oop, %oop* %t2
	%r12 = bitcast %oop %r8 to [0 x %oop]*
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = getelementptr [0 x %oop], [0 x %oop]* %r12, %word 0, %word %r11
	%r9 = load %oop, %oop* %r10
	store %oop %r9, %oop* %t3
	%r13 = inttoptr %word 0 to %oop
	store %oop %r13, %oop* %t5
	%r14 = load %oop, %oop* %t3
	%r15 = call %oop @"m_array?.code"(%oop %r14)
	store %oop %r15, %oop* %t5
	%r16 = inttoptr %word 0 to %oop
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = icmp eq %word %r20, %r19
	%r17 = inttoptr i1 %r18 to %oop
	%r22 = ptrtoint %oop %r17 to %word
	%r21 = icmp ne %word %r22, 0
	br i1 %r21, label %L5, label %L4
L5:
	%r23 = call %oop @m_error-prologue.code()
	%r24 = getelementptr %"<string>", %"<string>"* @m_ostr1963, i32 0, i32 1
	%r25 = bitcast %word* %r24 to %oop
	%r26 = call %oop @"m_%error.code"(%oop %r25)
	%r27 = getelementptr %"<string>", %"<string>"* @m_ostr1965, i32 0, i32 1
	%r28 = bitcast %word* %r27 to %oop
	%r29 = call %oop @"m_%error.code"(%oop %r28)
	%r30 = getelementptr %"<string>", %"<string>"* @m_ostr1967, i32 0, i32 1
	%r31 = bitcast %word* %r30 to %oop
	%r32 = call %oop @"m_%error.code"(%oop %r31)
	%r33 = getelementptr %"<string>", %"<string>"* @m_ostr1969, i32 0, i32 1
	%r34 = bitcast %word* %r33 to %oop
	%r35 = call %oop @"m_%error.code"(%oop %r34)
	%r36 = getelementptr %"<string>", %"<string>"* @m_ostr1971, i32 0, i32 1
	%r37 = bitcast %word* %r36 to %oop
	%r38 = call %oop @"m_%error.code"(%oop %r37)
	%r39 = call %oop @m_error-epilogue.code()
	store %oop %r39, %oop* %t5
	%r40 = inttoptr %word 0 to %oop
	%r44 = ptrtoint %oop %r40 to %word
	%r43 = ptrtoint %oop %r39 to %word
	%r42 = icmp eq %word %r44, %r43
	%r41 = inttoptr i1 %r42 to %oop
	%r46 = ptrtoint %oop %r41 to %word
	%r45 = icmp ne %word %r46, 0
	br i1 %r45, label %L6, label %L4
L6:
	br label %L4
L4:
	%r47 = load %oop, %oop* %t5
	%r48 = inttoptr %word 1 to %oop
	%r49 = load %oop, %oop* %t2
	%r53 = bitcast %oop %r49 to [0 x %oop]*
	%r52 = ptrtoint %oop %r48 to %word
	%r51 = getelementptr [0 x %oop], [0 x %oop]* %r53, %word 0, %word %r52
	%r50 = load %oop, %oop* %r51
	store %oop %r50, %oop* %t2
	store %oop %r50, %oop* %t4
	br label %L3
L2:
	%r54 = getelementptr %"<string>", %"<string>"* @m_ostr1973, i32 0, i32 1
	%r55 = bitcast %word* %r54 to %oop
	%r56 = load %oop, %oop* %t0
	%r57 = call %oop @"m_%not-enough-arguments.code"(%oop %r55, %oop %r56)
	store %oop %r57, %oop* %t4
	br label %L3
L3:
	%r58 = load %oop, %oop* %t4
	%r59 = load %oop, %oop* %t2
	%r61 = ptrtoint %oop %r59 to %word
	%r60 = icmp ne %word %r61, 0
	br i1 %r60, label %L7, label %L8
L7:
	%r62 = getelementptr %"<string>", %"<string>"* @m_ostr1975, i32 0, i32 1
	%r63 = bitcast %word* %r62 to %oop
	%r64 = load %oop, %oop* %t0
	%r65 = call %oop @"m_%too-many-arguments.code"(%oop %r63, %oop %r64)
	store %oop %r65, %oop* %t4
	br label %L9
L8:
	%r66 = inttoptr %word 0 to %oop
	store %oop %r66, %oop* %t4
	br label %L9
L9:
	%r67 = load %oop, %oop* %t4
	%r68 = inttoptr %word 0 to %oop
	%r69 = load %oop, %oop* %t3
	%r73 = bitcast %oop %r69 to [0 x %oop]*
	%r72 = ptrtoint %oop %r68 to %word
	%r71 = getelementptr [0 x %oop], [0 x %oop]* %r73, %word 0, %word %r72
	%r70 = load %oop, %oop* %r71
	ret %oop %r70
}
@m_cstr1976 = private unnamed_addr constant [28 x i8] c"array-length/evaluator-stub\00"
@m_ostr1977 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 55, %oop bitcast ([28 x i8]* @m_cstr1976 to %oop) }
@"m_array-length/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_array-length/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1977 }
@m_cstr1978 = private unnamed_addr constant [14 x i8] c"string-length\00"
@m_ostr1979 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr1978 to %oop) }
@m_cstr1980 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1981 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1980 to %oop) }
@m_cstr1982 = private unnamed_addr constant [4 x i8] c"arg\00"
@m_ostr1983 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr1982 to %oop) }
@m_cstr1984 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr1985 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr1984 to %oop) }
@m_cstr1986 = private unnamed_addr constant [9 x i8] c"<string>\00"
@m_ostr1987 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr1986 to %oop) }
@m_cstr1988 = private unnamed_addr constant [14 x i8] c"string-length\00"
@m_ostr1989 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr1988 to %oop) }
@m_cstr1990 = private unnamed_addr constant [14 x i8] c"string-length\00"
@m_ostr1991 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr1990 to %oop) }
define %oop @"m_string-length/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = load %oop, %oop* %t2
	%r4 = call %oop @"m_pair?.code"(%oop %r3)
	%r6 = ptrtoint %oop %r4 to %word
	%r5 = icmp ne %word %r6, 0
	br i1 %r5, label %L1, label %L2
L1:
	%r7 = inttoptr %word 0 to %oop
	%r8 = load %oop, %oop* %t2
	%r12 = bitcast %oop %r8 to [0 x %oop]*
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = getelementptr [0 x %oop], [0 x %oop]* %r12, %word 0, %word %r11
	%r9 = load %oop, %oop* %r10
	store %oop %r9, %oop* %t3
	%r13 = inttoptr %word 0 to %oop
	store %oop %r13, %oop* %t5
	%r14 = load %oop, %oop* %t3
	%r15 = call %oop @"m_string?.code"(%oop %r14)
	store %oop %r15, %oop* %t5
	%r16 = inttoptr %word 0 to %oop
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = ptrtoint %oop %r15 to %word
	%r18 = icmp eq %word %r20, %r19
	%r17 = inttoptr i1 %r18 to %oop
	%r22 = ptrtoint %oop %r17 to %word
	%r21 = icmp ne %word %r22, 0
	br i1 %r21, label %L5, label %L4
L5:
	%r23 = call %oop @m_error-prologue.code()
	%r24 = getelementptr %"<string>", %"<string>"* @m_ostr1979, i32 0, i32 1
	%r25 = bitcast %word* %r24 to %oop
	%r26 = call %oop @"m_%error.code"(%oop %r25)
	%r27 = getelementptr %"<string>", %"<string>"* @m_ostr1981, i32 0, i32 1
	%r28 = bitcast %word* %r27 to %oop
	%r29 = call %oop @"m_%error.code"(%oop %r28)
	%r30 = getelementptr %"<string>", %"<string>"* @m_ostr1983, i32 0, i32 1
	%r31 = bitcast %word* %r30 to %oop
	%r32 = call %oop @"m_%error.code"(%oop %r31)
	%r33 = getelementptr %"<string>", %"<string>"* @m_ostr1985, i32 0, i32 1
	%r34 = bitcast %word* %r33 to %oop
	%r35 = call %oop @"m_%error.code"(%oop %r34)
	%r36 = getelementptr %"<string>", %"<string>"* @m_ostr1987, i32 0, i32 1
	%r37 = bitcast %word* %r36 to %oop
	%r38 = call %oop @"m_%error.code"(%oop %r37)
	%r39 = call %oop @m_error-epilogue.code()
	store %oop %r39, %oop* %t5
	%r40 = inttoptr %word 0 to %oop
	%r44 = ptrtoint %oop %r40 to %word
	%r43 = ptrtoint %oop %r39 to %word
	%r42 = icmp eq %word %r44, %r43
	%r41 = inttoptr i1 %r42 to %oop
	%r46 = ptrtoint %oop %r41 to %word
	%r45 = icmp ne %word %r46, 0
	br i1 %r45, label %L6, label %L4
L6:
	br label %L4
L4:
	%r47 = load %oop, %oop* %t5
	%r48 = inttoptr %word 1 to %oop
	%r49 = load %oop, %oop* %t2
	%r53 = bitcast %oop %r49 to [0 x %oop]*
	%r52 = ptrtoint %oop %r48 to %word
	%r51 = getelementptr [0 x %oop], [0 x %oop]* %r53, %word 0, %word %r52
	%r50 = load %oop, %oop* %r51
	store %oop %r50, %oop* %t2
	store %oop %r50, %oop* %t4
	br label %L3
L2:
	%r54 = getelementptr %"<string>", %"<string>"* @m_ostr1989, i32 0, i32 1
	%r55 = bitcast %word* %r54 to %oop
	%r56 = load %oop, %oop* %t0
	%r57 = call %oop @"m_%not-enough-arguments.code"(%oop %r55, %oop %r56)
	store %oop %r57, %oop* %t4
	br label %L3
L3:
	%r58 = load %oop, %oop* %t4
	%r59 = load %oop, %oop* %t2
	%r61 = ptrtoint %oop %r59 to %word
	%r60 = icmp ne %word %r61, 0
	br i1 %r60, label %L7, label %L8
L7:
	%r62 = getelementptr %"<string>", %"<string>"* @m_ostr1991, i32 0, i32 1
	%r63 = bitcast %word* %r62 to %oop
	%r64 = load %oop, %oop* %t0
	%r65 = call %oop @"m_%too-many-arguments.code"(%oop %r63, %oop %r64)
	store %oop %r65, %oop* %t4
	br label %L9
L8:
	%r66 = inttoptr %word 0 to %oop
	store %oop %r66, %oop* %t4
	br label %L9
L9:
	%r67 = load %oop, %oop* %t4
	%r68 = inttoptr %word 0 to %oop
	%r69 = load %oop, %oop* %t3
	%r73 = bitcast %oop %r69 to [0 x %oop]*
	%r72 = ptrtoint %oop %r68 to %word
	%r71 = getelementptr [0 x %oop], [0 x %oop]* %r73, %word 0, %word %r72
	%r70 = load %oop, %oop* %r71
	ret %oop %r70
}
@m_cstr1992 = private unnamed_addr constant [29 x i8] c"string-length/evaluator-stub\00"
@m_ostr1993 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 57, %oop bitcast ([29 x i8]* @m_cstr1992 to %oop) }
@"m_string-length/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_string-length/evaluator-stub.code" to %oop), %"<string>"* @m_ostr1993 }
@m_cstr1994 = private unnamed_addr constant [9 x i8] c"array-at\00"
@m_ostr1995 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr1994 to %oop) }
@m_cstr1996 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr1997 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr1996 to %oop) }
@m_cstr1998 = private unnamed_addr constant [6 x i8] c"array\00"
@m_ostr1999 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr1998 to %oop) }
@m_cstr2000 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr2001 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr2000 to %oop) }
@m_cstr2002 = private unnamed_addr constant [8 x i8] c"<array>\00"
@m_ostr2003 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr2002 to %oop) }
@m_cstr2004 = private unnamed_addr constant [9 x i8] c"array-at\00"
@m_ostr2005 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr2004 to %oop) }
@m_cstr2006 = private unnamed_addr constant [9 x i8] c"array-at\00"
@m_ostr2007 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr2006 to %oop) }
@m_cstr2008 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr2009 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr2008 to %oop) }
@m_cstr2010 = private unnamed_addr constant [6 x i8] c"index\00"
@m_ostr2011 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr2010 to %oop) }
@m_cstr2012 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr2013 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr2012 to %oop) }
@m_cstr2014 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr2015 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr2014 to %oop) }
@m_cstr2016 = private unnamed_addr constant [9 x i8] c"array-at\00"
@m_ostr2017 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr2016 to %oop) }
@m_cstr2018 = private unnamed_addr constant [9 x i8] c"array-at\00"
@m_ostr2019 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr2018 to %oop) }
define %oop @"m_array-at/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = load %oop, %oop* %t2
	%r5 = call %oop @"m_pair?.code"(%oop %r4)
	%r7 = ptrtoint %oop %r5 to %word
	%r6 = icmp ne %word %r7, 0
	br i1 %r6, label %L1, label %L2
L1:
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t2
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	%r10 = load %oop, %oop* %r11
	store %oop %r10, %oop* %t3
	%r14 = inttoptr %word 0 to %oop
	store %oop %r14, %oop* %t6
	%r15 = load %oop, %oop* %t3
	%r16 = call %oop @"m_array?.code"(%oop %r15)
	store %oop %r16, %oop* %t6
	%r17 = inttoptr %word 0 to %oop
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = icmp eq %word %r21, %r20
	%r18 = inttoptr i1 %r19 to %oop
	%r23 = ptrtoint %oop %r18 to %word
	%r22 = icmp ne %word %r23, 0
	br i1 %r22, label %L5, label %L4
L5:
	%r24 = call %oop @m_error-prologue.code()
	%r25 = getelementptr %"<string>", %"<string>"* @m_ostr1995, i32 0, i32 1
	%r26 = bitcast %word* %r25 to %oop
	%r27 = call %oop @"m_%error.code"(%oop %r26)
	%r28 = getelementptr %"<string>", %"<string>"* @m_ostr1997, i32 0, i32 1
	%r29 = bitcast %word* %r28 to %oop
	%r30 = call %oop @"m_%error.code"(%oop %r29)
	%r31 = getelementptr %"<string>", %"<string>"* @m_ostr1999, i32 0, i32 1
	%r32 = bitcast %word* %r31 to %oop
	%r33 = call %oop @"m_%error.code"(%oop %r32)
	%r34 = getelementptr %"<string>", %"<string>"* @m_ostr2001, i32 0, i32 1
	%r35 = bitcast %word* %r34 to %oop
	%r36 = call %oop @"m_%error.code"(%oop %r35)
	%r37 = getelementptr %"<string>", %"<string>"* @m_ostr2003, i32 0, i32 1
	%r38 = bitcast %word* %r37 to %oop
	%r39 = call %oop @"m_%error.code"(%oop %r38)
	%r40 = call %oop @m_error-epilogue.code()
	store %oop %r40, %oop* %t6
	%r41 = inttoptr %word 0 to %oop
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = ptrtoint %oop %r40 to %word
	%r43 = icmp eq %word %r45, %r44
	%r42 = inttoptr i1 %r43 to %oop
	%r47 = ptrtoint %oop %r42 to %word
	%r46 = icmp ne %word %r47, 0
	br i1 %r46, label %L6, label %L4
L6:
	br label %L4
L4:
	%r48 = load %oop, %oop* %t6
	%r49 = inttoptr %word 1 to %oop
	%r50 = load %oop, %oop* %t2
	%r54 = bitcast %oop %r50 to [0 x %oop]*
	%r53 = ptrtoint %oop %r49 to %word
	%r52 = getelementptr [0 x %oop], [0 x %oop]* %r54, %word 0, %word %r53
	%r51 = load %oop, %oop* %r52
	store %oop %r51, %oop* %t2
	store %oop %r51, %oop* %t5
	br label %L3
L2:
	%r55 = getelementptr %"<string>", %"<string>"* @m_ostr2005, i32 0, i32 1
	%r56 = bitcast %word* %r55 to %oop
	%r57 = load %oop, %oop* %t0
	%r58 = call %oop @"m_%not-enough-arguments.code"(%oop %r56, %oop %r57)
	store %oop %r58, %oop* %t5
	br label %L3
L3:
	%r59 = load %oop, %oop* %t5
	%r60 = load %oop, %oop* %t2
	%r61 = call %oop @"m_pair?.code"(%oop %r60)
	%r63 = ptrtoint %oop %r61 to %word
	%r62 = icmp ne %word %r63, 0
	br i1 %r62, label %L7, label %L8
L7:
	%r64 = inttoptr %word 0 to %oop
	%r65 = load %oop, %oop* %t2
	%r69 = bitcast %oop %r65 to [0 x %oop]*
	%r68 = ptrtoint %oop %r64 to %word
	%r67 = getelementptr [0 x %oop], [0 x %oop]* %r69, %word 0, %word %r68
	%r66 = load %oop, %oop* %r67
	store %oop %r66, %oop* %t4
	%r70 = inttoptr %word 0 to %oop
	store %oop %r70, %oop* %t6
	%r71 = load %oop, %oop* %t4
	%r72 = call %oop @"m_long?.code"(%oop %r71)
	store %oop %r72, %oop* %t6
	%r73 = inttoptr %word 0 to %oop
	%r77 = ptrtoint %oop %r73 to %word
	%r76 = ptrtoint %oop %r72 to %word
	%r75 = icmp eq %word %r77, %r76
	%r74 = inttoptr i1 %r75 to %oop
	%r79 = ptrtoint %oop %r74 to %word
	%r78 = icmp ne %word %r79, 0
	br i1 %r78, label %L11, label %L10
L11:
	%r80 = call %oop @m_error-prologue.code()
	%r81 = getelementptr %"<string>", %"<string>"* @m_ostr2007, i32 0, i32 1
	%r82 = bitcast %word* %r81 to %oop
	%r83 = call %oop @"m_%error.code"(%oop %r82)
	%r84 = getelementptr %"<string>", %"<string>"* @m_ostr2009, i32 0, i32 1
	%r85 = bitcast %word* %r84 to %oop
	%r86 = call %oop @"m_%error.code"(%oop %r85)
	%r87 = getelementptr %"<string>", %"<string>"* @m_ostr2011, i32 0, i32 1
	%r88 = bitcast %word* %r87 to %oop
	%r89 = call %oop @"m_%error.code"(%oop %r88)
	%r90 = getelementptr %"<string>", %"<string>"* @m_ostr2013, i32 0, i32 1
	%r91 = bitcast %word* %r90 to %oop
	%r92 = call %oop @"m_%error.code"(%oop %r91)
	%r93 = getelementptr %"<string>", %"<string>"* @m_ostr2015, i32 0, i32 1
	%r94 = bitcast %word* %r93 to %oop
	%r95 = call %oop @"m_%error.code"(%oop %r94)
	%r96 = call %oop @m_error-epilogue.code()
	store %oop %r96, %oop* %t6
	%r97 = inttoptr %word 0 to %oop
	%r101 = ptrtoint %oop %r97 to %word
	%r100 = ptrtoint %oop %r96 to %word
	%r99 = icmp eq %word %r101, %r100
	%r98 = inttoptr i1 %r99 to %oop
	%r103 = ptrtoint %oop %r98 to %word
	%r102 = icmp ne %word %r103, 0
	br i1 %r102, label %L12, label %L10
L12:
	br label %L10
L10:
	%r104 = load %oop, %oop* %t6
	%r105 = inttoptr %word 1 to %oop
	%r106 = load %oop, %oop* %t4
	%r110 = ptrtoint %oop %r106 to %word
	%r109 = ptrtoint %oop %r105 to %word
	%r108 = ashr %word %r110, %r109
	%r107 = inttoptr %word %r108 to %oop
	store %oop %r107, %oop* %t4
	%r111 = inttoptr %word 1 to %oop
	%r112 = load %oop, %oop* %t2
	%r116 = bitcast %oop %r112 to [0 x %oop]*
	%r115 = ptrtoint %oop %r111 to %word
	%r114 = getelementptr [0 x %oop], [0 x %oop]* %r116, %word 0, %word %r115
	%r113 = load %oop, %oop* %r114
	store %oop %r113, %oop* %t2
	store %oop %r113, %oop* %t5
	br label %L9
L8:
	%r117 = getelementptr %"<string>", %"<string>"* @m_ostr2017, i32 0, i32 1
	%r118 = bitcast %word* %r117 to %oop
	%r119 = load %oop, %oop* %t0
	%r120 = call %oop @"m_%not-enough-arguments.code"(%oop %r118, %oop %r119)
	store %oop %r120, %oop* %t5
	br label %L9
L9:
	%r121 = load %oop, %oop* %t5
	%r122 = load %oop, %oop* %t2
	%r124 = ptrtoint %oop %r122 to %word
	%r123 = icmp ne %word %r124, 0
	br i1 %r123, label %L13, label %L14
L13:
	%r125 = getelementptr %"<string>", %"<string>"* @m_ostr2019, i32 0, i32 1
	%r126 = bitcast %word* %r125 to %oop
	%r127 = load %oop, %oop* %t0
	%r128 = call %oop @"m_%too-many-arguments.code"(%oop %r126, %oop %r127)
	store %oop %r128, %oop* %t5
	br label %L15
L14:
	%r129 = inttoptr %word 0 to %oop
	store %oop %r129, %oop* %t5
	br label %L15
L15:
	%r130 = load %oop, %oop* %t5
	%r131 = load %oop, %oop* %t3
	%r132 = load %oop, %oop* %t4
	%r133 = call %oop @m_array-at.code(%oop %r131, %oop %r132)
	ret %oop %r133
}
@m_cstr2020 = private unnamed_addr constant [24 x i8] c"array-at/evaluator-stub\00"
@m_ostr2021 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 47, %oop bitcast ([24 x i8]* @m_cstr2020 to %oop) }
@"m_array-at/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_array-at/evaluator-stub.code" to %oop), %"<string>"* @m_ostr2021 }
@m_cstr2022 = private unnamed_addr constant [10 x i8] c"string-at\00"
@m_ostr2023 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 19, %oop bitcast ([10 x i8]* @m_cstr2022 to %oop) }
@m_cstr2024 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr2025 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr2024 to %oop) }
@m_cstr2026 = private unnamed_addr constant [7 x i8] c"string\00"
@m_ostr2027 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr2026 to %oop) }
@m_cstr2028 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr2029 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr2028 to %oop) }
@m_cstr2030 = private unnamed_addr constant [9 x i8] c"<string>\00"
@m_ostr2031 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr2030 to %oop) }
@m_cstr2032 = private unnamed_addr constant [10 x i8] c"string-at\00"
@m_ostr2033 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 19, %oop bitcast ([10 x i8]* @m_cstr2032 to %oop) }
@m_cstr2034 = private unnamed_addr constant [10 x i8] c"string-at\00"
@m_ostr2035 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 19, %oop bitcast ([10 x i8]* @m_cstr2034 to %oop) }
@m_cstr2036 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr2037 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr2036 to %oop) }
@m_cstr2038 = private unnamed_addr constant [6 x i8] c"index\00"
@m_ostr2039 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr2038 to %oop) }
@m_cstr2040 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr2041 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr2040 to %oop) }
@m_cstr2042 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr2043 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr2042 to %oop) }
@m_cstr2044 = private unnamed_addr constant [10 x i8] c"string-at\00"
@m_ostr2045 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 19, %oop bitcast ([10 x i8]* @m_cstr2044 to %oop) }
@m_cstr2046 = private unnamed_addr constant [10 x i8] c"string-at\00"
@m_ostr2047 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 19, %oop bitcast ([10 x i8]* @m_cstr2046 to %oop) }
define %oop @"m_string-at/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = load %oop, %oop* %t2
	%r5 = call %oop @"m_pair?.code"(%oop %r4)
	%r7 = ptrtoint %oop %r5 to %word
	%r6 = icmp ne %word %r7, 0
	br i1 %r6, label %L1, label %L2
L1:
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t2
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	%r10 = load %oop, %oop* %r11
	store %oop %r10, %oop* %t3
	%r14 = inttoptr %word 0 to %oop
	store %oop %r14, %oop* %t6
	%r15 = load %oop, %oop* %t3
	%r16 = call %oop @"m_string?.code"(%oop %r15)
	store %oop %r16, %oop* %t6
	%r17 = inttoptr %word 0 to %oop
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = icmp eq %word %r21, %r20
	%r18 = inttoptr i1 %r19 to %oop
	%r23 = ptrtoint %oop %r18 to %word
	%r22 = icmp ne %word %r23, 0
	br i1 %r22, label %L5, label %L4
L5:
	%r24 = call %oop @m_error-prologue.code()
	%r25 = getelementptr %"<string>", %"<string>"* @m_ostr2023, i32 0, i32 1
	%r26 = bitcast %word* %r25 to %oop
	%r27 = call %oop @"m_%error.code"(%oop %r26)
	%r28 = getelementptr %"<string>", %"<string>"* @m_ostr2025, i32 0, i32 1
	%r29 = bitcast %word* %r28 to %oop
	%r30 = call %oop @"m_%error.code"(%oop %r29)
	%r31 = getelementptr %"<string>", %"<string>"* @m_ostr2027, i32 0, i32 1
	%r32 = bitcast %word* %r31 to %oop
	%r33 = call %oop @"m_%error.code"(%oop %r32)
	%r34 = getelementptr %"<string>", %"<string>"* @m_ostr2029, i32 0, i32 1
	%r35 = bitcast %word* %r34 to %oop
	%r36 = call %oop @"m_%error.code"(%oop %r35)
	%r37 = getelementptr %"<string>", %"<string>"* @m_ostr2031, i32 0, i32 1
	%r38 = bitcast %word* %r37 to %oop
	%r39 = call %oop @"m_%error.code"(%oop %r38)
	%r40 = call %oop @m_error-epilogue.code()
	store %oop %r40, %oop* %t6
	%r41 = inttoptr %word 0 to %oop
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = ptrtoint %oop %r40 to %word
	%r43 = icmp eq %word %r45, %r44
	%r42 = inttoptr i1 %r43 to %oop
	%r47 = ptrtoint %oop %r42 to %word
	%r46 = icmp ne %word %r47, 0
	br i1 %r46, label %L6, label %L4
L6:
	br label %L4
L4:
	%r48 = load %oop, %oop* %t6
	%r49 = inttoptr %word 1 to %oop
	%r50 = load %oop, %oop* %t2
	%r54 = bitcast %oop %r50 to [0 x %oop]*
	%r53 = ptrtoint %oop %r49 to %word
	%r52 = getelementptr [0 x %oop], [0 x %oop]* %r54, %word 0, %word %r53
	%r51 = load %oop, %oop* %r52
	store %oop %r51, %oop* %t2
	store %oop %r51, %oop* %t5
	br label %L3
L2:
	%r55 = getelementptr %"<string>", %"<string>"* @m_ostr2033, i32 0, i32 1
	%r56 = bitcast %word* %r55 to %oop
	%r57 = load %oop, %oop* %t0
	%r58 = call %oop @"m_%not-enough-arguments.code"(%oop %r56, %oop %r57)
	store %oop %r58, %oop* %t5
	br label %L3
L3:
	%r59 = load %oop, %oop* %t5
	%r60 = load %oop, %oop* %t2
	%r61 = call %oop @"m_pair?.code"(%oop %r60)
	%r63 = ptrtoint %oop %r61 to %word
	%r62 = icmp ne %word %r63, 0
	br i1 %r62, label %L7, label %L8
L7:
	%r64 = inttoptr %word 0 to %oop
	%r65 = load %oop, %oop* %t2
	%r69 = bitcast %oop %r65 to [0 x %oop]*
	%r68 = ptrtoint %oop %r64 to %word
	%r67 = getelementptr [0 x %oop], [0 x %oop]* %r69, %word 0, %word %r68
	%r66 = load %oop, %oop* %r67
	store %oop %r66, %oop* %t4
	%r70 = inttoptr %word 0 to %oop
	store %oop %r70, %oop* %t6
	%r71 = load %oop, %oop* %t4
	%r72 = call %oop @"m_long?.code"(%oop %r71)
	store %oop %r72, %oop* %t6
	%r73 = inttoptr %word 0 to %oop
	%r77 = ptrtoint %oop %r73 to %word
	%r76 = ptrtoint %oop %r72 to %word
	%r75 = icmp eq %word %r77, %r76
	%r74 = inttoptr i1 %r75 to %oop
	%r79 = ptrtoint %oop %r74 to %word
	%r78 = icmp ne %word %r79, 0
	br i1 %r78, label %L11, label %L10
L11:
	%r80 = call %oop @m_error-prologue.code()
	%r81 = getelementptr %"<string>", %"<string>"* @m_ostr2035, i32 0, i32 1
	%r82 = bitcast %word* %r81 to %oop
	%r83 = call %oop @"m_%error.code"(%oop %r82)
	%r84 = getelementptr %"<string>", %"<string>"* @m_ostr2037, i32 0, i32 1
	%r85 = bitcast %word* %r84 to %oop
	%r86 = call %oop @"m_%error.code"(%oop %r85)
	%r87 = getelementptr %"<string>", %"<string>"* @m_ostr2039, i32 0, i32 1
	%r88 = bitcast %word* %r87 to %oop
	%r89 = call %oop @"m_%error.code"(%oop %r88)
	%r90 = getelementptr %"<string>", %"<string>"* @m_ostr2041, i32 0, i32 1
	%r91 = bitcast %word* %r90 to %oop
	%r92 = call %oop @"m_%error.code"(%oop %r91)
	%r93 = getelementptr %"<string>", %"<string>"* @m_ostr2043, i32 0, i32 1
	%r94 = bitcast %word* %r93 to %oop
	%r95 = call %oop @"m_%error.code"(%oop %r94)
	%r96 = call %oop @m_error-epilogue.code()
	store %oop %r96, %oop* %t6
	%r97 = inttoptr %word 0 to %oop
	%r101 = ptrtoint %oop %r97 to %word
	%r100 = ptrtoint %oop %r96 to %word
	%r99 = icmp eq %word %r101, %r100
	%r98 = inttoptr i1 %r99 to %oop
	%r103 = ptrtoint %oop %r98 to %word
	%r102 = icmp ne %word %r103, 0
	br i1 %r102, label %L12, label %L10
L12:
	br label %L10
L10:
	%r104 = load %oop, %oop* %t6
	%r105 = inttoptr %word 1 to %oop
	%r106 = load %oop, %oop* %t4
	%r110 = ptrtoint %oop %r106 to %word
	%r109 = ptrtoint %oop %r105 to %word
	%r108 = ashr %word %r110, %r109
	%r107 = inttoptr %word %r108 to %oop
	store %oop %r107, %oop* %t4
	%r111 = inttoptr %word 1 to %oop
	%r112 = load %oop, %oop* %t2
	%r116 = bitcast %oop %r112 to [0 x %oop]*
	%r115 = ptrtoint %oop %r111 to %word
	%r114 = getelementptr [0 x %oop], [0 x %oop]* %r116, %word 0, %word %r115
	%r113 = load %oop, %oop* %r114
	store %oop %r113, %oop* %t2
	store %oop %r113, %oop* %t5
	br label %L9
L8:
	%r117 = getelementptr %"<string>", %"<string>"* @m_ostr2045, i32 0, i32 1
	%r118 = bitcast %word* %r117 to %oop
	%r119 = load %oop, %oop* %t0
	%r120 = call %oop @"m_%not-enough-arguments.code"(%oop %r118, %oop %r119)
	store %oop %r120, %oop* %t5
	br label %L9
L9:
	%r121 = load %oop, %oop* %t5
	%r122 = load %oop, %oop* %t2
	%r124 = ptrtoint %oop %r122 to %word
	%r123 = icmp ne %word %r124, 0
	br i1 %r123, label %L13, label %L14
L13:
	%r125 = getelementptr %"<string>", %"<string>"* @m_ostr2047, i32 0, i32 1
	%r126 = bitcast %word* %r125 to %oop
	%r127 = load %oop, %oop* %t0
	%r128 = call %oop @"m_%too-many-arguments.code"(%oop %r126, %oop %r127)
	store %oop %r128, %oop* %t5
	br label %L15
L14:
	%r129 = inttoptr %word 0 to %oop
	store %oop %r129, %oop* %t5
	br label %L15
L15:
	%r130 = load %oop, %oop* %t5
	%r131 = inttoptr %word 1 to %oop
	%r132 = inttoptr %word 1 to %oop
	%r133 = load %oop, %oop* %t3
	%r134 = load %oop, %oop* %t4
	%r135 = call %oop @m_string-at.code(%oop %r133, %oop %r134)
	%r139 = ptrtoint %oop %r135 to %word
	%r138 = ptrtoint %oop %r132 to %word
	%r137 = shl %word %r139, %r138
	%r136 = inttoptr %word %r137 to %oop
	%r143 = ptrtoint %oop %r136 to %word
	%r142 = ptrtoint %oop %r131 to %word
	%r141 = or %word %r143, %r142
	%r140 = inttoptr %word %r141 to %oop
	ret %oop %r140
}
@m_cstr2048 = private unnamed_addr constant [25 x i8] c"string-at/evaluator-stub\00"
@m_ostr2049 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 49, %oop bitcast ([25 x i8]* @m_cstr2048 to %oop) }
@"m_string-at/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_string-at/evaluator-stub.code" to %oop), %"<string>"* @m_ostr2049 }
@m_cstr2050 = private unnamed_addr constant [8 x i8] c"char-at\00"
@m_ostr2051 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr2050 to %oop) }
@m_cstr2052 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr2053 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr2052 to %oop) }
@m_cstr2054 = private unnamed_addr constant [7 x i8] c"string\00"
@m_ostr2055 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr2054 to %oop) }
@m_cstr2056 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr2057 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr2056 to %oop) }
@m_cstr2058 = private unnamed_addr constant [9 x i8] c"<string>\00"
@m_ostr2059 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr2058 to %oop) }
@m_cstr2060 = private unnamed_addr constant [8 x i8] c"char-at\00"
@m_ostr2061 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr2060 to %oop) }
@m_cstr2062 = private unnamed_addr constant [8 x i8] c"char-at\00"
@m_ostr2063 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr2062 to %oop) }
@m_cstr2064 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr2065 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr2064 to %oop) }
@m_cstr2066 = private unnamed_addr constant [6 x i8] c"index\00"
@m_ostr2067 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr2066 to %oop) }
@m_cstr2068 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr2069 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr2068 to %oop) }
@m_cstr2070 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr2071 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr2070 to %oop) }
@m_cstr2072 = private unnamed_addr constant [8 x i8] c"char-at\00"
@m_ostr2073 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr2072 to %oop) }
@m_cstr2074 = private unnamed_addr constant [8 x i8] c"char-at\00"
@m_ostr2075 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr2074 to %oop) }
define %oop @"m_char-at/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = load %oop, %oop* %t2
	%r5 = call %oop @"m_pair?.code"(%oop %r4)
	%r7 = ptrtoint %oop %r5 to %word
	%r6 = icmp ne %word %r7, 0
	br i1 %r6, label %L1, label %L2
L1:
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t2
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	%r10 = load %oop, %oop* %r11
	store %oop %r10, %oop* %t3
	%r14 = inttoptr %word 0 to %oop
	store %oop %r14, %oop* %t6
	%r15 = load %oop, %oop* %t3
	%r16 = call %oop @"m_string?.code"(%oop %r15)
	store %oop %r16, %oop* %t6
	%r17 = inttoptr %word 0 to %oop
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = icmp eq %word %r21, %r20
	%r18 = inttoptr i1 %r19 to %oop
	%r23 = ptrtoint %oop %r18 to %word
	%r22 = icmp ne %word %r23, 0
	br i1 %r22, label %L5, label %L4
L5:
	%r24 = call %oop @m_error-prologue.code()
	%r25 = getelementptr %"<string>", %"<string>"* @m_ostr2051, i32 0, i32 1
	%r26 = bitcast %word* %r25 to %oop
	%r27 = call %oop @"m_%error.code"(%oop %r26)
	%r28 = getelementptr %"<string>", %"<string>"* @m_ostr2053, i32 0, i32 1
	%r29 = bitcast %word* %r28 to %oop
	%r30 = call %oop @"m_%error.code"(%oop %r29)
	%r31 = getelementptr %"<string>", %"<string>"* @m_ostr2055, i32 0, i32 1
	%r32 = bitcast %word* %r31 to %oop
	%r33 = call %oop @"m_%error.code"(%oop %r32)
	%r34 = getelementptr %"<string>", %"<string>"* @m_ostr2057, i32 0, i32 1
	%r35 = bitcast %word* %r34 to %oop
	%r36 = call %oop @"m_%error.code"(%oop %r35)
	%r37 = getelementptr %"<string>", %"<string>"* @m_ostr2059, i32 0, i32 1
	%r38 = bitcast %word* %r37 to %oop
	%r39 = call %oop @"m_%error.code"(%oop %r38)
	%r40 = call %oop @m_error-epilogue.code()
	store %oop %r40, %oop* %t6
	%r41 = inttoptr %word 0 to %oop
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = ptrtoint %oop %r40 to %word
	%r43 = icmp eq %word %r45, %r44
	%r42 = inttoptr i1 %r43 to %oop
	%r47 = ptrtoint %oop %r42 to %word
	%r46 = icmp ne %word %r47, 0
	br i1 %r46, label %L6, label %L4
L6:
	br label %L4
L4:
	%r48 = load %oop, %oop* %t6
	%r49 = inttoptr %word 1 to %oop
	%r50 = load %oop, %oop* %t2
	%r54 = bitcast %oop %r50 to [0 x %oop]*
	%r53 = ptrtoint %oop %r49 to %word
	%r52 = getelementptr [0 x %oop], [0 x %oop]* %r54, %word 0, %word %r53
	%r51 = load %oop, %oop* %r52
	store %oop %r51, %oop* %t2
	store %oop %r51, %oop* %t5
	br label %L3
L2:
	%r55 = getelementptr %"<string>", %"<string>"* @m_ostr2061, i32 0, i32 1
	%r56 = bitcast %word* %r55 to %oop
	%r57 = load %oop, %oop* %t0
	%r58 = call %oop @"m_%not-enough-arguments.code"(%oop %r56, %oop %r57)
	store %oop %r58, %oop* %t5
	br label %L3
L3:
	%r59 = load %oop, %oop* %t5
	%r60 = load %oop, %oop* %t2
	%r61 = call %oop @"m_pair?.code"(%oop %r60)
	%r63 = ptrtoint %oop %r61 to %word
	%r62 = icmp ne %word %r63, 0
	br i1 %r62, label %L7, label %L8
L7:
	%r64 = inttoptr %word 0 to %oop
	%r65 = load %oop, %oop* %t2
	%r69 = bitcast %oop %r65 to [0 x %oop]*
	%r68 = ptrtoint %oop %r64 to %word
	%r67 = getelementptr [0 x %oop], [0 x %oop]* %r69, %word 0, %word %r68
	%r66 = load %oop, %oop* %r67
	store %oop %r66, %oop* %t4
	%r70 = inttoptr %word 0 to %oop
	store %oop %r70, %oop* %t6
	%r71 = load %oop, %oop* %t4
	%r72 = call %oop @"m_long?.code"(%oop %r71)
	store %oop %r72, %oop* %t6
	%r73 = inttoptr %word 0 to %oop
	%r77 = ptrtoint %oop %r73 to %word
	%r76 = ptrtoint %oop %r72 to %word
	%r75 = icmp eq %word %r77, %r76
	%r74 = inttoptr i1 %r75 to %oop
	%r79 = ptrtoint %oop %r74 to %word
	%r78 = icmp ne %word %r79, 0
	br i1 %r78, label %L11, label %L10
L11:
	%r80 = call %oop @m_error-prologue.code()
	%r81 = getelementptr %"<string>", %"<string>"* @m_ostr2063, i32 0, i32 1
	%r82 = bitcast %word* %r81 to %oop
	%r83 = call %oop @"m_%error.code"(%oop %r82)
	%r84 = getelementptr %"<string>", %"<string>"* @m_ostr2065, i32 0, i32 1
	%r85 = bitcast %word* %r84 to %oop
	%r86 = call %oop @"m_%error.code"(%oop %r85)
	%r87 = getelementptr %"<string>", %"<string>"* @m_ostr2067, i32 0, i32 1
	%r88 = bitcast %word* %r87 to %oop
	%r89 = call %oop @"m_%error.code"(%oop %r88)
	%r90 = getelementptr %"<string>", %"<string>"* @m_ostr2069, i32 0, i32 1
	%r91 = bitcast %word* %r90 to %oop
	%r92 = call %oop @"m_%error.code"(%oop %r91)
	%r93 = getelementptr %"<string>", %"<string>"* @m_ostr2071, i32 0, i32 1
	%r94 = bitcast %word* %r93 to %oop
	%r95 = call %oop @"m_%error.code"(%oop %r94)
	%r96 = call %oop @m_error-epilogue.code()
	store %oop %r96, %oop* %t6
	%r97 = inttoptr %word 0 to %oop
	%r101 = ptrtoint %oop %r97 to %word
	%r100 = ptrtoint %oop %r96 to %word
	%r99 = icmp eq %word %r101, %r100
	%r98 = inttoptr i1 %r99 to %oop
	%r103 = ptrtoint %oop %r98 to %word
	%r102 = icmp ne %word %r103, 0
	br i1 %r102, label %L12, label %L10
L12:
	br label %L10
L10:
	%r104 = load %oop, %oop* %t6
	%r105 = inttoptr %word 1 to %oop
	%r106 = load %oop, %oop* %t4
	%r110 = ptrtoint %oop %r106 to %word
	%r109 = ptrtoint %oop %r105 to %word
	%r108 = ashr %word %r110, %r109
	%r107 = inttoptr %word %r108 to %oop
	store %oop %r107, %oop* %t4
	%r111 = inttoptr %word 1 to %oop
	%r112 = load %oop, %oop* %t2
	%r116 = bitcast %oop %r112 to [0 x %oop]*
	%r115 = ptrtoint %oop %r111 to %word
	%r114 = getelementptr [0 x %oop], [0 x %oop]* %r116, %word 0, %word %r115
	%r113 = load %oop, %oop* %r114
	store %oop %r113, %oop* %t2
	store %oop %r113, %oop* %t5
	br label %L9
L8:
	%r117 = getelementptr %"<string>", %"<string>"* @m_ostr2073, i32 0, i32 1
	%r118 = bitcast %word* %r117 to %oop
	%r119 = load %oop, %oop* %t0
	%r120 = call %oop @"m_%not-enough-arguments.code"(%oop %r118, %oop %r119)
	store %oop %r120, %oop* %t5
	br label %L9
L9:
	%r121 = load %oop, %oop* %t5
	%r122 = load %oop, %oop* %t2
	%r124 = ptrtoint %oop %r122 to %word
	%r123 = icmp ne %word %r124, 0
	br i1 %r123, label %L13, label %L14
L13:
	%r125 = getelementptr %"<string>", %"<string>"* @m_ostr2075, i32 0, i32 1
	%r126 = bitcast %word* %r125 to %oop
	%r127 = load %oop, %oop* %t0
	%r128 = call %oop @"m_%too-many-arguments.code"(%oop %r126, %oop %r127)
	store %oop %r128, %oop* %t5
	br label %L15
L14:
	%r129 = inttoptr %word 0 to %oop
	store %oop %r129, %oop* %t5
	br label %L15
L15:
	%r130 = load %oop, %oop* %t5
	%r131 = inttoptr %word 1 to %oop
	%r132 = inttoptr %word 1 to %oop
	%r133 = load %oop, %oop* %t3
	%r134 = load %oop, %oop* %t4
	%r135 = call %oop @m_string-at.code(%oop %r133, %oop %r134)
	%r139 = ptrtoint %oop %r135 to %word
	%r138 = ptrtoint %oop %r132 to %word
	%r137 = shl %word %r139, %r138
	%r136 = inttoptr %word %r137 to %oop
	%r143 = ptrtoint %oop %r136 to %word
	%r142 = ptrtoint %oop %r131 to %word
	%r141 = or %word %r143, %r142
	%r140 = inttoptr %word %r141 to %oop
	ret %oop %r140
}
@m_cstr2076 = private unnamed_addr constant [23 x i8] c"char-at/evaluator-stub\00"
@m_ostr2077 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 45, %oop bitcast ([23 x i8]* @m_cstr2076 to %oop) }
@"m_char-at/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_char-at/evaluator-stub.code" to %oop), %"<string>"* @m_ostr2077 }
@m_cstr2078 = private unnamed_addr constant [13 x i8] c"set-array-at\00"
@m_ostr2079 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 25, %oop bitcast ([13 x i8]* @m_cstr2078 to %oop) }
@m_cstr2080 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr2081 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr2080 to %oop) }
@m_cstr2082 = private unnamed_addr constant [6 x i8] c"array\00"
@m_ostr2083 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr2082 to %oop) }
@m_cstr2084 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr2085 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr2084 to %oop) }
@m_cstr2086 = private unnamed_addr constant [8 x i8] c"<array>\00"
@m_ostr2087 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr2086 to %oop) }
@m_cstr2088 = private unnamed_addr constant [13 x i8] c"set-array-at\00"
@m_ostr2089 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 25, %oop bitcast ([13 x i8]* @m_cstr2088 to %oop) }
@m_cstr2090 = private unnamed_addr constant [13 x i8] c"set-array-at\00"
@m_ostr2091 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 25, %oop bitcast ([13 x i8]* @m_cstr2090 to %oop) }
@m_cstr2092 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr2093 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr2092 to %oop) }
@m_cstr2094 = private unnamed_addr constant [6 x i8] c"index\00"
@m_ostr2095 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr2094 to %oop) }
@m_cstr2096 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr2097 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr2096 to %oop) }
@m_cstr2098 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr2099 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr2098 to %oop) }
@m_cstr2100 = private unnamed_addr constant [13 x i8] c"set-array-at\00"
@m_ostr2101 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 25, %oop bitcast ([13 x i8]* @m_cstr2100 to %oop) }
@m_cstr2102 = private unnamed_addr constant [13 x i8] c"set-array-at\00"
@m_ostr2103 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 25, %oop bitcast ([13 x i8]* @m_cstr2102 to %oop) }
@m_cstr2104 = private unnamed_addr constant [13 x i8] c"set-array-at\00"
@m_ostr2105 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 25, %oop bitcast ([13 x i8]* @m_cstr2104 to %oop) }
define %oop @"m_set-array-at/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t5 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = inttoptr %word 0 to %oop
	store %oop %r4, %oop* %t5
	%r5 = load %oop, %oop* %t2
	%r6 = call %oop @"m_pair?.code"(%oop %r5)
	%r8 = ptrtoint %oop %r6 to %word
	%r7 = icmp ne %word %r8, 0
	br i1 %r7, label %L1, label %L2
L1:
	%r9 = inttoptr %word 0 to %oop
	%r10 = load %oop, %oop* %t2
	%r14 = bitcast %oop %r10 to [0 x %oop]*
	%r13 = ptrtoint %oop %r9 to %word
	%r12 = getelementptr [0 x %oop], [0 x %oop]* %r14, %word 0, %word %r13
	%r11 = load %oop, %oop* %r12
	store %oop %r11, %oop* %t3
	%r15 = inttoptr %word 0 to %oop
	store %oop %r15, %oop* %t7
	%r16 = load %oop, %oop* %t3
	%r17 = call %oop @"m_array?.code"(%oop %r16)
	store %oop %r17, %oop* %t7
	%r18 = inttoptr %word 0 to %oop
	%r22 = ptrtoint %oop %r18 to %word
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = icmp eq %word %r22, %r21
	%r19 = inttoptr i1 %r20 to %oop
	%r24 = ptrtoint %oop %r19 to %word
	%r23 = icmp ne %word %r24, 0
	br i1 %r23, label %L5, label %L4
L5:
	%r25 = call %oop @m_error-prologue.code()
	%r26 = getelementptr %"<string>", %"<string>"* @m_ostr2079, i32 0, i32 1
	%r27 = bitcast %word* %r26 to %oop
	%r28 = call %oop @"m_%error.code"(%oop %r27)
	%r29 = getelementptr %"<string>", %"<string>"* @m_ostr2081, i32 0, i32 1
	%r30 = bitcast %word* %r29 to %oop
	%r31 = call %oop @"m_%error.code"(%oop %r30)
	%r32 = getelementptr %"<string>", %"<string>"* @m_ostr2083, i32 0, i32 1
	%r33 = bitcast %word* %r32 to %oop
	%r34 = call %oop @"m_%error.code"(%oop %r33)
	%r35 = getelementptr %"<string>", %"<string>"* @m_ostr2085, i32 0, i32 1
	%r36 = bitcast %word* %r35 to %oop
	%r37 = call %oop @"m_%error.code"(%oop %r36)
	%r38 = getelementptr %"<string>", %"<string>"* @m_ostr2087, i32 0, i32 1
	%r39 = bitcast %word* %r38 to %oop
	%r40 = call %oop @"m_%error.code"(%oop %r39)
	%r41 = call %oop @m_error-epilogue.code()
	store %oop %r41, %oop* %t7
	%r42 = inttoptr %word 0 to %oop
	%r46 = ptrtoint %oop %r42 to %word
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = icmp eq %word %r46, %r45
	%r43 = inttoptr i1 %r44 to %oop
	%r48 = ptrtoint %oop %r43 to %word
	%r47 = icmp ne %word %r48, 0
	br i1 %r47, label %L6, label %L4
L6:
	br label %L4
L4:
	%r49 = load %oop, %oop* %t7
	%r50 = inttoptr %word 1 to %oop
	%r51 = load %oop, %oop* %t2
	%r55 = bitcast %oop %r51 to [0 x %oop]*
	%r54 = ptrtoint %oop %r50 to %word
	%r53 = getelementptr [0 x %oop], [0 x %oop]* %r55, %word 0, %word %r54
	%r52 = load %oop, %oop* %r53
	store %oop %r52, %oop* %t2
	store %oop %r52, %oop* %t6
	br label %L3
L2:
	%r56 = getelementptr %"<string>", %"<string>"* @m_ostr2089, i32 0, i32 1
	%r57 = bitcast %word* %r56 to %oop
	%r58 = load %oop, %oop* %t0
	%r59 = call %oop @"m_%not-enough-arguments.code"(%oop %r57, %oop %r58)
	store %oop %r59, %oop* %t6
	br label %L3
L3:
	%r60 = load %oop, %oop* %t6
	%r61 = load %oop, %oop* %t2
	%r62 = call %oop @"m_pair?.code"(%oop %r61)
	%r64 = ptrtoint %oop %r62 to %word
	%r63 = icmp ne %word %r64, 0
	br i1 %r63, label %L7, label %L8
L7:
	%r65 = inttoptr %word 0 to %oop
	%r66 = load %oop, %oop* %t2
	%r70 = bitcast %oop %r66 to [0 x %oop]*
	%r69 = ptrtoint %oop %r65 to %word
	%r68 = getelementptr [0 x %oop], [0 x %oop]* %r70, %word 0, %word %r69
	%r67 = load %oop, %oop* %r68
	store %oop %r67, %oop* %t4
	%r71 = inttoptr %word 0 to %oop
	store %oop %r71, %oop* %t7
	%r72 = load %oop, %oop* %t4
	%r73 = call %oop @"m_long?.code"(%oop %r72)
	store %oop %r73, %oop* %t7
	%r74 = inttoptr %word 0 to %oop
	%r78 = ptrtoint %oop %r74 to %word
	%r77 = ptrtoint %oop %r73 to %word
	%r76 = icmp eq %word %r78, %r77
	%r75 = inttoptr i1 %r76 to %oop
	%r80 = ptrtoint %oop %r75 to %word
	%r79 = icmp ne %word %r80, 0
	br i1 %r79, label %L11, label %L10
L11:
	%r81 = call %oop @m_error-prologue.code()
	%r82 = getelementptr %"<string>", %"<string>"* @m_ostr2091, i32 0, i32 1
	%r83 = bitcast %word* %r82 to %oop
	%r84 = call %oop @"m_%error.code"(%oop %r83)
	%r85 = getelementptr %"<string>", %"<string>"* @m_ostr2093, i32 0, i32 1
	%r86 = bitcast %word* %r85 to %oop
	%r87 = call %oop @"m_%error.code"(%oop %r86)
	%r88 = getelementptr %"<string>", %"<string>"* @m_ostr2095, i32 0, i32 1
	%r89 = bitcast %word* %r88 to %oop
	%r90 = call %oop @"m_%error.code"(%oop %r89)
	%r91 = getelementptr %"<string>", %"<string>"* @m_ostr2097, i32 0, i32 1
	%r92 = bitcast %word* %r91 to %oop
	%r93 = call %oop @"m_%error.code"(%oop %r92)
	%r94 = getelementptr %"<string>", %"<string>"* @m_ostr2099, i32 0, i32 1
	%r95 = bitcast %word* %r94 to %oop
	%r96 = call %oop @"m_%error.code"(%oop %r95)
	%r97 = call %oop @m_error-epilogue.code()
	store %oop %r97, %oop* %t7
	%r98 = inttoptr %word 0 to %oop
	%r102 = ptrtoint %oop %r98 to %word
	%r101 = ptrtoint %oop %r97 to %word
	%r100 = icmp eq %word %r102, %r101
	%r99 = inttoptr i1 %r100 to %oop
	%r104 = ptrtoint %oop %r99 to %word
	%r103 = icmp ne %word %r104, 0
	br i1 %r103, label %L12, label %L10
L12:
	br label %L10
L10:
	%r105 = load %oop, %oop* %t7
	%r106 = inttoptr %word 1 to %oop
	%r107 = load %oop, %oop* %t4
	%r111 = ptrtoint %oop %r107 to %word
	%r110 = ptrtoint %oop %r106 to %word
	%r109 = ashr %word %r111, %r110
	%r108 = inttoptr %word %r109 to %oop
	store %oop %r108, %oop* %t4
	%r112 = inttoptr %word 1 to %oop
	%r113 = load %oop, %oop* %t2
	%r117 = bitcast %oop %r113 to [0 x %oop]*
	%r116 = ptrtoint %oop %r112 to %word
	%r115 = getelementptr [0 x %oop], [0 x %oop]* %r117, %word 0, %word %r116
	%r114 = load %oop, %oop* %r115
	store %oop %r114, %oop* %t2
	store %oop %r114, %oop* %t6
	br label %L9
L8:
	%r118 = getelementptr %"<string>", %"<string>"* @m_ostr2101, i32 0, i32 1
	%r119 = bitcast %word* %r118 to %oop
	%r120 = load %oop, %oop* %t0
	%r121 = call %oop @"m_%not-enough-arguments.code"(%oop %r119, %oop %r120)
	store %oop %r121, %oop* %t6
	br label %L9
L9:
	%r122 = load %oop, %oop* %t6
	%r123 = load %oop, %oop* %t2
	%r124 = call %oop @"m_pair?.code"(%oop %r123)
	%r126 = ptrtoint %oop %r124 to %word
	%r125 = icmp ne %word %r126, 0
	br i1 %r125, label %L13, label %L14
L13:
	%r127 = inttoptr %word 0 to %oop
	%r128 = load %oop, %oop* %t2
	%r132 = bitcast %oop %r128 to [0 x %oop]*
	%r131 = ptrtoint %oop %r127 to %word
	%r130 = getelementptr [0 x %oop], [0 x %oop]* %r132, %word 0, %word %r131
	%r129 = load %oop, %oop* %r130
	store %oop %r129, %oop* %t5
	%r133 = inttoptr %word 1 to %oop
	%r134 = load %oop, %oop* %t2
	%r138 = bitcast %oop %r134 to [0 x %oop]*
	%r137 = ptrtoint %oop %r133 to %word
	%r136 = getelementptr [0 x %oop], [0 x %oop]* %r138, %word 0, %word %r137
	%r135 = load %oop, %oop* %r136
	store %oop %r135, %oop* %t2
	store %oop %r135, %oop* %t6
	br label %L15
L14:
	%r139 = getelementptr %"<string>", %"<string>"* @m_ostr2103, i32 0, i32 1
	%r140 = bitcast %word* %r139 to %oop
	%r141 = load %oop, %oop* %t0
	%r142 = call %oop @"m_%not-enough-arguments.code"(%oop %r140, %oop %r141)
	store %oop %r142, %oop* %t6
	br label %L15
L15:
	%r143 = load %oop, %oop* %t6
	%r144 = load %oop, %oop* %t2
	%r146 = ptrtoint %oop %r144 to %word
	%r145 = icmp ne %word %r146, 0
	br i1 %r145, label %L16, label %L17
L16:
	%r147 = getelementptr %"<string>", %"<string>"* @m_ostr2105, i32 0, i32 1
	%r148 = bitcast %word* %r147 to %oop
	%r149 = load %oop, %oop* %t0
	%r150 = call %oop @"m_%too-many-arguments.code"(%oop %r148, %oop %r149)
	store %oop %r150, %oop* %t6
	br label %L18
L17:
	%r151 = inttoptr %word 0 to %oop
	store %oop %r151, %oop* %t6
	br label %L18
L18:
	%r152 = load %oop, %oop* %t6
	%r153 = load %oop, %oop* %t3
	%r154 = load %oop, %oop* %t4
	%r155 = load %oop, %oop* %t5
	%r156 = call %oop @m_set-array-at.code(%oop %r153, %oop %r154, %oop %r155)
	ret %oop %r156
}
@m_cstr2106 = private unnamed_addr constant [28 x i8] c"set-array-at/evaluator-stub\00"
@m_ostr2107 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 55, %oop bitcast ([28 x i8]* @m_cstr2106 to %oop) }
@"m_set-array-at/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_set-array-at/evaluator-stub.code" to %oop), %"<string>"* @m_ostr2107 }
@m_cstr2108 = private unnamed_addr constant [14 x i8] c"set-string-at\00"
@m_ostr2109 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr2108 to %oop) }
@m_cstr2110 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr2111 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr2110 to %oop) }
@m_cstr2112 = private unnamed_addr constant [7 x i8] c"string\00"
@m_ostr2113 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr2112 to %oop) }
@m_cstr2114 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr2115 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr2114 to %oop) }
@m_cstr2116 = private unnamed_addr constant [9 x i8] c"<string>\00"
@m_ostr2117 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr2116 to %oop) }
@m_cstr2118 = private unnamed_addr constant [14 x i8] c"set-string-at\00"
@m_ostr2119 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr2118 to %oop) }
@m_cstr2120 = private unnamed_addr constant [14 x i8] c"set-string-at\00"
@m_ostr2121 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr2120 to %oop) }
@m_cstr2122 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr2123 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr2122 to %oop) }
@m_cstr2124 = private unnamed_addr constant [6 x i8] c"index\00"
@m_ostr2125 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr2124 to %oop) }
@m_cstr2126 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr2127 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr2126 to %oop) }
@m_cstr2128 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr2129 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr2128 to %oop) }
@m_cstr2130 = private unnamed_addr constant [14 x i8] c"set-string-at\00"
@m_ostr2131 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr2130 to %oop) }
@m_cstr2132 = private unnamed_addr constant [14 x i8] c"set-string-at\00"
@m_ostr2133 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr2132 to %oop) }
@m_cstr2134 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr2135 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr2134 to %oop) }
@m_cstr2136 = private unnamed_addr constant [6 x i8] c"value\00"
@m_ostr2137 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr2136 to %oop) }
@m_cstr2138 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr2139 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr2138 to %oop) }
@m_cstr2140 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr2141 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr2140 to %oop) }
@m_cstr2142 = private unnamed_addr constant [14 x i8] c"set-string-at\00"
@m_ostr2143 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr2142 to %oop) }
@m_cstr2144 = private unnamed_addr constant [14 x i8] c"set-string-at\00"
@m_ostr2145 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr2144 to %oop) }
define %oop @"m_set-string-at/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t5 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = inttoptr %word 0 to %oop
	store %oop %r4, %oop* %t5
	%r5 = load %oop, %oop* %t2
	%r6 = call %oop @"m_pair?.code"(%oop %r5)
	%r8 = ptrtoint %oop %r6 to %word
	%r7 = icmp ne %word %r8, 0
	br i1 %r7, label %L1, label %L2
L1:
	%r9 = inttoptr %word 0 to %oop
	%r10 = load %oop, %oop* %t2
	%r14 = bitcast %oop %r10 to [0 x %oop]*
	%r13 = ptrtoint %oop %r9 to %word
	%r12 = getelementptr [0 x %oop], [0 x %oop]* %r14, %word 0, %word %r13
	%r11 = load %oop, %oop* %r12
	store %oop %r11, %oop* %t3
	%r15 = inttoptr %word 0 to %oop
	store %oop %r15, %oop* %t7
	%r16 = load %oop, %oop* %t3
	%r17 = call %oop @"m_string?.code"(%oop %r16)
	store %oop %r17, %oop* %t7
	%r18 = inttoptr %word 0 to %oop
	%r22 = ptrtoint %oop %r18 to %word
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = icmp eq %word %r22, %r21
	%r19 = inttoptr i1 %r20 to %oop
	%r24 = ptrtoint %oop %r19 to %word
	%r23 = icmp ne %word %r24, 0
	br i1 %r23, label %L5, label %L4
L5:
	%r25 = call %oop @m_error-prologue.code()
	%r26 = getelementptr %"<string>", %"<string>"* @m_ostr2109, i32 0, i32 1
	%r27 = bitcast %word* %r26 to %oop
	%r28 = call %oop @"m_%error.code"(%oop %r27)
	%r29 = getelementptr %"<string>", %"<string>"* @m_ostr2111, i32 0, i32 1
	%r30 = bitcast %word* %r29 to %oop
	%r31 = call %oop @"m_%error.code"(%oop %r30)
	%r32 = getelementptr %"<string>", %"<string>"* @m_ostr2113, i32 0, i32 1
	%r33 = bitcast %word* %r32 to %oop
	%r34 = call %oop @"m_%error.code"(%oop %r33)
	%r35 = getelementptr %"<string>", %"<string>"* @m_ostr2115, i32 0, i32 1
	%r36 = bitcast %word* %r35 to %oop
	%r37 = call %oop @"m_%error.code"(%oop %r36)
	%r38 = getelementptr %"<string>", %"<string>"* @m_ostr2117, i32 0, i32 1
	%r39 = bitcast %word* %r38 to %oop
	%r40 = call %oop @"m_%error.code"(%oop %r39)
	%r41 = call %oop @m_error-epilogue.code()
	store %oop %r41, %oop* %t7
	%r42 = inttoptr %word 0 to %oop
	%r46 = ptrtoint %oop %r42 to %word
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = icmp eq %word %r46, %r45
	%r43 = inttoptr i1 %r44 to %oop
	%r48 = ptrtoint %oop %r43 to %word
	%r47 = icmp ne %word %r48, 0
	br i1 %r47, label %L6, label %L4
L6:
	br label %L4
L4:
	%r49 = load %oop, %oop* %t7
	%r50 = inttoptr %word 1 to %oop
	%r51 = load %oop, %oop* %t2
	%r55 = bitcast %oop %r51 to [0 x %oop]*
	%r54 = ptrtoint %oop %r50 to %word
	%r53 = getelementptr [0 x %oop], [0 x %oop]* %r55, %word 0, %word %r54
	%r52 = load %oop, %oop* %r53
	store %oop %r52, %oop* %t2
	store %oop %r52, %oop* %t6
	br label %L3
L2:
	%r56 = getelementptr %"<string>", %"<string>"* @m_ostr2119, i32 0, i32 1
	%r57 = bitcast %word* %r56 to %oop
	%r58 = load %oop, %oop* %t0
	%r59 = call %oop @"m_%not-enough-arguments.code"(%oop %r57, %oop %r58)
	store %oop %r59, %oop* %t6
	br label %L3
L3:
	%r60 = load %oop, %oop* %t6
	%r61 = load %oop, %oop* %t2
	%r62 = call %oop @"m_pair?.code"(%oop %r61)
	%r64 = ptrtoint %oop %r62 to %word
	%r63 = icmp ne %word %r64, 0
	br i1 %r63, label %L7, label %L8
L7:
	%r65 = inttoptr %word 0 to %oop
	%r66 = load %oop, %oop* %t2
	%r70 = bitcast %oop %r66 to [0 x %oop]*
	%r69 = ptrtoint %oop %r65 to %word
	%r68 = getelementptr [0 x %oop], [0 x %oop]* %r70, %word 0, %word %r69
	%r67 = load %oop, %oop* %r68
	store %oop %r67, %oop* %t4
	%r71 = inttoptr %word 0 to %oop
	store %oop %r71, %oop* %t7
	%r72 = load %oop, %oop* %t4
	%r73 = call %oop @"m_long?.code"(%oop %r72)
	store %oop %r73, %oop* %t7
	%r74 = inttoptr %word 0 to %oop
	%r78 = ptrtoint %oop %r74 to %word
	%r77 = ptrtoint %oop %r73 to %word
	%r76 = icmp eq %word %r78, %r77
	%r75 = inttoptr i1 %r76 to %oop
	%r80 = ptrtoint %oop %r75 to %word
	%r79 = icmp ne %word %r80, 0
	br i1 %r79, label %L11, label %L10
L11:
	%r81 = call %oop @m_error-prologue.code()
	%r82 = getelementptr %"<string>", %"<string>"* @m_ostr2121, i32 0, i32 1
	%r83 = bitcast %word* %r82 to %oop
	%r84 = call %oop @"m_%error.code"(%oop %r83)
	%r85 = getelementptr %"<string>", %"<string>"* @m_ostr2123, i32 0, i32 1
	%r86 = bitcast %word* %r85 to %oop
	%r87 = call %oop @"m_%error.code"(%oop %r86)
	%r88 = getelementptr %"<string>", %"<string>"* @m_ostr2125, i32 0, i32 1
	%r89 = bitcast %word* %r88 to %oop
	%r90 = call %oop @"m_%error.code"(%oop %r89)
	%r91 = getelementptr %"<string>", %"<string>"* @m_ostr2127, i32 0, i32 1
	%r92 = bitcast %word* %r91 to %oop
	%r93 = call %oop @"m_%error.code"(%oop %r92)
	%r94 = getelementptr %"<string>", %"<string>"* @m_ostr2129, i32 0, i32 1
	%r95 = bitcast %word* %r94 to %oop
	%r96 = call %oop @"m_%error.code"(%oop %r95)
	%r97 = call %oop @m_error-epilogue.code()
	store %oop %r97, %oop* %t7
	%r98 = inttoptr %word 0 to %oop
	%r102 = ptrtoint %oop %r98 to %word
	%r101 = ptrtoint %oop %r97 to %word
	%r100 = icmp eq %word %r102, %r101
	%r99 = inttoptr i1 %r100 to %oop
	%r104 = ptrtoint %oop %r99 to %word
	%r103 = icmp ne %word %r104, 0
	br i1 %r103, label %L12, label %L10
L12:
	br label %L10
L10:
	%r105 = load %oop, %oop* %t7
	%r106 = inttoptr %word 1 to %oop
	%r107 = load %oop, %oop* %t4
	%r111 = ptrtoint %oop %r107 to %word
	%r110 = ptrtoint %oop %r106 to %word
	%r109 = ashr %word %r111, %r110
	%r108 = inttoptr %word %r109 to %oop
	store %oop %r108, %oop* %t4
	%r112 = inttoptr %word 1 to %oop
	%r113 = load %oop, %oop* %t2
	%r117 = bitcast %oop %r113 to [0 x %oop]*
	%r116 = ptrtoint %oop %r112 to %word
	%r115 = getelementptr [0 x %oop], [0 x %oop]* %r117, %word 0, %word %r116
	%r114 = load %oop, %oop* %r115
	store %oop %r114, %oop* %t2
	store %oop %r114, %oop* %t6
	br label %L9
L8:
	%r118 = getelementptr %"<string>", %"<string>"* @m_ostr2131, i32 0, i32 1
	%r119 = bitcast %word* %r118 to %oop
	%r120 = load %oop, %oop* %t0
	%r121 = call %oop @"m_%not-enough-arguments.code"(%oop %r119, %oop %r120)
	store %oop %r121, %oop* %t6
	br label %L9
L9:
	%r122 = load %oop, %oop* %t6
	%r123 = load %oop, %oop* %t2
	%r124 = call %oop @"m_pair?.code"(%oop %r123)
	%r126 = ptrtoint %oop %r124 to %word
	%r125 = icmp ne %word %r126, 0
	br i1 %r125, label %L13, label %L14
L13:
	%r127 = inttoptr %word 0 to %oop
	%r128 = load %oop, %oop* %t2
	%r132 = bitcast %oop %r128 to [0 x %oop]*
	%r131 = ptrtoint %oop %r127 to %word
	%r130 = getelementptr [0 x %oop], [0 x %oop]* %r132, %word 0, %word %r131
	%r129 = load %oop, %oop* %r130
	store %oop %r129, %oop* %t5
	%r133 = inttoptr %word 0 to %oop
	store %oop %r133, %oop* %t7
	%r134 = load %oop, %oop* %t5
	%r135 = call %oop @"m_long?.code"(%oop %r134)
	store %oop %r135, %oop* %t7
	%r136 = inttoptr %word 0 to %oop
	%r140 = ptrtoint %oop %r136 to %word
	%r139 = ptrtoint %oop %r135 to %word
	%r138 = icmp eq %word %r140, %r139
	%r137 = inttoptr i1 %r138 to %oop
	%r142 = ptrtoint %oop %r137 to %word
	%r141 = icmp ne %word %r142, 0
	br i1 %r141, label %L17, label %L16
L17:
	%r143 = call %oop @m_error-prologue.code()
	%r144 = getelementptr %"<string>", %"<string>"* @m_ostr2133, i32 0, i32 1
	%r145 = bitcast %word* %r144 to %oop
	%r146 = call %oop @"m_%error.code"(%oop %r145)
	%r147 = getelementptr %"<string>", %"<string>"* @m_ostr2135, i32 0, i32 1
	%r148 = bitcast %word* %r147 to %oop
	%r149 = call %oop @"m_%error.code"(%oop %r148)
	%r150 = getelementptr %"<string>", %"<string>"* @m_ostr2137, i32 0, i32 1
	%r151 = bitcast %word* %r150 to %oop
	%r152 = call %oop @"m_%error.code"(%oop %r151)
	%r153 = getelementptr %"<string>", %"<string>"* @m_ostr2139, i32 0, i32 1
	%r154 = bitcast %word* %r153 to %oop
	%r155 = call %oop @"m_%error.code"(%oop %r154)
	%r156 = getelementptr %"<string>", %"<string>"* @m_ostr2141, i32 0, i32 1
	%r157 = bitcast %word* %r156 to %oop
	%r158 = call %oop @"m_%error.code"(%oop %r157)
	%r159 = call %oop @m_error-epilogue.code()
	store %oop %r159, %oop* %t7
	%r160 = inttoptr %word 0 to %oop
	%r164 = ptrtoint %oop %r160 to %word
	%r163 = ptrtoint %oop %r159 to %word
	%r162 = icmp eq %word %r164, %r163
	%r161 = inttoptr i1 %r162 to %oop
	%r166 = ptrtoint %oop %r161 to %word
	%r165 = icmp ne %word %r166, 0
	br i1 %r165, label %L18, label %L16
L18:
	br label %L16
L16:
	%r167 = load %oop, %oop* %t7
	%r168 = inttoptr %word 1 to %oop
	%r169 = load %oop, %oop* %t5
	%r173 = ptrtoint %oop %r169 to %word
	%r172 = ptrtoint %oop %r168 to %word
	%r171 = ashr %word %r173, %r172
	%r170 = inttoptr %word %r171 to %oop
	store %oop %r170, %oop* %t5
	%r174 = inttoptr %word 1 to %oop
	%r175 = load %oop, %oop* %t2
	%r179 = bitcast %oop %r175 to [0 x %oop]*
	%r178 = ptrtoint %oop %r174 to %word
	%r177 = getelementptr [0 x %oop], [0 x %oop]* %r179, %word 0, %word %r178
	%r176 = load %oop, %oop* %r177
	store %oop %r176, %oop* %t2
	store %oop %r176, %oop* %t6
	br label %L15
L14:
	%r180 = getelementptr %"<string>", %"<string>"* @m_ostr2143, i32 0, i32 1
	%r181 = bitcast %word* %r180 to %oop
	%r182 = load %oop, %oop* %t0
	%r183 = call %oop @"m_%not-enough-arguments.code"(%oop %r181, %oop %r182)
	store %oop %r183, %oop* %t6
	br label %L15
L15:
	%r184 = load %oop, %oop* %t6
	%r185 = load %oop, %oop* %t2
	%r187 = ptrtoint %oop %r185 to %word
	%r186 = icmp ne %word %r187, 0
	br i1 %r186, label %L19, label %L20
L19:
	%r188 = getelementptr %"<string>", %"<string>"* @m_ostr2145, i32 0, i32 1
	%r189 = bitcast %word* %r188 to %oop
	%r190 = load %oop, %oop* %t0
	%r191 = call %oop @"m_%too-many-arguments.code"(%oop %r189, %oop %r190)
	store %oop %r191, %oop* %t6
	br label %L21
L20:
	%r192 = inttoptr %word 0 to %oop
	store %oop %r192, %oop* %t6
	br label %L21
L21:
	%r193 = load %oop, %oop* %t6
	%r194 = inttoptr %word 0 to %oop
	%r195 = load %oop, %oop* %t3
	%r196 = load %oop, %oop* %t4
	%r197 = load %oop, %oop* %t5
	%r198 = call %oop @m_set-string-at.code(%oop %r195, %oop %r196, %oop %r197)
	%r199 = inttoptr %word 1 to %oop
	%r200 = inttoptr %word 1 to %oop
	%r201 = load %oop, %oop* %t5
	%r205 = ptrtoint %oop %r201 to %word
	%r204 = ptrtoint %oop %r200 to %word
	%r203 = shl %word %r205, %r204
	%r202 = inttoptr %word %r203 to %oop
	%r209 = ptrtoint %oop %r202 to %word
	%r208 = ptrtoint %oop %r199 to %word
	%r207 = or %word %r209, %r208
	%r206 = inttoptr %word %r207 to %oop
	ret %oop %r206
}
@m_cstr2146 = private unnamed_addr constant [29 x i8] c"set-string-at/evaluator-stub\00"
@m_ostr2147 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 57, %oop bitcast ([29 x i8]* @m_cstr2146 to %oop) }
@"m_set-string-at/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_set-string-at/evaluator-stub.code" to %oop), %"<string>"* @m_ostr2147 }
@m_cstr2148 = private unnamed_addr constant [12 x i8] c"set-char-at\00"
@m_ostr2149 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr2148 to %oop) }
@m_cstr2150 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr2151 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr2150 to %oop) }
@m_cstr2152 = private unnamed_addr constant [7 x i8] c"string\00"
@m_ostr2153 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr2152 to %oop) }
@m_cstr2154 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr2155 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr2154 to %oop) }
@m_cstr2156 = private unnamed_addr constant [9 x i8] c"<string>\00"
@m_ostr2157 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr2156 to %oop) }
@m_cstr2158 = private unnamed_addr constant [12 x i8] c"set-char-at\00"
@m_ostr2159 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr2158 to %oop) }
@m_cstr2160 = private unnamed_addr constant [12 x i8] c"set-char-at\00"
@m_ostr2161 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr2160 to %oop) }
@m_cstr2162 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr2163 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr2162 to %oop) }
@m_cstr2164 = private unnamed_addr constant [6 x i8] c"index\00"
@m_ostr2165 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr2164 to %oop) }
@m_cstr2166 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr2167 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr2166 to %oop) }
@m_cstr2168 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr2169 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr2168 to %oop) }
@m_cstr2170 = private unnamed_addr constant [12 x i8] c"set-char-at\00"
@m_ostr2171 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr2170 to %oop) }
@m_cstr2172 = private unnamed_addr constant [12 x i8] c"set-char-at\00"
@m_ostr2173 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr2172 to %oop) }
@m_cstr2174 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr2175 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr2174 to %oop) }
@m_cstr2176 = private unnamed_addr constant [6 x i8] c"value\00"
@m_ostr2177 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr2176 to %oop) }
@m_cstr2178 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr2179 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr2178 to %oop) }
@m_cstr2180 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr2181 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr2180 to %oop) }
@m_cstr2182 = private unnamed_addr constant [12 x i8] c"set-char-at\00"
@m_ostr2183 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr2182 to %oop) }
@m_cstr2184 = private unnamed_addr constant [12 x i8] c"set-char-at\00"
@m_ostr2185 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 23, %oop bitcast ([12 x i8]* @m_cstr2184 to %oop) }
define %oop @"m_set-char-at/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t5 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = inttoptr %word 0 to %oop
	store %oop %r4, %oop* %t5
	%r5 = load %oop, %oop* %t2
	%r6 = call %oop @"m_pair?.code"(%oop %r5)
	%r8 = ptrtoint %oop %r6 to %word
	%r7 = icmp ne %word %r8, 0
	br i1 %r7, label %L1, label %L2
L1:
	%r9 = inttoptr %word 0 to %oop
	%r10 = load %oop, %oop* %t2
	%r14 = bitcast %oop %r10 to [0 x %oop]*
	%r13 = ptrtoint %oop %r9 to %word
	%r12 = getelementptr [0 x %oop], [0 x %oop]* %r14, %word 0, %word %r13
	%r11 = load %oop, %oop* %r12
	store %oop %r11, %oop* %t3
	%r15 = inttoptr %word 0 to %oop
	store %oop %r15, %oop* %t7
	%r16 = load %oop, %oop* %t3
	%r17 = call %oop @"m_string?.code"(%oop %r16)
	store %oop %r17, %oop* %t7
	%r18 = inttoptr %word 0 to %oop
	%r22 = ptrtoint %oop %r18 to %word
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = icmp eq %word %r22, %r21
	%r19 = inttoptr i1 %r20 to %oop
	%r24 = ptrtoint %oop %r19 to %word
	%r23 = icmp ne %word %r24, 0
	br i1 %r23, label %L5, label %L4
L5:
	%r25 = call %oop @m_error-prologue.code()
	%r26 = getelementptr %"<string>", %"<string>"* @m_ostr2149, i32 0, i32 1
	%r27 = bitcast %word* %r26 to %oop
	%r28 = call %oop @"m_%error.code"(%oop %r27)
	%r29 = getelementptr %"<string>", %"<string>"* @m_ostr2151, i32 0, i32 1
	%r30 = bitcast %word* %r29 to %oop
	%r31 = call %oop @"m_%error.code"(%oop %r30)
	%r32 = getelementptr %"<string>", %"<string>"* @m_ostr2153, i32 0, i32 1
	%r33 = bitcast %word* %r32 to %oop
	%r34 = call %oop @"m_%error.code"(%oop %r33)
	%r35 = getelementptr %"<string>", %"<string>"* @m_ostr2155, i32 0, i32 1
	%r36 = bitcast %word* %r35 to %oop
	%r37 = call %oop @"m_%error.code"(%oop %r36)
	%r38 = getelementptr %"<string>", %"<string>"* @m_ostr2157, i32 0, i32 1
	%r39 = bitcast %word* %r38 to %oop
	%r40 = call %oop @"m_%error.code"(%oop %r39)
	%r41 = call %oop @m_error-epilogue.code()
	store %oop %r41, %oop* %t7
	%r42 = inttoptr %word 0 to %oop
	%r46 = ptrtoint %oop %r42 to %word
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = icmp eq %word %r46, %r45
	%r43 = inttoptr i1 %r44 to %oop
	%r48 = ptrtoint %oop %r43 to %word
	%r47 = icmp ne %word %r48, 0
	br i1 %r47, label %L6, label %L4
L6:
	br label %L4
L4:
	%r49 = load %oop, %oop* %t7
	%r50 = inttoptr %word 1 to %oop
	%r51 = load %oop, %oop* %t2
	%r55 = bitcast %oop %r51 to [0 x %oop]*
	%r54 = ptrtoint %oop %r50 to %word
	%r53 = getelementptr [0 x %oop], [0 x %oop]* %r55, %word 0, %word %r54
	%r52 = load %oop, %oop* %r53
	store %oop %r52, %oop* %t2
	store %oop %r52, %oop* %t6
	br label %L3
L2:
	%r56 = getelementptr %"<string>", %"<string>"* @m_ostr2159, i32 0, i32 1
	%r57 = bitcast %word* %r56 to %oop
	%r58 = load %oop, %oop* %t0
	%r59 = call %oop @"m_%not-enough-arguments.code"(%oop %r57, %oop %r58)
	store %oop %r59, %oop* %t6
	br label %L3
L3:
	%r60 = load %oop, %oop* %t6
	%r61 = load %oop, %oop* %t2
	%r62 = call %oop @"m_pair?.code"(%oop %r61)
	%r64 = ptrtoint %oop %r62 to %word
	%r63 = icmp ne %word %r64, 0
	br i1 %r63, label %L7, label %L8
L7:
	%r65 = inttoptr %word 0 to %oop
	%r66 = load %oop, %oop* %t2
	%r70 = bitcast %oop %r66 to [0 x %oop]*
	%r69 = ptrtoint %oop %r65 to %word
	%r68 = getelementptr [0 x %oop], [0 x %oop]* %r70, %word 0, %word %r69
	%r67 = load %oop, %oop* %r68
	store %oop %r67, %oop* %t4
	%r71 = inttoptr %word 0 to %oop
	store %oop %r71, %oop* %t7
	%r72 = load %oop, %oop* %t4
	%r73 = call %oop @"m_long?.code"(%oop %r72)
	store %oop %r73, %oop* %t7
	%r74 = inttoptr %word 0 to %oop
	%r78 = ptrtoint %oop %r74 to %word
	%r77 = ptrtoint %oop %r73 to %word
	%r76 = icmp eq %word %r78, %r77
	%r75 = inttoptr i1 %r76 to %oop
	%r80 = ptrtoint %oop %r75 to %word
	%r79 = icmp ne %word %r80, 0
	br i1 %r79, label %L11, label %L10
L11:
	%r81 = call %oop @m_error-prologue.code()
	%r82 = getelementptr %"<string>", %"<string>"* @m_ostr2161, i32 0, i32 1
	%r83 = bitcast %word* %r82 to %oop
	%r84 = call %oop @"m_%error.code"(%oop %r83)
	%r85 = getelementptr %"<string>", %"<string>"* @m_ostr2163, i32 0, i32 1
	%r86 = bitcast %word* %r85 to %oop
	%r87 = call %oop @"m_%error.code"(%oop %r86)
	%r88 = getelementptr %"<string>", %"<string>"* @m_ostr2165, i32 0, i32 1
	%r89 = bitcast %word* %r88 to %oop
	%r90 = call %oop @"m_%error.code"(%oop %r89)
	%r91 = getelementptr %"<string>", %"<string>"* @m_ostr2167, i32 0, i32 1
	%r92 = bitcast %word* %r91 to %oop
	%r93 = call %oop @"m_%error.code"(%oop %r92)
	%r94 = getelementptr %"<string>", %"<string>"* @m_ostr2169, i32 0, i32 1
	%r95 = bitcast %word* %r94 to %oop
	%r96 = call %oop @"m_%error.code"(%oop %r95)
	%r97 = call %oop @m_error-epilogue.code()
	store %oop %r97, %oop* %t7
	%r98 = inttoptr %word 0 to %oop
	%r102 = ptrtoint %oop %r98 to %word
	%r101 = ptrtoint %oop %r97 to %word
	%r100 = icmp eq %word %r102, %r101
	%r99 = inttoptr i1 %r100 to %oop
	%r104 = ptrtoint %oop %r99 to %word
	%r103 = icmp ne %word %r104, 0
	br i1 %r103, label %L12, label %L10
L12:
	br label %L10
L10:
	%r105 = load %oop, %oop* %t7
	%r106 = inttoptr %word 1 to %oop
	%r107 = load %oop, %oop* %t4
	%r111 = ptrtoint %oop %r107 to %word
	%r110 = ptrtoint %oop %r106 to %word
	%r109 = ashr %word %r111, %r110
	%r108 = inttoptr %word %r109 to %oop
	store %oop %r108, %oop* %t4
	%r112 = inttoptr %word 1 to %oop
	%r113 = load %oop, %oop* %t2
	%r117 = bitcast %oop %r113 to [0 x %oop]*
	%r116 = ptrtoint %oop %r112 to %word
	%r115 = getelementptr [0 x %oop], [0 x %oop]* %r117, %word 0, %word %r116
	%r114 = load %oop, %oop* %r115
	store %oop %r114, %oop* %t2
	store %oop %r114, %oop* %t6
	br label %L9
L8:
	%r118 = getelementptr %"<string>", %"<string>"* @m_ostr2171, i32 0, i32 1
	%r119 = bitcast %word* %r118 to %oop
	%r120 = load %oop, %oop* %t0
	%r121 = call %oop @"m_%not-enough-arguments.code"(%oop %r119, %oop %r120)
	store %oop %r121, %oop* %t6
	br label %L9
L9:
	%r122 = load %oop, %oop* %t6
	%r123 = load %oop, %oop* %t2
	%r124 = call %oop @"m_pair?.code"(%oop %r123)
	%r126 = ptrtoint %oop %r124 to %word
	%r125 = icmp ne %word %r126, 0
	br i1 %r125, label %L13, label %L14
L13:
	%r127 = inttoptr %word 0 to %oop
	%r128 = load %oop, %oop* %t2
	%r132 = bitcast %oop %r128 to [0 x %oop]*
	%r131 = ptrtoint %oop %r127 to %word
	%r130 = getelementptr [0 x %oop], [0 x %oop]* %r132, %word 0, %word %r131
	%r129 = load %oop, %oop* %r130
	store %oop %r129, %oop* %t5
	%r133 = inttoptr %word 0 to %oop
	store %oop %r133, %oop* %t7
	%r134 = load %oop, %oop* %t5
	%r135 = call %oop @"m_long?.code"(%oop %r134)
	store %oop %r135, %oop* %t7
	%r136 = inttoptr %word 0 to %oop
	%r140 = ptrtoint %oop %r136 to %word
	%r139 = ptrtoint %oop %r135 to %word
	%r138 = icmp eq %word %r140, %r139
	%r137 = inttoptr i1 %r138 to %oop
	%r142 = ptrtoint %oop %r137 to %word
	%r141 = icmp ne %word %r142, 0
	br i1 %r141, label %L17, label %L16
L17:
	%r143 = call %oop @m_error-prologue.code()
	%r144 = getelementptr %"<string>", %"<string>"* @m_ostr2173, i32 0, i32 1
	%r145 = bitcast %word* %r144 to %oop
	%r146 = call %oop @"m_%error.code"(%oop %r145)
	%r147 = getelementptr %"<string>", %"<string>"* @m_ostr2175, i32 0, i32 1
	%r148 = bitcast %word* %r147 to %oop
	%r149 = call %oop @"m_%error.code"(%oop %r148)
	%r150 = getelementptr %"<string>", %"<string>"* @m_ostr2177, i32 0, i32 1
	%r151 = bitcast %word* %r150 to %oop
	%r152 = call %oop @"m_%error.code"(%oop %r151)
	%r153 = getelementptr %"<string>", %"<string>"* @m_ostr2179, i32 0, i32 1
	%r154 = bitcast %word* %r153 to %oop
	%r155 = call %oop @"m_%error.code"(%oop %r154)
	%r156 = getelementptr %"<string>", %"<string>"* @m_ostr2181, i32 0, i32 1
	%r157 = bitcast %word* %r156 to %oop
	%r158 = call %oop @"m_%error.code"(%oop %r157)
	%r159 = call %oop @m_error-epilogue.code()
	store %oop %r159, %oop* %t7
	%r160 = inttoptr %word 0 to %oop
	%r164 = ptrtoint %oop %r160 to %word
	%r163 = ptrtoint %oop %r159 to %word
	%r162 = icmp eq %word %r164, %r163
	%r161 = inttoptr i1 %r162 to %oop
	%r166 = ptrtoint %oop %r161 to %word
	%r165 = icmp ne %word %r166, 0
	br i1 %r165, label %L18, label %L16
L18:
	br label %L16
L16:
	%r167 = load %oop, %oop* %t7
	%r168 = inttoptr %word 1 to %oop
	%r169 = load %oop, %oop* %t5
	%r173 = ptrtoint %oop %r169 to %word
	%r172 = ptrtoint %oop %r168 to %word
	%r171 = ashr %word %r173, %r172
	%r170 = inttoptr %word %r171 to %oop
	store %oop %r170, %oop* %t5
	%r174 = inttoptr %word 1 to %oop
	%r175 = load %oop, %oop* %t2
	%r179 = bitcast %oop %r175 to [0 x %oop]*
	%r178 = ptrtoint %oop %r174 to %word
	%r177 = getelementptr [0 x %oop], [0 x %oop]* %r179, %word 0, %word %r178
	%r176 = load %oop, %oop* %r177
	store %oop %r176, %oop* %t2
	store %oop %r176, %oop* %t6
	br label %L15
L14:
	%r180 = getelementptr %"<string>", %"<string>"* @m_ostr2183, i32 0, i32 1
	%r181 = bitcast %word* %r180 to %oop
	%r182 = load %oop, %oop* %t0
	%r183 = call %oop @"m_%not-enough-arguments.code"(%oop %r181, %oop %r182)
	store %oop %r183, %oop* %t6
	br label %L15
L15:
	%r184 = load %oop, %oop* %t6
	%r185 = load %oop, %oop* %t2
	%r187 = ptrtoint %oop %r185 to %word
	%r186 = icmp ne %word %r187, 0
	br i1 %r186, label %L19, label %L20
L19:
	%r188 = getelementptr %"<string>", %"<string>"* @m_ostr2185, i32 0, i32 1
	%r189 = bitcast %word* %r188 to %oop
	%r190 = load %oop, %oop* %t0
	%r191 = call %oop @"m_%too-many-arguments.code"(%oop %r189, %oop %r190)
	store %oop %r191, %oop* %t6
	br label %L21
L20:
	%r192 = inttoptr %word 0 to %oop
	store %oop %r192, %oop* %t6
	br label %L21
L21:
	%r193 = load %oop, %oop* %t6
	%r194 = inttoptr %word 0 to %oop
	%r195 = inttoptr %word 0 to %oop
	%r196 = load %oop, %oop* %t3
	%r197 = load %oop, %oop* %t4
	%r198 = load %oop, %oop* %t5
	%r199 = call %oop @m_set-string-at.code(%oop %r196, %oop %r197, %oop %r198)
	%r200 = inttoptr %word 1 to %oop
	%r201 = inttoptr %word 1 to %oop
	%r202 = load %oop, %oop* %t5
	%r206 = ptrtoint %oop %r202 to %word
	%r205 = ptrtoint %oop %r201 to %word
	%r204 = shl %word %r206, %r205
	%r203 = inttoptr %word %r204 to %oop
	%r210 = ptrtoint %oop %r203 to %word
	%r209 = ptrtoint %oop %r200 to %word
	%r208 = or %word %r210, %r209
	%r207 = inttoptr %word %r208 to %oop
	ret %oop %r207
}
@m_cstr2186 = private unnamed_addr constant [27 x i8] c"set-char-at/evaluator-stub\00"
@m_ostr2187 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 53, %oop bitcast ([27 x i8]* @m_cstr2186 to %oop) }
@"m_set-char-at/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_set-char-at/evaluator-stub.code" to %oop), %"<string>"* @m_ostr2187 }
@m_cstr2188 = private unnamed_addr constant [13 x i8] c"array-insert\00"
@m_ostr2189 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 25, %oop bitcast ([13 x i8]* @m_cstr2188 to %oop) }
@m_cstr2190 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr2191 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr2190 to %oop) }
@m_cstr2192 = private unnamed_addr constant [6 x i8] c"array\00"
@m_ostr2193 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr2192 to %oop) }
@m_cstr2194 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr2195 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr2194 to %oop) }
@m_cstr2196 = private unnamed_addr constant [8 x i8] c"<array>\00"
@m_ostr2197 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr2196 to %oop) }
@m_cstr2198 = private unnamed_addr constant [13 x i8] c"array-insert\00"
@m_ostr2199 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 25, %oop bitcast ([13 x i8]* @m_cstr2198 to %oop) }
@m_cstr2200 = private unnamed_addr constant [13 x i8] c"array-insert\00"
@m_ostr2201 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 25, %oop bitcast ([13 x i8]* @m_cstr2200 to %oop) }
@m_cstr2202 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr2203 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr2202 to %oop) }
@m_cstr2204 = private unnamed_addr constant [6 x i8] c"index\00"
@m_ostr2205 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr2204 to %oop) }
@m_cstr2206 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr2207 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr2206 to %oop) }
@m_cstr2208 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr2209 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr2208 to %oop) }
@m_cstr2210 = private unnamed_addr constant [13 x i8] c"array-insert\00"
@m_ostr2211 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 25, %oop bitcast ([13 x i8]* @m_cstr2210 to %oop) }
@m_cstr2212 = private unnamed_addr constant [13 x i8] c"array-insert\00"
@m_ostr2213 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 25, %oop bitcast ([13 x i8]* @m_cstr2212 to %oop) }
@m_cstr2214 = private unnamed_addr constant [13 x i8] c"array-insert\00"
@m_ostr2215 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 25, %oop bitcast ([13 x i8]* @m_cstr2214 to %oop) }
define %oop @"m_array-insert/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t5 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = inttoptr %word 0 to %oop
	store %oop %r4, %oop* %t5
	%r5 = load %oop, %oop* %t2
	%r6 = call %oop @"m_pair?.code"(%oop %r5)
	%r8 = ptrtoint %oop %r6 to %word
	%r7 = icmp ne %word %r8, 0
	br i1 %r7, label %L1, label %L2
L1:
	%r9 = inttoptr %word 0 to %oop
	%r10 = load %oop, %oop* %t2
	%r14 = bitcast %oop %r10 to [0 x %oop]*
	%r13 = ptrtoint %oop %r9 to %word
	%r12 = getelementptr [0 x %oop], [0 x %oop]* %r14, %word 0, %word %r13
	%r11 = load %oop, %oop* %r12
	store %oop %r11, %oop* %t3
	%r15 = inttoptr %word 0 to %oop
	store %oop %r15, %oop* %t7
	%r16 = load %oop, %oop* %t3
	%r17 = call %oop @"m_array?.code"(%oop %r16)
	store %oop %r17, %oop* %t7
	%r18 = inttoptr %word 0 to %oop
	%r22 = ptrtoint %oop %r18 to %word
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = icmp eq %word %r22, %r21
	%r19 = inttoptr i1 %r20 to %oop
	%r24 = ptrtoint %oop %r19 to %word
	%r23 = icmp ne %word %r24, 0
	br i1 %r23, label %L5, label %L4
L5:
	%r25 = call %oop @m_error-prologue.code()
	%r26 = getelementptr %"<string>", %"<string>"* @m_ostr2189, i32 0, i32 1
	%r27 = bitcast %word* %r26 to %oop
	%r28 = call %oop @"m_%error.code"(%oop %r27)
	%r29 = getelementptr %"<string>", %"<string>"* @m_ostr2191, i32 0, i32 1
	%r30 = bitcast %word* %r29 to %oop
	%r31 = call %oop @"m_%error.code"(%oop %r30)
	%r32 = getelementptr %"<string>", %"<string>"* @m_ostr2193, i32 0, i32 1
	%r33 = bitcast %word* %r32 to %oop
	%r34 = call %oop @"m_%error.code"(%oop %r33)
	%r35 = getelementptr %"<string>", %"<string>"* @m_ostr2195, i32 0, i32 1
	%r36 = bitcast %word* %r35 to %oop
	%r37 = call %oop @"m_%error.code"(%oop %r36)
	%r38 = getelementptr %"<string>", %"<string>"* @m_ostr2197, i32 0, i32 1
	%r39 = bitcast %word* %r38 to %oop
	%r40 = call %oop @"m_%error.code"(%oop %r39)
	%r41 = call %oop @m_error-epilogue.code()
	store %oop %r41, %oop* %t7
	%r42 = inttoptr %word 0 to %oop
	%r46 = ptrtoint %oop %r42 to %word
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = icmp eq %word %r46, %r45
	%r43 = inttoptr i1 %r44 to %oop
	%r48 = ptrtoint %oop %r43 to %word
	%r47 = icmp ne %word %r48, 0
	br i1 %r47, label %L6, label %L4
L6:
	br label %L4
L4:
	%r49 = load %oop, %oop* %t7
	%r50 = inttoptr %word 1 to %oop
	%r51 = load %oop, %oop* %t2
	%r55 = bitcast %oop %r51 to [0 x %oop]*
	%r54 = ptrtoint %oop %r50 to %word
	%r53 = getelementptr [0 x %oop], [0 x %oop]* %r55, %word 0, %word %r54
	%r52 = load %oop, %oop* %r53
	store %oop %r52, %oop* %t2
	store %oop %r52, %oop* %t6
	br label %L3
L2:
	%r56 = getelementptr %"<string>", %"<string>"* @m_ostr2199, i32 0, i32 1
	%r57 = bitcast %word* %r56 to %oop
	%r58 = load %oop, %oop* %t0
	%r59 = call %oop @"m_%not-enough-arguments.code"(%oop %r57, %oop %r58)
	store %oop %r59, %oop* %t6
	br label %L3
L3:
	%r60 = load %oop, %oop* %t6
	%r61 = load %oop, %oop* %t2
	%r62 = call %oop @"m_pair?.code"(%oop %r61)
	%r64 = ptrtoint %oop %r62 to %word
	%r63 = icmp ne %word %r64, 0
	br i1 %r63, label %L7, label %L8
L7:
	%r65 = inttoptr %word 0 to %oop
	%r66 = load %oop, %oop* %t2
	%r70 = bitcast %oop %r66 to [0 x %oop]*
	%r69 = ptrtoint %oop %r65 to %word
	%r68 = getelementptr [0 x %oop], [0 x %oop]* %r70, %word 0, %word %r69
	%r67 = load %oop, %oop* %r68
	store %oop %r67, %oop* %t4
	%r71 = inttoptr %word 0 to %oop
	store %oop %r71, %oop* %t7
	%r72 = load %oop, %oop* %t4
	%r73 = call %oop @"m_long?.code"(%oop %r72)
	store %oop %r73, %oop* %t7
	%r74 = inttoptr %word 0 to %oop
	%r78 = ptrtoint %oop %r74 to %word
	%r77 = ptrtoint %oop %r73 to %word
	%r76 = icmp eq %word %r78, %r77
	%r75 = inttoptr i1 %r76 to %oop
	%r80 = ptrtoint %oop %r75 to %word
	%r79 = icmp ne %word %r80, 0
	br i1 %r79, label %L11, label %L10
L11:
	%r81 = call %oop @m_error-prologue.code()
	%r82 = getelementptr %"<string>", %"<string>"* @m_ostr2201, i32 0, i32 1
	%r83 = bitcast %word* %r82 to %oop
	%r84 = call %oop @"m_%error.code"(%oop %r83)
	%r85 = getelementptr %"<string>", %"<string>"* @m_ostr2203, i32 0, i32 1
	%r86 = bitcast %word* %r85 to %oop
	%r87 = call %oop @"m_%error.code"(%oop %r86)
	%r88 = getelementptr %"<string>", %"<string>"* @m_ostr2205, i32 0, i32 1
	%r89 = bitcast %word* %r88 to %oop
	%r90 = call %oop @"m_%error.code"(%oop %r89)
	%r91 = getelementptr %"<string>", %"<string>"* @m_ostr2207, i32 0, i32 1
	%r92 = bitcast %word* %r91 to %oop
	%r93 = call %oop @"m_%error.code"(%oop %r92)
	%r94 = getelementptr %"<string>", %"<string>"* @m_ostr2209, i32 0, i32 1
	%r95 = bitcast %word* %r94 to %oop
	%r96 = call %oop @"m_%error.code"(%oop %r95)
	%r97 = call %oop @m_error-epilogue.code()
	store %oop %r97, %oop* %t7
	%r98 = inttoptr %word 0 to %oop
	%r102 = ptrtoint %oop %r98 to %word
	%r101 = ptrtoint %oop %r97 to %word
	%r100 = icmp eq %word %r102, %r101
	%r99 = inttoptr i1 %r100 to %oop
	%r104 = ptrtoint %oop %r99 to %word
	%r103 = icmp ne %word %r104, 0
	br i1 %r103, label %L12, label %L10
L12:
	br label %L10
L10:
	%r105 = load %oop, %oop* %t7
	%r106 = inttoptr %word 1 to %oop
	%r107 = load %oop, %oop* %t4
	%r111 = ptrtoint %oop %r107 to %word
	%r110 = ptrtoint %oop %r106 to %word
	%r109 = ashr %word %r111, %r110
	%r108 = inttoptr %word %r109 to %oop
	store %oop %r108, %oop* %t4
	%r112 = inttoptr %word 1 to %oop
	%r113 = load %oop, %oop* %t2
	%r117 = bitcast %oop %r113 to [0 x %oop]*
	%r116 = ptrtoint %oop %r112 to %word
	%r115 = getelementptr [0 x %oop], [0 x %oop]* %r117, %word 0, %word %r116
	%r114 = load %oop, %oop* %r115
	store %oop %r114, %oop* %t2
	store %oop %r114, %oop* %t6
	br label %L9
L8:
	%r118 = getelementptr %"<string>", %"<string>"* @m_ostr2211, i32 0, i32 1
	%r119 = bitcast %word* %r118 to %oop
	%r120 = load %oop, %oop* %t0
	%r121 = call %oop @"m_%not-enough-arguments.code"(%oop %r119, %oop %r120)
	store %oop %r121, %oop* %t6
	br label %L9
L9:
	%r122 = load %oop, %oop* %t6
	%r123 = load %oop, %oop* %t2
	%r124 = call %oop @"m_pair?.code"(%oop %r123)
	%r126 = ptrtoint %oop %r124 to %word
	%r125 = icmp ne %word %r126, 0
	br i1 %r125, label %L13, label %L14
L13:
	%r127 = inttoptr %word 0 to %oop
	%r128 = load %oop, %oop* %t2
	%r132 = bitcast %oop %r128 to [0 x %oop]*
	%r131 = ptrtoint %oop %r127 to %word
	%r130 = getelementptr [0 x %oop], [0 x %oop]* %r132, %word 0, %word %r131
	%r129 = load %oop, %oop* %r130
	store %oop %r129, %oop* %t5
	%r133 = inttoptr %word 1 to %oop
	%r134 = load %oop, %oop* %t2
	%r138 = bitcast %oop %r134 to [0 x %oop]*
	%r137 = ptrtoint %oop %r133 to %word
	%r136 = getelementptr [0 x %oop], [0 x %oop]* %r138, %word 0, %word %r137
	%r135 = load %oop, %oop* %r136
	store %oop %r135, %oop* %t2
	store %oop %r135, %oop* %t6
	br label %L15
L14:
	%r139 = getelementptr %"<string>", %"<string>"* @m_ostr2213, i32 0, i32 1
	%r140 = bitcast %word* %r139 to %oop
	%r141 = load %oop, %oop* %t0
	%r142 = call %oop @"m_%not-enough-arguments.code"(%oop %r140, %oop %r141)
	store %oop %r142, %oop* %t6
	br label %L15
L15:
	%r143 = load %oop, %oop* %t6
	%r144 = load %oop, %oop* %t2
	%r146 = ptrtoint %oop %r144 to %word
	%r145 = icmp ne %word %r146, 0
	br i1 %r145, label %L16, label %L17
L16:
	%r147 = getelementptr %"<string>", %"<string>"* @m_ostr2215, i32 0, i32 1
	%r148 = bitcast %word* %r147 to %oop
	%r149 = load %oop, %oop* %t0
	%r150 = call %oop @"m_%too-many-arguments.code"(%oop %r148, %oop %r149)
	store %oop %r150, %oop* %t6
	br label %L18
L17:
	%r151 = inttoptr %word 0 to %oop
	store %oop %r151, %oop* %t6
	br label %L18
L18:
	%r152 = load %oop, %oop* %t6
	%r153 = load %oop, %oop* %t3
	%r154 = load %oop, %oop* %t4
	%r155 = load %oop, %oop* %t5
	%r156 = call %oop @m_array-insert.code(%oop %r153, %oop %r154, %oop %r155)
	ret %oop %r156
}
@m_cstr2216 = private unnamed_addr constant [28 x i8] c"array-insert/evaluator-stub\00"
@m_ostr2217 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 55, %oop bitcast ([28 x i8]* @m_cstr2216 to %oop) }
@"m_array-insert/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_array-insert/evaluator-stub.code" to %oop), %"<string>"* @m_ostr2217 }
@m_cstr2218 = private unnamed_addr constant [14 x i8] c"string-insert\00"
@m_ostr2219 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr2218 to %oop) }
@m_cstr2220 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr2221 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr2220 to %oop) }
@m_cstr2222 = private unnamed_addr constant [7 x i8] c"string\00"
@m_ostr2223 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr2222 to %oop) }
@m_cstr2224 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr2225 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr2224 to %oop) }
@m_cstr2226 = private unnamed_addr constant [9 x i8] c"<string>\00"
@m_ostr2227 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr2226 to %oop) }
@m_cstr2228 = private unnamed_addr constant [14 x i8] c"string-insert\00"
@m_ostr2229 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr2228 to %oop) }
@m_cstr2230 = private unnamed_addr constant [14 x i8] c"string-insert\00"
@m_ostr2231 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr2230 to %oop) }
@m_cstr2232 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr2233 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr2232 to %oop) }
@m_cstr2234 = private unnamed_addr constant [6 x i8] c"index\00"
@m_ostr2235 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr2234 to %oop) }
@m_cstr2236 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr2237 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr2236 to %oop) }
@m_cstr2238 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr2239 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr2238 to %oop) }
@m_cstr2240 = private unnamed_addr constant [14 x i8] c"string-insert\00"
@m_ostr2241 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr2240 to %oop) }
@m_cstr2242 = private unnamed_addr constant [14 x i8] c"string-insert\00"
@m_ostr2243 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr2242 to %oop) }
@m_cstr2244 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr2245 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr2244 to %oop) }
@m_cstr2246 = private unnamed_addr constant [6 x i8] c"value\00"
@m_ostr2247 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr2246 to %oop) }
@m_cstr2248 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr2249 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr2248 to %oop) }
@m_cstr2250 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr2251 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr2250 to %oop) }
@m_cstr2252 = private unnamed_addr constant [14 x i8] c"string-insert\00"
@m_ostr2253 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr2252 to %oop) }
@m_cstr2254 = private unnamed_addr constant [14 x i8] c"string-insert\00"
@m_ostr2255 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr2254 to %oop) }
define %oop @"m_string-insert/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t5 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t6 = alloca %oop
	%t7 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = inttoptr %word 0 to %oop
	store %oop %r4, %oop* %t5
	%r5 = load %oop, %oop* %t2
	%r6 = call %oop @"m_pair?.code"(%oop %r5)
	%r8 = ptrtoint %oop %r6 to %word
	%r7 = icmp ne %word %r8, 0
	br i1 %r7, label %L1, label %L2
L1:
	%r9 = inttoptr %word 0 to %oop
	%r10 = load %oop, %oop* %t2
	%r14 = bitcast %oop %r10 to [0 x %oop]*
	%r13 = ptrtoint %oop %r9 to %word
	%r12 = getelementptr [0 x %oop], [0 x %oop]* %r14, %word 0, %word %r13
	%r11 = load %oop, %oop* %r12
	store %oop %r11, %oop* %t3
	%r15 = inttoptr %word 0 to %oop
	store %oop %r15, %oop* %t7
	%r16 = load %oop, %oop* %t3
	%r17 = call %oop @"m_string?.code"(%oop %r16)
	store %oop %r17, %oop* %t7
	%r18 = inttoptr %word 0 to %oop
	%r22 = ptrtoint %oop %r18 to %word
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = icmp eq %word %r22, %r21
	%r19 = inttoptr i1 %r20 to %oop
	%r24 = ptrtoint %oop %r19 to %word
	%r23 = icmp ne %word %r24, 0
	br i1 %r23, label %L5, label %L4
L5:
	%r25 = call %oop @m_error-prologue.code()
	%r26 = getelementptr %"<string>", %"<string>"* @m_ostr2219, i32 0, i32 1
	%r27 = bitcast %word* %r26 to %oop
	%r28 = call %oop @"m_%error.code"(%oop %r27)
	%r29 = getelementptr %"<string>", %"<string>"* @m_ostr2221, i32 0, i32 1
	%r30 = bitcast %word* %r29 to %oop
	%r31 = call %oop @"m_%error.code"(%oop %r30)
	%r32 = getelementptr %"<string>", %"<string>"* @m_ostr2223, i32 0, i32 1
	%r33 = bitcast %word* %r32 to %oop
	%r34 = call %oop @"m_%error.code"(%oop %r33)
	%r35 = getelementptr %"<string>", %"<string>"* @m_ostr2225, i32 0, i32 1
	%r36 = bitcast %word* %r35 to %oop
	%r37 = call %oop @"m_%error.code"(%oop %r36)
	%r38 = getelementptr %"<string>", %"<string>"* @m_ostr2227, i32 0, i32 1
	%r39 = bitcast %word* %r38 to %oop
	%r40 = call %oop @"m_%error.code"(%oop %r39)
	%r41 = call %oop @m_error-epilogue.code()
	store %oop %r41, %oop* %t7
	%r42 = inttoptr %word 0 to %oop
	%r46 = ptrtoint %oop %r42 to %word
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = icmp eq %word %r46, %r45
	%r43 = inttoptr i1 %r44 to %oop
	%r48 = ptrtoint %oop %r43 to %word
	%r47 = icmp ne %word %r48, 0
	br i1 %r47, label %L6, label %L4
L6:
	br label %L4
L4:
	%r49 = load %oop, %oop* %t7
	%r50 = inttoptr %word 1 to %oop
	%r51 = load %oop, %oop* %t2
	%r55 = bitcast %oop %r51 to [0 x %oop]*
	%r54 = ptrtoint %oop %r50 to %word
	%r53 = getelementptr [0 x %oop], [0 x %oop]* %r55, %word 0, %word %r54
	%r52 = load %oop, %oop* %r53
	store %oop %r52, %oop* %t2
	store %oop %r52, %oop* %t6
	br label %L3
L2:
	%r56 = getelementptr %"<string>", %"<string>"* @m_ostr2229, i32 0, i32 1
	%r57 = bitcast %word* %r56 to %oop
	%r58 = load %oop, %oop* %t0
	%r59 = call %oop @"m_%not-enough-arguments.code"(%oop %r57, %oop %r58)
	store %oop %r59, %oop* %t6
	br label %L3
L3:
	%r60 = load %oop, %oop* %t6
	%r61 = load %oop, %oop* %t2
	%r62 = call %oop @"m_pair?.code"(%oop %r61)
	%r64 = ptrtoint %oop %r62 to %word
	%r63 = icmp ne %word %r64, 0
	br i1 %r63, label %L7, label %L8
L7:
	%r65 = inttoptr %word 0 to %oop
	%r66 = load %oop, %oop* %t2
	%r70 = bitcast %oop %r66 to [0 x %oop]*
	%r69 = ptrtoint %oop %r65 to %word
	%r68 = getelementptr [0 x %oop], [0 x %oop]* %r70, %word 0, %word %r69
	%r67 = load %oop, %oop* %r68
	store %oop %r67, %oop* %t4
	%r71 = inttoptr %word 0 to %oop
	store %oop %r71, %oop* %t7
	%r72 = load %oop, %oop* %t4
	%r73 = call %oop @"m_long?.code"(%oop %r72)
	store %oop %r73, %oop* %t7
	%r74 = inttoptr %word 0 to %oop
	%r78 = ptrtoint %oop %r74 to %word
	%r77 = ptrtoint %oop %r73 to %word
	%r76 = icmp eq %word %r78, %r77
	%r75 = inttoptr i1 %r76 to %oop
	%r80 = ptrtoint %oop %r75 to %word
	%r79 = icmp ne %word %r80, 0
	br i1 %r79, label %L11, label %L10
L11:
	%r81 = call %oop @m_error-prologue.code()
	%r82 = getelementptr %"<string>", %"<string>"* @m_ostr2231, i32 0, i32 1
	%r83 = bitcast %word* %r82 to %oop
	%r84 = call %oop @"m_%error.code"(%oop %r83)
	%r85 = getelementptr %"<string>", %"<string>"* @m_ostr2233, i32 0, i32 1
	%r86 = bitcast %word* %r85 to %oop
	%r87 = call %oop @"m_%error.code"(%oop %r86)
	%r88 = getelementptr %"<string>", %"<string>"* @m_ostr2235, i32 0, i32 1
	%r89 = bitcast %word* %r88 to %oop
	%r90 = call %oop @"m_%error.code"(%oop %r89)
	%r91 = getelementptr %"<string>", %"<string>"* @m_ostr2237, i32 0, i32 1
	%r92 = bitcast %word* %r91 to %oop
	%r93 = call %oop @"m_%error.code"(%oop %r92)
	%r94 = getelementptr %"<string>", %"<string>"* @m_ostr2239, i32 0, i32 1
	%r95 = bitcast %word* %r94 to %oop
	%r96 = call %oop @"m_%error.code"(%oop %r95)
	%r97 = call %oop @m_error-epilogue.code()
	store %oop %r97, %oop* %t7
	%r98 = inttoptr %word 0 to %oop
	%r102 = ptrtoint %oop %r98 to %word
	%r101 = ptrtoint %oop %r97 to %word
	%r100 = icmp eq %word %r102, %r101
	%r99 = inttoptr i1 %r100 to %oop
	%r104 = ptrtoint %oop %r99 to %word
	%r103 = icmp ne %word %r104, 0
	br i1 %r103, label %L12, label %L10
L12:
	br label %L10
L10:
	%r105 = load %oop, %oop* %t7
	%r106 = inttoptr %word 1 to %oop
	%r107 = load %oop, %oop* %t4
	%r111 = ptrtoint %oop %r107 to %word
	%r110 = ptrtoint %oop %r106 to %word
	%r109 = ashr %word %r111, %r110
	%r108 = inttoptr %word %r109 to %oop
	store %oop %r108, %oop* %t4
	%r112 = inttoptr %word 1 to %oop
	%r113 = load %oop, %oop* %t2
	%r117 = bitcast %oop %r113 to [0 x %oop]*
	%r116 = ptrtoint %oop %r112 to %word
	%r115 = getelementptr [0 x %oop], [0 x %oop]* %r117, %word 0, %word %r116
	%r114 = load %oop, %oop* %r115
	store %oop %r114, %oop* %t2
	store %oop %r114, %oop* %t6
	br label %L9
L8:
	%r118 = getelementptr %"<string>", %"<string>"* @m_ostr2241, i32 0, i32 1
	%r119 = bitcast %word* %r118 to %oop
	%r120 = load %oop, %oop* %t0
	%r121 = call %oop @"m_%not-enough-arguments.code"(%oop %r119, %oop %r120)
	store %oop %r121, %oop* %t6
	br label %L9
L9:
	%r122 = load %oop, %oop* %t6
	%r123 = load %oop, %oop* %t2
	%r124 = call %oop @"m_pair?.code"(%oop %r123)
	%r126 = ptrtoint %oop %r124 to %word
	%r125 = icmp ne %word %r126, 0
	br i1 %r125, label %L13, label %L14
L13:
	%r127 = inttoptr %word 0 to %oop
	%r128 = load %oop, %oop* %t2
	%r132 = bitcast %oop %r128 to [0 x %oop]*
	%r131 = ptrtoint %oop %r127 to %word
	%r130 = getelementptr [0 x %oop], [0 x %oop]* %r132, %word 0, %word %r131
	%r129 = load %oop, %oop* %r130
	store %oop %r129, %oop* %t5
	%r133 = inttoptr %word 0 to %oop
	store %oop %r133, %oop* %t7
	%r134 = load %oop, %oop* %t5
	%r135 = call %oop @"m_long?.code"(%oop %r134)
	store %oop %r135, %oop* %t7
	%r136 = inttoptr %word 0 to %oop
	%r140 = ptrtoint %oop %r136 to %word
	%r139 = ptrtoint %oop %r135 to %word
	%r138 = icmp eq %word %r140, %r139
	%r137 = inttoptr i1 %r138 to %oop
	%r142 = ptrtoint %oop %r137 to %word
	%r141 = icmp ne %word %r142, 0
	br i1 %r141, label %L17, label %L16
L17:
	%r143 = call %oop @m_error-prologue.code()
	%r144 = getelementptr %"<string>", %"<string>"* @m_ostr2243, i32 0, i32 1
	%r145 = bitcast %word* %r144 to %oop
	%r146 = call %oop @"m_%error.code"(%oop %r145)
	%r147 = getelementptr %"<string>", %"<string>"* @m_ostr2245, i32 0, i32 1
	%r148 = bitcast %word* %r147 to %oop
	%r149 = call %oop @"m_%error.code"(%oop %r148)
	%r150 = getelementptr %"<string>", %"<string>"* @m_ostr2247, i32 0, i32 1
	%r151 = bitcast %word* %r150 to %oop
	%r152 = call %oop @"m_%error.code"(%oop %r151)
	%r153 = getelementptr %"<string>", %"<string>"* @m_ostr2249, i32 0, i32 1
	%r154 = bitcast %word* %r153 to %oop
	%r155 = call %oop @"m_%error.code"(%oop %r154)
	%r156 = getelementptr %"<string>", %"<string>"* @m_ostr2251, i32 0, i32 1
	%r157 = bitcast %word* %r156 to %oop
	%r158 = call %oop @"m_%error.code"(%oop %r157)
	%r159 = call %oop @m_error-epilogue.code()
	store %oop %r159, %oop* %t7
	%r160 = inttoptr %word 0 to %oop
	%r164 = ptrtoint %oop %r160 to %word
	%r163 = ptrtoint %oop %r159 to %word
	%r162 = icmp eq %word %r164, %r163
	%r161 = inttoptr i1 %r162 to %oop
	%r166 = ptrtoint %oop %r161 to %word
	%r165 = icmp ne %word %r166, 0
	br i1 %r165, label %L18, label %L16
L18:
	br label %L16
L16:
	%r167 = load %oop, %oop* %t7
	%r168 = inttoptr %word 1 to %oop
	%r169 = load %oop, %oop* %t5
	%r173 = ptrtoint %oop %r169 to %word
	%r172 = ptrtoint %oop %r168 to %word
	%r171 = ashr %word %r173, %r172
	%r170 = inttoptr %word %r171 to %oop
	store %oop %r170, %oop* %t5
	%r174 = inttoptr %word 1 to %oop
	%r175 = load %oop, %oop* %t2
	%r179 = bitcast %oop %r175 to [0 x %oop]*
	%r178 = ptrtoint %oop %r174 to %word
	%r177 = getelementptr [0 x %oop], [0 x %oop]* %r179, %word 0, %word %r178
	%r176 = load %oop, %oop* %r177
	store %oop %r176, %oop* %t2
	store %oop %r176, %oop* %t6
	br label %L15
L14:
	%r180 = getelementptr %"<string>", %"<string>"* @m_ostr2253, i32 0, i32 1
	%r181 = bitcast %word* %r180 to %oop
	%r182 = load %oop, %oop* %t0
	%r183 = call %oop @"m_%not-enough-arguments.code"(%oop %r181, %oop %r182)
	store %oop %r183, %oop* %t6
	br label %L15
L15:
	%r184 = load %oop, %oop* %t6
	%r185 = load %oop, %oop* %t2
	%r187 = ptrtoint %oop %r185 to %word
	%r186 = icmp ne %word %r187, 0
	br i1 %r186, label %L19, label %L20
L19:
	%r188 = getelementptr %"<string>", %"<string>"* @m_ostr2255, i32 0, i32 1
	%r189 = bitcast %word* %r188 to %oop
	%r190 = load %oop, %oop* %t0
	%r191 = call %oop @"m_%too-many-arguments.code"(%oop %r189, %oop %r190)
	store %oop %r191, %oop* %t6
	br label %L21
L20:
	%r192 = inttoptr %word 0 to %oop
	store %oop %r192, %oop* %t6
	br label %L21
L21:
	%r193 = load %oop, %oop* %t6
	%r194 = inttoptr %word 0 to %oop
	%r195 = load %oop, %oop* %t3
	%r196 = load %oop, %oop* %t4
	%r197 = load %oop, %oop* %t5
	%r198 = call %oop @m_string-insert.code(%oop %r195, %oop %r196, %oop %r197)
	%r199 = inttoptr %word 1 to %oop
	%r200 = inttoptr %word 1 to %oop
	%r201 = load %oop, %oop* %t5
	%r205 = ptrtoint %oop %r201 to %word
	%r204 = ptrtoint %oop %r200 to %word
	%r203 = shl %word %r205, %r204
	%r202 = inttoptr %word %r203 to %oop
	%r209 = ptrtoint %oop %r202 to %word
	%r208 = ptrtoint %oop %r199 to %word
	%r207 = or %word %r209, %r208
	%r206 = inttoptr %word %r207 to %oop
	ret %oop %r206
}
@m_cstr2256 = private unnamed_addr constant [29 x i8] c"string-insert/evaluator-stub\00"
@m_ostr2257 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 57, %oop bitcast ([29 x i8]* @m_cstr2256 to %oop) }
@"m_string-insert/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_string-insert/evaluator-stub.code" to %oop), %"<string>"* @m_ostr2257 }
@m_cstr2258 = private unnamed_addr constant [13 x i8] c"array-append\00"
@m_ostr2259 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 25, %oop bitcast ([13 x i8]* @m_cstr2258 to %oop) }
@m_cstr2260 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr2261 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr2260 to %oop) }
@m_cstr2262 = private unnamed_addr constant [6 x i8] c"array\00"
@m_ostr2263 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr2262 to %oop) }
@m_cstr2264 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr2265 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr2264 to %oop) }
@m_cstr2266 = private unnamed_addr constant [8 x i8] c"<array>\00"
@m_ostr2267 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr2266 to %oop) }
@m_cstr2268 = private unnamed_addr constant [13 x i8] c"array-append\00"
@m_ostr2269 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 25, %oop bitcast ([13 x i8]* @m_cstr2268 to %oop) }
@m_cstr2270 = private unnamed_addr constant [13 x i8] c"array-append\00"
@m_ostr2271 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 25, %oop bitcast ([13 x i8]* @m_cstr2270 to %oop) }
@m_cstr2272 = private unnamed_addr constant [13 x i8] c"array-append\00"
@m_ostr2273 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 25, %oop bitcast ([13 x i8]* @m_cstr2272 to %oop) }
define %oop @"m_array-append/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = load %oop, %oop* %t2
	%r5 = call %oop @"m_pair?.code"(%oop %r4)
	%r7 = ptrtoint %oop %r5 to %word
	%r6 = icmp ne %word %r7, 0
	br i1 %r6, label %L1, label %L2
L1:
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t2
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	%r10 = load %oop, %oop* %r11
	store %oop %r10, %oop* %t3
	%r14 = inttoptr %word 0 to %oop
	store %oop %r14, %oop* %t6
	%r15 = load %oop, %oop* %t3
	%r16 = call %oop @"m_array?.code"(%oop %r15)
	store %oop %r16, %oop* %t6
	%r17 = inttoptr %word 0 to %oop
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = icmp eq %word %r21, %r20
	%r18 = inttoptr i1 %r19 to %oop
	%r23 = ptrtoint %oop %r18 to %word
	%r22 = icmp ne %word %r23, 0
	br i1 %r22, label %L5, label %L4
L5:
	%r24 = call %oop @m_error-prologue.code()
	%r25 = getelementptr %"<string>", %"<string>"* @m_ostr2259, i32 0, i32 1
	%r26 = bitcast %word* %r25 to %oop
	%r27 = call %oop @"m_%error.code"(%oop %r26)
	%r28 = getelementptr %"<string>", %"<string>"* @m_ostr2261, i32 0, i32 1
	%r29 = bitcast %word* %r28 to %oop
	%r30 = call %oop @"m_%error.code"(%oop %r29)
	%r31 = getelementptr %"<string>", %"<string>"* @m_ostr2263, i32 0, i32 1
	%r32 = bitcast %word* %r31 to %oop
	%r33 = call %oop @"m_%error.code"(%oop %r32)
	%r34 = getelementptr %"<string>", %"<string>"* @m_ostr2265, i32 0, i32 1
	%r35 = bitcast %word* %r34 to %oop
	%r36 = call %oop @"m_%error.code"(%oop %r35)
	%r37 = getelementptr %"<string>", %"<string>"* @m_ostr2267, i32 0, i32 1
	%r38 = bitcast %word* %r37 to %oop
	%r39 = call %oop @"m_%error.code"(%oop %r38)
	%r40 = call %oop @m_error-epilogue.code()
	store %oop %r40, %oop* %t6
	%r41 = inttoptr %word 0 to %oop
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = ptrtoint %oop %r40 to %word
	%r43 = icmp eq %word %r45, %r44
	%r42 = inttoptr i1 %r43 to %oop
	%r47 = ptrtoint %oop %r42 to %word
	%r46 = icmp ne %word %r47, 0
	br i1 %r46, label %L6, label %L4
L6:
	br label %L4
L4:
	%r48 = load %oop, %oop* %t6
	%r49 = inttoptr %word 1 to %oop
	%r50 = load %oop, %oop* %t2
	%r54 = bitcast %oop %r50 to [0 x %oop]*
	%r53 = ptrtoint %oop %r49 to %word
	%r52 = getelementptr [0 x %oop], [0 x %oop]* %r54, %word 0, %word %r53
	%r51 = load %oop, %oop* %r52
	store %oop %r51, %oop* %t2
	store %oop %r51, %oop* %t5
	br label %L3
L2:
	%r55 = getelementptr %"<string>", %"<string>"* @m_ostr2269, i32 0, i32 1
	%r56 = bitcast %word* %r55 to %oop
	%r57 = load %oop, %oop* %t0
	%r58 = call %oop @"m_%not-enough-arguments.code"(%oop %r56, %oop %r57)
	store %oop %r58, %oop* %t5
	br label %L3
L3:
	%r59 = load %oop, %oop* %t5
	%r60 = load %oop, %oop* %t2
	%r61 = call %oop @"m_pair?.code"(%oop %r60)
	%r63 = ptrtoint %oop %r61 to %word
	%r62 = icmp ne %word %r63, 0
	br i1 %r62, label %L7, label %L8
L7:
	%r64 = inttoptr %word 0 to %oop
	%r65 = load %oop, %oop* %t2
	%r69 = bitcast %oop %r65 to [0 x %oop]*
	%r68 = ptrtoint %oop %r64 to %word
	%r67 = getelementptr [0 x %oop], [0 x %oop]* %r69, %word 0, %word %r68
	%r66 = load %oop, %oop* %r67
	store %oop %r66, %oop* %t4
	%r70 = inttoptr %word 1 to %oop
	%r71 = load %oop, %oop* %t2
	%r75 = bitcast %oop %r71 to [0 x %oop]*
	%r74 = ptrtoint %oop %r70 to %word
	%r73 = getelementptr [0 x %oop], [0 x %oop]* %r75, %word 0, %word %r74
	%r72 = load %oop, %oop* %r73
	store %oop %r72, %oop* %t2
	store %oop %r72, %oop* %t5
	br label %L9
L8:
	%r76 = getelementptr %"<string>", %"<string>"* @m_ostr2271, i32 0, i32 1
	%r77 = bitcast %word* %r76 to %oop
	%r78 = load %oop, %oop* %t0
	%r79 = call %oop @"m_%not-enough-arguments.code"(%oop %r77, %oop %r78)
	store %oop %r79, %oop* %t5
	br label %L9
L9:
	%r80 = load %oop, %oop* %t5
	%r81 = load %oop, %oop* %t2
	%r83 = ptrtoint %oop %r81 to %word
	%r82 = icmp ne %word %r83, 0
	br i1 %r82, label %L10, label %L11
L10:
	%r84 = getelementptr %"<string>", %"<string>"* @m_ostr2273, i32 0, i32 1
	%r85 = bitcast %word* %r84 to %oop
	%r86 = load %oop, %oop* %t0
	%r87 = call %oop @"m_%too-many-arguments.code"(%oop %r85, %oop %r86)
	store %oop %r87, %oop* %t5
	br label %L12
L11:
	%r88 = inttoptr %word 0 to %oop
	store %oop %r88, %oop* %t5
	br label %L12
L12:
	%r89 = load %oop, %oop* %t5
	%r90 = load %oop, %oop* %t3
	%r91 = load %oop, %oop* %t4
	%r92 = call %oop @m_array-append.code(%oop %r90, %oop %r91)
	ret %oop %r92
}
@m_cstr2274 = private unnamed_addr constant [28 x i8] c"array-append/evaluator-stub\00"
@m_ostr2275 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 55, %oop bitcast ([28 x i8]* @m_cstr2274 to %oop) }
@"m_array-append/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_array-append/evaluator-stub.code" to %oop), %"<string>"* @m_ostr2275 }
@m_cstr2276 = private unnamed_addr constant [14 x i8] c"string-append\00"
@m_ostr2277 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr2276 to %oop) }
@m_cstr2278 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr2279 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr2278 to %oop) }
@m_cstr2280 = private unnamed_addr constant [7 x i8] c"string\00"
@m_ostr2281 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr2280 to %oop) }
@m_cstr2282 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr2283 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr2282 to %oop) }
@m_cstr2284 = private unnamed_addr constant [9 x i8] c"<string>\00"
@m_ostr2285 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr2284 to %oop) }
@m_cstr2286 = private unnamed_addr constant [14 x i8] c"string-append\00"
@m_ostr2287 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr2286 to %oop) }
@m_cstr2288 = private unnamed_addr constant [14 x i8] c"string-append\00"
@m_ostr2289 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr2288 to %oop) }
@m_cstr2290 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr2291 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr2290 to %oop) }
@m_cstr2292 = private unnamed_addr constant [6 x i8] c"value\00"
@m_ostr2293 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr2292 to %oop) }
@m_cstr2294 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr2295 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr2294 to %oop) }
@m_cstr2296 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr2297 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr2296 to %oop) }
@m_cstr2298 = private unnamed_addr constant [14 x i8] c"string-append\00"
@m_ostr2299 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr2298 to %oop) }
@m_cstr2300 = private unnamed_addr constant [14 x i8] c"string-append\00"
@m_ostr2301 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr2300 to %oop) }
define %oop @"m_string-append/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = load %oop, %oop* %t2
	%r5 = call %oop @"m_pair?.code"(%oop %r4)
	%r7 = ptrtoint %oop %r5 to %word
	%r6 = icmp ne %word %r7, 0
	br i1 %r6, label %L1, label %L2
L1:
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t2
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	%r10 = load %oop, %oop* %r11
	store %oop %r10, %oop* %t3
	%r14 = inttoptr %word 0 to %oop
	store %oop %r14, %oop* %t6
	%r15 = load %oop, %oop* %t3
	%r16 = call %oop @"m_string?.code"(%oop %r15)
	store %oop %r16, %oop* %t6
	%r17 = inttoptr %word 0 to %oop
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = icmp eq %word %r21, %r20
	%r18 = inttoptr i1 %r19 to %oop
	%r23 = ptrtoint %oop %r18 to %word
	%r22 = icmp ne %word %r23, 0
	br i1 %r22, label %L5, label %L4
L5:
	%r24 = call %oop @m_error-prologue.code()
	%r25 = getelementptr %"<string>", %"<string>"* @m_ostr2277, i32 0, i32 1
	%r26 = bitcast %word* %r25 to %oop
	%r27 = call %oop @"m_%error.code"(%oop %r26)
	%r28 = getelementptr %"<string>", %"<string>"* @m_ostr2279, i32 0, i32 1
	%r29 = bitcast %word* %r28 to %oop
	%r30 = call %oop @"m_%error.code"(%oop %r29)
	%r31 = getelementptr %"<string>", %"<string>"* @m_ostr2281, i32 0, i32 1
	%r32 = bitcast %word* %r31 to %oop
	%r33 = call %oop @"m_%error.code"(%oop %r32)
	%r34 = getelementptr %"<string>", %"<string>"* @m_ostr2283, i32 0, i32 1
	%r35 = bitcast %word* %r34 to %oop
	%r36 = call %oop @"m_%error.code"(%oop %r35)
	%r37 = getelementptr %"<string>", %"<string>"* @m_ostr2285, i32 0, i32 1
	%r38 = bitcast %word* %r37 to %oop
	%r39 = call %oop @"m_%error.code"(%oop %r38)
	%r40 = call %oop @m_error-epilogue.code()
	store %oop %r40, %oop* %t6
	%r41 = inttoptr %word 0 to %oop
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = ptrtoint %oop %r40 to %word
	%r43 = icmp eq %word %r45, %r44
	%r42 = inttoptr i1 %r43 to %oop
	%r47 = ptrtoint %oop %r42 to %word
	%r46 = icmp ne %word %r47, 0
	br i1 %r46, label %L6, label %L4
L6:
	br label %L4
L4:
	%r48 = load %oop, %oop* %t6
	%r49 = inttoptr %word 1 to %oop
	%r50 = load %oop, %oop* %t2
	%r54 = bitcast %oop %r50 to [0 x %oop]*
	%r53 = ptrtoint %oop %r49 to %word
	%r52 = getelementptr [0 x %oop], [0 x %oop]* %r54, %word 0, %word %r53
	%r51 = load %oop, %oop* %r52
	store %oop %r51, %oop* %t2
	store %oop %r51, %oop* %t5
	br label %L3
L2:
	%r55 = getelementptr %"<string>", %"<string>"* @m_ostr2287, i32 0, i32 1
	%r56 = bitcast %word* %r55 to %oop
	%r57 = load %oop, %oop* %t0
	%r58 = call %oop @"m_%not-enough-arguments.code"(%oop %r56, %oop %r57)
	store %oop %r58, %oop* %t5
	br label %L3
L3:
	%r59 = load %oop, %oop* %t5
	%r60 = load %oop, %oop* %t2
	%r61 = call %oop @"m_pair?.code"(%oop %r60)
	%r63 = ptrtoint %oop %r61 to %word
	%r62 = icmp ne %word %r63, 0
	br i1 %r62, label %L7, label %L8
L7:
	%r64 = inttoptr %word 0 to %oop
	%r65 = load %oop, %oop* %t2
	%r69 = bitcast %oop %r65 to [0 x %oop]*
	%r68 = ptrtoint %oop %r64 to %word
	%r67 = getelementptr [0 x %oop], [0 x %oop]* %r69, %word 0, %word %r68
	%r66 = load %oop, %oop* %r67
	store %oop %r66, %oop* %t4
	%r70 = inttoptr %word 0 to %oop
	store %oop %r70, %oop* %t6
	%r71 = load %oop, %oop* %t4
	%r72 = call %oop @"m_long?.code"(%oop %r71)
	store %oop %r72, %oop* %t6
	%r73 = inttoptr %word 0 to %oop
	%r77 = ptrtoint %oop %r73 to %word
	%r76 = ptrtoint %oop %r72 to %word
	%r75 = icmp eq %word %r77, %r76
	%r74 = inttoptr i1 %r75 to %oop
	%r79 = ptrtoint %oop %r74 to %word
	%r78 = icmp ne %word %r79, 0
	br i1 %r78, label %L11, label %L10
L11:
	%r80 = call %oop @m_error-prologue.code()
	%r81 = getelementptr %"<string>", %"<string>"* @m_ostr2289, i32 0, i32 1
	%r82 = bitcast %word* %r81 to %oop
	%r83 = call %oop @"m_%error.code"(%oop %r82)
	%r84 = getelementptr %"<string>", %"<string>"* @m_ostr2291, i32 0, i32 1
	%r85 = bitcast %word* %r84 to %oop
	%r86 = call %oop @"m_%error.code"(%oop %r85)
	%r87 = getelementptr %"<string>", %"<string>"* @m_ostr2293, i32 0, i32 1
	%r88 = bitcast %word* %r87 to %oop
	%r89 = call %oop @"m_%error.code"(%oop %r88)
	%r90 = getelementptr %"<string>", %"<string>"* @m_ostr2295, i32 0, i32 1
	%r91 = bitcast %word* %r90 to %oop
	%r92 = call %oop @"m_%error.code"(%oop %r91)
	%r93 = getelementptr %"<string>", %"<string>"* @m_ostr2297, i32 0, i32 1
	%r94 = bitcast %word* %r93 to %oop
	%r95 = call %oop @"m_%error.code"(%oop %r94)
	%r96 = call %oop @m_error-epilogue.code()
	store %oop %r96, %oop* %t6
	%r97 = inttoptr %word 0 to %oop
	%r101 = ptrtoint %oop %r97 to %word
	%r100 = ptrtoint %oop %r96 to %word
	%r99 = icmp eq %word %r101, %r100
	%r98 = inttoptr i1 %r99 to %oop
	%r103 = ptrtoint %oop %r98 to %word
	%r102 = icmp ne %word %r103, 0
	br i1 %r102, label %L12, label %L10
L12:
	br label %L10
L10:
	%r104 = load %oop, %oop* %t6
	%r105 = inttoptr %word 1 to %oop
	%r106 = load %oop, %oop* %t4
	%r110 = ptrtoint %oop %r106 to %word
	%r109 = ptrtoint %oop %r105 to %word
	%r108 = ashr %word %r110, %r109
	%r107 = inttoptr %word %r108 to %oop
	store %oop %r107, %oop* %t4
	%r111 = inttoptr %word 1 to %oop
	%r112 = load %oop, %oop* %t2
	%r116 = bitcast %oop %r112 to [0 x %oop]*
	%r115 = ptrtoint %oop %r111 to %word
	%r114 = getelementptr [0 x %oop], [0 x %oop]* %r116, %word 0, %word %r115
	%r113 = load %oop, %oop* %r114
	store %oop %r113, %oop* %t2
	store %oop %r113, %oop* %t5
	br label %L9
L8:
	%r117 = getelementptr %"<string>", %"<string>"* @m_ostr2299, i32 0, i32 1
	%r118 = bitcast %word* %r117 to %oop
	%r119 = load %oop, %oop* %t0
	%r120 = call %oop @"m_%not-enough-arguments.code"(%oop %r118, %oop %r119)
	store %oop %r120, %oop* %t5
	br label %L9
L9:
	%r121 = load %oop, %oop* %t5
	%r122 = load %oop, %oop* %t2
	%r124 = ptrtoint %oop %r122 to %word
	%r123 = icmp ne %word %r124, 0
	br i1 %r123, label %L13, label %L14
L13:
	%r125 = getelementptr %"<string>", %"<string>"* @m_ostr2301, i32 0, i32 1
	%r126 = bitcast %word* %r125 to %oop
	%r127 = load %oop, %oop* %t0
	%r128 = call %oop @"m_%too-many-arguments.code"(%oop %r126, %oop %r127)
	store %oop %r128, %oop* %t5
	br label %L15
L14:
	%r129 = inttoptr %word 0 to %oop
	store %oop %r129, %oop* %t5
	br label %L15
L15:
	%r130 = load %oop, %oop* %t5
	%r131 = inttoptr %word 0 to %oop
	%r132 = inttoptr %word 1 to %oop
	%r133 = inttoptr %word 1 to %oop
	%r134 = load %oop, %oop* %t3
	%r135 = load %oop, %oop* %t4
	%r136 = call %oop @m_string-append.code(%oop %r134, %oop %r135)
	%r140 = ptrtoint %oop %r136 to %word
	%r139 = ptrtoint %oop %r133 to %word
	%r138 = shl %word %r140, %r139
	%r137 = inttoptr %word %r138 to %oop
	%r144 = ptrtoint %oop %r137 to %word
	%r143 = ptrtoint %oop %r132 to %word
	%r142 = or %word %r144, %r143
	%r141 = inttoptr %word %r142 to %oop
	ret %oop %r141
}
@m_cstr2302 = private unnamed_addr constant [29 x i8] c"string-append/evaluator-stub\00"
@m_ostr2303 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 57, %oop bitcast ([29 x i8]* @m_cstr2302 to %oop) }
@"m_string-append/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_string-append/evaluator-stub.code" to %oop), %"<string>"* @m_ostr2303 }
define %oop @"m_number->string.code"(%oop %num, %oop %radix) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	store %oop %num, %oop* %t0
	store %oop %radix, %oop* %t1
	%r1 = load %oop, %oop* %t0
	%r2 = load %oop, %oop* %t1
	%r3 = call %oop @"m_long->string*.code"(%oop %r1, %oop %r2)
	ret %oop %r3
}
@m_cstr2304 = private unnamed_addr constant [15 x i8] c"number->string\00"
@m_ostr2305 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr2304 to %oop) }
@"m_number->string" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_number->string.code" to %oop), %"<string>"* @m_ostr2305 }
@m_cstr2306 = private unnamed_addr constant [15 x i8] c"number->string\00"
@m_ostr2307 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr2306 to %oop) }
@m_cstr2308 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr2309 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr2308 to %oop) }
@m_cstr2310 = private unnamed_addr constant [4 x i8] c"num\00"
@m_ostr2311 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr2310 to %oop) }
@m_cstr2312 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr2313 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr2312 to %oop) }
@m_cstr2314 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr2315 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr2314 to %oop) }
@m_cstr2316 = private unnamed_addr constant [15 x i8] c"number->string\00"
@m_ostr2317 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr2316 to %oop) }
@m_cstr2318 = private unnamed_addr constant [15 x i8] c"number->string\00"
@m_ostr2319 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr2318 to %oop) }
@m_cstr2320 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr2321 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr2320 to %oop) }
@m_cstr2322 = private unnamed_addr constant [6 x i8] c"radix\00"
@m_ostr2323 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr2322 to %oop) }
@m_cstr2324 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr2325 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr2324 to %oop) }
@m_cstr2326 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr2327 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr2326 to %oop) }
@m_cstr2328 = private unnamed_addr constant [15 x i8] c"number->string\00"
@m_ostr2329 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr2328 to %oop) }
define %oop @"m_number->string/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = load %oop, %oop* %t2
	%r5 = call %oop @"m_pair?.code"(%oop %r4)
	%r7 = ptrtoint %oop %r5 to %word
	%r6 = icmp ne %word %r7, 0
	br i1 %r6, label %L1, label %L2
L1:
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t2
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	%r10 = load %oop, %oop* %r11
	store %oop %r10, %oop* %t3
	%r14 = inttoptr %word 0 to %oop
	store %oop %r14, %oop* %t6
	%r15 = load %oop, %oop* %t3
	%r16 = call %oop @"m_long?.code"(%oop %r15)
	store %oop %r16, %oop* %t6
	%r17 = inttoptr %word 0 to %oop
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = icmp eq %word %r21, %r20
	%r18 = inttoptr i1 %r19 to %oop
	%r23 = ptrtoint %oop %r18 to %word
	%r22 = icmp ne %word %r23, 0
	br i1 %r22, label %L5, label %L4
L5:
	%r24 = call %oop @m_error-prologue.code()
	%r25 = getelementptr %"<string>", %"<string>"* @m_ostr2307, i32 0, i32 1
	%r26 = bitcast %word* %r25 to %oop
	%r27 = call %oop @"m_%error.code"(%oop %r26)
	%r28 = getelementptr %"<string>", %"<string>"* @m_ostr2309, i32 0, i32 1
	%r29 = bitcast %word* %r28 to %oop
	%r30 = call %oop @"m_%error.code"(%oop %r29)
	%r31 = getelementptr %"<string>", %"<string>"* @m_ostr2311, i32 0, i32 1
	%r32 = bitcast %word* %r31 to %oop
	%r33 = call %oop @"m_%error.code"(%oop %r32)
	%r34 = getelementptr %"<string>", %"<string>"* @m_ostr2313, i32 0, i32 1
	%r35 = bitcast %word* %r34 to %oop
	%r36 = call %oop @"m_%error.code"(%oop %r35)
	%r37 = getelementptr %"<string>", %"<string>"* @m_ostr2315, i32 0, i32 1
	%r38 = bitcast %word* %r37 to %oop
	%r39 = call %oop @"m_%error.code"(%oop %r38)
	%r40 = call %oop @m_error-epilogue.code()
	store %oop %r40, %oop* %t6
	%r41 = inttoptr %word 0 to %oop
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = ptrtoint %oop %r40 to %word
	%r43 = icmp eq %word %r45, %r44
	%r42 = inttoptr i1 %r43 to %oop
	%r47 = ptrtoint %oop %r42 to %word
	%r46 = icmp ne %word %r47, 0
	br i1 %r46, label %L6, label %L4
L6:
	br label %L4
L4:
	%r48 = load %oop, %oop* %t6
	%r49 = inttoptr %word 1 to %oop
	%r50 = load %oop, %oop* %t3
	%r54 = ptrtoint %oop %r50 to %word
	%r53 = ptrtoint %oop %r49 to %word
	%r52 = ashr %word %r54, %r53
	%r51 = inttoptr %word %r52 to %oop
	store %oop %r51, %oop* %t3
	%r55 = inttoptr %word 1 to %oop
	%r56 = load %oop, %oop* %t2
	%r60 = bitcast %oop %r56 to [0 x %oop]*
	%r59 = ptrtoint %oop %r55 to %word
	%r58 = getelementptr [0 x %oop], [0 x %oop]* %r60, %word 0, %word %r59
	%r57 = load %oop, %oop* %r58
	store %oop %r57, %oop* %t2
	store %oop %r57, %oop* %t5
	br label %L3
L2:
	%r61 = getelementptr %"<string>", %"<string>"* @m_ostr2317, i32 0, i32 1
	%r62 = bitcast %word* %r61 to %oop
	%r63 = load %oop, %oop* %t0
	%r64 = call %oop @"m_%not-enough-arguments.code"(%oop %r62, %oop %r63)
	store %oop %r64, %oop* %t5
	br label %L3
L3:
	%r65 = load %oop, %oop* %t5
	%r66 = load %oop, %oop* %t2
	%r67 = call %oop @"m_pair?.code"(%oop %r66)
	%r69 = ptrtoint %oop %r67 to %word
	%r68 = icmp ne %word %r69, 0
	br i1 %r68, label %L7, label %L8
L7:
	%r70 = inttoptr %word 0 to %oop
	%r71 = load %oop, %oop* %t2
	%r75 = bitcast %oop %r71 to [0 x %oop]*
	%r74 = ptrtoint %oop %r70 to %word
	%r73 = getelementptr [0 x %oop], [0 x %oop]* %r75, %word 0, %word %r74
	%r72 = load %oop, %oop* %r73
	store %oop %r72, %oop* %t4
	%r76 = inttoptr %word 0 to %oop
	store %oop %r76, %oop* %t6
	%r77 = load %oop, %oop* %t4
	%r78 = call %oop @"m_long?.code"(%oop %r77)
	store %oop %r78, %oop* %t6
	%r79 = inttoptr %word 0 to %oop
	%r83 = ptrtoint %oop %r79 to %word
	%r82 = ptrtoint %oop %r78 to %word
	%r81 = icmp eq %word %r83, %r82
	%r80 = inttoptr i1 %r81 to %oop
	%r85 = ptrtoint %oop %r80 to %word
	%r84 = icmp ne %word %r85, 0
	br i1 %r84, label %L11, label %L10
L11:
	%r86 = call %oop @m_error-prologue.code()
	%r87 = getelementptr %"<string>", %"<string>"* @m_ostr2319, i32 0, i32 1
	%r88 = bitcast %word* %r87 to %oop
	%r89 = call %oop @"m_%error.code"(%oop %r88)
	%r90 = getelementptr %"<string>", %"<string>"* @m_ostr2321, i32 0, i32 1
	%r91 = bitcast %word* %r90 to %oop
	%r92 = call %oop @"m_%error.code"(%oop %r91)
	%r93 = getelementptr %"<string>", %"<string>"* @m_ostr2323, i32 0, i32 1
	%r94 = bitcast %word* %r93 to %oop
	%r95 = call %oop @"m_%error.code"(%oop %r94)
	%r96 = getelementptr %"<string>", %"<string>"* @m_ostr2325, i32 0, i32 1
	%r97 = bitcast %word* %r96 to %oop
	%r98 = call %oop @"m_%error.code"(%oop %r97)
	%r99 = getelementptr %"<string>", %"<string>"* @m_ostr2327, i32 0, i32 1
	%r100 = bitcast %word* %r99 to %oop
	%r101 = call %oop @"m_%error.code"(%oop %r100)
	%r102 = call %oop @m_error-epilogue.code()
	store %oop %r102, %oop* %t6
	%r103 = inttoptr %word 0 to %oop
	%r107 = ptrtoint %oop %r103 to %word
	%r106 = ptrtoint %oop %r102 to %word
	%r105 = icmp eq %word %r107, %r106
	%r104 = inttoptr i1 %r105 to %oop
	%r109 = ptrtoint %oop %r104 to %word
	%r108 = icmp ne %word %r109, 0
	br i1 %r108, label %L12, label %L10
L12:
	br label %L10
L10:
	%r110 = load %oop, %oop* %t6
	%r111 = inttoptr %word 1 to %oop
	%r112 = load %oop, %oop* %t4
	%r116 = ptrtoint %oop %r112 to %word
	%r115 = ptrtoint %oop %r111 to %word
	%r114 = ashr %word %r116, %r115
	%r113 = inttoptr %word %r114 to %oop
	store %oop %r113, %oop* %t4
	%r117 = inttoptr %word 1 to %oop
	%r118 = load %oop, %oop* %t2
	%r122 = bitcast %oop %r118 to [0 x %oop]*
	%r121 = ptrtoint %oop %r117 to %word
	%r120 = getelementptr [0 x %oop], [0 x %oop]* %r122, %word 0, %word %r121
	%r119 = load %oop, %oop* %r120
	store %oop %r119, %oop* %t2
	store %oop %r119, %oop* %t5
	br label %L9
L8:
	%r123 = inttoptr %word 10 to %oop
	store %oop %r123, %oop* %t4
	store %oop %r123, %oop* %t5
	br label %L9
L9:
	%r124 = load %oop, %oop* %t5
	%r125 = load %oop, %oop* %t2
	%r127 = ptrtoint %oop %r125 to %word
	%r126 = icmp ne %word %r127, 0
	br i1 %r126, label %L13, label %L14
L13:
	%r128 = getelementptr %"<string>", %"<string>"* @m_ostr2329, i32 0, i32 1
	%r129 = bitcast %word* %r128 to %oop
	%r130 = load %oop, %oop* %t0
	%r131 = call %oop @"m_%too-many-arguments.code"(%oop %r129, %oop %r130)
	store %oop %r131, %oop* %t5
	br label %L15
L14:
	%r132 = inttoptr %word 0 to %oop
	store %oop %r132, %oop* %t5
	br label %L15
L15:
	%r133 = load %oop, %oop* %t5
	%r134 = load %oop, %oop* %t3
	%r135 = load %oop, %oop* %t4
	%r136 = call %oop @"m_number->string.code"(%oop %r134, %oop %r135)
	ret %oop %r136
}
@m_cstr2330 = private unnamed_addr constant [30 x i8] c"number->string/evaluator-stub\00"
@m_ostr2331 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 59, %oop bitcast ([30 x i8]* @m_cstr2330 to %oop) }
@"m_number->string/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_number->string/evaluator-stub.code" to %oop), %"<string>"* @m_ostr2331 }
define %oop @"m_integer->string.code"(%oop %num, %oop %radix) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	store %oop %num, %oop* %t0
	store %oop %radix, %oop* %t1
	%r1 = load %oop, %oop* %t0
	%r2 = load %oop, %oop* %t1
	%r3 = call %oop @"m_long->string*.code"(%oop %r1, %oop %r2)
	ret %oop %r3
}
@m_cstr2332 = private unnamed_addr constant [16 x i8] c"integer->string\00"
@m_ostr2333 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 31, %oop bitcast ([16 x i8]* @m_cstr2332 to %oop) }
@"m_integer->string" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_integer->string.code" to %oop), %"<string>"* @m_ostr2333 }
@m_cstr2334 = private unnamed_addr constant [16 x i8] c"integer->string\00"
@m_ostr2335 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 31, %oop bitcast ([16 x i8]* @m_cstr2334 to %oop) }
@m_cstr2336 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr2337 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr2336 to %oop) }
@m_cstr2338 = private unnamed_addr constant [4 x i8] c"num\00"
@m_ostr2339 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr2338 to %oop) }
@m_cstr2340 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr2341 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr2340 to %oop) }
@m_cstr2342 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr2343 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr2342 to %oop) }
@m_cstr2344 = private unnamed_addr constant [16 x i8] c"integer->string\00"
@m_ostr2345 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 31, %oop bitcast ([16 x i8]* @m_cstr2344 to %oop) }
@m_cstr2346 = private unnamed_addr constant [16 x i8] c"integer->string\00"
@m_ostr2347 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 31, %oop bitcast ([16 x i8]* @m_cstr2346 to %oop) }
@m_cstr2348 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr2349 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr2348 to %oop) }
@m_cstr2350 = private unnamed_addr constant [6 x i8] c"radix\00"
@m_ostr2351 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr2350 to %oop) }
@m_cstr2352 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr2353 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr2352 to %oop) }
@m_cstr2354 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr2355 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr2354 to %oop) }
@m_cstr2356 = private unnamed_addr constant [16 x i8] c"integer->string\00"
@m_ostr2357 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 31, %oop bitcast ([16 x i8]* @m_cstr2356 to %oop) }
define %oop @"m_integer->string/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = load %oop, %oop* %t2
	%r5 = call %oop @"m_pair?.code"(%oop %r4)
	%r7 = ptrtoint %oop %r5 to %word
	%r6 = icmp ne %word %r7, 0
	br i1 %r6, label %L1, label %L2
L1:
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t2
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	%r10 = load %oop, %oop* %r11
	store %oop %r10, %oop* %t3
	%r14 = inttoptr %word 0 to %oop
	store %oop %r14, %oop* %t6
	%r15 = load %oop, %oop* %t3
	%r16 = call %oop @"m_long?.code"(%oop %r15)
	store %oop %r16, %oop* %t6
	%r17 = inttoptr %word 0 to %oop
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = icmp eq %word %r21, %r20
	%r18 = inttoptr i1 %r19 to %oop
	%r23 = ptrtoint %oop %r18 to %word
	%r22 = icmp ne %word %r23, 0
	br i1 %r22, label %L5, label %L4
L5:
	%r24 = call %oop @m_error-prologue.code()
	%r25 = getelementptr %"<string>", %"<string>"* @m_ostr2335, i32 0, i32 1
	%r26 = bitcast %word* %r25 to %oop
	%r27 = call %oop @"m_%error.code"(%oop %r26)
	%r28 = getelementptr %"<string>", %"<string>"* @m_ostr2337, i32 0, i32 1
	%r29 = bitcast %word* %r28 to %oop
	%r30 = call %oop @"m_%error.code"(%oop %r29)
	%r31 = getelementptr %"<string>", %"<string>"* @m_ostr2339, i32 0, i32 1
	%r32 = bitcast %word* %r31 to %oop
	%r33 = call %oop @"m_%error.code"(%oop %r32)
	%r34 = getelementptr %"<string>", %"<string>"* @m_ostr2341, i32 0, i32 1
	%r35 = bitcast %word* %r34 to %oop
	%r36 = call %oop @"m_%error.code"(%oop %r35)
	%r37 = getelementptr %"<string>", %"<string>"* @m_ostr2343, i32 0, i32 1
	%r38 = bitcast %word* %r37 to %oop
	%r39 = call %oop @"m_%error.code"(%oop %r38)
	%r40 = call %oop @m_error-epilogue.code()
	store %oop %r40, %oop* %t6
	%r41 = inttoptr %word 0 to %oop
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = ptrtoint %oop %r40 to %word
	%r43 = icmp eq %word %r45, %r44
	%r42 = inttoptr i1 %r43 to %oop
	%r47 = ptrtoint %oop %r42 to %word
	%r46 = icmp ne %word %r47, 0
	br i1 %r46, label %L6, label %L4
L6:
	br label %L4
L4:
	%r48 = load %oop, %oop* %t6
	%r49 = inttoptr %word 1 to %oop
	%r50 = load %oop, %oop* %t3
	%r54 = ptrtoint %oop %r50 to %word
	%r53 = ptrtoint %oop %r49 to %word
	%r52 = ashr %word %r54, %r53
	%r51 = inttoptr %word %r52 to %oop
	store %oop %r51, %oop* %t3
	%r55 = inttoptr %word 1 to %oop
	%r56 = load %oop, %oop* %t2
	%r60 = bitcast %oop %r56 to [0 x %oop]*
	%r59 = ptrtoint %oop %r55 to %word
	%r58 = getelementptr [0 x %oop], [0 x %oop]* %r60, %word 0, %word %r59
	%r57 = load %oop, %oop* %r58
	store %oop %r57, %oop* %t2
	store %oop %r57, %oop* %t5
	br label %L3
L2:
	%r61 = getelementptr %"<string>", %"<string>"* @m_ostr2345, i32 0, i32 1
	%r62 = bitcast %word* %r61 to %oop
	%r63 = load %oop, %oop* %t0
	%r64 = call %oop @"m_%not-enough-arguments.code"(%oop %r62, %oop %r63)
	store %oop %r64, %oop* %t5
	br label %L3
L3:
	%r65 = load %oop, %oop* %t5
	%r66 = load %oop, %oop* %t2
	%r67 = call %oop @"m_pair?.code"(%oop %r66)
	%r69 = ptrtoint %oop %r67 to %word
	%r68 = icmp ne %word %r69, 0
	br i1 %r68, label %L7, label %L8
L7:
	%r70 = inttoptr %word 0 to %oop
	%r71 = load %oop, %oop* %t2
	%r75 = bitcast %oop %r71 to [0 x %oop]*
	%r74 = ptrtoint %oop %r70 to %word
	%r73 = getelementptr [0 x %oop], [0 x %oop]* %r75, %word 0, %word %r74
	%r72 = load %oop, %oop* %r73
	store %oop %r72, %oop* %t4
	%r76 = inttoptr %word 0 to %oop
	store %oop %r76, %oop* %t6
	%r77 = load %oop, %oop* %t4
	%r78 = call %oop @"m_long?.code"(%oop %r77)
	store %oop %r78, %oop* %t6
	%r79 = inttoptr %word 0 to %oop
	%r83 = ptrtoint %oop %r79 to %word
	%r82 = ptrtoint %oop %r78 to %word
	%r81 = icmp eq %word %r83, %r82
	%r80 = inttoptr i1 %r81 to %oop
	%r85 = ptrtoint %oop %r80 to %word
	%r84 = icmp ne %word %r85, 0
	br i1 %r84, label %L11, label %L10
L11:
	%r86 = call %oop @m_error-prologue.code()
	%r87 = getelementptr %"<string>", %"<string>"* @m_ostr2347, i32 0, i32 1
	%r88 = bitcast %word* %r87 to %oop
	%r89 = call %oop @"m_%error.code"(%oop %r88)
	%r90 = getelementptr %"<string>", %"<string>"* @m_ostr2349, i32 0, i32 1
	%r91 = bitcast %word* %r90 to %oop
	%r92 = call %oop @"m_%error.code"(%oop %r91)
	%r93 = getelementptr %"<string>", %"<string>"* @m_ostr2351, i32 0, i32 1
	%r94 = bitcast %word* %r93 to %oop
	%r95 = call %oop @"m_%error.code"(%oop %r94)
	%r96 = getelementptr %"<string>", %"<string>"* @m_ostr2353, i32 0, i32 1
	%r97 = bitcast %word* %r96 to %oop
	%r98 = call %oop @"m_%error.code"(%oop %r97)
	%r99 = getelementptr %"<string>", %"<string>"* @m_ostr2355, i32 0, i32 1
	%r100 = bitcast %word* %r99 to %oop
	%r101 = call %oop @"m_%error.code"(%oop %r100)
	%r102 = call %oop @m_error-epilogue.code()
	store %oop %r102, %oop* %t6
	%r103 = inttoptr %word 0 to %oop
	%r107 = ptrtoint %oop %r103 to %word
	%r106 = ptrtoint %oop %r102 to %word
	%r105 = icmp eq %word %r107, %r106
	%r104 = inttoptr i1 %r105 to %oop
	%r109 = ptrtoint %oop %r104 to %word
	%r108 = icmp ne %word %r109, 0
	br i1 %r108, label %L12, label %L10
L12:
	br label %L10
L10:
	%r110 = load %oop, %oop* %t6
	%r111 = inttoptr %word 1 to %oop
	%r112 = load %oop, %oop* %t4
	%r116 = ptrtoint %oop %r112 to %word
	%r115 = ptrtoint %oop %r111 to %word
	%r114 = ashr %word %r116, %r115
	%r113 = inttoptr %word %r114 to %oop
	store %oop %r113, %oop* %t4
	%r117 = inttoptr %word 1 to %oop
	%r118 = load %oop, %oop* %t2
	%r122 = bitcast %oop %r118 to [0 x %oop]*
	%r121 = ptrtoint %oop %r117 to %word
	%r120 = getelementptr [0 x %oop], [0 x %oop]* %r122, %word 0, %word %r121
	%r119 = load %oop, %oop* %r120
	store %oop %r119, %oop* %t2
	store %oop %r119, %oop* %t5
	br label %L9
L8:
	%r123 = inttoptr %word 10 to %oop
	store %oop %r123, %oop* %t4
	store %oop %r123, %oop* %t5
	br label %L9
L9:
	%r124 = load %oop, %oop* %t5
	%r125 = load %oop, %oop* %t2
	%r127 = ptrtoint %oop %r125 to %word
	%r126 = icmp ne %word %r127, 0
	br i1 %r126, label %L13, label %L14
L13:
	%r128 = getelementptr %"<string>", %"<string>"* @m_ostr2357, i32 0, i32 1
	%r129 = bitcast %word* %r128 to %oop
	%r130 = load %oop, %oop* %t0
	%r131 = call %oop @"m_%too-many-arguments.code"(%oop %r129, %oop %r130)
	store %oop %r131, %oop* %t5
	br label %L15
L14:
	%r132 = inttoptr %word 0 to %oop
	store %oop %r132, %oop* %t5
	br label %L15
L15:
	%r133 = load %oop, %oop* %t5
	%r134 = load %oop, %oop* %t3
	%r135 = load %oop, %oop* %t4
	%r136 = call %oop @"m_integer->string.code"(%oop %r134, %oop %r135)
	ret %oop %r136
}
@m_cstr2358 = private unnamed_addr constant [31 x i8] c"integer->string/evaluator-stub\00"
@m_ostr2359 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 61, %oop bitcast ([31 x i8]* @m_cstr2358 to %oop) }
@"m_integer->string/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_integer->string/evaluator-stub.code" to %oop), %"<string>"* @m_ostr2359 }
@m_cstr2360 = private unnamed_addr constant [28 x i8] c"string->number: failed for \00"
@m_ostr2361 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 55, %oop bitcast ([28 x i8]* @m_cstr2360 to %oop) }
define %oop @"m_string->number.code"(%oop %str, %oop %radix) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	store %oop %str, %oop* %t0
	store %oop %radix, %oop* %t1
	%r1 = load %oop, %oop* %t0
	%r2 = load %oop, %oop* %t1
	%r3 = call %oop @"m_string->long*.code"(%oop %r1, %oop %r2)
	store %oop %r3, %oop* %t2
	%r4 = load %oop, %oop* @"m_+end+"
	%r5 = load %oop, %oop* %t2
	%r9 = ptrtoint %oop %r5 to %word
	%r8 = ptrtoint %oop %r4 to %word
	%r7 = icmp eq %word %r9, %r8
	%r6 = inttoptr i1 %r7 to %oop
	%r11 = ptrtoint %oop %r6 to %word
	%r10 = icmp ne %word %r11, 0
	br i1 %r10, label %L1, label %L2
L1:
	%r12 = call %oop @m_error-prologue.code()
	%r13 = getelementptr %"<string>", %"<string>"* @m_ostr2361, i32 0, i32 1
	%r14 = bitcast %word* %r13 to %oop
	%r15 = call %oop @"m_%error.code"(%oop %r14)
	%r16 = load %oop, %oop* %t0
	%r17 = call %oop @"m_%error.code"(%oop %r16)
	%r18 = call %oop @m_error-epilogue.code()
	store %oop %r18, %oop* %t3
	br label %L3
L2:
	%r19 = inttoptr %word 0 to %oop
	store %oop %r19, %oop* %t3
	br label %L3
L3:
	%r20 = load %oop, %oop* %t3
	%r21 = inttoptr %word 1 to %oop
	%r22 = inttoptr %word 1 to %oop
	%r23 = load %oop, %oop* %t2
	%r27 = ptrtoint %oop %r23 to %word
	%r26 = ptrtoint %oop %r22 to %word
	%r25 = shl %word %r27, %r26
	%r24 = inttoptr %word %r25 to %oop
	%r31 = ptrtoint %oop %r24 to %word
	%r30 = ptrtoint %oop %r21 to %word
	%r29 = or %word %r31, %r30
	%r28 = inttoptr %word %r29 to %oop
	ret %oop %r28
}
@m_cstr2362 = private unnamed_addr constant [15 x i8] c"string->number\00"
@m_ostr2363 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr2362 to %oop) }
@"m_string->number" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_string->number.code" to %oop), %"<string>"* @m_ostr2363 }
@m_cstr2364 = private unnamed_addr constant [15 x i8] c"string->number\00"
@m_ostr2365 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr2364 to %oop) }
@m_cstr2366 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr2367 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr2366 to %oop) }
@m_cstr2368 = private unnamed_addr constant [4 x i8] c"str\00"
@m_ostr2369 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr2368 to %oop) }
@m_cstr2370 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr2371 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr2370 to %oop) }
@m_cstr2372 = private unnamed_addr constant [9 x i8] c"<string>\00"
@m_ostr2373 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr2372 to %oop) }
@m_cstr2374 = private unnamed_addr constant [15 x i8] c"string->number\00"
@m_ostr2375 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr2374 to %oop) }
@m_cstr2376 = private unnamed_addr constant [15 x i8] c"string->number\00"
@m_ostr2377 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr2376 to %oop) }
@m_cstr2378 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr2379 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr2378 to %oop) }
@m_cstr2380 = private unnamed_addr constant [6 x i8] c"radix\00"
@m_ostr2381 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr2380 to %oop) }
@m_cstr2382 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr2383 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr2382 to %oop) }
@m_cstr2384 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr2385 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr2384 to %oop) }
@m_cstr2386 = private unnamed_addr constant [15 x i8] c"string->number\00"
@m_ostr2387 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr2386 to %oop) }
define %oop @"m_string->number/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = load %oop, %oop* %t2
	%r5 = call %oop @"m_pair?.code"(%oop %r4)
	%r7 = ptrtoint %oop %r5 to %word
	%r6 = icmp ne %word %r7, 0
	br i1 %r6, label %L1, label %L2
L1:
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t2
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	%r10 = load %oop, %oop* %r11
	store %oop %r10, %oop* %t3
	%r14 = inttoptr %word 0 to %oop
	store %oop %r14, %oop* %t6
	%r15 = load %oop, %oop* %t3
	%r16 = call %oop @"m_string?.code"(%oop %r15)
	store %oop %r16, %oop* %t6
	%r17 = inttoptr %word 0 to %oop
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = icmp eq %word %r21, %r20
	%r18 = inttoptr i1 %r19 to %oop
	%r23 = ptrtoint %oop %r18 to %word
	%r22 = icmp ne %word %r23, 0
	br i1 %r22, label %L5, label %L4
L5:
	%r24 = call %oop @m_error-prologue.code()
	%r25 = getelementptr %"<string>", %"<string>"* @m_ostr2365, i32 0, i32 1
	%r26 = bitcast %word* %r25 to %oop
	%r27 = call %oop @"m_%error.code"(%oop %r26)
	%r28 = getelementptr %"<string>", %"<string>"* @m_ostr2367, i32 0, i32 1
	%r29 = bitcast %word* %r28 to %oop
	%r30 = call %oop @"m_%error.code"(%oop %r29)
	%r31 = getelementptr %"<string>", %"<string>"* @m_ostr2369, i32 0, i32 1
	%r32 = bitcast %word* %r31 to %oop
	%r33 = call %oop @"m_%error.code"(%oop %r32)
	%r34 = getelementptr %"<string>", %"<string>"* @m_ostr2371, i32 0, i32 1
	%r35 = bitcast %word* %r34 to %oop
	%r36 = call %oop @"m_%error.code"(%oop %r35)
	%r37 = getelementptr %"<string>", %"<string>"* @m_ostr2373, i32 0, i32 1
	%r38 = bitcast %word* %r37 to %oop
	%r39 = call %oop @"m_%error.code"(%oop %r38)
	%r40 = call %oop @m_error-epilogue.code()
	store %oop %r40, %oop* %t6
	%r41 = inttoptr %word 0 to %oop
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = ptrtoint %oop %r40 to %word
	%r43 = icmp eq %word %r45, %r44
	%r42 = inttoptr i1 %r43 to %oop
	%r47 = ptrtoint %oop %r42 to %word
	%r46 = icmp ne %word %r47, 0
	br i1 %r46, label %L6, label %L4
L6:
	br label %L4
L4:
	%r48 = load %oop, %oop* %t6
	%r49 = inttoptr %word 1 to %oop
	%r50 = load %oop, %oop* %t2
	%r54 = bitcast %oop %r50 to [0 x %oop]*
	%r53 = ptrtoint %oop %r49 to %word
	%r52 = getelementptr [0 x %oop], [0 x %oop]* %r54, %word 0, %word %r53
	%r51 = load %oop, %oop* %r52
	store %oop %r51, %oop* %t2
	store %oop %r51, %oop* %t5
	br label %L3
L2:
	%r55 = getelementptr %"<string>", %"<string>"* @m_ostr2375, i32 0, i32 1
	%r56 = bitcast %word* %r55 to %oop
	%r57 = load %oop, %oop* %t0
	%r58 = call %oop @"m_%not-enough-arguments.code"(%oop %r56, %oop %r57)
	store %oop %r58, %oop* %t5
	br label %L3
L3:
	%r59 = load %oop, %oop* %t5
	%r60 = load %oop, %oop* %t2
	%r61 = call %oop @"m_pair?.code"(%oop %r60)
	%r63 = ptrtoint %oop %r61 to %word
	%r62 = icmp ne %word %r63, 0
	br i1 %r62, label %L7, label %L8
L7:
	%r64 = inttoptr %word 0 to %oop
	%r65 = load %oop, %oop* %t2
	%r69 = bitcast %oop %r65 to [0 x %oop]*
	%r68 = ptrtoint %oop %r64 to %word
	%r67 = getelementptr [0 x %oop], [0 x %oop]* %r69, %word 0, %word %r68
	%r66 = load %oop, %oop* %r67
	store %oop %r66, %oop* %t4
	%r70 = inttoptr %word 0 to %oop
	store %oop %r70, %oop* %t6
	%r71 = load %oop, %oop* %t4
	%r72 = call %oop @"m_long?.code"(%oop %r71)
	store %oop %r72, %oop* %t6
	%r73 = inttoptr %word 0 to %oop
	%r77 = ptrtoint %oop %r73 to %word
	%r76 = ptrtoint %oop %r72 to %word
	%r75 = icmp eq %word %r77, %r76
	%r74 = inttoptr i1 %r75 to %oop
	%r79 = ptrtoint %oop %r74 to %word
	%r78 = icmp ne %word %r79, 0
	br i1 %r78, label %L11, label %L10
L11:
	%r80 = call %oop @m_error-prologue.code()
	%r81 = getelementptr %"<string>", %"<string>"* @m_ostr2377, i32 0, i32 1
	%r82 = bitcast %word* %r81 to %oop
	%r83 = call %oop @"m_%error.code"(%oop %r82)
	%r84 = getelementptr %"<string>", %"<string>"* @m_ostr2379, i32 0, i32 1
	%r85 = bitcast %word* %r84 to %oop
	%r86 = call %oop @"m_%error.code"(%oop %r85)
	%r87 = getelementptr %"<string>", %"<string>"* @m_ostr2381, i32 0, i32 1
	%r88 = bitcast %word* %r87 to %oop
	%r89 = call %oop @"m_%error.code"(%oop %r88)
	%r90 = getelementptr %"<string>", %"<string>"* @m_ostr2383, i32 0, i32 1
	%r91 = bitcast %word* %r90 to %oop
	%r92 = call %oop @"m_%error.code"(%oop %r91)
	%r93 = getelementptr %"<string>", %"<string>"* @m_ostr2385, i32 0, i32 1
	%r94 = bitcast %word* %r93 to %oop
	%r95 = call %oop @"m_%error.code"(%oop %r94)
	%r96 = call %oop @m_error-epilogue.code()
	store %oop %r96, %oop* %t6
	%r97 = inttoptr %word 0 to %oop
	%r101 = ptrtoint %oop %r97 to %word
	%r100 = ptrtoint %oop %r96 to %word
	%r99 = icmp eq %word %r101, %r100
	%r98 = inttoptr i1 %r99 to %oop
	%r103 = ptrtoint %oop %r98 to %word
	%r102 = icmp ne %word %r103, 0
	br i1 %r102, label %L12, label %L10
L12:
	br label %L10
L10:
	%r104 = load %oop, %oop* %t6
	%r105 = inttoptr %word 1 to %oop
	%r106 = load %oop, %oop* %t4
	%r110 = ptrtoint %oop %r106 to %word
	%r109 = ptrtoint %oop %r105 to %word
	%r108 = ashr %word %r110, %r109
	%r107 = inttoptr %word %r108 to %oop
	store %oop %r107, %oop* %t4
	%r111 = inttoptr %word 1 to %oop
	%r112 = load %oop, %oop* %t2
	%r116 = bitcast %oop %r112 to [0 x %oop]*
	%r115 = ptrtoint %oop %r111 to %word
	%r114 = getelementptr [0 x %oop], [0 x %oop]* %r116, %word 0, %word %r115
	%r113 = load %oop, %oop* %r114
	store %oop %r113, %oop* %t2
	store %oop %r113, %oop* %t5
	br label %L9
L8:
	%r117 = inttoptr %word 10 to %oop
	store %oop %r117, %oop* %t4
	store %oop %r117, %oop* %t5
	br label %L9
L9:
	%r118 = load %oop, %oop* %t5
	%r119 = load %oop, %oop* %t2
	%r121 = ptrtoint %oop %r119 to %word
	%r120 = icmp ne %word %r121, 0
	br i1 %r120, label %L13, label %L14
L13:
	%r122 = getelementptr %"<string>", %"<string>"* @m_ostr2387, i32 0, i32 1
	%r123 = bitcast %word* %r122 to %oop
	%r124 = load %oop, %oop* %t0
	%r125 = call %oop @"m_%too-many-arguments.code"(%oop %r123, %oop %r124)
	store %oop %r125, %oop* %t5
	br label %L15
L14:
	%r126 = inttoptr %word 0 to %oop
	store %oop %r126, %oop* %t5
	br label %L15
L15:
	%r127 = load %oop, %oop* %t5
	%r128 = load %oop, %oop* %t3
	%r129 = load %oop, %oop* %t4
	%r130 = call %oop @"m_string->number.code"(%oop %r128, %oop %r129)
	ret %oop %r130
}
@m_cstr2388 = private unnamed_addr constant [30 x i8] c"string->number/evaluator-stub\00"
@m_ostr2389 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 59, %oop bitcast ([30 x i8]* @m_cstr2388 to %oop) }
@"m_string->number/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_string->number/evaluator-stub.code" to %oop), %"<string>"* @m_ostr2389 }
@m_cstr2390 = private unnamed_addr constant [29 x i8] c"string->integer: failed for \00"
@m_ostr2391 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 57, %oop bitcast ([29 x i8]* @m_cstr2390 to %oop) }
define %oop @"m_string->integer.code"(%oop %str, %oop %radix) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	store %oop %str, %oop* %t0
	store %oop %radix, %oop* %t1
	%r1 = load %oop, %oop* %t0
	%r2 = load %oop, %oop* %t1
	%r3 = call %oop @"m_string->long*.code"(%oop %r1, %oop %r2)
	store %oop %r3, %oop* %t2
	%r4 = load %oop, %oop* @"m_+end+"
	%r5 = load %oop, %oop* %t2
	%r9 = ptrtoint %oop %r5 to %word
	%r8 = ptrtoint %oop %r4 to %word
	%r7 = icmp eq %word %r9, %r8
	%r6 = inttoptr i1 %r7 to %oop
	%r11 = ptrtoint %oop %r6 to %word
	%r10 = icmp ne %word %r11, 0
	br i1 %r10, label %L1, label %L2
L1:
	%r12 = call %oop @m_error-prologue.code()
	%r13 = getelementptr %"<string>", %"<string>"* @m_ostr2391, i32 0, i32 1
	%r14 = bitcast %word* %r13 to %oop
	%r15 = call %oop @"m_%error.code"(%oop %r14)
	%r16 = load %oop, %oop* %t0
	%r17 = call %oop @"m_%error.code"(%oop %r16)
	%r18 = call %oop @m_error-epilogue.code()
	store %oop %r18, %oop* %t3
	br label %L3
L2:
	%r19 = inttoptr %word 0 to %oop
	store %oop %r19, %oop* %t3
	br label %L3
L3:
	%r20 = load %oop, %oop* %t3
	%r21 = inttoptr %word 1 to %oop
	%r22 = inttoptr %word 1 to %oop
	%r23 = load %oop, %oop* %t2
	%r27 = ptrtoint %oop %r23 to %word
	%r26 = ptrtoint %oop %r22 to %word
	%r25 = shl %word %r27, %r26
	%r24 = inttoptr %word %r25 to %oop
	%r31 = ptrtoint %oop %r24 to %word
	%r30 = ptrtoint %oop %r21 to %word
	%r29 = or %word %r31, %r30
	%r28 = inttoptr %word %r29 to %oop
	ret %oop %r28
}
@m_cstr2392 = private unnamed_addr constant [16 x i8] c"string->integer\00"
@m_ostr2393 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 31, %oop bitcast ([16 x i8]* @m_cstr2392 to %oop) }
@"m_string->integer" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_string->integer.code" to %oop), %"<string>"* @m_ostr2393 }
@m_cstr2394 = private unnamed_addr constant [16 x i8] c"string->integer\00"
@m_ostr2395 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 31, %oop bitcast ([16 x i8]* @m_cstr2394 to %oop) }
@m_cstr2396 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr2397 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr2396 to %oop) }
@m_cstr2398 = private unnamed_addr constant [4 x i8] c"str\00"
@m_ostr2399 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 7, %oop bitcast ([4 x i8]* @m_cstr2398 to %oop) }
@m_cstr2400 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr2401 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr2400 to %oop) }
@m_cstr2402 = private unnamed_addr constant [9 x i8] c"<string>\00"
@m_ostr2403 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr2402 to %oop) }
@m_cstr2404 = private unnamed_addr constant [16 x i8] c"string->integer\00"
@m_ostr2405 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 31, %oop bitcast ([16 x i8]* @m_cstr2404 to %oop) }
@m_cstr2406 = private unnamed_addr constant [16 x i8] c"string->integer\00"
@m_ostr2407 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 31, %oop bitcast ([16 x i8]* @m_cstr2406 to %oop) }
@m_cstr2408 = private unnamed_addr constant [8 x i8] c": arg '\00"
@m_ostr2409 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 15, %oop bitcast ([8 x i8]* @m_cstr2408 to %oop) }
@m_cstr2410 = private unnamed_addr constant [6 x i8] c"radix\00"
@m_ostr2411 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 11, %oop bitcast ([6 x i8]* @m_cstr2410 to %oop) }
@m_cstr2412 = private unnamed_addr constant [18 x i8] c"' is not of type \00"
@m_ostr2413 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 35, %oop bitcast ([18 x i8]* @m_cstr2412 to %oop) }
@m_cstr2414 = private unnamed_addr constant [7 x i8] c"<long>\00"
@m_ostr2415 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr2414 to %oop) }
@m_cstr2416 = private unnamed_addr constant [16 x i8] c"string->integer\00"
@m_ostr2417 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 31, %oop bitcast ([16 x i8]* @m_cstr2416 to %oop) }
define %oop @"m_string->integer/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t4 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t5 = alloca %oop
	%t6 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = inttoptr %word 0 to %oop
	store %oop %r3, %oop* %t4
	%r4 = load %oop, %oop* %t2
	%r5 = call %oop @"m_pair?.code"(%oop %r4)
	%r7 = ptrtoint %oop %r5 to %word
	%r6 = icmp ne %word %r7, 0
	br i1 %r6, label %L1, label %L2
L1:
	%r8 = inttoptr %word 0 to %oop
	%r9 = load %oop, %oop* %t2
	%r13 = bitcast %oop %r9 to [0 x %oop]*
	%r12 = ptrtoint %oop %r8 to %word
	%r11 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word %r12
	%r10 = load %oop, %oop* %r11
	store %oop %r10, %oop* %t3
	%r14 = inttoptr %word 0 to %oop
	store %oop %r14, %oop* %t6
	%r15 = load %oop, %oop* %t3
	%r16 = call %oop @"m_string?.code"(%oop %r15)
	store %oop %r16, %oop* %t6
	%r17 = inttoptr %word 0 to %oop
	%r21 = ptrtoint %oop %r17 to %word
	%r20 = ptrtoint %oop %r16 to %word
	%r19 = icmp eq %word %r21, %r20
	%r18 = inttoptr i1 %r19 to %oop
	%r23 = ptrtoint %oop %r18 to %word
	%r22 = icmp ne %word %r23, 0
	br i1 %r22, label %L5, label %L4
L5:
	%r24 = call %oop @m_error-prologue.code()
	%r25 = getelementptr %"<string>", %"<string>"* @m_ostr2395, i32 0, i32 1
	%r26 = bitcast %word* %r25 to %oop
	%r27 = call %oop @"m_%error.code"(%oop %r26)
	%r28 = getelementptr %"<string>", %"<string>"* @m_ostr2397, i32 0, i32 1
	%r29 = bitcast %word* %r28 to %oop
	%r30 = call %oop @"m_%error.code"(%oop %r29)
	%r31 = getelementptr %"<string>", %"<string>"* @m_ostr2399, i32 0, i32 1
	%r32 = bitcast %word* %r31 to %oop
	%r33 = call %oop @"m_%error.code"(%oop %r32)
	%r34 = getelementptr %"<string>", %"<string>"* @m_ostr2401, i32 0, i32 1
	%r35 = bitcast %word* %r34 to %oop
	%r36 = call %oop @"m_%error.code"(%oop %r35)
	%r37 = getelementptr %"<string>", %"<string>"* @m_ostr2403, i32 0, i32 1
	%r38 = bitcast %word* %r37 to %oop
	%r39 = call %oop @"m_%error.code"(%oop %r38)
	%r40 = call %oop @m_error-epilogue.code()
	store %oop %r40, %oop* %t6
	%r41 = inttoptr %word 0 to %oop
	%r45 = ptrtoint %oop %r41 to %word
	%r44 = ptrtoint %oop %r40 to %word
	%r43 = icmp eq %word %r45, %r44
	%r42 = inttoptr i1 %r43 to %oop
	%r47 = ptrtoint %oop %r42 to %word
	%r46 = icmp ne %word %r47, 0
	br i1 %r46, label %L6, label %L4
L6:
	br label %L4
L4:
	%r48 = load %oop, %oop* %t6
	%r49 = inttoptr %word 1 to %oop
	%r50 = load %oop, %oop* %t2
	%r54 = bitcast %oop %r50 to [0 x %oop]*
	%r53 = ptrtoint %oop %r49 to %word
	%r52 = getelementptr [0 x %oop], [0 x %oop]* %r54, %word 0, %word %r53
	%r51 = load %oop, %oop* %r52
	store %oop %r51, %oop* %t2
	store %oop %r51, %oop* %t5
	br label %L3
L2:
	%r55 = getelementptr %"<string>", %"<string>"* @m_ostr2405, i32 0, i32 1
	%r56 = bitcast %word* %r55 to %oop
	%r57 = load %oop, %oop* %t0
	%r58 = call %oop @"m_%not-enough-arguments.code"(%oop %r56, %oop %r57)
	store %oop %r58, %oop* %t5
	br label %L3
L3:
	%r59 = load %oop, %oop* %t5
	%r60 = load %oop, %oop* %t2
	%r61 = call %oop @"m_pair?.code"(%oop %r60)
	%r63 = ptrtoint %oop %r61 to %word
	%r62 = icmp ne %word %r63, 0
	br i1 %r62, label %L7, label %L8
L7:
	%r64 = inttoptr %word 0 to %oop
	%r65 = load %oop, %oop* %t2
	%r69 = bitcast %oop %r65 to [0 x %oop]*
	%r68 = ptrtoint %oop %r64 to %word
	%r67 = getelementptr [0 x %oop], [0 x %oop]* %r69, %word 0, %word %r68
	%r66 = load %oop, %oop* %r67
	store %oop %r66, %oop* %t4
	%r70 = inttoptr %word 0 to %oop
	store %oop %r70, %oop* %t6
	%r71 = load %oop, %oop* %t4
	%r72 = call %oop @"m_long?.code"(%oop %r71)
	store %oop %r72, %oop* %t6
	%r73 = inttoptr %word 0 to %oop
	%r77 = ptrtoint %oop %r73 to %word
	%r76 = ptrtoint %oop %r72 to %word
	%r75 = icmp eq %word %r77, %r76
	%r74 = inttoptr i1 %r75 to %oop
	%r79 = ptrtoint %oop %r74 to %word
	%r78 = icmp ne %word %r79, 0
	br i1 %r78, label %L11, label %L10
L11:
	%r80 = call %oop @m_error-prologue.code()
	%r81 = getelementptr %"<string>", %"<string>"* @m_ostr2407, i32 0, i32 1
	%r82 = bitcast %word* %r81 to %oop
	%r83 = call %oop @"m_%error.code"(%oop %r82)
	%r84 = getelementptr %"<string>", %"<string>"* @m_ostr2409, i32 0, i32 1
	%r85 = bitcast %word* %r84 to %oop
	%r86 = call %oop @"m_%error.code"(%oop %r85)
	%r87 = getelementptr %"<string>", %"<string>"* @m_ostr2411, i32 0, i32 1
	%r88 = bitcast %word* %r87 to %oop
	%r89 = call %oop @"m_%error.code"(%oop %r88)
	%r90 = getelementptr %"<string>", %"<string>"* @m_ostr2413, i32 0, i32 1
	%r91 = bitcast %word* %r90 to %oop
	%r92 = call %oop @"m_%error.code"(%oop %r91)
	%r93 = getelementptr %"<string>", %"<string>"* @m_ostr2415, i32 0, i32 1
	%r94 = bitcast %word* %r93 to %oop
	%r95 = call %oop @"m_%error.code"(%oop %r94)
	%r96 = call %oop @m_error-epilogue.code()
	store %oop %r96, %oop* %t6
	%r97 = inttoptr %word 0 to %oop
	%r101 = ptrtoint %oop %r97 to %word
	%r100 = ptrtoint %oop %r96 to %word
	%r99 = icmp eq %word %r101, %r100
	%r98 = inttoptr i1 %r99 to %oop
	%r103 = ptrtoint %oop %r98 to %word
	%r102 = icmp ne %word %r103, 0
	br i1 %r102, label %L12, label %L10
L12:
	br label %L10
L10:
	%r104 = load %oop, %oop* %t6
	%r105 = inttoptr %word 1 to %oop
	%r106 = load %oop, %oop* %t4
	%r110 = ptrtoint %oop %r106 to %word
	%r109 = ptrtoint %oop %r105 to %word
	%r108 = ashr %word %r110, %r109
	%r107 = inttoptr %word %r108 to %oop
	store %oop %r107, %oop* %t4
	%r111 = inttoptr %word 1 to %oop
	%r112 = load %oop, %oop* %t2
	%r116 = bitcast %oop %r112 to [0 x %oop]*
	%r115 = ptrtoint %oop %r111 to %word
	%r114 = getelementptr [0 x %oop], [0 x %oop]* %r116, %word 0, %word %r115
	%r113 = load %oop, %oop* %r114
	store %oop %r113, %oop* %t2
	store %oop %r113, %oop* %t5
	br label %L9
L8:
	%r117 = inttoptr %word 10 to %oop
	store %oop %r117, %oop* %t4
	store %oop %r117, %oop* %t5
	br label %L9
L9:
	%r118 = load %oop, %oop* %t5
	%r119 = load %oop, %oop* %t2
	%r121 = ptrtoint %oop %r119 to %word
	%r120 = icmp ne %word %r121, 0
	br i1 %r120, label %L13, label %L14
L13:
	%r122 = getelementptr %"<string>", %"<string>"* @m_ostr2417, i32 0, i32 1
	%r123 = bitcast %word* %r122 to %oop
	%r124 = load %oop, %oop* %t0
	%r125 = call %oop @"m_%too-many-arguments.code"(%oop %r123, %oop %r124)
	store %oop %r125, %oop* %t5
	br label %L15
L14:
	%r126 = inttoptr %word 0 to %oop
	store %oop %r126, %oop* %t5
	br label %L15
L15:
	%r127 = load %oop, %oop* %t5
	%r128 = load %oop, %oop* %t3
	%r129 = load %oop, %oop* %t4
	%r130 = call %oop @"m_string->integer.code"(%oop %r128, %oop %r129)
	ret %oop %r130
}
@m_cstr2418 = private unnamed_addr constant [31 x i8] c"string->integer/evaluator-stub\00"
@m_ostr2419 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 61, %oop bitcast ([31 x i8]* @m_cstr2418 to %oop) }
@"m_string->integer/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_string->integer/evaluator-stub.code" to %oop), %"<string>"* @m_ostr2419 }
@m_cstr2420 = private unnamed_addr constant [54 x i8] c"call-x86-64-machine-code: cannot call object of type \00"
@m_ostr2421 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 107, %oop bitcast ([54 x i8]* @m_cstr2420 to %oop) }
@m_cstr2422 = private unnamed_addr constant [15 x i8] c", printing as \00"
@m_ostr2423 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 29, %oop bitcast ([15 x i8]* @m_cstr2422 to %oop) }
define %oop @m_call-x86-64-machine-code.code(%oop %fn) {
	%t0 = alloca %oop
	%t1 = alloca %oop
	store %oop %fn, %oop* %t0
	%r1 = inttoptr %word 0 to %oop
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t1
	%r3 = load %oop, %oop* %t0
	%r4 = call %oop @m_type-of.code(%oop %r3)
	%r5 = inttoptr %word 10 to %oop
	%r9 = ptrtoint %oop %r5 to %word
	%r8 = ptrtoint %oop %r4 to %word
	%r7 = icmp eq %word %r9, %r8
	%r6 = inttoptr i1 %r7 to %oop
	store %oop %r6, %oop* %t1
	%r10 = inttoptr %word 0 to %oop
	%r14 = ptrtoint %oop %r10 to %word
	%r13 = ptrtoint %oop %r6 to %word
	%r12 = icmp eq %word %r14, %r13
	%r11 = inttoptr i1 %r12 to %oop
	%r16 = ptrtoint %oop %r11 to %word
	%r15 = icmp ne %word %r16, 0
	br i1 %r15, label %L2, label %L1
L2:
	%r17 = call %oop @m_error-prologue.code()
	%r18 = getelementptr %"<string>", %"<string>"* @m_ostr2421, i32 0, i32 1
	%r19 = bitcast %word* %r18 to %oop
	%r20 = call %oop @"m_%error.code"(%oop %r19)
	%r21 = load %oop, %oop* %t0
	%r22 = call %oop @m_type-of.code(%oop %r21)
	%r23 = call %oop @"m_%error.code"(%oop %r22)
	%r24 = getelementptr %"<string>", %"<string>"* @m_ostr2423, i32 0, i32 1
	%r25 = bitcast %word* %r24 to %oop
	%r26 = call %oop @"m_%error.code"(%oop %r25)
	%r27 = load %oop, %oop* %t0
	%r28 = call %oop @"m_%error.code"(%oop %r27)
	%r29 = call %oop @m_error-epilogue.code()
	store %oop %r29, %oop* %t1
	%r30 = inttoptr %word 0 to %oop
	%r34 = ptrtoint %oop %r30 to %word
	%r33 = ptrtoint %oop %r29 to %word
	%r32 = icmp eq %word %r34, %r33
	%r31 = inttoptr i1 %r32 to %oop
	%r36 = ptrtoint %oop %r31 to %word
	%r35 = icmp ne %word %r36, 0
	br i1 %r35, label %L3, label %L1
L3:
	br label %L1
L1:
	%r37 = load %oop, %oop* %t1
	%r38 = load %oop, %oop* %t0
	%r39 = bitcast %oop %r38 to %"<target-function>"*
	%r40 = getelementptr %"<target-function>", %"<target-function>"* %r39, i32 0, i32 1
	%r41 = load %oop, %oop* %r40
	%r43 = bitcast %oop %r41 to %oop ()*
	%r42 = call %oop %r43()
	%r44 = inttoptr %word 0 to %oop
	%r45 = inttoptr %word 0 to %oop
	ret %oop %r45
}
@m_cstr2424 = private unnamed_addr constant [25 x i8] c"call-x86-64-machine-code\00"
@m_ostr2425 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 49, %oop bitcast ([25 x i8]* @m_cstr2424 to %oop) }
@m_call-x86-64-machine-code = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop)* @m_call-x86-64-machine-code.code to %oop), %"<string>"* @m_ostr2425 }
@m_cstr2426 = private unnamed_addr constant [25 x i8] c"call-x86-64-machine-code\00"
@m_ostr2427 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 49, %oop bitcast ([25 x i8]* @m_cstr2426 to %oop) }
@m_cstr2428 = private unnamed_addr constant [25 x i8] c"call-x86-64-machine-code\00"
@m_ostr2429 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 49, %oop bitcast ([25 x i8]* @m_cstr2428 to %oop) }
define %oop @"m_call-x86-64-machine-code/evaluator-stub.code"(%oop %-args-, %oop %-ctx-) {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t4 = alloca %oop
	store %oop %-args-, %oop* %t0
	store %oop %-ctx-, %oop* %t1
	%r1 = load %oop, %oop* %t0
	store %oop %r1, %oop* %t2
	%r2 = inttoptr %word 0 to %oop
	store %oop %r2, %oop* %t3
	%r3 = load %oop, %oop* %t2
	%r4 = call %oop @"m_pair?.code"(%oop %r3)
	%r6 = ptrtoint %oop %r4 to %word
	%r5 = icmp ne %word %r6, 0
	br i1 %r5, label %L1, label %L2
L1:
	%r7 = inttoptr %word 0 to %oop
	%r8 = load %oop, %oop* %t2
	%r12 = bitcast %oop %r8 to [0 x %oop]*
	%r11 = ptrtoint %oop %r7 to %word
	%r10 = getelementptr [0 x %oop], [0 x %oop]* %r12, %word 0, %word %r11
	%r9 = load %oop, %oop* %r10
	store %oop %r9, %oop* %t3
	%r13 = inttoptr %word 1 to %oop
	%r14 = load %oop, %oop* %t2
	%r18 = bitcast %oop %r14 to [0 x %oop]*
	%r17 = ptrtoint %oop %r13 to %word
	%r16 = getelementptr [0 x %oop], [0 x %oop]* %r18, %word 0, %word %r17
	%r15 = load %oop, %oop* %r16
	store %oop %r15, %oop* %t2
	store %oop %r15, %oop* %t4
	br label %L3
L2:
	%r19 = getelementptr %"<string>", %"<string>"* @m_ostr2427, i32 0, i32 1
	%r20 = bitcast %word* %r19 to %oop
	%r21 = load %oop, %oop* %t0
	%r22 = call %oop @"m_%not-enough-arguments.code"(%oop %r20, %oop %r21)
	store %oop %r22, %oop* %t4
	br label %L3
L3:
	%r23 = load %oop, %oop* %t4
	%r24 = load %oop, %oop* %t2
	%r26 = ptrtoint %oop %r24 to %word
	%r25 = icmp ne %word %r26, 0
	br i1 %r25, label %L4, label %L5
L4:
	%r27 = getelementptr %"<string>", %"<string>"* @m_ostr2429, i32 0, i32 1
	%r28 = bitcast %word* %r27 to %oop
	%r29 = load %oop, %oop* %t0
	%r30 = call %oop @"m_%too-many-arguments.code"(%oop %r28, %oop %r29)
	store %oop %r30, %oop* %t4
	br label %L6
L5:
	%r31 = inttoptr %word 0 to %oop
	store %oop %r31, %oop* %t4
	br label %L6
L6:
	%r32 = load %oop, %oop* %t4
	%r33 = load %oop, %oop* %t3
	%r34 = call %oop @m_call-x86-64-machine-code.code(%oop %r33)
	ret %oop %r34
}
@m_cstr2430 = private unnamed_addr constant [40 x i8] c"call-x86-64-machine-code/evaluator-stub\00"
@m_ostr2431 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 79, %oop bitcast ([40 x i8]* @m_cstr2430 to %oop) }
@"m_call-x86-64-machine-code/evaluator-stub" = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop)* @"m_call-x86-64-machine-code/evaluator-stub.code" to %oop), %"<string>"* @m_ostr2431 }
define %oop @m_instantiate-primitive-function.code(%oop %module, %oop %name, %oop %imp, %oop %"fixed?") {
	%t3 = alloca %oop
	%t2 = alloca %oop
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t4 = alloca %oop
	%t5 = alloca %oop
	store %oop %module, %oop* %t0
	store %oop %name, %oop* %t1
	store %oop %imp, %oop* %t2
	store %oop %"fixed?", %oop* %t3
	%r1 = inttoptr %word 9 to %oop
	%r2 = load %oop, %oop* %t2
	%r3 = call %oop @"m_%allocate-boxed.code"(%oop %r1, %oop %r2)
	%r4 = load %oop, %oop* %t1
	%r5 = call %oop @m_primitive-function.code(%oop %r3, %oop %r4)
	store %oop %r5, %oop* %t4
	%r7 = getelementptr %oop, %oop* %t4, %word 0
	%r6 = bitcast %oop* %r7 to %oop
	%r8 = call %oop @"m_gc/push-root.code"(%oop %r6)
	%r9 = load %oop, %oop* %t3
	%r11 = ptrtoint %oop %r9 to %word
	%r10 = icmp ne %word %r11, 0
	br i1 %r10, label %L1, label %L2
L1:
	%r12 = load %oop, %oop* %t4
	%r13 = call %oop @m_fixed.code(%oop %r12)
	store %oop %r13, %oop* %t4
	store %oop %r13, %oop* %t5
	br label %L3
L2:
	%r14 = inttoptr %word 0 to %oop
	store %oop %r14, %oop* %t5
	br label %L3
L3:
	%r15 = load %oop, %oop* %t5
	%r16 = load %oop, %oop* %t0
	%r17 = call %oop @m_module-env.code(%oop %r16)
	%r18 = load %oop, %oop* %t1
	%r19 = call %oop @"m_string->symbol.code"(%oop %r18)
	%r20 = load %oop, %oop* %t4
	%r21 = call %oop @m_environment-define.code(%oop %r17, %oop %r19, %oop %r20)
	store %oop %r21, %oop* %t5
	%r23 = getelementptr %oop, %oop* %t4, %word 0
	%r22 = bitcast %oop* %r23 to %oop
	%r24 = call %oop @"m_gc/pop-root.code"(%oop %r22)
	%r25 = load %oop, %oop* %t5
	ret %oop %r25
}
@m_cstr2432 = private unnamed_addr constant [31 x i8] c"instantiate-primitive-function\00"
@m_ostr2433 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 61, %oop bitcast ([31 x i8]* @m_cstr2432 to %oop) }
@m_instantiate-primitive-function = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop (%oop, %oop, %oop, %oop)* @m_instantiate-primitive-function.code to %oop), %"<string>"* @m_ostr2433 }
@m_cstr2434 = private unnamed_addr constant [5 x i8] c"maru\00"
@m_ostr2435 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 9, %oop bitcast ([5 x i8]* @m_cstr2434 to %oop) }
@m_cstr2436 = private unnamed_addr constant [10 x i8] c"maru-user\00"
@m_ostr2437 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 19, %oop bitcast ([10 x i8]* @m_cstr2436 to %oop) }
@m_cstr2438 = private unnamed_addr constant [14 x i8] c"*maru-module*\00"
@m_ostr2439 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr2438 to %oop) }
define %oop @m_initialize-vm.code() {
	%r1 = inttoptr %word 0 to %oop
	%r2 = inttoptr %word 0 to %oop
	%r3 = call %oop @"m_gc/initialize.code"()
	%r4 = inttoptr %word 0 to %oop
	%r5 = inttoptr %word 0 to %oop
	%r7 = getelementptr %oop, %oop* @"m_*module*", %word 0
	%r6 = bitcast %oop* %r7 to %oop
	%r8 = call %oop @"m_gc/push-root.code"(%oop %r6)
	%r10 = getelementptr %oop, %oop* @"m_*maru-module*", %word 0
	%r9 = bitcast %oop* %r10 to %oop
	%r11 = call %oop @"m_gc/push-root.code"(%oop %r9)
	%r13 = getelementptr %oop, %oop* @"m_*symbols*", %word 0
	%r12 = bitcast %oop* %r13 to %oop
	%r14 = call %oop @"m_gc/push-root.code"(%oop %r12)
	%r15 = inttoptr %word 0 to %oop
	%r16 = inttoptr %word 32 to %oop
	%r17 = call %oop @m_array.code(%oop %r16)
	store %oop %r17, %oop* @"m_*symbols*"
	%r18 = call %oop @m_initialize-symbol-cache.code()
	%r19 = inttoptr %word 0 to %oop
	%r20 = inttoptr %word 0 to %oop
	%r21 = inttoptr %word 0 to %oop
	%r23 = getelementptr %oop, %oop* @"m_*call-stack*", %word 0
	%r22 = bitcast %oop* %r23 to %oop
	%r24 = call %oop @"m_gc/push-root.code"(%oop %r22)
	%r25 = inttoptr %word 32 to %oop
	%r26 = call %oop @m_array.code(%oop %r25)
	store %oop %r26, %oop* @"m_*call-stack*"
	%r27 = getelementptr %"<string>", %"<string>"* @m_ostr2435, i32 0, i32 1
	%r28 = bitcast %word* %r27 to %oop
	%r29 = call %oop @m_module.code(%oop %r28)
	store %oop %r29, %oop* @"m_*maru-module*"
	%r30 = load %oop, %oop* @"m_*maru-module*"
	%r31 = call %oop @m_populate-module-with-maru-primitives.code(%oop %r30)
	%r32 = inttoptr %word 0 to %oop
	%r33 = getelementptr %"<string>", %"<string>"* @m_ostr2437, i32 0, i32 1
	%r34 = bitcast %word* %r33 to %oop
	%r35 = call %oop @m_module.code(%oop %r34)
	store %oop %r35, %oop* @"m_*maru-user-module*"
	store %oop %r35, %oop* @"m_*module*"
	%r36 = load %oop, %oop* @"m_*maru-user-module*"
	%r37 = call %oop @m_module-env.code(%oop %r36)
	%r38 = getelementptr %"<string>", %"<string>"* @m_ostr2439, i32 0, i32 1
	%r39 = bitcast %word* %r38 to %oop
	%r40 = call %oop @"m_string->symbol.code"(%oop %r39)
	%r41 = load %oop, %oop* @"m_*maru-module*"
	%r42 = call %oop @m_environment-define.code(%oop %r37, %oop %r40, %oop %r41)
	%r43 = call %oop @m_capture-well-known-module-values.code()
	%r44 = inttoptr %word 0 to %oop
	ret %oop %r44
}
@m_cstr2440 = private unnamed_addr constant [14 x i8] c"initialize-vm\00"
@m_ostr2441 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 27, %oop bitcast ([14 x i8]* @m_cstr2440 to %oop) }
@m_initialize-vm = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop ()* @m_initialize-vm.code to %oop), %"<string>"* @m_ostr2441 }
@m_cstr2442 = private unnamed_addr constant [13 x i8] c" objects in \00"
@m_ostr2443 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 25, %oop bitcast ([13 x i8]* @m_cstr2442 to %oop) }
@m_cstr2444 = private unnamed_addr constant [9 x i8] c" bytes, \00"
@m_ostr2445 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 17, %oop bitcast ([9 x i8]* @m_cstr2444 to %oop) }
@m_cstr2446 = private unnamed_addr constant [13 x i8] c" bytes free\0A\00"
@m_ostr2447 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 25, %oop bitcast ([13 x i8]* @m_cstr2446 to %oop) }
define %oop @m__start.code() {
	%t1 = alloca %oop
	%t0 = alloca %oop
	%t2 = alloca %oop
	%t3 = alloca %oop
	%r1 = inttoptr %word 0 to %oop
	%r5 = call i8* @llvm.frameaddress(i32 0)
	%r4 = bitcast %oop %r5 to [0 x %oop]*
	%r3 = getelementptr [0 x %oop], [0 x %oop]* %r4, %word 0, %word 1
	%r2 = bitcast %oop* %r3 to %oop
	%r9 = bitcast %oop %r2 to [0 x %oop]*
	%r8 = ptrtoint %oop %r1 to %word
	%r7 = getelementptr [0 x %oop], [0 x %oop]* %r9, %word 0, %word %r8
	%r6 = load %oop, %oop* %r7
	store %oop %r6, %oop* %t0
	%r10 = inttoptr %word 8 to %oop
	%r14 = call i8* @llvm.frameaddress(i32 0)
	%r13 = bitcast %oop %r14 to [0 x %oop]*
	%r12 = getelementptr [0 x %oop], [0 x %oop]* %r13, %word 0, %word 1
	%r11 = bitcast %oop* %r12 to %oop
	%r18 = ptrtoint %oop %r11 to %word
	%r17 = ptrtoint %oop %r10 to %word
	%r16 = add %word %r18, %r17
	%r15 = inttoptr %word %r16 to %oop
	store %oop %r15, %oop* %t1
	%r19 = call %oop @m_initialize-vm.code()
	%r20 = inttoptr %word 0 to %oop
	%r21 = inttoptr %word 1 to %oop
	%r22 = inttoptr %word 2 to %oop
	%r23 = call %oop @m_initialize-streams.code(%oop %r20, %oop %r21, %oop %r22)
	%r24 = load %oop, %oop* %t0
	%r25 = load %oop, %oop* %t1
	%r26 = call %oop @m_process-command-line-arguments.code(%oop %r24, %oop %r25)
	%r27 = inttoptr %word 0 to %oop
	%r28 = load %oop, %oop* @"m_*verbosity*"
	%r29 = inttoptr %word 1 to %oop
	%r33 = ptrtoint %oop %r29 to %word
	%r32 = ptrtoint %oop %r28 to %word
	%r31 = icmp sle %word %r33, %r32
	%r30 = inttoptr i1 %r31 to %oop
	%r35 = ptrtoint %oop %r30 to %word
	%r34 = icmp ne %word %r35, 0
	br i1 %r34, label %L1, label %L2
L1:
	%r36 = call %oop @"m_gc/collect.code"()
	%r37 = load %oop, %oop* @"m_*maru-module*"
	%r38 = load %oop, %oop* @"m_symbol/*error-output*"
	%r39 = call %oop @m_global-variable-value.code(%oop %r37, %oop %r38)
	store %oop %r39, %oop* %t3
	%r40 = load %oop, %oop* @"m_*maru-module*"
	%r41 = load %oop, %oop* @"m_symbol/*error-output*"
	%r42 = call %oop @m_global-variable-value.code(%oop %r40, %oop %r41)
	%r43 = inttoptr %word 1 to %oop
	%r44 = inttoptr %word 1 to %oop
	%r45 = load %oop, %oop* @"m_gc/objects-live"
	%r49 = ptrtoint %oop %r45 to %word
	%r48 = ptrtoint %oop %r44 to %word
	%r47 = shl %word %r49, %r48
	%r46 = inttoptr %word %r47 to %oop
	%r53 = ptrtoint %oop %r46 to %word
	%r52 = ptrtoint %oop %r43 to %word
	%r51 = or %word %r53, %r52
	%r50 = inttoptr %word %r51 to %oop
	%r54 = inttoptr %word 0 to %oop
	%r55 = call %oop @m_do-print.code(%oop %r42, %oop %r50, %oop %r54)
	%r56 = load %oop, %oop* @"m_*maru-module*"
	%r57 = load %oop, %oop* @"m_symbol/*error-output*"
	%r58 = call %oop @m_global-variable-value.code(%oop %r56, %oop %r57)
	%r59 = getelementptr %"<string>", %"<string>"* @m_ostr2443, i32 0, i32 1
	%r60 = bitcast %word* %r59 to %oop
	%r61 = inttoptr %word 0 to %oop
	%r62 = call %oop @m_do-print.code(%oop %r58, %oop %r60, %oop %r61)
	%r63 = load %oop, %oop* @"m_*maru-module*"
	%r64 = load %oop, %oop* @"m_symbol/*error-output*"
	%r65 = call %oop @m_global-variable-value.code(%oop %r63, %oop %r64)
	%r66 = inttoptr %word 1 to %oop
	%r67 = inttoptr %word 1 to %oop
	%r68 = load %oop, %oop* @"m_gc/bytes-used"
	%r72 = ptrtoint %oop %r68 to %word
	%r71 = ptrtoint %oop %r67 to %word
	%r70 = shl %word %r72, %r71
	%r69 = inttoptr %word %r70 to %oop
	%r76 = ptrtoint %oop %r69 to %word
	%r75 = ptrtoint %oop %r66 to %word
	%r74 = or %word %r76, %r75
	%r73 = inttoptr %word %r74 to %oop
	%r77 = inttoptr %word 0 to %oop
	%r78 = call %oop @m_do-print.code(%oop %r65, %oop %r73, %oop %r77)
	%r79 = load %oop, %oop* @"m_*maru-module*"
	%r80 = load %oop, %oop* @"m_symbol/*error-output*"
	%r81 = call %oop @m_global-variable-value.code(%oop %r79, %oop %r80)
	%r82 = getelementptr %"<string>", %"<string>"* @m_ostr2445, i32 0, i32 1
	%r83 = bitcast %word* %r82 to %oop
	%r84 = inttoptr %word 0 to %oop
	%r85 = call %oop @m_do-print.code(%oop %r81, %oop %r83, %oop %r84)
	%r86 = load %oop, %oop* @"m_*maru-module*"
	%r87 = load %oop, %oop* @"m_symbol/*error-output*"
	%r88 = call %oop @m_global-variable-value.code(%oop %r86, %oop %r87)
	%r89 = inttoptr %word 1 to %oop
	%r90 = inttoptr %word 1 to %oop
	%r91 = load %oop, %oop* @"m_gc/bytes-free"
	%r95 = ptrtoint %oop %r91 to %word
	%r94 = ptrtoint %oop %r90 to %word
	%r93 = shl %word %r95, %r94
	%r92 = inttoptr %word %r93 to %oop
	%r99 = ptrtoint %oop %r92 to %word
	%r98 = ptrtoint %oop %r89 to %word
	%r97 = or %word %r99, %r98
	%r96 = inttoptr %word %r97 to %oop
	%r100 = inttoptr %word 0 to %oop
	%r101 = call %oop @m_do-print.code(%oop %r88, %oop %r96, %oop %r100)
	%r102 = load %oop, %oop* @"m_*maru-module*"
	%r103 = load %oop, %oop* @"m_symbol/*error-output*"
	%r104 = call %oop @m_global-variable-value.code(%oop %r102, %oop %r103)
	%r105 = getelementptr %"<string>", %"<string>"* @m_ostr2447, i32 0, i32 1
	%r106 = bitcast %word* %r105 to %oop
	%r107 = inttoptr %word 0 to %oop
	%r108 = call %oop @m_do-print.code(%oop %r104, %oop %r106, %oop %r107)
	store %oop %r108, %oop* %t2
	br label %L3
L2:
	%r109 = inttoptr %word 0 to %oop
	store %oop %r109, %oop* %t2
	br label %L3
L3:
	%r110 = load %oop, %oop* %t2
	%r111 = inttoptr %word 0 to %oop
	%r112 = call %oop @"m_platform/flush-streams.code"()
	%r113 = inttoptr %word 0 to %oop
	%r114 = inttoptr %word 60 to %oop
	%r115 = inttoptr %word 0 to %oop
	%r116 = call %oop asm sideeffect "
	movq	$1, %rax
	movq	$2, %rdi
	syscall", 
	"=A,r,r,~{rdi},~{rax},~{r11},~{rcx},~{memory}"
	(%oop %r114, %oop %r115)
	ret %oop %r116
}
@m_cstr2448 = private unnamed_addr constant [7 x i8] c"_start\00"
@m_ostr2449 = private unnamed_addr constant %"<string>" { %"<header>" { %word 3, %word 13}, %word 13, %oop bitcast ([7 x i8]* @m_cstr2448 to %oop) }
@m__start = private unnamed_addr constant %"<target-function>" { %"<header>" { %word 3, %word 13}, %oop bitcast (%oop ()* @m__start.code to %oop), %"<string>"* @m_ostr2449 }
@_start = external alias %oop (), %oop ()* @m__start.code
