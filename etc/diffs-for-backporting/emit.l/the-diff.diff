--- minimal	2020-06-11 09:29:50.398370169 +0200
+++ latest	2020-06-11 09:28:32.422001816 +0200
@@ -1,15 +1,9 @@
-#!./eval
+(require "osdefs.k")
 
-(define __MACH__  '( ))	; non-nil for Darwin / Mac OS X   (deal with the convoluted ABI)
-(define __UNIX__  '( ))	; nin-nil for Unix, MinGW, etc.   (external symbols have underscore prefix)
-(define __LINUX__ '(X))	; non-nil for Linux, Cygwin, etc. (external symbols have no underscore prefix)
-
-;;;----------------------------------------------------------------
-
-(define __PREFIX__ (if __LINUX__ "" "_"))
+(define __PREFIX__ (if (or (defined? '__MACH__) (defined? '__WIN32__)) "_" ""))
 
 (define-function string->type-name (str) (string->symbol (concat-string "<" (concat-string str ">"))))
 (define-function symbol->type-name (sym) (string->type-name (symbol->string sym)))
 
 (define-function align (alignment value)	(& (- alignment) (+ (- alignment 1) value )))
 
(define-function variable (name value env index)
  (let ((self (new <variable>)))
    (set (<variable>-name  self) name)
    (set (<variable>-value self) value)
    (set (<variable>-env   self) env)
    (set (<variable>-index self) index)
    self))

(define-function environment (parent)
  (let ((self (new <env>)))
    (set (<env>-parent   self) parent)
    (set (<env>-level    self) (if parent (<env>-level  parent) 0))
    (set (<env>-offset   self) 0)
    (set (<env>-bindings self) (array))
    self))

 ;;; EXTERN
 
 (define-structure <extern> (name stub))
@@ -108,9 +120,13 @@
       
 ;;; IA32 -- OPERANDS
 
-(let ((counter 0))
+(define *label-source* ())
+(define *label-counter* 0)
+
   (define-function temp-label-name ()
-    (concat-string "_L_" (long->string (set counter (+ counter 1))))))
+  (let ((label (concat-string "_L_" (long->string (set *label-counter* (+ *label-counter* 1))))))
+    (and *label-source* (set label (concat-strings label"_"(car *label-source*)"_"(long->string (cdr *label-source*)))))
+    label))
 
 (define-operand LABEL (name) 	__PREFIX__(mangle-label (<LABEL>-name self)))
 (define-operand GI32 (name)	(<GI32>-name self))
@@ -450,9 +465,18 @@
   (cons  if	 	gen-if)
   (cons  while		gen-while)
   (cons  set	 	gen-set)
   (cons 'return		gen-return)
   (cons 'address-of	gen-address-of)))
 
 (define-method gen <pair> (comp)
+  (and (= 0 (optimised))
+       (let ((source (oop-at self 2)))
+	 (and (!= *label-source* source)
+	      (car source)
+	      (let ()
+		(set *label-source* source)
+		;;(gen comp DEFLABEL (LABEL (temp-label-name)))		;; DEBUG ONLY
+		;;(gen comp COMMENT (list (car source) " " (cdr source)))
+		(gen comp DEFLABEL (LABEL (temp-label-name)))))))
   (let* ((head  (car self))
 	 (arity (- (list-length self) 1))
	 (op    (and (variable? head) (cadr (assq (<variable>-value head) (array-at operators arity))))))
     (if op
 	((array-at generators arity) op (cdr self) comp)
       (if (set op (cdr (assq head forms)))
 	  (op self comp)
	(let* ((tmps (map-with gen-tmp (cdr self) comp))
 	      (args (map-with gen-arg (cdr self) comp))
 	      (func (gen (car self) comp))
 	      (narg (list-length args)))
