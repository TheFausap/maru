--- minimal.edited	2020-06-10 21:48:28.476932444 +0200
+++ latest	2020-06-10 20:52:05.778511341 +0200
@@ -9,6 +9,9 @@
 (define-form safe prog ())
 ;;(define-form safe prog `(let () ,@prog))
 
+(define-form long-at args `(oop-at ,@args))
+(define-form set-long-at args `(set-oop-at ,@args))
+
 (define-structure <header> (size flags next type))
 (define-structure <buffer> (contents size position))
 
@@ -42,6 +47,10 @@
 (define abort	(extern	'abort))
 (define exit	(extern	'exit))
 (define malloc	(extern	'malloc))
 
+(define arguments		0)
+(define input			0)
+(define stdin			0)
+(define stdout			0)
 (define stderr			0)
 
(define gc_quantum		65504)
(define gc_frequency		65536)
 
 (define gc_objects_live		0)
 (define gc_bytes_used		0)
@@ -80,6 +93,8 @@
 (define trace_stack	0)
 (define trace_depth	0)
 
+(define die) ;; forward
+
 (define-function fatal (reason)		(printf "\neval.k: %s\n" reason) (exit 1))
 
 (define-function fatal1 (fmt arg)	(printf "\neval.k: ") (printf fmt arg)		(printf "\n") (die))
@@ -245,18 +260,24 @@
 (define fscanf	(extern 'fscanf))
 
 (define EOF	-1)
+(define DONE	-4)	;; cannot be the same as a tagged immediate
 
 (define <undefined>	 0)
-(define <long>		 1)
-(define <string>	 2)
-(define <symbol>	 3)
-(define <pair>		 4)
-(define <_array>	 5)
-(define <array>		 6)
-(define <expr>		 7)
-(define <form>		 8)
-(define <fixed>		 9)
-(define <subr>		10)
+(define <data>		 1)
+(define <long>		 2)
+(define <double>	 3)
+(define <string>	 4)
+(define <symbol>	 5)
+(define <pair>		 6)
+(define <_array>	 7)
+(define <array>		 8)
+(define <expr>		 9)
+(define <form>		10)
+(define <fixed>		11)
+(define <subr>		12)
+(define <variable>	13)
+(define <env>		14)
+(define <context>	15)
 
 (define symbols			0)
 (define globals			0)
@@ -266,6 +287,7 @@
 (define applicators		0)
 (define s_t			0)
 (define s_dot			0)
+(define s_define		0)
 (define s_set			0)
 (define s_lambda		0)
 (define s_let			0)
@@ -281,8 +303,10 @@
 (define f_quote			0)
 (define f_lambda		0)
 (define f_let			0)
+(define f_define		0)
 
 (define opt_verbose		0)
+(define opt_optimised		0)
 
 (define-function new-bits (type size)
   (let ((obj (gc_malloc_atomic size)))
@@ -324,21 +350,24 @@
     obj))
 
 (define-function new-<array> (size)
-  (let ((arr (new-oops <array> (size-of-structure <array>))))
+  (let ((cap (if size size 1))
+	(arr (new-oops <array> (size-of-structure <array>))))
     (gc-protect (arr)
-      (set (<array>-_array arr) (new-oops <_array> (* 4 size)))
+      (set (<array>-size   arr) (new-<long> size))
+      (set (<array>-_array arr) (new-oops <_array> (* 4 cap)))
       arr)))
 
-(define-function new-<expr> (defn env)
+(define-function new-<expr> (defn ctx)
   (let ((obj (new-oops <expr> (size-of-structure <expr>))))
     (set (<expr>-defn obj) defn)
-    (set (<expr>-env  obj) env )
+    (set (<expr>-ctx  obj) ctx)
     obj))
 
-(define-function new-<form> (fn)
+(define-function new-<form> (fn sym)
   (let ((obj (new-oops <form> (size-of-structure <form>))))
     (gc-protect (obj)
       (set (<form>-function obj) fn)
+      (set (<form>-symbol   obj) sym)
       obj)))
 
 (define-function new-<fixed> (fn)
@@ -354,18 +383,28 @@
       (set (<subr>-_name obj) _name)
       obj)))
 
+(define-function new-<variable> (name value env index)
+  (let ((obj (new-oops <variable> (size-of-structure <variable>))))
+    (gc-protect (obj)
+      (set (<variable>-name  obj) name)
+      (set (<variable>-value obj) value)
+      (set (<variable>-env   obj) env)
+      (set (<variable>-index obj) (new-<long> index))
+      obj)))
+
 (define-form get-type (arg)
   `(let ((__arg__ ,arg))
-     (safe (and __arg__ (or (& (<header>-flags-used) (<header>-flags (- __arg__ (size-of-structure <header>)))) (fatal1 "attempt to access dead object %p type %d" __arg__))))
+     (safe (and __arg__ (not (& __arg__ 1))
+		(or (& (<header>-flags-used) (<header>-flags (- __arg__ (size-of-structure <header>))))
+		    (fatal1 "attempt to access dead object %p type %d" __arg__))))
      (if __arg__
-	 (oop-at __arg__ -1)
+	 (if (& __arg__ 1)
+	     <long>
+	   (oop-at __arg__ -1))
        <undefined>)))
 
 (define-form is (type arg)
-  `(let ((__arg__ ,arg))
-     (and __arg__
-	  (not (& 1 __arg__))
-	  (= ,type (oop-at __arg__ -1)))))
+  `(= ,type (get-type ,arg)))
 
 (define-function type_check_fail (exp act)
   (fatal2 "illegal type: expected %d got %d" exp act))
@@ -380,12 +419,53 @@
      (safe (let ((t (get-type __obj__))) (or (= ,type t) (type_check_fail ,type t))))
      (set (,(concat-symbol (concat-symbol type '-) field) __obj__) ,value)))
 
 (define-form get_long (obj)	`(oop-at ,obj 0))
 
 (define-form get_head (obj)	`(oop-at ,obj 0))
 (define-form get_tail (obj)	`(oop-at ,obj 1))
 (define-form set_tail (obj val)	`(set-oop-at ,obj 1 ,val))
 
+(define-function new-<env> (parent level offset)
+  (let ((obj (new-oops <env> (size-of-structure <env>))))
+    (gc-protect (obj)
+      (set (<env>-parent   obj) parent)
+      (set (<env>-level    obj) (new-<long> (if parent (+ (get_long (get <env> level parent)) level) 0)))
+      (set (<env>-offset   obj) (new-<long> offset))
+      (set (<env>-bindings obj) (new-<array> 0))
+      obj)))
+
+(define-function new-base-<context> (home caller env)
+  (let ((obj (new-oops <context> (size-of-structure <context>))))
+    (gc-protect (obj)
+      (set (<context>-home     obj) home)
+      (set (<context>-env      obj) env)
+      (set (<context>-bindings obj) (new-<array> 0))
+      obj)))
+
+;; (define-function new-<context> (home caller env)
+;;   (let ((obj (new-oops <env> (size-of-structure <context>))))
+;;     (gc-protect (obj)
+;;       (set (<context>-home     obj) home)
+;;       (set (<context>-env      obj) env)
+;;       (set (<context>-bindings obj) (new-<array> 0))
+;;       obj)))
+
+(define-function new-<context> (home caller env)
+  (let ((obj ()))
+    (if (and caller (set obj (get <context> callee caller)))
+	(let ()
+	  (put <context> home obj home)
+	  (put <context> env  obj env))
+      (set obj (new-base-<context> home caller env))
+      (and caller (put <context> callee caller obj)))
+    obj))
+
+(define-function is_global (var)
+  (let ((env (get <variable> env var)))
+    (and env (= 0 (get_long (get <env> level env))))))
+
+;;; ----------------------------------------------------------------
+
 (define-function k_car (list)	(and (is <pair> list) (get_head list)))
 (define-function k_cdr (list)	(and (is <pair> list) (get_tail list)))
 
@@ -406,31 +488,43 @@
     tail))
 
 (define-function k_array_length (obj)
-  (and (is <array> obj)
-       (let ((_arr (get <array> _array obj)))
-	 (let ((sz (/ (gc_size _arr) 4)))
-	   sz))))
+  (get_long (get <array> size obj)))
 
 (define-function k_array_at (obj idx)
   (and (is <array> obj)
        (let* ((elts (get <array> _array obj))
-	      (size (/ (gc_size elts) 4)))
+	      (size (get_long (get <array> size obj))))
 	 (and (<= 0 idx) (< idx size)
 	      (oop-at elts idx)))))
 
 (define-function k_set_array_at (obj idx val)
   (and (is <array> obj)
        (let* ((elts (get <array> _array obj))
-	      (size (/ (gc_size elts) 4)))
+	      (size (get_long (get <array> size obj))))
 	 (and (<= 0 idx)
 	      (let ()
 		(or (< idx size)
-		    (let* ((nsize (max (+ idx 1) (* size 2)))
-			   (oops  (new-oops <_array> (* 4 nsize))))
+		    (let ((cap (/ (gc_size elts) 4)))
+		      (while (<= cap idx) (set cap (* cap 2)))
+		      (gc-protect (obj)
+		        (let ((oops (new-oops <_array> (* 4 cap))))
 		      (memcpy oops elts (* size 4))
-		      (set elts (put <array> _array obj oops))))
+			  (set elts (put <array> _array obj oops)))
+			(put <array> size obj (new-<long> (+ 1 idx))))))
 		(set-oop-at elts idx val))))))
 
+(define-function k_array_append (array val)
+  (k_set_array_at array (k_array_length array) val))
+
+(define-function k_array_insert (obj index value)
+  (let ((len (k_array_length obj)))
+    (k_array_append obj value)
+    (and (< index len)
+	 (let* ((elts (get <array> _array obj))
+		(oops (+ elts (* 4 index))))
+	   (memmove (+ 4 oops) oops (* 4 (- len index))))))
+  (k_set_array_at obj index value))
+
 (define-function do_print (obj storing)
   (debug (printf "{%p}" obj))
   (let ((type (get-type obj)))
@@ -478,16 +572,28 @@
       ((= type <form>)		(let ()
 				  (printf "Form(")
 				  (do_print (get <form> function obj) storing)
+				  (printf ",")
+				  (do_print (get <form> symbol   obj) storing)
 				  (printf ")")))
       ((= type <fixed>)		(let ()
 				  (printf "Fixed(")
 				  (do_print (get <fixed> function obj) storing)
 				  (printf ")")))
       ((= type <subr>)		(printf "Subr(%s)" (get <subr> _name obj)))
+      ((= type <variable>)	(let ((env (get <variable> env obj)))
+ 				  (do_print (get <variable> name obj))
+				  (and env
+				       (printf ".%d+%d"
+					       (get_long (get <env> level (get <variable> env obj)))
+					       (get_long (get <variable> index obj))))))
+      ((= type <env>)		(let ()
+ 				  (printf "Env<%d>" (get_long (get <env> level obj)))))
+      ((= type <context>)	(let ()
+				  (printf "Context<>")))
       (else			(printf "<type:%d>" type)))))
 
 (define-function k_print (obj) (do_print obj 0))	(define-function k_println (obj) (do_print obj 0) (printf "\n"))
 (define-function k_dump  (obj) (do_print obj 1))	(define-function k_dumpln  (obj) (do_print obj 1) (printf "\n"))
  
 ;;; ----------------------------------------------------------------
 
@@ -524,7 +630,8 @@
 					 ( = ?_  c)			; _
 				    (and (<= ?a  c) (<= c ?z))		; a b c d e f g h i j k l m n o p q r s t u v w x y z
 					 ( = ?|  c)			; |
-					 ( = ?~  c)))			; ~
+					 ( = ?~  c)			; ~
+					 (<= 128 c)))			; utf-8 multibyte character
 
 (define-function new_buffer ()
   (let ((buf (malloc (size-of-structure <buffer>))))
@@ -564,17 +671,19 @@
   (set (<buffer>-position buf) (- (<buffer>-position buf) 1))
   (<buffer>-contents buf))
 
-(define-function intern (cstr)
-  (let ((list symbols))
-    (while (is <pair> list)
-      (let ((sym (get_head list)))
-	(or (strcmp cstr (get <symbol> _bits sym))
-	    (return sym)))
-      (set list (get_tail list))))
-  (let ((sym (new-<symbol> cstr)))
-    (gc-protect (sym)
-      (set symbols (new-<pair> sym symbols))
-      sym)))
+(define-function intern (string)
+  (let ((lo 0)
+	(hi (- (k_array_length symbols) 1)))
+    (while (<= lo hi)
+      (let* ((m (/ (+ lo hi) 2))
+	     (s (k_array_at symbols m))
+	     (c (strcmp string (get <symbol> _bits s))))
+	(cond
+	  ((< c 0)	(set hi (- m 1)))
+	  ((> c 0)	(set lo (+ m 1)))
+	  (else		(return s)))))
+    (gc-let* ((s (new-<symbol> string)))
+      (k_array_insert symbols lo s))))
 
 (define-function is_octal (c)		(and (<= ?0 c) (<= c ?7)))
 
@@ -719,3 +830,3 @@
 				    (!= EOF c))))
 	((= ?\" c)	(return (read_string c stream)))
 	((< c 0)	(return DONE))
	(else		(fatal1 "illegal character: %c" c))))))
 
-(define-function k_define (name value env)
-  (let ((ass (new-<pair> name value)))
-    (gc-protect (ass)
-      (let ((ent (new-<pair> ass (get_tail env))))
-	(set_tail env ent)
-	ass))))
-
-(define-function k_assq (key list)
-  (while (is <pair> list)
-    (let ((head (get_head list)))
-      (and (is <pair> head)
-	   (= key (get_head head))
-	   (return head)))
-    (set list (get_tail list))))
-
-(define-function k_apply (fun arguments env)
-  (if (is <subr> fun)
-      ((get <subr> _imp fun) arguments env)
-    (let ((ap (k_array_at (get_tail applicators) (get-type fun))))
+;;; ----------------------------------------------------------------
+
+(define-function k_env_find_variable (env name)
+  (while env
+    (let* ((bindings (get <env> bindings env))
+	   (index    (k_array_length bindings))
+	   (vars     (get <array> _array bindings)))
+      (while (<= 0 (set index (- index 1)))
+	(let ((var (oop-at vars index)))
+	  (and (= name (get <variable> name var))
+	       (return var)))))
+    (set env (get <env> parent env))))
+
+(define-function k_env_lookup (env name)
+  (let ((var (k_env_find_variable env name)))
+    (if var
+	(get <variable> value var)
+      (fatal1 "undefined variable: %s" (get <symbol> _bits name)))))
+
+(define-function k_env_define (env name value)
+  (let* ((bindings (get <env> bindings env))
+	 (index (k_array_length bindings)))
+    (while (>= (set index (- index 1)) 0)
+      (let ((var (k_array_at bindings index)))
+	(and (= name (get <variable> name var))
+	     (let ()
+	       (put <variable> value var value)
+	       (return var)))))
+    (let* ((off (get_long (get <env> offset env)))
+	   (var (new-<variable> name value env off)))
+      (gc-protect (var)
+	(put <env> offset env (new-<long> (+ off 1)))
+	(k_array_append bindings var)))))
+
+;;; ----------------------------------------------------------------
+
+(define k_eval) ;; forward
+
+(define-function k_apply_expr (fun arguments ctx)
+  (and (< 2 opt_verbose) (let () (printf "  A  ")  (k_dump fun)  (printf " ")  (k_dump arguments) (printf " ")  (k_dumpln ctx) (fflush stdout)))
+  (let* ((args    arguments)
+	 (defn    (get <expr> defn fun))
+	 (env     (k_car defn))
+	 (formals (k_cadr defn)))
+    (set ctx (new-<context> (get <expr> ctx fun) ctx env))
+    (let ((locals (get <context> bindings ctx)))
+      (gc-protect (defn ctx)
+        (while (is <pair> formals)
+	  (or (is <pair> args) (k_error "too few arguments: ("fun" "arguments")"))
+	  (k_set_array_at locals (get_long (get <variable> index (get_head formals))) (get_head args))
+	  (set formals (get_tail formals))
+	  (set args    (get_tail args)))
+	(and (is <variable> formals)
+	     (let ()
+	       (k_set_array_at locals (get_long (get <variable> index formals)) args)
+	       (set args ())))
+	(and args (k_error "too many arguments: ("fun" "arguments")"))
+	(set defn (get_tail (get_tail defn)))
+	(while (is <pair> defn)
+	  (set args (k_eval (get_head defn) ctx))
+	  (set defn (get_tail defn)))
+	(and (get <env> stable env) (put <context> callee ctx ()))
+	args))))
+
+(define counter 0)
+
+(define-function k_apply (fun arguments ctx)
+  ;;(printf "  %02d " trace_depth) (k_dumpln fun)
+  (let ((type (get-type fun)))
+    (cond
+      ((= type <expr>)		(k_apply_expr fun arguments ctx))
+      ((= type <fixed>)		(k_apply (get <fixed> function fun) arguments ctx))
+      ((= type <subr>)		((get <subr> _imp fun) arguments ctx))
+      (else			(let ((ap (k_array_at (get <variable> value applicators) (get-type fun))))
       (if ap
 	  (let ((args arguments))
 	    (gc-protect (args)
 			(set args (new-<pair> fun args))
-			(k_apply ap args env)))
-	(k_error "cannot apply: " fun)))))
+					  (k_apply ap args ctx)))
+				    (k_error "cannot apply: " fun)))))))
 
 ;;; ----------------------------------------------------------------
 
@@ -756,13 +922,17 @@
       (let ((head (k_expand (get_head exp) env)))
 	(gc_push_root (address-of head))
 	(if (is <symbol> head)
-	    (let ((val (k_cdr (k_assq head env))))
-	      (if (is <form> val)
-		  (let ()
-		    (set head (k_apply (get <form> function val) (get_tail exp) env))
-		    (set head (k_expand head env))
+	    (let ((val (k_env_find_variable env head)))
+	      (and (is <variable> val) (set val (get <variable> value val)))
+	      (and (is <form> val)
+		   (let ((fn (get <form> function val)))
+		     (and fn
+			  (let ((args (new-<pair> env (get_tail exp))))
+			    (gc-protect (args)
+					(set head (k_apply fn args ()))
+					(set head (k_expand head env)))
 		    (gc_pop_root (address-of head))
-		    (return head)))))
+			    (return head)))))))
 	(let ((tail (get_tail exp)))
 	  (gc_push_root (address-of tail))
 	  (or (= head s_quote) (set tail (exlist tail env)))
@@ -777,11 +947,22 @@
 	  (set exp (new-<pair> head tail))
 	  (gc_pop_root (address-of tail))
 	  (gc_pop_root (address-of head))))
-    (let ((fn (k_array_at (get_tail expanders) (get-type exp))))
+    (if (is <symbol> exp)
+	(let ((val (k_env_find_variable env exp)))
+	  (and (is <variable> val) (set val (get <variable> value val)))
+	  (and (is <form> val)
+	       (let ((fn (get <form> symbol val)))
       (and fn
 	   (let ((args (new-<pair> exp ())))
 	     (gc-protect (args)
-	       (set exp (k_apply fn args env)))))))
+				    (set args (new-<pair> env args))
+				    (set args (k_apply fn args ()))
+				    (set exp (k_expand args env))))))))
+      (let ((fn (k_array_at (get <variable> value expanders) (get-type exp))))
+	(and fn
+	     (let ((args (new-<pair> exp ())))
+	       (gc-protect (args)
+			   (set exp (k_apply fn args ()))))))))
   exp)
 
 (set exlist (lambda (list env)
@@ -791,7 +972,7 @@
 	  (let ((tail (exlist (get_tail list) env)))
 	    (gc-protect (tail)
 	      (new-<pair> head tail)))))
-      list)))
+    (k_expand list env))))
 
 (define enlist) ;; forward
 
@@ -800,56 +981,56 @@
       (let ((head (k_encode (get_head exp) env))
 	    (tail (get_tail exp)))
 	(gc-protect (head tail)
-	  (if (is <symbol> head)
-	      (let ((val (k_cdr (k_assq head env))))
-		(and (or (is <fixed> val) (is <subr> val))
-		     (set head val))))
 	  (cond
-	    ((= head f_let)		(let ((args (k_cadr exp))
-					      (tmp  ()))
-					  (gc-protect (env tmp)
+	    ((= head f_let)		(let ((args (k_cadr exp)))
+					  (gc-protect (env)
+					    (set env (new-<env> env 0 (get_long (get <env> offset env))))
 					    (while (is <pair> args)
 					      (let ((var (get_head args)))
 						(and (is <pair> var) (set var (get_head var)))
-						(set tmp (new-<pair> var ()))
-						(set env (new-<pair> tmp env))
+						(k_env_define env var ())
 						(set args (get_tail args))))
-					    (set tail (enlist tail env)))))
-	    ((= head f_lambda)		(let ((args (k_cadr exp))
-					      (tmp  ()))
-					  (gc-protect (env tmp)
+					    (set tail (enlist tail env))
+					    (set tail (new-<pair> env tail)))))
+	    ((= head f_lambda)		(let ((args (k_cadr exp)))
+					  (gc-protect (env)
+					    (set env (new-<env> env 1 0))
 					    (while (is <pair> args)
-					      (set tmp (new-<pair> (get_head args) ()))
-					      (set env (new-<pair> tmp env))
+					      (k_env_define env (get_head args) ())
 					      (set args (get_tail args)))
-					    (and args
-						 (let ()
-						   (set tmp (new-<pair> args ()))
-						   (set env (new-<pair> tmp env))))
-					    (set tail (enlist tail env)))))
+					    (and args (k_env_define env args ()))
+					    (set tail (enlist tail env))
+					    (set tail (new-<pair> env tail)))))
+	    ((= head f_define)		(let ((var (k_env_define (get <variable> value globals) (k_car tail) ())))
+					  (set tail (enlist (k_cdr tail) env))
+					  (set tail (new-<pair> var tail))))
+	    ((= head f_set)		(let ((var (k_env_find_variable env (k_car tail))))
+					  (or var (fatal1 "set: undefined variable: %s" (get <symbol> _bits (k_car tail))))
+					  (set tail (enlist (k_cdr tail) env))
+					  (set tail (new-<pair> var tail))))
 	    ((!= head f_quote)		(set tail (enlist tail env))))
 	  (set exp (new-<pair> head tail))))
-    (let ((fn (k_array_at (get_tail encoders) (get-type exp))))
+    (if (is <symbol> exp)
+	(let ((val (k_env_find_variable env exp)))
+	  (or val (fatal1 "undefined variable: %s" (get <symbol> _bits exp)))
+	  (set exp val)
+	  (if (is_global exp)
+	      (let ((v (get <variable> value exp)))
+		(and (or (is <form> v) (is <fixed> v))
+		     (set exp v)))
+	    (let ((venv (get <variable> env exp)))
+	      (or (= (get_long (get <env> level venv)) (get_long (get <env> level env)))
+		  (put <env> stable venv s_t)))))
+      (let ((fn (k_array_at (get <variable> value encoders) (get-type exp))))
       (and fn (let () (printf "APPLY GOT ENCODER\n... " (k_println fn) 1)))
       (and fn
 	   (let ((args (new-<pair> env ())))
 	     (gc-protect (args)
 	       (set args (new-<pair> exp args))
 	       (printf "APPLY ENCODER\n... ") (k_print fn) (printf " ") (k_print args) (printf " ") (k_println env)
-	       (set exp (k_apply fn args env)))))))
+			   (set exp (k_apply fn args ()))))))))
   exp)
 
-(define-function k_eval (exp env)
-  (let ((ev (k_array_at (get_tail evaluators) (get-type exp))))
-    (and ev
-	 (let ((args (new-<pair> exp ())))
-	   (gc-protect (args)
-	     (k_set_array_at trace_stack trace_depth exp)
-	     (set trace_depth (+ trace_depth 1))
-	     (set exp (k_apply ev args env))
-	     (set trace_depth (- trace_depth 1)))))
-    exp))
-
 (set enlist (lambda (list env)
   (if (is <pair> list)
       (let ((head (k_encode (get_head list) env)))
@@ -857,46 +1038,112 @@
 	  (let ((tail (enlist (get_tail list) env)))
 	    (gc-protect (tail)
 	      (new-<pair> head tail)))))
-      list)))
+    (k_encode list env))))
+
+(define-function evlist (obj ctx)
+  (if (is <pair> obj)
+      (let ((head (k_eval (get_head obj) ctx)))
+	(gc-protect (head)
+	  (let ((tail (evlist (get_tail obj) ctx)))
+	    (gc-protect (tail)
+	      (new-<pair> head tail)))))
+    obj))
+
+(set k_eval (lambda (exp ctx)
+  (and (< 2 opt_verbose) (let () (printf "  E  ")  (k_dump exp)  (printf " ") (k_dumpln ctx)  (fflush stdout)))
+  (let ((type (get-type exp)))
+    (cond
+      ((= type <undefined>)	exp)
+      ((= type <long>)		exp)
+      ((= type <string>)	exp)
+      ((= type <variable>)	(if (is_global exp)
+				    (get <variable> value exp)
+				  (let ((delta (- (get_long (get <env> level (get <context>  env ctx)))
+						  (get_long (get <env> level (get <variable> env exp))))))
+				    (while (< 0 delta)
+				      (set ctx (get <context> home ctx))
+				      (set delta (- delta 1)))
+				    (k_array_at (get <context> bindings ctx) (get_long (get <variable> index exp))))))
+      ((= type <pair>)		(let ((head (k_eval (get_head exp) ctx)))
+				  (gc-protect (head)
+				    (k_set_array_at trace_stack trace_depth exp)
+				    (set trace_depth (+ trace_depth 1))
+				    (set head (if (is <fixed> head)
+						  (k_apply (get <fixed> function head) (get_tail exp) ctx)
+						(let ((args (evlist (get_tail exp) ctx)))
+						  (gc-protect (args)
+						    (k_apply head args ctx)))))
+				    (set trace_depth (- trace_depth 1))
+				    head)))
+      ((= type <symbol>)	(k_error "symbol in eval?")) ;; xxx
+      (else			(let ((ev (k_array_at (get <variable> value evaluators) (get-type exp))))
+				  (and ev
+				       (let ((args (new-<pair> exp ())))
+					 (gc-protect (args)
+					   (k_set_array_at trace_stack trace_depth exp)
+					   (set trace_depth (+ trace_depth 1))
+					   (set exp (k_apply ev args ctx))
+					   (set trace_depth (- trace_depth 1)))))
+				  exp))))))
 
 (define-function subr_define (args ctx)
-  (let ((sym (k_car args)))
-    (or (is <symbol> sym) (k_error "non-symbol identifier in define: "sym))
-    (let ((val (k_eval (k_cadr args) env)))
-      (gc-protect (val)
-        (k_define sym val globals)
-	val))))
+  (let ((var (k_car args)))
+    (or (is <variable> var)
+	(let ()
+	  (printf "\nerror: non-variable in define: ")
+	  (k_dumpln var)
+	  (fatal "aborting")))
+    (let ((val (k_eval (k_cadr args) ctx)))
+      (put <variable> value var val))))
+
+(define-function subr_definedP (args ctx)
+  (let ((s (k_car args))
+	(e (or (k_cadr args) (get <variable> value globals))))
+    (k_env_find_variable e s)))
 
 (define-function subr_lambda (args ctx)
   (new-<expr> args ctx))
 
 (define-function subr_let (args ctx)
-  (let ((env2     env)
-	(tmp      ())
-	(bindings (k_car args))
-	(body     (k_cdr args)))
-    (gc-protect (env2 tmp)
+  (let* ((tmp      ())
+	 (bindings (k_cadr args))
+	 (locals   (get <context> bindings ctx))
+	 (body     (k_cddr args)))
+    (gc-protect (tmp)
       (while (is <pair> bindings)
 	(let ((binding (get_head bindings)))
 	  (if (is <pair> binding)
-	      (let ((sym  (get_head binding))
+	      (let ((var  (get_head binding))
 		    (prog (get_tail binding)))
+		(set tmp ())
 		(while (is <pair> prog)
-		  (set tmp (k_eval (get_head prog) env))
+		  (set tmp (k_eval (get_head prog) ctx))
 		  (set prog (get_tail prog)))
-		(set tmp  (new-<pair> sym tmp))
-		(set env2 (new-<pair> tmp env2)))))
+		(k_set_array_at locals (get_long (get <variable> index var)) tmp))))
 	(set bindings (get_tail bindings)))
       (set tmp ())
       (while (is <pair> body)
-	(set tmp (k_eval (get_head body) env2))
-	(set body (get_tail body)))
-     tmp)))
+	(set tmp (k_eval (get_head body) ctx))
+	(set body (get_tail body))))
+    tmp))
 
 (define-function subr_set (args ctx)
-  (let ((var (k_assq (k_car args) ctx)))
-    (or (is <pair> var) (k_error "undefined variable: (set "args")"))
-    (set_tail var (k_eval (k_cadr args) env))))
+  ;;(printf "SET ") (k_print args) (printf " IN ") (k_println ctx)
+  (let ((var (k_car args)))
+    (or (is <variable> var)
+	(let ()
+	  (printf "\ncannot set undefined variable: ")
+	  (k_dumpln var)
+	  (fatal "aborting")))
+    (let ((val (k_eval (k_cadr args) ctx)))
+      (if (is_global var)
+	  (put <variable> value var val)
+	(let ((delta (- (get_long (get <env> level (get <context>  env ctx)))
+			(get_long (get <env> level (get <variable> env var))))))
+	  (while (< 0 delta)
+	    (set ctx (get <context> home ctx))
+	    (set delta (- delta 1)))
+	  (k_set_array_at (get <context> bindings ctx) (get_long (get <variable> index var)) val))))))
 
 (define-function subr_while (args ctx)
   (let ((tst  (k_car args))
@@ -1022,6 +1270,63 @@
   (let ((status (and (is_long (k_car args)) (get_long (k_car args)))))
     (exit status)))
 
+(define-function subr_open (args ctx)
+  (let ((arg (k_car args)))
+    (or (is <string> arg) (fatal "non-string argument in open"))
+    (let ((stream (fopen (get <string> _bits arg) "rb")))
+      (and stream (new-<long> stream)))))
+
+(define-function subr_close (args ctx)
+  (let ((arg (k_car args)))
+    (or (is <long> arg) (fatal "non-integer argument in close"))
+    (fclose (get_long arg))
+    arg))
+
+(define-function subr_getc (args ctx)
+  (let ((arg (k_car args)))
+    (or arg (set arg (get <variable> value input)))
+    (or (is_long arg) (fatal "non-integer stream id in getc"))
+    (let ((c (getc (get_long arg))))
+      (and (>= c 0)
+	   (new-<long> c)))))
+
+(define-function subr_putc (args ctx)
+  (let ((arg (k_car args))
+	(obj (k_cadr args)))
+    (or arg (set arg (get <variable> value input)))
+    (or (is_long arg) (fatal "non-integer stream id in putc"))
+    (or (is_long obj) (fatal "non-integer character in putc"))
+    (new-<long> (putc (get_long arg)))))
+
+(define-function subr_format (args ctx)
+  (arity2 "format" args)
+  (let ((ofmt (k_car args))
+	(oarg (k_cadr args)))
+    (or (is <string> ofmt) (fatal "non-string format"))
+    (let ((fmt (get <string> _bits ofmt))
+	  (typ (get-type oarg))
+	  (arg ()))
+      (cond
+	((= typ <undefined>))
+	((= typ <long>)		(set arg (get_long oarg)))
+	((= typ <string>)	(set arg (get <string> _bits oarg)))
+	((= typ <symbol>)	(set arg (get <symbol> _bits oarg)))
+	(else			(set arg oarg)))
+      (let ((size 100) (p) (np))
+	(or (set p (malloc size) (return ())))
+	(while 1
+	  (let ((n (snprintf p size fmt arg)))
+	    (and (<= 0 n) (< n size)
+		 (let ((ans (new-<string> p)))
+		   (free p)
+		   (return ans)))
+	    (set size (* size 2)))
+	  (or (set np (realloc p size))
+	      (let ()
+		(free p)
+		(return "out of memory")))
+	  (set p np))))))
+
 (define-function subr_dump (args ctx)
   (while (is <pair> args)
     (k_dump (get_head args))
@@ -1042,29 +1347,32 @@
     (set args (get_tail args))))
 
 (define-function subr_apply (args ctx)
-  (k_apply (k_car args) (k_cadr args) (or (k_caddr args) env)))
-
-(define-function evlist (obj env)
-  (if (is <pair> obj)
-      (let ((head (k_eval (get_head obj) env)))
-	(gc-protect (head)
-	  (let ((tail (evlist (get_tail obj) env)))
-	    (gc-protect (tail)
-	      (new-<pair> head tail)))))
-    obj))
+  (k_apply (k_car args) (k_cadr args) ctx))
 
 (define-function subr_eval (args ctx)
   (let ((x (k_car args))
-	(e (or (k_cadr args) env)))
-    (gc-protect (x)
+	(e (or (k_cadr args) (new-<env> (get <variable> value globals) 1 0))))
+    (gc-protect (x e)
+      (let ((c (new-base-<context> () () e)))
+        (gc-protect (c)
       (set x (k_expand x e))
       (set x (k_encode x e))
-      (k_eval x e))))
+	  (k_eval x c))))))
+
+(define-function subr_encode (args ctx)
+  (k_encode (k_car args)
+	    (or (k_cadr args)
+		(get <context> env ctx))))
+
+(define-function subr_expand (args ctx)
+  (k_expand (k_car args)
+	    (or (k_cadr args)
+		(get <context> env ctx))))
 
 (define-function subr_cons	(args ctx)	(new-<pair> (k_car args) (k_cadr args)))
 (define-function subr_string	(args ctx)	(_new-<string> (and (is_long (k_car args)) (get_long (get_head args)))))
 (define-function subr_array	(args ctx)	(new-<array> (and (is_long (k_car args)) (get_long (get_head args)))))
-(define-function subr_form	(args ctx)	(new-<form> (k_car args)))
+(define-function subr_form	(args ctx)	(new-<form> (k_car args) (k_cadr args)))
 
 (define-function subr_allocate (args ctx)
   (arity2 "allocate" args)
@@ -1081,11 +1389,22 @@
 (define-function subr_car	(args ctx)	(k_car (k_car args)))
 (define-function subr_cdr	(args ctx)	(k_cdr (k_car args)))
 
+(define-function subr_set_car (args ctx)
+  (let ((arg (k_car args)))
+    (and (is <pair> arg)
+	 (put <pair> head arg (k_cadr args)))))
+
+(define-function subr_set_cdr (args ctx)
+  (let ((arg (k_car args)))
+    (and (is <pair> arg)
+	 (put <pair> tail arg (k_cadr args)))))
+
 (define-function subr_oop_at (args ctx)
   (arity2 "oop-at" args)
   (let ((obj (get_head args))
 	(arg (get_head (get_tail args))))
-    (and (is_long arg)
+    (and obj (not (is_long obj))
+	 (is_long arg)
 	 (oop-at obj (get_long arg)))))
 
 (define-function subr_set_oop_at (args ctx)
@@ -1093,8 +1412,10 @@
   (let ((obj (get_head args))
 	(arg (get_head (get_tail args)))
 	(val (get_head (get_tail (get_tail args)))))
-    (and (is_long arg)
-	 (set-oop-at obj (get_long arg) val))))
+    (and obj (not (is_long obj))
+	 (is_long arg)
+	 (set-oop-at obj (get_long arg) val))
+    val))
 
 (define-function subr_array_length (args ctx)
   (new-<long> (k_array_length (k_car args))))
@@ -1165,43 +1486,87 @@
 	       (free buf)
 	       result))))))
 
-(define-function subr_current_environment (args ctx)
-  env)
+(define-function subr_verbose (args ctx)
+  (let ((arg (k_car args)))
+    (if (is_long arg)
+	(set opt_verbose (get_long arg))
+      (new-<long> opt_verbose))))
+
+(define-function subr_optimised (args ctx)
+  (let ((arg (k_car args)))
+    (if (is_long arg)
+	(set opt_optimised (get_long arg))
+      (new-<long> opt_optimised))))
+
+(define-function subr_read (args ctx)
+  (if (= () args)
+      (let ((obj (k_read stdin)))
+	(and (= DONE obj) (set obj ()))
+	obj)
+    (let ((arg (k_car args)))
+      (or (is <string> arg) (fatal1 "read: non-String argument: " arg))
+      (let* ((path   (get <string> _bits arg))
+	     (stream (fopen path "r")))
+	(if stream
+	    (let* ((head (new-<pair> () ()))
+		   (tail head)
+		   (obj  ()))
+	      (gc-protect (head obj)
+	        (while (!= DONE (set obj (k_read stream)))
+		  (set tail (set_tail tail (new-<pair> obj ())))))
+	      (fclose stream)
+	      (get_tail head))
+	  ())))))
 
 ;;; ----------------------------------------------------------------
 
 (define-function repl_stream (stream)
-  (let ((res 0))
-    (fscanf stream "#!%*[^\012\015]")
-    (while (!= DONE (set res (k_read stream)))
+  (put <variable> value input (new-<long> stream))
+  (let ((res ()))
       (gc-protect (res)
+      (or (= stdin stream) (fscanf stream "#!%*[^\012\015]"))
+      (while (let ()
+  	     (and (= stdin stream) (fprintf stdout ".") (fflush stdout))
+  	     (!= DONE (set res (k_read stream))))
+        (let ((env (new-<env> (get <variable> value globals) 1 0)))
+          (gc-protect (env)
 	(and (> opt_verbose 0) (printf ";;; ") (k_dumpln res))
-	(set res (k_expand res globals))	(and (> opt_verbose 2) (printf "expd--> ") (k_dumpln res))
-	(set res (k_encode res globals))	(and (> opt_verbose 2) (printf "encd--> ") (k_dumpln res))
-	(set res (k_eval   res globals))	(and (> opt_verbose 1) (printf "eval--> ") (k_dumpln res))
-	))))
+  	  (set res (k_expand res env))					(and (> opt_verbose 2) (printf "expd--> ") (k_dumpln res))
+  	  (set res (k_encode res env))					(and (> opt_verbose 2) (printf "encd--> ") (k_dumpln res))
+  	  (let ((ctx (new-base-<context> () () env)))
+  	    (gc-protect (ctx)
+  	      (set res (k_eval res ctx))				(and (> opt_verbose 1) (printf "eval--> ") (k_dumpln res))
+  	      (if (= stdin stream)
+  		  (k_dumpln res)
+  		(and (> opt_verbose 0) (printf ";;; => ") (k_dumpln res))))))))
+      (and (= stdin stream)
+	   (printf "\nmorituri te salutant\n")))
+    res))
 
 (define-function define-subr (name imp)
   (let ((tmp (new-<subr> imp name)))
     (gc-protect (tmp)
-      (k_define (intern name) tmp globals))))
+      (k_env_define (get <variable> value globals) (intern name) tmp))))
 
 (define-function define-fsubr (name imp)
   (let ((tmp (new-<subr> imp name)))
     (gc-protect (tmp)
       (set tmp (new-<fixed> tmp))
-      (k_define (intern name) tmp globals))))
+      (k_env_define (get <variable> value globals) (intern name) tmp))))
 
 (define-function main (argc argv)
+  (set stdin  (fdopen 0 "r"))
+  (set stdout (fdopen 1 "a"))
   (set stderr (fdopen 2 "a"))
 
   (gc_initialise)		(gcdebug (set gc_frequency 1))
 
-  (gc_push_root (address-of symbols))
+  (set symbols (new-<array> 0))						(gc_push_root (address-of symbols))
 
   (set s_t			(intern "t"))
   (set s_dot			(intern "."))
   (set s_set			(intern "set"))
+  (set s_define			(intern "define"))
   (set s_lambda			(intern "lambda"))
   (set s_let			(intern "let"))
   (set s_quote			(intern "quote"))
@@ -1210,24 +1575,15 @@
   (set s_unquote_splicing	(intern "unquote-splicing"))
 
   (gc_push_root (address-of globals    ))
-  (gc_push_root (address-of expanders  ))
-  (gc_push_root (address-of encoders   ))
-  (gc_push_root (address-of evaluators ))
-  (gc_push_root (address-of applicators))
 
-  (let ((tmp (new-<pair> (intern "*globals*") globals)))
-    (gc-protect (tmp)
-      (set globals (new-<pair> tmp globals))
-      (set_tail tmp globals)
-      (set tmp (new-<array> 0))  (set expanders   (k_define (intern "*expanders*"  ) tmp globals))
-      (set tmp (new-<array> 0))  (set encoders    (k_define (intern "*encoders*"   ) tmp globals))
-      (set tmp (new-<array> 0))  (set evaluators  (k_define (intern "*evaluators*" ) tmp globals))
-      (set tmp (new-<array> 0))  (set applicators (k_define (intern "*applicators*") tmp globals))
-      (k_set_array_at (get_tail evaluators)  <symbol> (new-<subr> subr_eval_symbol "eval-<symbol>"))
-      (k_set_array_at (get_tail evaluators)  <pair>   (new-<subr> subr_eval_pair   "eval-<pair>"  ))
-      (k_set_array_at (get_tail applicators) <fixed>  (new-<subr> subr_apply_fixed "apply-<fixed>"))
-      (k_set_array_at (get_tail applicators) <expr>   (new-<subr> subr_apply_expr  "apply-<expr>" ))
-      ))
+  (set globals (new-<env> () 0 0))
+  (set globals (k_env_define globals (intern "*globals*") globals))
+
+  (set input	   (k_env_define (get <variable> value globals) (intern "*input*"      ) ()))	(gc_push_root (address-of input      ))
+  (set expanders   (k_env_define (get <variable> value globals) (intern "*expanders*"  ) ()))	(gc_push_root (address-of expanders  ))
+  (set encoders    (k_env_define (get <variable> value globals) (intern "*encoders*"   ) ()))	(gc_push_root (address-of encoders   ))
+  (set evaluators  (k_env_define (get <variable> value globals) (intern "*evaluators*" ) ()))	(gc_push_root (address-of evaluators ))
+  (set applicators (k_env_define (get <variable> value globals) (intern "*applicators*") ()))	(gc_push_root (address-of applicators))
 
   (define-fsubr "define"		subr_define)
   (define-fsubr "lambda"		subr_lambda)
@@ -1238,6 +1594,7 @@
   (define-fsubr "or"			subr_or)
   (define-fsubr "and"			subr_and)
   (define-fsubr "quote"			subr_quote)
+  (define-subr  "defined?"		subr_definedP)
   (define-subr  "not"			subr_not)
   (define-subr  "&"			subr_bitand)
   (define-subr  "|"			subr_bitor)
@@ -1252,18 +1609,26 @@
   (define-subr  "<="			subr_le)
   (define-subr  "!="			subr_ne)
   (define-subr  "="			subr_eq)
+  (define-subr  ">="			subr_ge)
   (define-subr  ">"			subr_gt)
   (define-subr  "abort"			subr_abort)
   (define-subr  "exit"			subr_exit)
+  (define-subr  "format"		subr_format)
   (define-subr  "dump"			subr_dump)
   (define-subr  "print"			subr_print)
   (define-subr  "warn"			subr_warn)
   (define-subr  "apply"			subr_apply)
   (define-subr  "eval"			subr_eval)
+  (define-subr  "encode"		subr_encode)
+  (define-subr  "expand"		subr_expand)
   (define-subr  "cons"			subr_cons)
   (define-subr  "string"		subr_string)
   (define-subr  "array"			subr_array)
   (define-subr  "form"			subr_form)
+  (define-subr  "open"			subr_open)
+  (define-subr  "close"			subr_close)
+  (define-subr  "getc"			subr_getc)
+  (define-subr  "putc"			subr_putc)
   (define-subr  "allocate"		subr_allocate)
   (define-subr  "type-of"		subr_type_of)
   (define-subr  "string?"		subr_stringP)
@@ -1272,6 +1637,8 @@
   (define-subr  "array?"		subr_arrayP)
   (define-subr  "car"			subr_car)
   (define-subr  "cdr"			subr_cdr)
+  (define-subr  "set-car"		subr_set_car)
+  (define-subr  "set-cdr"		subr_set_cdr)
   (define-subr  "oop-at"		subr_oop_at)
   (define-subr  "set-oop-at"		subr_set_oop_at)
   (define-subr  "array-length"		subr_array_length)
@@ -1283,24 +1650,42 @@
   (define-subr  "string->symbol"	subr_string_symbol)
   (define-subr  "symbol->string"	subr_symbol_string)
   (define-subr  "long->string"		subr_long_string)
-  (define-subr  "current-environment"	subr_current_environment)
+  (define-subr  "verbose"		subr_verbose)
+  (define-subr  "optimised"		subr_optimised)
+  (define-subr  "read"			subr_read)
 
-  (set f_set	(k_cdr (k_assq s_set	globals)))		(gc_push_root (address-of f_set   ))
-  (set f_quote	(k_cdr (k_assq s_quote	globals)))		(gc_push_root (address-of f_quote ))
-  (set f_lambda	(k_cdr (k_assq s_lambda	globals)))		(gc_push_root (address-of f_lambda))
-  (set f_let	(k_cdr (k_assq s_let	globals)))		(gc_push_root (address-of f_let	  ))
+  (let ((tmp ()))
+    (gc-protect (tmp)
+      (while (< 0 (set argc (- argc 1)))
+	(set tmp (new-<pair> () tmp))
+	(set_head tmp (new-<string> (oop-at argv argc))))
+      (set arguments (k_env_define (get <variable> value globals) (intern "*arguments*") tmp))))
+
+  (set f_set	(k_env_lookup (get <variable> value globals) s_set   ))		(gc_push_root (address-of f_set   ))
+  (set f_quote	(k_env_lookup (get <variable> value globals) s_quote ))		(gc_push_root (address-of f_quote ))
+  (set f_lambda	(k_env_lookup (get <variable> value globals) s_lambda))		(gc_push_root (address-of f_lambda))
+  (set f_let	(k_env_lookup (get <variable> value globals) s_let   ))		(gc_push_root (address-of f_let	  ))
+  (set f_define	(k_env_lookup (get <variable> value globals) s_define))		(gc_push_root (address-of f_define))
 
   (set trace_stack (new-<array> 32))				(gc_push_root (address-of trace_stack))
 
-  (while (set argc (- argc 1))
-    (set argv (+ argv 4))
-    (let ((arg (oop-at argv 0)))
+  (k_env_define (get <variable> value globals) (intern "*backtrace*") ())
+
+  (while (is <pair> (get <variable> value arguments))
+    (let* ((argl (get <variable> value arguments))
+	   (args (get_head argl))
+	   (arg  (get <string> _bits args)))
+      (gc-protect (args)
+        (put <variable> value arguments (get_tail argl))
       (cond
 	((not (strcmp arg "-v"))	(set opt_verbose (+ 1 opt_verbose)))
-	(else				(let ((stream (fopen (oop-at argv 0) "r")))
-					  (or stream (fatal1 "no such file: %s" (oop-at argv 0)))
+	  ((not (strcmp arg "-O"))	(set opt_optimised (+ 1 opt_optimised)))
+	  ((not (strcmp arg "-"))		(repl_stream stdin))
+	  (else				(let ((stream (fopen arg "r")))
+					  (or stream (fatal1 "no such file: %s" arg))
 					  (repl_stream stream)
-					  (fclose stream))))))
+					  (fclose stream)))))))
+
   (and (> opt_verbose 0)
        (let ()
 	 (gc_gcollect)
